<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>217 存在重复元素</title>
      <link href="/2021/05/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98/217%20%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
      <url>/2021/05/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98/217%20%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>给定一个数组，判断是否存在重复元素。</p><p>如果任意一值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[1, 2, 3, 1]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[1, 2, 3, 4]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[1, 1, 1, 3, 3, 4, 3, 2, 4, 2]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><h2 id="排序法"><a href="#排序法" class="headerlink" title="排序法"></a>排序法</h2><p>排序法是先将数组进行排序，然后对比两个相邻的元素是否相等。如果相等则存在重复元素。</p><p>实现步骤：</p><ol><li><p>对数组进行排序；</p></li><li><p>对比相邻的两个数字是否一致；</p></li></ol><p>算法效率：</p><ol><li><p>时间复杂度 $O(logn)$<br> 最快的排序算法时间复杂度是 $O(logn)$</p></li><li><p>空间复杂度 $O(1)$；<br> 因为没有使用到额外的空间。</p></li></ol><h2 id="SET-法"><a href="#SET-法" class="headerlink" title="SET 法"></a>SET 法</h2><p>利用 Set 不存在重复元素的特性，将数组放入 Set 中，然后对比元素数量。如果少了表示 Set 去掉了重复元素。</p><p>实现步骤：</p><ol><li><p>将数组放入 Set 中；</p></li><li><p>对比数组长度和 Set 大小；</p></li></ol><p>算法效率：</p><ol><li><p>时间复杂度 $O(n)$<br> 主要是将元素放入 Set 中。</p></li><li><p>空间复杂度 $O(n)$<br> 需要额外空间来存储 Set 集合。</p></li></ol><p>字典法<br>字典法相当于把元素作为 Map 的 Key，出现次数作为 Map 的 value。</p><p>例如数组：[1, 2, 3, 1] 转成 Map 后 {1:2, 2:1, 3:1, 4:1}。</p><p>算法效率：</p><ol><li><p>时间复杂度 O(n)<br> 主要是将元素放入 Map 中。</p></li><li><p>空间复杂度 O(n)<br> 需要额外空间来存储 Map 集合。</p></li></ol><p>字典法对比上面的其它方法，唯一的优势是能统计数字出现的次数。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
          <category> 力扣刷题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>234 回文链表</title>
      <link href="/2021/05/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98/234%20%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/"/>
      <url>/2021/05/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98/234%20%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>请判断一个单链表是否回文链表。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：1 -&gt; 2</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：1 -&gt; 2 -&gt; 2 -&gt; 1</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：1 -&gt; 2 -&gt; 3 -&gt; 2 -&gt; 1</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p>进阶：你能否用 $O(n)$ 时间复杂度和 $O(1)$ 空间复杂度解决此题？</p><h2 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h2><p>两个指针分别从头部和尾部开始遍历数组，一一对比。</p><p><img src="001.png" alt=""></p><p>实现步骤：</p><ol><li><p>将链表转为数组；</p></li><li><p>将两个指针分别遍历数组的开头和结尾，往中间走；</p></li><li><p>如果指针指向的数据不相等，则返回 false；</p></li><li><p>返回true；</p></li></ol><p>算法效率：</p><ol><li>需要用到数组，空间复杂度是 $O(n)$；</li></ol><p>Java 代码：</p><h2 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h2><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h2 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h2><p>快慢指针的思想是，有一 快一慢两指针，慢指针没走一步，快指针走两步，这样子的当慢指针到达链表中间位置时候，快指针就到了尾部。这时候把快指针指向链表头部，慢指针和后面的链表反转。然后进行对比。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
          <category> 力扣刷题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见问题</title>
      <link href="/2021/05/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringBoot/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2021/05/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringBoot/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="附：常见问题"><a href="#附：常见问题" class="headerlink" title="附：常见问题"></a>附：常见问题</h1><p><strong>ClassPathResource Caused by: java.io.FileNotFoundException: class path resource</strong><br>场景：使用 ClassPathResource 加载项目文件提示文件不存在。<br>原因：文件只在源代码中，不在 target 文件夹中，而 ClassPathResource 是读编译后的文件，不是源代码文件。<br>解决：rebuild。</p><p><strong>Handling error: NestedServletException, Handler dispatch failed; nested exception is java.lang.StackOverflowError</strong><br>场景：加上 <code>UserDetailsService</code> 的实现类就报此错误。<br>原因：在 <code>@Configuration</code> 里面定义了一个 <code>UserDetailsService</code> 的 bean，要去掉。<br>解决：去掉自定义的 bean，就可以使用 <code>UserDetailsService</code> 的实现类了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   User user = <span class="keyword">new</span> User(<span class="string">"admin"</span>, <span class="string">"123456"</span>, Arrays.asList(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"Role1_Admin"</span>),</span><br><span class="line">                                                         <span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"Role2_Admin"</span>)));</span><br><span class="line">   InMemoryUserDetailsManager inMemoryUserDetailsManager = <span class="keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">   inMemoryUserDetailsManager.createUser(user);</span><br><span class="line">   <span class="keyword">return</span> inMemoryUserDetailsManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>等宽字体测试</title>
      <link href="/2021/05/13/%E5%85%B6%E5%AE%83/%E7%AD%89%E5%AE%BD%E5%AD%97%E4%BD%93%E6%B5%8B%E8%AF%95/"/>
      <url>/2021/05/13/%E5%85%B6%E5%AE%83/%E7%AD%89%E5%AE%BD%E5%AD%97%E4%BD%93%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>12345678901<br>aaaaaaaaaa1<br>，，，，，1<br>我你阿汤哥1</p><p><img src="test.svg" alt=""></p><p><img src="test2.svg" alt=""></p><div class="table-container"><table><thead><tr><th style="text-align:left">Font</th><th>Idea</th><th>VS Code</th><th>Chrome</th><th>iPhone</th></tr></thead><tbody><tr><td style="text-align:left">Iosevka</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td style="text-align:left">Source Han Sans HW</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td style="text-align:left">Input Mono Compressed</td><td>Yes</td><td>No</td><td>No</td><td>No</td></tr></tbody></table></div><script type="math/tex; mode=display">\begin{bmatrix} 1 & 2 & 3 \\ 4 & 5 & 6 \end{bmatrix}</script><script type="math/tex; mode=display">\begin{pmatrix} \color{red}{A_{x}} \\ \color{green}{A_{y}} \\ \color{blue}{A_{z}} \end{pmatrix} \times \begin{pmatrix} \color{red}{B_{x}} \\ \color{green}{B_{y}} \\ \color{blue}{B_{z}}  \end{pmatrix} = \begin{pmatrix} \color{green}{A_{y}} \cdot \color{blue}{B_{z}} - \color{blue}{A_{z}} \cdot \color{green}{B_{y}} \\ \color{blue}{A_{z}} \cdot \color{red}{B_{x}} - \color{red}{A_{x}} \cdot \color{blue}{B_{z}} \\ \color{red}{A_{x}} \cdot \color{green}{B_{y}} - \color{green}{A_{y}} \cdot \color{red}{B_{x}} \end{pmatrix}</script>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 基础</title>
      <link href="/2021/05/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/Java%20%E5%9F%BA%E7%A1%80/Java%20%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/05/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/Java%20%E5%9F%BA%E7%A1%80/Java%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h4 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h4><ol><li>一旦变量被 <code>transient</code> 修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。</li><li><code>transient</code> 关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被 <code>transient</code> 关键字修饰的。变量如果是用户自定义类变量，则该类需要实现 <code>Serializable</code> 接口。</li><li>被 <code>transient</code> 关键字修饰的变量不再能被序列化，一个静态变量不管是否被 <code>transient</code> 修饰，均不能被序列化。</li></ol><pre class="mermaid">graph LR   Product   Agent   SysSerialClass   SysClassOne   SysClassTwo   SysClassThree   SysSerial   User   SysUseConfig   Redeem   RedeemCode   RedeemRecord   Agent --> SysClassOne   Agent --> SysClassTwo   Agent --> SysClassThree   SysClassOne --> SysClassTwo   SysClassOne --> SysClassThree   SysClassTwo --> SysClassThree   Agent --> SysSerial   SysSerialClass --> SysSerial   SysClassTwo --> SysSerial   Product --> UseRecord   Agent --> UseRecord   Agent --> Redeem   Redeem --> RedeemCode   RedeemCode --> RedeemRecord   SysClassOne --> Product   SysClassTwo --> Product   SysClassThree --> Product   Agent --> User   SysSerial --> User   SysSerialClass --> User   User -.-> SysUseConfig   User -.-> UseRecord   User -.-> RedeemCode   User -.-> RedeemRecord</pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 网络</title>
      <link href="/2021/05/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/Java%20%E5%9F%BA%E7%A1%80/Java%20%E7%BD%91%E7%BB%9C/"/>
      <url>/2021/05/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/Java%20%E5%9F%BA%E7%A1%80/Java%20%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 集合</title>
      <link href="/2021/05/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/Java%20%E5%9F%BA%E7%A1%80/Java%20%E9%9B%86%E5%90%88/"/>
      <url>/2021/05/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/Java%20%E5%9F%BA%E7%A1%80/Java%20%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>集合框架 <code>Collection</code> 存放于 <code>java.util</code> 包中，是一个用来存放对象的容器。</p><p>集合框架被设计成要满足以下几个目标：</p><ol><li>该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。</li><li>该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。</li><li>对一个集合的扩展和适应必须是简单的。</li></ol><p>为此，整个集合框架就围绕一组标准接口而设计。你可以直接使用这些接口的标准实现，诸如： <code>LinkedList</code>, <code>HashSet</code>, 和 <code>TreeSet</code> 等,除此之外你也可以通过这些接口实现自己的集合。</p><p>Java 集合框架主要包括两种类型的容器，一种是集合（<code>Collection</code>），存储一个元素集合，另一种是图（<code>Map</code>），存储键/值对映射。<code>Collection</code> 接口又有 3 种子类型，<code>List</code>、<code>Set</code> 和 <code>Queue</code>，再下面是一些抽象类，最后是具体实现类，常用的有 <code>ArrayList</code>、<code>LinkedList</code>、<code>HashSet</code>、<code>LinkedHashSet</code>、<code>HashMap</code>、<code>LinkedHashMap</code> 等等。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/2243690-9cd9c896e0d512ed.gif" alt=""></p><p>集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含如下内容：</p><ol><li>接口：是代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象。</li><li>实现：是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：<code>ArrayList</code>、<code>LinkedList</code>、<code>HashSet</code>、<code>HashMap</code>。</li><li>算法：是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。</li></ol><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/java-coll.png" alt=""></p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><code>HashMap.get()</code> 实现过程：</p><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><ol><li>实现原理</li><li>get 实现</li><li>如何保证线程安全</li><li>链表，红黑树</li><li>Hash 冲突</li></ol><h4 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h4><ol><li>HashMap vs ConcurrentHashMap</li><li>如何解决并发问题</li><li>如何保证线程安全、并发度大小</li><li>jdk1.8变化</li><li>为什么底层需要红黑树</li></ol><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ol><li>ArrayList 原理</li><li>LinkedList 原理</li><li>ArrayList vs LinkedList</li></ol><h4 id="Set-和-List-的区别"><a href="#Set-和-List-的区别" class="headerlink" title="Set 和 List 的区别"></a>Set 和 List 的区别</h4><ol><li><p><code>Set</code> 接口实例存储的是无序的，不重复的数据。<code>List</code> 接口实例存储的是有序的，可以重复的元素。</p></li><li><p><code>Set</code> 检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 （实现类有 <code>HashSet</code>、<code>TreeSet</code>）。</p></li><li><p><code>List</code> 和数组类似，可以动态增长，根据实际存储的数据的长度自动增长 <code>List</code> 的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变（实现类有 <code>ArrayList</code>、<code>LinkedList</code>、<code>Vector</code>）。</p></li></ol><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><p><code>java.util.Collections</code>，是不属于 Java 的集合框架的，它是集合类的一个工具类/帮助类。此类不能被实例化，服务于 Java 的 <code>Collection</code> 框架。</p><p>它包含有关集合操作的静态多态方法，实现对各种集合的搜索、排序、线程安全等操作。</p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>使用 <code>sort</code> 方法可以根据元素的自然顺序对指定列表按升序进行排序。列表中的所有元素都必须实现 <code>Comparable</code> 接口， 而且必须是使用指定比较器可相互比较的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = Arrays.asList(<span class="string">"one two three four five"</span>.split(<span class="string">" "</span>));</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [five, four, one, three, two]   //（按字母排序）</span></span><br></pre></td></tr></table></figure><p><code>Collections.sort()</code> 使用原理：</p><ol><li>底层调用了 <code>Arrays.sort()</code>。</li></ol><p><code>Timsort</code> 算法的过程包括：？？？？？？？？？？？</p><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Collections.sort 调用了 Arrays.sort</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">   Object[] a = <span class="keyword">this</span>.toArray();</span><br><span class="line">   Arrays.sort(a, (Comparator) c);</span><br><span class="line">   ListIterator&lt;E&gt; i = <span class="keyword">this</span>.listIterator();</span><br><span class="line">   <span class="keyword">for</span> (Object e : a) &#123;</span><br><span class="line">      i.next();</span><br><span class="line">      i.set((E) e);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Arrays.sort</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a, Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">      sort(a);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (LegacyMergeSort.userRequested)</span><br><span class="line">            legacyMergeSort(a, c);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">            TimSort.sort(a, <span class="number">0</span>, a.length, c, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="混排"><a href="#混排" class="headerlink" title="混排"></a>混排</h4><p>使用 <code>shuffle</code> 可以混排集合中元素的顺序。这个算法对实现一个碰运气的游戏非常有用，在生成测试案例时也十分有用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = Arrays.asList(<span class="string">"one two three four five"</span>.split(<span class="string">" "</span>));</span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [three, five, four, one, two]</span></span><br></pre></td></tr></table></figure><h4 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h4><p>使用 <code>reverse</code> 可以反转集合中元素的顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = Arrays.asList(<span class="string">"one two three four five"</span>.split(<span class="string">" "</span>));</span><br><span class="line">        Collections.reverse(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [five, four, three, two, one]</span></span><br></pre></td></tr></table></figure><h4 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h4><p><code>swap(List list, int m, int n)</code> 用于交换集合中指定元素索引 <code>m</code>, <code>n</code> 的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = Arrays.asList(<span class="string">"one two three four five"</span>.split(<span class="string">" "</span>));</span><br><span class="line">        Collections.swap(list, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [one, two, four, three, five]</span></span><br></pre></td></tr></table></figure><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p>使用 <code>fill</code> 可以替换集合中的所有元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = Arrays.asList(<span class="string">"one two three four five"</span>.split(<span class="string">" "</span>));</span><br><span class="line">        Collections.fill(list, <span class="string">"zero"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [zero, zero, zero, zero, zero]</span></span><br></pre></td></tr></table></figure><h4 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h4><p>使用 <code>copy</code> 将源集合中的元素全部复制到目标中，并且覆盖相应索引的元素。目标集合至少与源集合一样长。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list1 = Arrays.asList(<span class="string">"one two three four five"</span>.split(<span class="string">" "</span>));</span><br><span class="line">        List list2 = Arrays.asList(<span class="string">"一 二 三 四 五"</span>.split(<span class="string">" "</span>));</span><br><span class="line">        Collections.copy(list1, list2);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [一, 二, 三, 四, 五]</span></span><br></pre></td></tr></table></figure><h4 id="位移"><a href="#位移" class="headerlink" title="位移"></a>位移</h4><p>使用 <code>rotate(List list, int m)</code> 根据指定的距离 <code>m</code> 循环移动列表中的元素。集合中的元素向后移 <code>m</code> 个位置，在后面被遮盖的元素循环到前面来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list1 = Arrays.asList(<span class="string">"one two three four five"</span>.split(<span class="string">" "</span>));</span><br><span class="line">        Collections.rotate(list1, <span class="number">2</span>);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [four, five, one, two, three]</span></span><br></pre></td></tr></table></figure><h4 id="最大最小"><a href="#最大最小" class="headerlink" title="最大最小"></a>最大最小</h4><p><code>min(Collection)</code>、<code>min(Collection, Comparator)</code>、<code>max(Collection)</code> 和 <code>max(Collection, Comparator)</code> 可以根据指定比较器产生的顺序，返回给定 <code>Collection</code> 的最小（大）元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">10</span>);</span><br><span class="line">        list.add(<span class="number">40</span>);</span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(<span class="number">50</span>);</span><br><span class="line">        System.out.println(Collections.min(list));</span><br><span class="line">        System.out.println(Collections.max(list));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10     </span></span><br><span class="line"><span class="comment">// 50</span></span><br></pre></td></tr></table></figure><h2 id="索引位置"><a href="#索引位置" class="headerlink" title="索引位置"></a>索引位置</h2><p><code>indexOfSublist(List list, List sublist)</code> 用于查找 <code>sublist</code> 在 <code>list</code> 中首次出现位置的索引。返回指定源列表中第一次出现指定目标列表的起始位置。</p><p><code>lastIndexOfSublist(List list, List sublist)</code> 用于返回指定列表中最后一次出现指定目标列表的起始位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = Arrays.asList(<span class="string">"one two three four five"</span>.split(<span class="string">" "</span>));</span><br><span class="line">        List subList=Arrays.asList(<span class="string">"three four five"</span>.split(<span class="string">" "</span>));</span><br><span class="line">        System.out.println(Collections.indexOfSubList(list,subList));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 安装</title>
      <link href="/2021/05/13/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Kubernetes%20%E6%89%8B%E5%86%8C/Kubernetes%20%E5%AE%89%E8%A3%85/"/>
      <url>/2021/05/13/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Kubernetes%20%E6%89%8B%E5%86%8C/Kubernetes%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="k8s-集群安装"><a href="#k8s-集群安装" class="headerlink" title="k8s 集群安装"></a>k8s 集群安装</h2><p>前置要求：</p><ol><li>一台或多台机器，操作系统 CentOS7.x-86_x64</li><li>硬件配置：2GB 或更多 RAM，2 个 CPU 或更多 CPU，硬盘 30GB 或更多</li><li>集群中所有机器之间网络互通</li><li>可以访问外网，需要拉取镜像</li><li>禁止 swap 分区</li></ol><p>部署步骤：</p><ol><li>在所有节点上安装 Docker 和 kubeadm</li><li>部署 Kubernetes Master</li><li>部署容器网络插件</li><li>部署 Kubernetes Node，将节点加入 Kubernetes 集群中</li><li>部署 Dashboard Web 页面，可视化查看 Kubernetes 资源</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210513161436.png" alt=""></p><h4 id="在所有节点上安装-Docker-和-kubeadm"><a href="#在所有节点上安装-Docker-和-kubeadm" class="headerlink" title="在所有节点上安装 Docker 和 kubeadm"></a>在所有节点上安装 Docker 和 kubeadm</h4><h4 id="部署-Kubernetes-Master"><a href="#部署-Kubernetes-Master" class="headerlink" title="部署 Kubernetes Master"></a>部署 Kubernetes Master</h4><p><strong>master 节点初始化</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ kubeadm init \</span><br><span class="line">                       --apiserver-advertise-address=172.27.243.201 \</span><br><span class="line">                       --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers \</span><br><span class="line">                       --kubernetes-version v1.17.3 \</span><br><span class="line">                       --service-cidr=10.96.0.0/16 \</span><br><span class="line">                       --pod-network-cidr=10.244.0.0/16</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 172.27.243.201:6443 --token b52699.ed59k5rb47b2epm3 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:02ac09f2b530e4b062585fb6b9d5031b65a8a9ed46e9e291e081bb41fb781315 </span><br><span class="line"></span><br><span class="line">zhangqinghua$</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><ol><li><code>apiserver-advertise-address</code><br>本机 IP 地址。</li><li><code>image-repository</code><br>由于默认拉取镜像地址 <code>k8s.gcr.io</code> 国内无法访问，这里指定阿里云镜像仓库地址。可以手动按照我们的 images.sh 先拉取镜像，地址变为 <code>registry.aliyuncs.com/google_containers</code> 也可以。</li><li><code>kubernetes-version</code><br>版本号，跟上面 一致。</li><li><code>service-cidr</code> 和 <code>pod-network-cidr</code><br>参考默认的即可。</li></ol><p>运行完成后，根据提示需要执行 3 个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"></span><br><span class="line">zhangqinghua$ sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">zhangqinghua$ chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p>如果 worker 节点需要加入主节点，只需要把 <code>kubeadm join</code> 命令在副节点执行一遍即可，一般情况下这个命令 2 个小时内有效。如果失效了可以再生成一个永久有效的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ kebeadm token create --ttl 0 --<span class="built_in">print</span>-join-command</span><br><span class="line">kubeadm join 172.27.243.201:6443 --token b52699.ed59k5rb47b2epm3 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:02ac09f2b530e4b062585fb6b9d5031b65a8a9ed46e9e291e081bb41fb781315</span><br></pre></td></tr></table></figure><p><strong>测试 kubectl（主节点）</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ kubectl get nodes</span><br><span class="line">NAME                      STATUS     ROLES    AGE   VERSION</span><br><span class="line">izwz9go2hn3kv068o5wpdpz   NotReady   master   13m   v1.17.3</span><br></pre></td></tr></table></figure></p><p>目前 master 状态为 <code>notready</code>，等待网络加入完成即可。</p><h4 id="部署容器网络插件"><a href="#部署容器网络插件" class="headerlink" title="部署容器网络插件"></a>部署容器网络插件</h4><h4 id="部署-Kubernetes-Node，将节点加入-Kubernetes-集群中"><a href="#部署-Kubernetes-Node，将节点加入-Kubernetes-集群中" class="headerlink" title="部署 Kubernetes Node，将节点加入 Kubernetes 集群中"></a>部署 Kubernetes Node，将节点加入 Kubernetes 集群中</h4><h4 id="部署-Dashboard-Web-页面，可视化查看-Kubernetes-资源"><a href="#部署-Dashboard-Web-页面，可视化查看-Kubernetes-资源" class="headerlink" title="部署 Dashboard Web 页面，可视化查看 Kubernetes 资源"></a>部署 Dashboard Web 页面，可视化查看 Kubernetes 资源</h4><h4 id="安装-KubeSphere"><a href="#安装-KubeSphere" class="headerlink" title="安装 KubeSphere"></a>安装 KubeSphere</h4><p><strong>1. 安装 Helm</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ wget https://get.helm.sh/helm-v2.16.3-linux-amd64.tar.gz</span><br><span class="line">...</span><br><span class="line">zhangqinghua$ ll</span><br><span class="line">-rw-r--r-- 1 root root 25097357 May 13 20:07 helm-v2.17.0-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">zhangqinghua$ tar -zxvf helm-v2.17.0-linux-amd64.tar.gz </span><br><span class="line">linux-amd64/</span><br><span class="line">linux-amd64/README.md</span><br><span class="line">linux-amd64/LICENSE</span><br><span class="line">linux-amd64/helm</span><br><span class="line">linux-amd64/tiller</span><br><span class="line"></span><br><span class="line">zhangqinghua$ helm version</span><br><span class="line">Client: &amp;version.Version&#123;SemVer:<span class="string">"v2.17.0"</span>, GitCommit:<span class="string">"a690bad98af45b015bd3da1a41f6218b1a451dbe"</span>, GitTreeState:<span class="string">"clean"</span>&#125;</span><br><span class="line">Error: could not find tiller</span><br></pre></td></tr></table></figure></p><p><strong>2. 安装 tiller</strong><br>先创建角色配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim helm-rbac.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">tiller</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">tiller</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span> </span><br><span class="line"><span class="attr">- kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">tiller</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure><p>然后执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ helm init --service-account=tiller --tiller-image=registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.16.3   --<span class="built_in">history</span>-max 300</span><br><span class="line">Creating /root/.helm </span><br><span class="line">Creating /root/.helm/repository </span><br><span class="line">Creating /root/.helm/repository/cache </span><br><span class="line">Creating /root/.helm/repository/<span class="built_in">local</span> </span><br><span class="line">Creating /root/.helm/plugins </span><br><span class="line">Creating /root/.helm/starters </span><br><span class="line">Creating /root/.helm/cache/archive </span><br><span class="line">Creating /root/.helm/repository/repositories.yaml </span><br><span class="line">Adding stable repo with URL: https://charts.helm.sh/stable </span><br><span class="line">Adding <span class="built_in">local</span> repo with URL: http://127.0.0.1:8879/charts </span><br><span class="line"><span class="variable">$HELM_HOME</span> has been configured at /root/.helm.</span><br><span class="line"></span><br><span class="line">Tiller (the Helm server-side component) has been installed into your Kubernetes Cluster.</span><br><span class="line"></span><br><span class="line">Please note: by default, Tiller is deployed with an insecure <span class="string">'allow unauthenticated users'</span> policy.</span><br><span class="line">To prevent this, run `helm init` with the --tiller-tls-verify flag.</span><br><span class="line">For more information on securing your installation see: https://v2.helm.sh/docs/securing_installation/</span><br><span class="line"></span><br><span class="line">zhangqinghua$ kubectl get pods --all-namespaces</span><br><span class="line">NAMESPACE     NAME                                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">default       tomcat6-5f7ccf4cb9-f8269                          1/1     Running   0          3h32m</span><br><span class="line">kube-system   coredns-7f9c544f75-2hsq2                          1/1     Running   0          3h57m</span><br><span class="line">kube-system   coredns-7f9c544f75-v8g8z                          1/1     Running   0          3h57m</span><br><span class="line">kube-system   etcd-izwz9go2hn3kv068o5wpdpz                      1/1     Running   0          3h57m</span><br><span class="line">kube-system   kube-apiserver-izwz9go2hn3kv068o5wpdpz            1/1     Running   0          3h57m</span><br><span class="line">kube-system   kube-controller-manager-izwz9go2hn3kv068o5wpdpz   1/1     Running   0          3h57m</span><br><span class="line">kube-system   kube-flannel-ds-5t4sk                             1/1     Running   0          3h18m</span><br><span class="line">kube-system   kube-flannel-ds-k9hnj                             1/1     Running   0          3h38m</span><br><span class="line">kube-system   kube-proxy-4q852                                  1/1     Running   0          3h18m</span><br><span class="line">kube-system   kube-proxy-6bvww                                  1/1     Running   0          3h57m</span><br><span class="line">kube-system   kube-scheduler-izwz9go2hn3kv068o5wpdpz            1/1     Running   0          3h57m</span><br><span class="line">kube-system   tiller-deploy-6ffcfbc8df-c8rbp                    1/1     Running   0          5m40s</span><br></pre></td></tr></table></figure><p>整个过程大概需要 10 分钟。</p><p><strong>3. 设置默认存储类型</strong></p><p>确认 Master 节点是否有 Taint，如下看到 Master 节点有 Taint。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ kubectl describe node izwz9go2hn3kv068o5wpdp | grep Taint</span><br><span class="line">Taints:             node-role.kubernetes.io/master:NoSchedule</span><br></pre></td></tr></table></figure><p>如果有 Taint，则需要去掉：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ kubectl taint nodes izwz9go2hn3kv068o5wpdpz node-role.kubernetes.io/master:NoSchedule-</span><br><span class="line">node/izwz9go2hn3kv068o5wpdpz untainted</span><br></pre></td></tr></table></figure><p>再来查询，可以看到 Taint 没有了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ kubectl describe node izwz9go2hn3kv068o5wpdp | grep Taint</span><br><span class="line">Taints:             &lt;none&gt;</span><br></pre></td></tr></table></figure><p><strong>4. 创建 OpenESB 命名空间</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ kubectl create ns openebs</span><br><span class="line">namespace/openebs created</span><br><span class="line"></span><br><span class="line">zhangqinghua$ kubectl get ns</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   6h18m</span><br><span class="line">kube-node-lease   Active   6h18m</span><br><span class="line">kube-public       Active   6h18m</span><br><span class="line">kube-system       Active   6h18m</span><br><span class="line">openebs           Active   20s</span><br></pre></td></tr></table></figure></p><p><strong>5. Helm 安装 OpenESB</strong><br>若集群已安装了 Helm，可通过 Helm 命令来安装 OpenEBS：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ helm install --namespace openebs --name openebs stable/openebs --version 1.5.0</span><br><span class="line">NAME:   openebs</span><br><span class="line">LAST DEPLOYED: Thu May 13 23:11:59 2021</span><br><span class="line">NAMESPACE: openebs</span><br><span class="line">STATUS: DEPLOYED</span><br><span class="line"></span><br><span class="line">RESOURCES:</span><br><span class="line">==&gt; v1/ClusterRole</span><br><span class="line">NAME     AGE</span><br><span class="line">openebs  0s</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">NOTES:</span><br><span class="line">The OpenEBS has been installed. Check its status by running:</span><br><span class="line">$ kubectl get pods -n openebs</span><br><span class="line"></span><br><span class="line">For dynamically creating OpenEBS Volumes, you can either create a new StorageClass or</span><br><span class="line">use one of the default storage classes provided by OpenEBS.</span><br><span class="line"></span><br><span class="line">Use `kubectl get sc` to see the list of installed OpenEBS StorageClasses. A sample</span><br><span class="line">PVC spec using `openebs-jiva-default` StorageClass is given below:</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: demo-vol-claim</span><br><span class="line">spec:</span><br><span class="line">  storageClassName: openebs-jiva-default</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 5G</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">For more information, please visit http://docs.openebs.io/.</span><br><span class="line"></span><br><span class="line">Please note that, OpenEBS uses iSCSI <span class="keyword">for</span> connecting applications with the</span><br><span class="line">OpenEBS Volumes and your nodes should have the iSCSI initiator installed.</span><br></pre></td></tr></table></figure></p><p>然后就一直等安装完成（一般 5 - 30 分钟左右）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ kubectl get pods --all-namespaces</span><br><span class="line">NAMESPACE     NAME                                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">default       tomcat6-5f7ccf4cb9-f8269                          1/1     Running   0          6h57m</span><br><span class="line">kube-system   coredns-7f9c544f75-2hsq2                          1/1     Running   0          7h22m</span><br><span class="line">kube-system   coredns-7f9c544f75-v8g8z                          1/1     Running   0          7h22m</span><br><span class="line">kube-system   etcd-izwz9go2hn3kv068o5wpdpz                      1/1     Running   0          7h22m</span><br><span class="line">kube-system   kube-apiserver-izwz9go2hn3kv068o5wpdpz            1/1     Running   0          7h22m</span><br><span class="line">kube-system   kube-controller-manager-izwz9go2hn3kv068o5wpdpz   1/1     Running   0          7h22m</span><br><span class="line">kube-system   kube-flannel-ds-5t4sk                             1/1     Running   0          6h43m</span><br><span class="line">kube-system   kube-flannel-ds-k9hnj                             1/1     Running   0          7h3m</span><br><span class="line">kube-system   kube-proxy-4q852                                  1/1     Running   0          6h43m</span><br><span class="line">kube-system   kube-proxy-6bvww                                  1/1     Running   0          7h22m</span><br><span class="line">kube-system   kube-scheduler-izwz9go2hn3kv068o5wpdpz            1/1     Running   0          7h22m</span><br><span class="line">kube-system   tiller-deploy-59665c97b6-85mwc                    1/1     Running   0          4m38s</span><br><span class="line">openebs       maya-apiserver-7f664b95bb-b2ptv                   1/1     Running   0          6m3s</span><br><span class="line">openebs       openebs-admission-server-85dcbc7979-g5dfl         1/1     Running   0          6m39s</span><br><span class="line">openebs       openebs-apiserver-bc55cd99b-mtgnb                 1/1     Running   0          31m</span><br><span class="line">openebs       openebs-localpv-provisioner-85ff89dd44-5ql55      1/1     Running   0          31m</span><br><span class="line">openebs       openebs-ndm-operator-87df44d9-sbfsw               1/1     Running   1          31m</span><br><span class="line">openebs       openebs-ndm-sjrjn                                 1/1     Running   0          31m</span><br><span class="line">openebs       openebs-ndm-sq9ds                                 1/1     Running   0          31m</span><br><span class="line">openebs       openebs-provisioner-7f86c6bb64-br2pb              1/1     Running   0          31m</span><br><span class="line">openebs       openebs-snapshot-operator-54b9c886bf-j5xp2        2/2     Running   0          31m</span><br></pre></td></tr></table></figure><p>查看效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ kubectl get sc -n openebs</span><br><span class="line">NAME                        PROVISIONER                                                RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">openebs-device              openebs.io/<span class="built_in">local</span>                                           Delete          WaitForFirstConsumer   <span class="literal">false</span>                  16m</span><br><span class="line">openebs-hostpath            openebs.io/<span class="built_in">local</span>                                           Delete          WaitForFirstConsumer   <span class="literal">false</span>                  16m</span><br><span class="line">openebs-jiva-default        openebs.io/provisioner-iscsi                               Delete          Immediate              <span class="literal">false</span>                  16m</span><br><span class="line">openebs-snapshot-promoter   volumesnapshot.external-storage.k8s.io/snapshot-promoter   Delete          Immediate              <span class="literal">false</span>                  16m</span><br></pre></td></tr></table></figure><p><strong>6. 将 openebs-hostpath 设置为 默认的 StorageClass</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ kubectl patch storageclass openebs-hostpath -p <span class="string">'&#123;"metadata": &#123;"annotations":&#123;"storageclass.kubernetes.io/is-default-class":"true"&#125;&#125;&#125;'</span></span><br><span class="line">storageclass.storage.k8s.io/openebs-hostpath patched</span><br></pre></td></tr></table></figure></p><p><strong>7. 恢复 Master 节点的 Taint</strong><br>至此，OpenEBS 的 LocalPV 已作为默认的存储类型创建成功。由于在文档开头手动去掉 了 master 节点的 Taint，我们可以在安装完 OpenEBS 后将 master 节点 Taint 加上，避 免业务相关的工作负载调度到 master 节点抢占 master 资源。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ kubectl taint nodes k8s-node1 node-role.kubernetes.io=master:NoSchedule</span><br></pre></td></tr></table></figure></p><h4 id="KubeSphere-最小化安装"><a href="#KubeSphere-最小化安装" class="headerlink" title="KubeSphere 最小化安装"></a>KubeSphere 最小化安装</h4><p>执行以下命令进行安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要手工下载，被墙</span></span><br><span class="line">zhangqinghua$  wget https://raw.githubusercontent.com/kubesphere/ks-installer/v2.1.1/kubesphere-minimal.yaml</span><br><span class="line"></span><br><span class="line">zhangqinghua$ kubectl apply -f kubesphere-minimal.yaml</span><br><span class="line">namespace/kubesphere-system created</span><br><span class="line">configmap/ks-installer created</span><br><span class="line">serviceaccount/ks-installer created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/ks-installer created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/ks-installer created</span><br><span class="line">deployment.apps/ks-installer created</span><br></pre></td></tr></table></figure></p><p>查看安装日志，请耐心等待安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ kubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l app=ks-install -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) -f</span><br><span class="line">2021-05-13T15:55:32Z INFO     : shell-operator v1.0.0-beta.5</span><br><span class="line">2021-05-13T15:55:32Z INFO     : HTTP SERVER Listening on 0.0.0.0:9115</span><br><span class="line">2021-05-13T15:55:32Z INFO     : Use temporary dir: /tmp/shell-operator</span><br><span class="line">2021-05-13T15:55:32Z INFO     : Initialize hooks manager ...</span><br><span class="line">2021-05-13T15:55:32Z INFO     : Search and load hooks ...</span><br><span class="line">2021-05-13T15:55:32Z INFO     : Load hook config from <span class="string">'/hooks/kubesphere/installRunner.py'</span></span><br><span class="line">2021-05-13T15:55:32Z INFO     : Initializing schedule manager ...</span><br><span class="line">2021-05-13T15:55:32Z INFO     : KUBE Init Kubernetes client</span><br><span class="line">2021-05-13T15:55:32Z INFO     : KUBE-INIT Kubernetes client is configured successfully</span><br><span class="line">2021-05-13T15:55:32Z INFO     : MAIN: run main loop</span><br><span class="line">2021-05-13T15:55:32Z INFO     : MAIN: add onStartup tasks</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Start installing monitoring</span><br><span class="line">**************************************************</span><br><span class="line">task monitoring status is successful</span><br><span class="line">total: 1     completed:1</span><br><span class="line">**************************************************</span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line"><span class="comment">###              Welcome to KubeSphere!           ###</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line"></span><br><span class="line">Console: http://172.27.243.200:30880</span><br><span class="line">Account: admin</span><br><span class="line">Password: P@88w0rd</span><br><span class="line"></span><br><span class="line">NOTES：</span><br><span class="line">  1. After logging into the console, please check the</span><br><span class="line">     monitoring status of service components <span class="keyword">in</span></span><br><span class="line">     the <span class="string">"Cluster Status"</span>. If the service is not</span><br><span class="line">     ready, please <span class="built_in">wait</span> patiently. You can start</span><br><span class="line">     to use when all components are ready.</span><br><span class="line">  2. Please modify the default password after login.</span><br><span class="line"></span><br><span class="line"><span class="comment">#####################################################</span></span><br></pre></td></tr></table></figure><p>等个 10 多分钟，再次查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ kubectl get pods --all-namespaces</span><br><span class="line">NAMESPACE                      NAME                                              READY   STATUS              RESTARTS   AGE</span><br><span class="line">default                        tomcat6-5f7ccf4cb9-f8269                          1/1     Running             0          7h42m</span><br><span class="line">kube-system                    coredns-7f9c544f75-2hsq2                          1/1     Running             0          8h</span><br><span class="line">kube-system                    coredns-7f9c544f75-v8g8z                          1/1     Running             0          8h</span><br><span class="line">kube-system                    etcd-izwz9go2hn3kv068o5wpdpz                      1/1     Running             0          8h</span><br><span class="line">kube-system                    kube-apiserver-izwz9go2hn3kv068o5wpdpz            1/1     Running             0          8h</span><br><span class="line">kube-system                    kube-controller-manager-izwz9go2hn3kv068o5wpdpz   1/1     Running             0          8h</span><br><span class="line">kube-system                    kube-flannel-ds-5t4sk                             1/1     Running             0          7h28m</span><br><span class="line">kube-system                    kube-flannel-ds-k9hnj                             1/1     Running             0          7h48m</span><br><span class="line">kube-system                    kube-proxy-4q852                                  1/1     Running             0          7h28m</span><br><span class="line">kube-system                    kube-proxy-6bvww                                  1/1     Running             0          8h</span><br><span class="line">kube-system                    kube-scheduler-izwz9go2hn3kv068o5wpdpz            1/1     Running             0          8h</span><br><span class="line">kube-system                    tiller-deploy-7b76b656b5-4sp9x                    1/1     Running             0          11m</span><br><span class="line">kubesphere-controls-system     default-http-backend-5d464dd566-f5w6w             1/1     Running             0          3m48s</span><br><span class="line">kubesphere-monitoring-system   kube-state-metrics-566cdbcb48-n9rwr               0/4     ContainerCreating   0          2m58s</span><br><span class="line">kubesphere-monitoring-system   node-exporter-99mjb                               0/2     ContainerCreating   0          2m59s</span><br><span class="line">kubesphere-monitoring-system   node-exporter-b6msl                               2/2     Running             0          2m59s</span><br><span class="line">kubesphere-monitoring-system   prometheus-k8s-0                                  0/3     Pending             0          38s</span><br><span class="line">kubesphere-monitoring-system   prometheus-k8s-system-0                           0/3     Pending             0          38s</span><br><span class="line">kubesphere-monitoring-system   prometheus-operator-6b97679cfd-lrjnm              1/1     Running             0          2m59s</span><br><span class="line">kubesphere-system              ks-account-596657f8c6-6vv8f                       0/1     PodInitializing     0          3m31s</span><br><span class="line">kubesphere-system              ks-apigateway-78bcdc8ffc-kkf9z                    1/1     Running             0          3m34s</span><br><span class="line">kubesphere-system              ks-apiserver-5b548d7c5c-z7xkr                     1/1     Running             0          3m33s</span><br><span class="line">kubesphere-system              ks-console-78bcf96dbf-bxwd4                       1/1     Running             0          3m27s</span><br><span class="line">kubesphere-system              ks-controller-manager-696986f8d9-rlktc            1/1     Running             0          3m30s</span><br><span class="line">kubesphere-system              ks-installer-75b8d89dff-qhhgl                     1/1     Running             0          5m12s</span><br><span class="line">kubesphere-system              openldap-0                                        1/1     Running             0          4m2s</span><br><span class="line">kubesphere-system              redis-6fd6c6d6f9-s9zsr                            1/1     Running             0          4m8s</span><br><span class="line">openebs                        maya-apiserver-7f664b95bb-b2ptv                   1/1     Running             0          51m</span><br><span class="line">openebs                        openebs-admission-server-85dcbc7979-g5dfl         1/1     Running             0          52m</span><br><span class="line">openebs                        openebs-apiserver-bc55cd99b-mtgnb                 1/1     Running             0          77m</span><br><span class="line">openebs                        openebs-localpv-provisioner-85ff89dd44-5ql55      1/1     Running             0          77m</span><br><span class="line">openebs                        openebs-ndm-operator-87df44d9-sbfsw               1/1     Running             1          77m</span><br><span class="line">openebs                        openebs-ndm-sjrjn                                 1/1     Running             0          77m</span><br><span class="line">openebs                        openebs-ndm-sq9ds                                 1/1     Running             0          77m</span><br><span class="line">openebs                        openebs-provisioner-7f86c6bb64-br2pb              1/1     Running             0          77m</span><br><span class="line">openebs                        openebs-snapshot-operator-54b9c886bf-j5xp2        2/2     Running             0          77m</span><br></pre></td></tr></table></figure><h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>Error: Unable to find a match: kubelet-1.17.3 kubeadm-1.17.3 kubectl-1.17.3</strong><br>场景：执行 yum 命令 <code>yum install -y kubelet-1.17.3 kubeadm-1.17.3 kubectl-1.17.3</code> 报错.<br>原因：没有配置 k8s 的 yum 源<br>解决：<a href="https://blog.csdn.net/m0_37556444/article/details/86494294">https://blog.csdn.net/m0_37556444/article/details/86494294</a></p><p><strong>Error: incompatible versions client[v2.17.0] server[v2.16.3]</strong><br>场景：Helm 安装服务的时候报错。<br>原因：Helm 和 Tiller 的版本不一致。<br>解决：卸载掉 Tiller 重新安装：<a href="https://www.jianshu.com/p/d0cdbb49569b">https://www.jianshu.com/p/d0cdbb49569b</a></p><p><strong>fatal: [localhost]: FAILED! =&gt; {“changed”: true,</strong><br>场景：最小化安装 KubeSphere 时，查看日志得到的报错。<br>原因：Helm 版本不对，helm的版本不匹配导致的。当前安装的版本是v2.17.0，重新安装的版本是v2.16.3。<br>解决：卸载 Helm 和 Tiller 重新安装：<a href="https://blog.csdn.net/qq_30019911/article/details/113747673">https://blog.csdn.net/qq_30019911/article/details/113747673</a></p>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Kubernetes 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 常用操作</title>
      <link href="/2021/05/13/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Kubernetes%20%E6%89%8B%E5%86%8C/Kubernetes%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/05/13/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Kubernetes%20%E6%89%8B%E5%86%8C/Kubernetes%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="Kubernetes-集群部署一个-Tomcat-服务"><a href="#Kubernetes-集群部署一个-Tomcat-服务" class="headerlink" title="Kubernetes 集群部署一个 Tomcat 服务"></a>Kubernetes 集群部署一个 Tomcat 服务</h2><h4 id="创建-prod"><a href="#创建-prod" class="headerlink" title="创建 prod"></a>创建 prod</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ kubectl create deployment tomcat6 --image=tomcat:6.0.53-jre8</span><br><span class="line">deployment.apps/tomcat6 created</span><br></pre></td></tr></table></figure><h4 id="查询-prod"><a href="#查询-prod" class="headerlink" title="查询 prod"></a>查询 prod</h4><p>查询所有的资源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ kubectl get all</span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/tomcat6-5f7ccf4cb9-f8269   0/1     Pending   0          17s</span><br><span class="line"></span><br><span class="line">NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">service/kubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP   26m</span><br><span class="line"></span><br><span class="line">NAME                      READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/tomcat6   0/1     1            0           17s</span><br><span class="line"></span><br><span class="line">NAME                                 DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/tomcat6-5f7ccf4cb9   1         1         0       17s</span><br></pre></td></tr></table></figure><p>使用 <code>-o wide</code> 查询更丰富的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ kubectl get pods -o wide</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE    IP       NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">tomcat6-5f7ccf4cb9-f8269   0/1     Pending   0          106s   &lt;none&gt;   &lt;none&gt;   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><blockquote><p>READY 0/1 表示此 prod 在集群内有 1 个容器，其中 0 个准备好了。NODE 表示部署在哪个节点上。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Kubernetes 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序开发</title>
      <link href="/2021/05/12/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
      <url>/2021/05/12/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>无法上传图片到阿里云OSS</strong></p><ol><li>场景：真机无法上传图片到阿里云OSS，微信开发者工具可以。</li><li>问题：form 表单多了 file 字段。</li><li>解决：去掉 file 字段。</li></ol><p>这问题有点诡异。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wx.uploadFile(&#123;</span><br><span class="line">   url: aliyunServerURL, </span><br><span class="line">   filePath: params.filePath,</span><br><span class="line">   name: <span class="string">'file'</span>,</span><br><span class="line">   formData: &#123;</span><br><span class="line">   <span class="string">'key'</span>: aliyunFileKey,</span><br><span class="line">   <span class="string">'policy'</span>: policyBase64,</span><br><span class="line">   <span class="string">'OSSAccessKeyId'</span>: accessid,</span><br><span class="line">   <span class="string">'signature'</span>: signature,</span><br><span class="line">   <span class="string">'success_action_status'</span>: <span class="string">'200'</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 统计代码执行耗时</title>
      <link href="/2021/05/11/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E6%89%8B%E5%86%8C/Java%20%E7%BB%9F%E8%AE%A1%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E8%80%97%E6%97%B6/"/>
      <url>/2021/05/11/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E6%89%8B%E5%86%8C/Java%20%E7%BB%9F%E8%AE%A1%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E8%80%97%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<p>代码耗时统计在日常开发中算是一个十分常见的需求，特别是在需要找出代码性能瓶颈时。</p><p>可能也是受限于 Java 的语言特性，总觉得代码写起来不够优雅，大量的耗时统计代码，干扰了业务逻辑。特别是开发功能的时候，有个感受就是刚刚开发完代码很清爽优雅，结果加了一大堆辅助代码后，整个代码就变得臃肿了，自己看着都挺难受。因此总想着能不能把这块写的更优雅一点，今天本文就尝试探讨下“代码耗时统计”这一块。</p><p>在开始正文前，先说下前提，“代码耗时统计”的并不是某个方法的耗时，而是任意代码段之间的耗时。这个代码段，可能是一个方法中的几行代码，也有可能是从这个方法的某一行到另一个被调用方法的某一行，因此通过 AOP 方式是不能实现这个需求的。</p><h2 id="常规方法"><a href="#常规方法" class="headerlink" title="常规方法"></a>常规方法</h2><h4 id="时间差统计"><a href="#时间差统计" class="headerlink" title="时间差统计"></a>时间差统计</h4><p>这种方式是最简单的方法，记录下开始时间，再记录下结束时间，计算时间差即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeDiffTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> startMs = TimeUtils.nowMs();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>); <span class="comment">// 模拟业务代码</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"timeCost: "</span> + TimeUtils.diffMs(startMs));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* output: </span></span><br><span class="line"><span class="comment"> * timeCost: 5005</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前毫秒数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">nowMs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前毫秒与起始毫秒差</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startMillis 开始纳秒数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">diffMs</span><span class="params">(<span class="keyword">long</span> startMillis)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> diffMs(startMillis, nowMs());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式的优点是实现简单，利于理解；缺点就是对代码的侵入性较大，看着很傻瓜，不优雅。</p><h4 id="StopWatch"><a href="#StopWatch" class="headerlink" title="StopWatch"></a>StopWatch</h4><p>第二种方式是参考 <code>StopWatch</code>，<code>StopWatch</code> 通常被用作统计代码耗时，各个框架和 Common 包都有自己的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceWatchTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TraceWatch traceWatch = <span class="keyword">new</span> TraceWatch();</span><br><span class="line"></span><br><span class="line">        traceWatch.start(<span class="string">"function1"</span>);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">// 模拟业务代码</span></span><br><span class="line">        traceWatch.stop();</span><br><span class="line"></span><br><span class="line">        traceWatch.start(<span class="string">"function2"</span>);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">// 模拟业务代码</span></span><br><span class="line">        traceWatch.stop();</span><br><span class="line"></span><br><span class="line">        traceWatch.record(<span class="string">"function1"</span>, <span class="number">1</span>); <span class="comment">// 直接记录耗时</span></span><br><span class="line"></span><br><span class="line">        System.out.println(JSON.toJSONString(traceWatch.getTaskMap()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* output: </span></span><br><span class="line"><span class="comment"> * &#123;"function2":[&#123;"data":1000,"taskName":"function2"&#125;],"function1":[&#123;"data":1000,"taskName":"function1"&#125;,&#123;"data":1,"taskName":"function1"&#125;]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceWatch</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Start time of the current task. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> startMs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Name of the current task. */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> String currentTaskName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, List&lt;TaskInfo&gt;&gt; taskMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间差类型指标记录，如果需要终止，请调用 &#123;<span class="doctag">@link</span> #stop()&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskName 指标名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(String taskName)</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.currentTaskName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Can't start TraceWatch: it's already running"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.currentTaskName = taskName;</span><br><span class="line">        <span class="keyword">this</span>.startMs = TimeUtils.nowMs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 终止时间差类型指标记录，调用前请确保已经调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.currentTaskName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Can't stop TraceWatch: it's not running"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> lastTime = TimeUtils.nowMs() - <span class="keyword">this</span>.startMs;</span><br><span class="line"></span><br><span class="line">        TaskInfo info = <span class="keyword">new</span> TaskInfo(<span class="keyword">this</span>.currentTaskName, lastTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.taskMap.computeIfAbsent(<span class="keyword">this</span>.currentTaskName, e -&gt; <span class="keyword">new</span> LinkedList&lt;&gt;()).add(info);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.currentTaskName = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接记录指标数据，不局限于时间差类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskName 指标名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 指标数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">(String taskName, Object data)</span> </span>&#123;</span><br><span class="line">        TaskInfo info = <span class="keyword">new</span> TaskInfo(taskName, data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.taskMap.computeIfAbsent(taskName, e -&gt; <span class="keyword">new</span> LinkedList&lt;&gt;()).add(info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskInfo</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String taskName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Object data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高级方法"><a href="#高级方法" class="headerlink" title="高级方法"></a>高级方法</h2><p>上面提到的两种方法，用大白话来说都是“直来直去”的感觉，我们还可以尝试把代码写的更简便一点。</p><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><p>在 JDK 1.8 中，引入了 <code>java.util.function</code> 包，通过该类提供的接口，能够实现在指定代码段的上下文执行额外代码的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceHolderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TraceWatch traceWatch = <span class="keyword">new</span> TraceWatch();</span><br><span class="line"></span><br><span class="line">        TraceHolder.run(traceWatch, <span class="string">"function1"</span>, i -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">// 模拟业务代码</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        String result = TraceHolder.run(traceWatch, <span class="string">"function2"</span>, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">// 模拟业务代码</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">"YES"</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"NO"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        TraceHolder.run(traceWatch, <span class="string">"function1"</span>, i -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">// 模拟业务代码</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(JSON.toJSONString(traceWatch.getTaskMap()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* output: </span></span><br><span class="line"><span class="comment"> * &#123;"function2":[&#123;"data":1004,"taskName":"function2"&#125;],"function1":[&#123;"data":1001,"taskName":"function1"&#125;,&#123;"data":1002,"taskName":"function1"&#125;]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceHolder</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有返回值调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">run</span><span class="params">(TraceWatch traceWatch, String taskName, Supplier&lt;T&gt; supplier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            traceWatch.start(taskName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> supplier.get();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            traceWatch.stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无返回值调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(TraceWatch traceWatch, String taskName, IntConsumer function)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            traceWatch.start(taskName);</span><br><span class="line"></span><br><span class="line">            function.accept(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            traceWatch.stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AutoCloseable"><a href="#AutoCloseable" class="headerlink" title="AutoCloseable"></a>AutoCloseable</h4><p>除了利用 <code>Function</code> 的特性，我们还可以使用 JDK 1.7 的 <code>AutoCloseable</code> 特性。说 <code>AutoCloseable</code> 可能有同学没听过，但是给大家展示下以下代码，就会立刻明白是什么东西了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未使用 AutoCloseable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readFirstLingFromFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path));</span><br><span class="line">        <span class="keyword">return</span> br.readLine();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 AutoCloseable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readFirstLineFromFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path))) &#123;</span><br><span class="line">        <span class="keyword">return</span> br.readLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>try</code> 后方可以加载一个实现了 <code>AutoCloseable</code> 接口的对象，该对象作用于整个 <code>try</code> 语句块中，并且在执行完毕后回调 <code>AutoCloseable#close()</code> 方法。</p><p>让我们对 <code>TraceWatch</code> 类进行改造。</p><p>实现 <code>AutoCloseable</code> 接口，实现 <code>close()</code> 接口，并修改 <code>start()</code> 方法，使其支持链式调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoCloseableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TraceWatch traceWatch = <span class="keyword">new</span> TraceWatch();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(TraceWatch ignored = traceWatch.start(<span class="string">"function1"</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">// 模拟业务代码</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(TraceWatch ignored = traceWatch.start(<span class="string">"function2"</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">// 模拟业务代码</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(TraceWatch ignored = traceWatch.start(<span class="string">"function1"</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">// 模拟业务代码</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(JSON.toJSONString(traceWatch.getTaskMap()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* output: </span></span><br><span class="line"><span class="comment"> * &#123;"function2":[&#123;"data":1001,"taskName":"function2"&#125;],"function1":[&#123;"data":1002,"taskName":"function1"&#125;,&#123;"data":1002,"taskName":"function1"&#125;]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceWatch</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> TraceWatch <span class="title">start</span><span class="params">(String taskName)</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.currentTaskName != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Can't start TraceWatch: it's already running"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.currentTaskName = taskName;</span><br><span class="line">      <span class="keyword">this</span>.startMs = TimeUtils.nowMs();</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.stop();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 对象转换</title>
      <link href="/2021/05/07/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E6%89%8B%E5%86%8C/Java%20%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2/"/>
      <url>/2021/05/07/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E6%89%8B%E5%86%8C/Java%20%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="InputStream-转化为-File"><a href="#InputStream-转化为-File" class="headerlink" title="InputStream 转化为 File"></a>InputStream 转化为 File</h2><h4 id="JDK-原生提供"><a href="#JDK-原生提供" class="headerlink" title="JDK 原生提供"></a>JDK 原生提供</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试OK</span></span><br><span class="line">InputStream is = <span class="keyword">new</span> InputStream(<span class="string">"/test/tst.png"</span>);</span><br><span class="line">OutputStream os = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   os = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"/test/tst.png"</span>));</span><br><span class="line">   <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8192</span>];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">      os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">   &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">   os.close();</span><br><span class="line">   is.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Apache-Common-提供"><a href="#Apache-Common-提供" class="headerlink" title="Apache Common 提供"></a>Apache Common 提供</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试OK</span></span><br><span class="line">InputStream initialStream = FileUtils.openInputStream(<span class="keyword">new</span> File(<span class="string">"src/main/resources/sample.txt"</span>));</span><br><span class="line">File targetFile = <span class="keyword">new</span> File(<span class="string">"src/main/resources/targetFile.tmp"</span>);</span><br><span class="line"><span class="comment">// 此方法会清空 initialStream 数据</span></span><br><span class="line">FileUtils.copyInputStreamToFile(initialStream, targetFile);</span><br></pre></td></tr></table></figure><h4 id="Google-Guava-提供"><a href="#Google-Guava-提供" class="headerlink" title="Google Guava 提供"></a>Google Guava 提供</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试OK</span></span><br><span class="line">InputStream initialStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"src/main/resources/sample.txt"</span>));</span><br><span class="line"><span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[initialStream.available()];</span><br><span class="line">initialStream.read(buffer);</span><br><span class="line">File targetFile = <span class="keyword">new</span> File(<span class="string">"src/main/resources/targetFile.tmp"</span>);</span><br><span class="line">Files.write(buffer, targetFile);</span><br></pre></td></tr></table></figure><h4 id="HTTP-处理"><a href="#HTTP-处理" class="headerlink" title="HTTP 处理"></a>HTTP 处理</h4><p>如果输入流链接到正在进行的数据流上，如来自正在进行的链接的HTTP响应，此时可能无法一次读取整个流。这种情况下，我们需要确保一直读取到流的尽头。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">File targetFile = <span class="keyword">new</span> File(<span class="string">"src/main/resources/targetFile.tmp"</span>);</span><br><span class="line"><span class="keyword">try</span>(InputStream initialStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"src/main/resources/sample.txt"</span>));</span><br><span class="line">    OutputStream outStream = <span class="keyword">new</span> FileOutputStream(targetFile)) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span> * <span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> bytesRead;</span><br><span class="line">    <span class="keyword">while</span> ((bytesRead = initialStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        outStream.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="InputStream-转化为-String"><a href="#InputStream-转化为-String" class="headerlink" title="InputStream 转化为 String"></a>InputStream 转化为 String</h2><h4 id="JDK-原生提供-1"><a href="#JDK-原生提供-1" class="headerlink" title="JDK 原生提供"></a>JDK 原生提供</h4><p><strong>方法一</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[inputStream.available()];</span><br><span class="line">inputStream.read(bytes);</span><br><span class="line">String str = <span class="keyword">new</span> String(bytes);</span><br></pre></td></tr></table></figure></p><p><strong>方法二</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String result = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream)).lines()</span><br><span class="line">                                                                      .collect(Collectors.joining(System.lineSeparator()));</span><br></pre></td></tr></table></figure></p><p><strong>方法三</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String result = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream)).lines()</span><br><span class="line">                                                                      .parallel()</span><br><span class="line">                                                                      .collect(Collectors.joining(System.lineSeparator()));</span><br></pre></td></tr></table></figure></p><p><strong>方法四</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scanner s = <span class="keyword">new</span> Scanner(inputStream).useDelimiter(<span class="string">"\\A"</span>);</span><br><span class="line">String str = s.hasNext() ? s.next() : <span class="string">""</span>;</span><br></pre></td></tr></table></figure></p><p><strong>方法五</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String resource = <span class="keyword">new</span> Scanner(inputStream).useDelimiter(<span class="string">"\\Z"</span>).next();</span><br></pre></td></tr></table></figure></p><p><strong>方法六</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">String line;</span><br><span class="line"></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    sb.append(line);</span><br><span class="line">&#125;</span><br><span class="line">String str = sb.toString();</span><br><span class="line"><span class="keyword">return</span> str;</span><br></pre></td></tr></table></figure></p><p><strong>方法七</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试不OK</span></span><br><span class="line">ByteArrayOutputStream result = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"><span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">while</span> ((length = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    result.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">&#125;</span><br><span class="line">String str = result.toString(StandardCharsets.UTF_8.name());</span><br><span class="line"><span class="keyword">return</span> str;</span><br></pre></td></tr></table></figure></p><p><strong>方法八</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(inputStream);</span><br><span class="line">ByteArrayOutputStream buf = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"><span class="keyword">int</span> result = bis.read();</span><br><span class="line"><span class="keyword">while</span>(result != -<span class="number">1</span>) &#123;</span><br><span class="line">    buf.write((<span class="keyword">byte</span>) result);</span><br><span class="line">    result = bis.read();</span><br><span class="line">&#125;</span><br><span class="line">String str = buf.toString();</span><br><span class="line"><span class="keyword">return</span> str;</span><br></pre></td></tr></table></figure></p><h4 id="Apache-Common-提供-1"><a href="#Apache-Common-提供-1" class="headerlink" title="Apache Common 提供"></a>Apache Common 提供</h4><p><strong>方法九</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringWriter writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line">IOUtils.copy(inputStream, writer, StandardCharsets.UTF_8.name());</span><br><span class="line">String str = writer.toString();</span><br></pre></td></tr></table></figure></p><p><strong>方法十</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = IOUtils.toString(inputStream, <span class="string">"utf-8"</span>);</span><br></pre></td></tr></table></figure></p><h4 id="Google-Guava-提供-1"><a href="#Google-Guava-提供-1" class="headerlink" title="Google Guava 提供"></a>Google Guava 提供</h4><p><strong>方法十一</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = CharStreams.toString(<span class="keyword">new</span> InputStreamReader(inputStream, StandardCharsets.UTF_8));</span><br></pre></td></tr></table></figure></p><p><strong>方法十二</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String(ByteStreams.toByteArray(inputStream));</span><br></pre></td></tr></table></figure></p><h4 id="性能排行"><a href="#性能排行" class="headerlink" title="性能排行"></a>性能排行</h4><p>针对一个2MB的文件的输入流，多次执行测试如下(单位是毫秒)：</p><ol><li>方法七: 21</li><li>方法九: 31</li><li>方法一: 36</li><li>方法十二: 36</li><li>方法六: 40</li><li>方法三: 66</li><li>方法二: 87</li><li>方法四: 101</li><li>方法十: 111</li><li>方法八: 107</li><li>方法五: 178</li><li>方法十一: 236</li></ol><p>从上述结果来看，方法七和方法九更好一些，而方法五和方法十一会更差一些。</p><h2 id="File-转换为-InputStream"><a href="#File-转换为-InputStream" class="headerlink" title="File 转换为 InputStream"></a>File 转换为 InputStream</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> FileInputStream(file);</span><br></pre></td></tr></table></figure><h2 id="String-转化为-InputStream"><a href="#String-转化为-InputStream" class="headerlink" title="String 转化为 InputStream"></a>String 转化为 InputStream</h2><h4 id="JDK-原生提供-2"><a href="#JDK-原生提供-2" class="headerlink" title="JDK 原生提供"></a>JDK 原生提供</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试OK</span></span><br><span class="line">InputStream is = <span class="keyword">new</span> ByteArrayInputStream(str.getBytes());</span><br></pre></td></tr></table></figure><h4 id="Apache-Common-提供-2"><a href="#Apache-Common-提供-2" class="headerlink" title="Apache Common 提供"></a>Apache Common 提供</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试OK</span></span><br><span class="line">InputStream targetStream = IOUtils.toInputStream(str, StandardCharsets.UTF_8.name());</span><br></pre></td></tr></table></figure><h4 id="Google-Guava-提供-2"><a href="#Google-Guava-提供-2" class="headerlink" title="Google Guava 提供"></a>Google Guava 提供</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试OK</span></span><br><span class="line">InputStream targetStream = <span class="keyword">new</span> ReaderInputStream(CharSource.wrap(str).openStream(), StandardCharsets.UTF_8.name());</span><br></pre></td></tr></table></figure><blockquote><p>InputStream &gt; String &gt; &gt; File 这个流程怎么也走不通。待有时间解决。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Filebeat 安装</title>
      <link href="/2021/05/06/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Filebeat%20%E6%95%99%E7%A8%8B/Filebeat%20%E5%AE%89%E8%A3%85/"/>
      <url>/2021/05/06/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Filebeat%20%E6%95%99%E7%A8%8B/Filebeat%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="二进制包安装"><a href="#二进制包安装" class="headerlink" title="二进制包安装"></a>二进制包安装</h2><h4 id="下载二进制文件并解压"><a href="#下载二进制文件并解压" class="headerlink" title="下载二进制文件并解压"></a>下载二进制文件并解压</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.4.2-darwin-x86_64.tar.gz</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 23.2M  100 23.2M    0     0  2124k      0  0:00:11  0:00:11 --:--:-- 4717k</span><br></pre></td></tr></table></figure><p>下载完成后，解压。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210506210704.png" alt=""></p><h4 id="新增配置文件"><a href="#新增配置文件" class="headerlink" title="新增配置文件"></a>新增配置文件</h4><p>在当前目录下，新增一个配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim itcast.yml</span></span><br><span class="line"><span class="string">filebeat.inputs:</span>  <span class="comment"># 采用控制台输入</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">stdin</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">output.console:</span>   <span class="comment"># 采用控制台输出</span></span><br><span class="line"><span class="attr">  pretty:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="启动-Filebeat"><a href="#启动-Filebeat" class="headerlink" title="启动 Filebeat"></a>启动 Filebeat</h4><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./filebeat -e -c itcast.yml </span><br><span class="line">2021-05-06T20:58:12.304+0800INFO...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="测试-Filebeat"><a href="#测试-Filebeat" class="headerlink" title="测试 Filebeat"></a>测试 Filebeat</h4><p>启动完后，Filebeat 会一直等待输入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ms"</span>:4&#125;&#125;&#125;,<span class="string">"info"</span>:&#123;<span class="string">"ephemeral_id"</span>:<span class="string">"8ecc6ebe-7b92-4c05-b0fe-c0cfaa1cd83d"</span>,<span class="string">"uptime"</span>:&#123;<span class="string">"ms"</span>:420034&#125;&#125;,<span class="string">"memstats"</span>:&#123;<span class="string">"gc_next"</span>:8970528,<span class="string">"memory_alloc"</span>:7780096,<span class="string">"memory_total"</span>:25356432,<span class="string">"rss"</span>:4096&#125;,<span class="string">"runtime"</span>:&#123;<span class="string">"goroutines"</span>:20&#125;&#125;,<span class="string">"filebeat"</span>:&#123;<span class="string">"harvester"</span>:&#123;<span class="string">"open_files"</span>:0,<span class="string">"running"</span>:1&#125;&#125;,<span class="string">"libbeat"</span>:&#123;<span class="string">"config"</span>:&#123;<span class="string">"module"</span>:&#123;<span class="string">"running"</span>:0&#125;&#125;,<span class="string">"pipeline"</span>:&#123;<span class="string">"clients"</span>:1,<span class="string">"events"</span>:&#123;<span class="string">"active"</span>:0&#125;&#125;&#125;,<span class="string">"registrar"</span>:&#123;<span class="string">"states"</span>:&#123;<span class="string">"current"</span>:1&#125;&#125;,<span class="string">"system"</span>:&#123;<span class="string">"load"</span>:&#123;<span class="string">"1"</span>:2.9111,<span class="string">"15"</span>:3.1938,<span class="string">"5"</span>:3.168,<span class="string">"norm"</span>:&#123;<span class="string">"1"</span>:0.7278,<span class="string">"15"</span>:0.7985,<span class="string">"5"</span>:0.792&#125;&#125;&#125;&#125;&#125;&#125;...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 Hello</span></span><br><span class="line">HelloWord</span><br><span class="line"></span><br><span class="line"><span class="comment"># Filebeat 的响应结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"@timestamp"</span>: <span class="string">"2021-05-06T13:05:58.908Z"</span>,</span><br><span class="line">  <span class="string">"@metadata"</span>: &#123;</span><br><span class="line">    <span class="string">"beat"</span>: <span class="string">"filebeat"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"7.4.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"ecs"</span>: &#123;</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"1.1.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"host"</span>: &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"zhangqinghuadeiMac.local"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"agent"</span>: &#123;</span><br><span class="line">    <span class="string">"ephemeral_id"</span>: <span class="string">"8ecc6ebe-7b92-4c05-b0fe-c0cfaa1cd83d"</span>,</span><br><span class="line">    <span class="string">"hostname"</span>: <span class="string">"zhangqinghuadeiMac.local"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"1bf77d2d-68bd-4daa-ad88-528587f9f1d9"</span>,</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"7.4.2"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"filebeat"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"log"</span>: &#123;</span><br><span class="line">    <span class="string">"offset"</span>: 0,</span><br><span class="line">    <span class="string">"file"</span>: &#123;</span><br><span class="line">      <span class="string">"path"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"message"</span>: <span class="string">"HelloWord"</span>,</span><br><span class="line">  <span class="string">"input"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"stdin"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">2021-05-06T21:05:59.911+0800ERRORfile/states.go:112State <span class="keyword">for</span>  should have been dropped, but couldn<span class="string">'t as state is not finished.</span></span><br></pre></td></tr></table></figure><p>可以看到，Filebeat 已经监听到了输入事件，并处理后作了输出。</p><h2 id="配置-Filebeat-读取多个日志文件"><a href="#配置-Filebeat-读取多个日志文件" class="headerlink" title="配置 Filebeat 读取多个日志文件"></a>配置 Filebeat 读取多个日志文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/Users/zhangqinghua/Documents/log/*.log</span></span><br><span class="line"><span class="string">output.console:</span></span><br><span class="line"><span class="attr">  pretty:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="配置-Filebeat-发送日志到-Elasticsearch"><a href="#配置-Filebeat-发送日志到-Elasticsearch" class="headerlink" title="配置 Filebeat 发送日志到 Elasticsearch"></a>配置 Filebeat 发送日志到 Elasticsearch</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/Users/zhangqinghua/Documents/log/*.log</span></span><br><span class="line"><span class="string">output.elasticsearch:</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">["localhost:9200"]</span></span><br></pre></td></tr></table></figure><h2 id="配置-Kibana-显示-Filebeat-收集的日志"><a href="#配置-Kibana-显示-Filebeat-收集的日志" class="headerlink" title="配置 Kibana 显示 Filebeat 收集的日志"></a>配置 Kibana 显示 Filebeat 收集的日志</h2><p><strong>1. Create index pattern</strong><br><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210507101710.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210507101813.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210507101846.png" alt=""></p><p><strong>2. Discover Filter</strong><br><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210507101937.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Filebeat 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>心灵鸡汤</title>
      <link href="/2021/05/05/%E5%85%B6%E5%AE%83/%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4/"/>
      <url>/2021/05/05/%E5%85%B6%E5%AE%83/%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我觉得，一个人要认识自己就需要认识自己的特长、兴趣、热情、擅长等，下面是一个认识自己的标准方法：</p><ol><li>特长。首先你要找得到自己特长。你要认识自己的特长，找到自己的天赋，找到你在DNA里比别人强的东西，就拿你的DNA跟别人竞争就好了。所以你要找到自己可以干成的事，找到别人找你请教的事，你身边人找你请教就是说明你有特长。这是找到自己特长非常非常重要，扬长避短。</li><li>兴趣。如果你没有找到自己特长，就找自己有兴趣有热情的东西。什么叫兴趣？兴趣是再难再累都不会放弃的事。如果你遇到困难就会放弃不叫兴趣，那叫叶公好龙。不怕困难，痴迷其中，就算你没有特长，有了这种特质，你也是头部的人才。</li><li>方法。如果你没有特长，没有兴趣和热情就要学方法。这种方法就是要有时间观念，要会做计划，要懂统筹、规划对于做过的事情，犯过的错误多总结，举一反三，喜欢自己找答案，自己探究因果关系，这是一些方法，自己总结一些套路。</li><li>勤奋。如果你没有特长，没有兴趣，也没有方法，你还能做的事就是勤奋，勤奋注定会让你成为一个比较劳累的人，也是很有可能被淘汰的人随着你的年纪越来越大，你的勤奋也会越来越不值钱。因为年轻人会比你更勤奋，比你更勤奋、比你斗志更强，比你能力更强，比你要钱更少的人会出现。勤奋最不值钱，但是只要你勤奋至少能够自食其力。</li></ol><p>以上就是为了应对未来技术变化，作为个人必须要从特长、兴趣、方法一层一层筛选挖掘，如果没有这些你就要努力和勤奋。就只能接受“福报”了。</p></blockquote><p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　 摘自 <a href="https://coolshell.cn/articles/20977.html">程序员如何把控自己的职业</a>　　　　　</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210505162650.png" alt=""></p><p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　摘自 <a href="https://coolshell.cn/articles/2250.html">21天教你学会C++</a></p><blockquote><p>老师：知道吗，什么女人最有魅力？有一种女人真是可遇不可求，特别具有幽默感，豁达的女人。现在的女生都太现实。如果你遇上一个一定要追到手好吧.&gt; 学生：我遇到两咋办？<br>老师：那你看哪个更豁达一些。比如说你跟她说：我现在脚踏两只船，你在乎吗？ 一个人说在乎，另一个说不在乎。得了 那你选不在乎的，她更豁达。要两个人都说不在乎，那你在乎什么呀</p></blockquote><p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　摘自 <a href="马士兵是不是真的厉害？ - Coping的回答 - 知乎https://www.zhihu.com/question/421379430/answer/1560339390">马士兵是不是真的厉害？</a></p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信登陆</title>
      <link href="/2021/05/05/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/%E5%BE%AE%E4%BF%A1%E7%99%BB%E9%99%86/"/>
      <url>/2021/05/05/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/%E5%BE%AE%E4%BF%A1%E7%99%BB%E9%99%86/</url>
      
        <content type="html"><![CDATA[<h2 id="获取小程序用户信息：前后端方案"><a href="#获取小程序用户信息：前后端方案" class="headerlink" title="获取小程序用户信息：前后端方案"></a>获取小程序用户信息：前后端方案</h2><p>小程序使用 code 登陆时，如果在系统没有注册过，则需要获取用户信息去注册。一般流程是这样子的：</p><ol><li>前端获取 code</li><li>后端根据 code 获取 SessionKey 和 OpenId；</li><li>后端判断 OpenId 不存在，提示前端要进行注册操作；</li><li>前端获取 iv 和 encryptedData 等用户加密信息；</li><li>后端解密 iv 和 encryptedData，得到用户的昵称和头像；</li><li>后端根据前面所得的 OpneId，头像、和昵称进行注册。</li></ol><h4 id="前端：获取-Code"><a href="#前端：获取-Code" class="headerlink" title="前端：获取 Code"></a>前端：获取 Code</h4><p>小程序调用 <code>wx.login</code> 接口，获取到 code。</p><p>参考：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html">https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html</a> </p><h4 id="后端：获取-SessionKey"><a href="#后端：获取-SessionKey" class="headerlink" title="后端：获取 SessionKey"></a>后端：获取 SessionKey</h4><p>后端根据前端传来的 code，调用 <code>auth.code2Session</code> 接口，可以获取到 openid、unionid、session_key 等信息。</p><p>参考：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html">https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html</a></p><h4 id="前端：获取-iv-和-encryptedData"><a href="#前端：获取-iv-和-encryptedData" class="headerlink" title="前端：获取 iv 和 encryptedData"></a>前端：获取 iv 和 encryptedData</h4><p>小程序调用 <code>wx.getUserProfile</code> 接口，获取 UserInfo、iv、encryptedData 等信息。</p><h4 id="后端：解析-iv-和-encryptedData"><a href="#后端：解析-iv-和-encryptedData" class="headerlink" title="后端：解析 iv 和 encryptedData"></a>后端：解析 iv 和 encryptedData</h4><p>其实根据上一步骤获取的 UserInfo 已经包含了所需要的用户信息了，无需进行进一步处理。之前的做法是，后端根据前面得到的 session_key、iv、encryptedData 进行解密，得到用户信息，进行注册。</p><h2 id="获取小程序用户信息：纯后端方案"><a href="#获取小程序用户信息：纯后端方案" class="headerlink" title="获取小程序用户信息：纯后端方案"></a>获取小程序用户信息：纯后端方案</h2><p>暂时没有找到解决方案。</p><h2 id="获取小程序用户信息：改进方案"><a href="#获取小程序用户信息：改进方案" class="headerlink" title="获取小程序用户信息：改进方案"></a>获取小程序用户信息：改进方案</h2><p>小程序在获取用户信息的时候，同时获取 code 和用户信息，一起传给给后端。后端根据 code 得到 openId，判断用户存在，直接返回登陆传给。用户不存在，直接注册新用户，登陆返回。</p><ol><li>优点：登陆和注册是同一个接口；</li><li>缺点：每次登陆，小程序都需要弹窗（获取 code 不需要弹窗，获取用户信息需要弹窗）；</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>api unauthorized rid: 603c887e-64d7bee8-4cc0cf43</strong></p><ol><li>场景：后端直接调用 cgi-bin/user/info 接口获取用户信息，提示 api unauthorized rid；</li><li>原因：这个接口是仅针对公众号；</li><li>解决：后端想获取用户信息，需要通过小程序；</li><li>参考：<a href="https://developers.weixin.qq.com/community/develop/doc/00064a26b3c108e37ccb8217058400；">https://developers.weixin.qq.com/community/develop/doc/00064a26b3c108e37ccb8217058400；</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
          <category> 微信开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>登陆接口开发</title>
      <link href="/2021/05/04/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83/%E7%99%BB%E9%99%86%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91/"/>
      <url>/2021/05/04/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83/%E7%99%BB%E9%99%86%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要是和大家聊一聊，在设计一个登录接口时，不仅仅是功能上的实现，在安全方面，我们还需要考虑哪些地方。</p><h2 id="安全风险"><a href="#安全风险" class="headerlink" title="安全风险"></a>安全风险</h2><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><p>只要网站是暴露在公网的，那么很大概率上会被人盯上，尝试爆破这种简单且有效的方式：通过各种方式获得了网站的用户名之后，通过编写程序来遍历所有可能的密码，直至找到正确的密码为止。</p><p>伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 密码字典</span><br><span class="line">password_dict = []</span><br><span class="line"># 登录接口</span><br><span class="line">login_url = &apos;&apos;</span><br><span class="line">def attack(username):</span><br><span class="line"> for password in password_dict:</span><br><span class="line">     data = &#123;&apos;username&apos;: username, &apos;password&apos;: password&#125;</span><br><span class="line">       content = requests.post(login_url, data).content.decode(&apos;utf-8&apos;)</span><br><span class="line">       if &apos;login success&apos; in content:</span><br><span class="line">           print(&apos;got it! password is : %s&apos; % password)</span><br></pre></td></tr></table></figure><p>那么这种情况，我们要怎么防范呢？</p><h5 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h5><p>有聪明的同学就想到了，我可以在它密码错误达到一定次数时，增加验证码校验！比如我们设置，当用户密码错误达到3次之后，则需要用户输入图片验证码才可以继续登录操作：</p><p>伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fail_count = get_from_redis(fail_username)</span><br><span class="line">if fail_count &gt;= 3:</span><br><span class="line"> if captcha is None:</span><br><span class="line">  return error(&apos;需要验证码&apos;)</span><br><span class="line">    check_captcha(captcha)</span><br><span class="line">success = do_login(username, password)</span><br><span class="line">if not success:</span><br><span class="line"> set_redis(fail_username, fail_count + 1)</span><br></pre></td></tr></table></figure><blockquote><p>伪代码未考虑并发，实际开发可以考虑加锁。</p></blockquote><p>这样确实可以过滤掉一些非法的攻击，但是以目前的 OCR 技术来说的话，普通的图片验证码真的很难做到有效的防止机器人（我们就在这个上面吃过大亏）。当然，我们也可以花钱购买类似于三方公司提供的滑动验证等验证方案，但是也并不是 100% 的安全，一样可以被破解（惨痛教训）。</p><h4 id="登录限制"><a href="#登录限制" class="headerlink" title="登录限制"></a>登录限制</h4><p>那这时候又有同学说了，那我可以直接限制非正常用户的登录操作，当它密码错误达到一定次数时，直接拒绝用户的登录，隔一段时间再恢复。比如我们设置某个账号在登录时错误次数达到 10 次时，则5分钟内拒绝该账号的所有登录操作。</p><p>伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fail_count = get_from_redis(fail_username)</span><br><span class="line">locked = get_from_redis(lock_username)</span><br><span class="line"></span><br><span class="line">if locked:</span><br><span class="line"> return error(&apos;拒绝登录&apos;)</span><br><span class="line">if fail_count &gt;= 3:</span><br><span class="line"> if captcha is None:</span><br><span class="line">  return error(&apos;需要验证码&apos;)</span><br><span class="line">    check_captcha(captcha)</span><br><span class="line">success = do_login(username, password)</span><br><span class="line">if not success:</span><br><span class="line"> set_redis(fail_username, fail_count + 1)</span><br><span class="line">    if fail_count + 1 &gt;= 10:</span><br><span class="line">     # 失败超过10次，设置锁定标记</span><br><span class="line">     set_redis(lock_username, true, 300s)</span><br></pre></td></tr></table></figure><p>umm，这样确实可以解决用户密码被爆破的问题。但是，这样会带来另一个风险：攻击者虽然不能获取到网站的用户信息，但是它可以让我们网站所有的用户都无法登录！攻击者只需要无限循环遍历所有的用户名（即使没有，随机也行）进行登录，那么这些用户会永远处于锁定状态，导致正常的用户无法登录网站！</p><h4 id="IP-限制"><a href="#IP-限制" class="headerlink" title="IP 限制"></a>IP 限制</h4><p>那既然直接针对用户名不行的话，我们可以针对 IP 来处理，直接把攻击者的 IP 封了不就万事大吉了嘛。我们可以设定某个 IP 下调用登录接口错误次数达到一定时，则禁止该 IP 进行登录操作。</p><p>伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ip = request[&apos;IP&apos;]</span><br><span class="line">fail_count = get_from_redis(fail_ip)</span><br><span class="line">if fail_count &gt; 10:</span><br><span class="line"> return error(&apos;拒绝登录&apos;)</span><br><span class="line"># 其它逻辑</span><br><span class="line"># do something()</span><br><span class="line">success = do_login(username, password)</span><br><span class="line">if not success:</span><br><span class="line"> set_redis(fail_ip, true, 300s)</span><br></pre></td></tr></table></figure><p>这样也可以一定程度上解决问题，事实上有很多的限流操作都是针对IP进行的，比如 Nginx 的限流模块就可以限制一个 IP 在单位时间内的访问次数。但是这里还是存在问题：</p><ol><li>比如现在很多学校、公司都是使用同一个出口 IP，如果直接按IP限制，可能会误杀其它正常的用户；</li><li>现在这么多 VPN，攻击者完全可以在IP被封后切换 VPN 来攻击；</li></ol><h4 id="手机验证"><a href="#手机验证" class="headerlink" title="手机验证"></a>手机验证</h4><p>那难道就没有一个比较好的方式来防范吗？　当然有。　我们可以看到近些年来，几乎所有的应用都会让用户绑定手机，一个是国家的实名制政策要求，第二个是手机基本上和身份证一样，基本上可以代表一个人的身份标识了。所以很多安全操作都是基于手机验证来进行的，登录也可以：</p><ol><li>当用户输入密码次数大于 3 次时，要求用户输入验证码（最好使用滑动验证）;</li><li>当用户输入密码次数大于 10 次时，弹出手机验证，需要用户使用手机验证码和密码双重认证进行登录；</li></ol><p>伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fail_count = get_from_redis(fail_username)</span><br><span class="line"></span><br><span class="line">if fail_count &gt; 3:</span><br><span class="line"> if captcha is None:</span><br><span class="line">  return error(&apos;需要验证码&apos;)</span><br><span class="line">    check_captcha(captcha)</span><br><span class="line"></span><br><span class="line">if fail_count &gt; 10:</span><br><span class="line"> # 大于10次，使用验证码和密码登录</span><br><span class="line"> if dynamic_code is None:</span><br><span class="line">     return error(&apos;请输入手机验证码&apos;)</span><br><span class="line">    if not validate_dynamic_code(username, dynamic_code):</span><br><span class="line">     delete_dynamic_code(username)</span><br><span class="line">     return error(&apos;手机验证码错误&apos;)</span><br><span class="line"></span><br><span class="line"> success = do_login(username, password, dynamic_code)</span><br><span class="line"></span><br><span class="line"> if not success:</span><br><span class="line">     set_redis(fail_username, fail_count + 1)</span><br></pre></td></tr></table></figure><h2 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h2><p>中间人攻击简单一点来说就是，A 和 B 在通讯过程中，攻击者通过嗅探、拦截等方式获取或修改A和B的通讯内容。</p><p>举个栗子：小白给小黄发快递，途中要经过快递点 A，小黑就躲在快递点 A，或者干脆自己开一个快递点B来冒充快递点 A。然后偷偷的拆了小白给小黄的快递，看看里面有啥东西。甚至可以把小白的快递给留下来，自己再打包一个一毛一样的箱子发给小黄。</p><p>那在登录过程中，如果攻击者在嗅探到了从客户端发往服务端的登录请求，就可以很轻易的获取到用户的用户名和密码。</p><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><p>防范中间人攻击最简单也是最有效的一个操作，更换 HTTPS，把网站中所有的 HTTP 请求修改为强制使用 HTTPS。</p><p>为什么HTTPS可以防范中间人攻击？ HTTPS 实际上就是在 HTTP 和 TCP 协议中间加入了 SSL/TLS 协议，用于保障数据的安全传输。相比于 HTTP，HTTPS 主要有以下几个特点：</p><ol><li>内容加密；</li><li>数据完整性；</li><li>身份验证；</li></ol><h4 id="加密传输"><a href="#加密传输" class="headerlink" title="加密传输"></a>加密传输</h4><p>在 HTTPS 之外，我们还可以手动对敏感数据进行加密传输：</p><ol><li>用户名可以在客户端使用非对称加密，在服务端解密；</li><li>密码可以在客户端进行MD5之后传输，防止暴露密码明文；</li></ol><h4 id="其它手段"><a href="#其它手段" class="headerlink" title="其它手段"></a>其它手段</h4><p>除了上面我们聊的这些以外，其实还有很多其它的工作可以考虑，比如：</p><ol><li>操作日志 ，用户的每次登录和敏感操作都需要记录日志（包括IP、设备等）；</li><li>异常操作或登录提醒 ，有了上面的操作日志，那我们就可以基于日志做风险提醒，比如用户在进行非常登录地登录、修改密码、登录异常时，可以短信提醒用户；</li><li>拒绝弱密码 注册或修改密码时，不允许用户设置弱密码；</li><li>防止用户名被遍历 有些网站在注册时，在输入完用户名之后，会提示用户名是否存在。这样会存在网站的所有用户名被泄露的风险（遍历该接口即可），需要在交互或逻辑上做限制；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
          <category> 接口规范 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 常用操作</title>
      <link href="/2021/05/04/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Git%20%E6%89%8B%E5%86%8C/Git%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/05/04/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Git%20%E6%89%8B%E5%86%8C/Git%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h2><h4 id="强制更新，放弃本地修改"><a href="#强制更新，放弃本地修改" class="headerlink" title="强制更新，放弃本地修改"></a>强制更新，放弃本地修改</h4><p>该命令直接放弃所有修改代码，并更新到版本库最新版本代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch --all</span><br><span class="line">Fetching origin</span><br><span class="line"></span><br><span class="line">$ git reset --hard origin/master</span><br><span class="line">HEAD is now at 648386f add</span><br><span class="line"></span><br><span class="line">$ git pull</span><br><span class="line">Already up to date.</span><br></pre></td></tr></table></figure><blockquote><p>git reset —hard origin/分支代码 一般都是主干。若有多期工程，需自己更改。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Git 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>支付类型</title>
      <link href="/2021/04/27/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91/%E6%94%AF%E4%BB%98%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/04/27/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91/%E6%94%AF%E4%BB%98%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="第三方支付"><a href="#第三方支付" class="headerlink" title="第三方支付"></a>第三方支付</h2><p>支付宝、微信支付、银联云闪付等都属于第三方支付平台，这是相对于消费者和商家来说的，消费者购买商家的东西，自己没有付现金，而是通过第三方平台来完成支付的，商家通过第三方来收取钱。除了支付宝、微信支付和银联云闪付以外，电信翼支付、百度钱包、京东金融、小米金融等等也都属于第三方支付平台。</p><h4 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h4><h4 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h4><h2 id="第四发支付"><a href="#第四发支付" class="headerlink" title="第四发支付"></a>第四发支付</h2><p>第四方支付又称为聚合支付，相较于支付宝微信支付这些第三方支付平台而言，聚合支付属于在这个基础上进行了技术融合，是融合了多方支付通道的平台。</p><p>举个生活中很常见的例子，某水果店商家不知道聚合支付是什么，因此没有引入聚合支付，只在商店放置了支付宝和微信两个二维码供顾客扫码付款，选择微信支付的顾客扫微信的二维码，选择支付宝支付的顾客扫支付宝的二维码看似分工有序，互不干扰，但其实对于商家和消费者而言，都存在一定程度上的不便</p><p>当水果店商家在每日营业结束对店内收入进行盘点时，需要计算支付宝和微信两个平台的收入。有些商家为了充分满足顾客的需求，会在店里放置或者贴了很多个不同平台的收款码，那这些平台商家都需要一一进行对账盘点，处理起来比较费时。</p><p>这时候，聚合支付的优势就得到了凸显。引入聚合支付后，商家不需要在店内放置多个平台二维码，因为聚合码可以将上述这些第三方支付平台二维码进行融合，顾客不需要去找对应的付款渠道。因为不管顾客用哪个支付平台进行支付，聚合码都可以满足顾客的需求。</p><h4 id="Stripe"><a href="#Stripe" class="headerlink" title="Stripe"></a>Stripe</h4><h4 id="SwiftPass"><a href="#SwiftPass" class="headerlink" title="SwiftPass"></a>SwiftPass</h4><p>SwiftPass 这是一个威富通（swiftpass）支付工具类，实现了微信原生支付、跳转支付、退款、交易查询、退款查询等功能。</p>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
          <category> 支付开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第三方支付 微信</title>
      <link href="/2021/04/27/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%20%E5%BE%AE%E4%BF%A1/"/>
      <url>/2021/04/27/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%20%E5%BE%AE%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
          <category> 支付开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第三方支付 支付宝</title>
      <link href="/2021/04/27/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%20%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
      <url>/2021/04/27/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%20%E6%94%AF%E4%BB%98%E5%AE%9D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
          <category> 支付开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>聚合支付 Stripe</title>
      <link href="/2021/04/27/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91/%E8%81%9A%E5%90%88%E6%94%AF%E4%BB%98%20Stripe/"/>
      <url>/2021/04/27/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91/%E8%81%9A%E5%90%88%E6%94%AF%E4%BB%98%20Stripe/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
          <category> 支付开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>聚合支付 SwiftPass</title>
      <link href="/2021/04/27/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91/%E8%81%9A%E5%90%88%E6%94%AF%E4%BB%98%20SwiftPass/"/>
      <url>/2021/04/27/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91/%E8%81%9A%E5%90%88%E6%94%AF%E4%BB%98%20SwiftPass/</url>
      
        <content type="html"><![CDATA[<p>公司官网：<a href="https://www.swiftpass.cn">https://www.swiftpass.cn</a><br>开发文档：<a href="https://open.swiftpass.cn">https://open.swiftpass.cn</a></p><h2 id="微信公众号-小程序接口"><a href="#微信公众号-小程序接口" class="headerlink" title="微信公众号/小程序接口"></a>微信公众号/小程序接口</h2><p>参考：<a href="https://open.swiftpass.cn/openapi/doc?index_1=67&amp;index_2=1&amp;chapter_1=1202&amp;chapter_2=1203">https://open.swiftpass.cn/openapi/doc?index_1=67&amp;index_2=1&amp;chapter_1=1202&amp;chapter_2=1203</a></p><h4 id="场景介绍"><a href="#场景介绍" class="headerlink" title="场景介绍"></a>场景介绍</h4><p>商户已有H5商城网站，用户通过消息或扫描二维码在微信内打开网页时，可以调用微信支付完成下单购买的流程。</p><p>步骤：</p><ol><li>商户下发图文消息或者通过自定义菜单吸引用户点击进入商户网页。</li><li>进入商户网页，用户选择购买，完成选购流程。</li><li>调起微信支付控件，用户开始输入支付密码。</li><li>密码验证通过，支付成功。商户后台得到支付成功的通知。</li><li>返回商户页面，显示购买成功。该页面由商户自定义。</li><li>公众号下发消息，提示发货成功。该步骤可选。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210429145011.png" alt=""></p><h4 id="后端：初始化请求"><a href="#后端：初始化请求" class="headerlink" title="后端：初始化请求"></a>后端：初始化请求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意一：ContentType 必须为 APPLICATION_JSON，否则会报签名错误。<br>注意二：mch_id 错误也提示签名错误，很是误导人。</p></blockquote><h4 id="前端：小程序调起支付"><a href="#前端：小程序调起支付" class="headerlink" title="前端：小程序调起支付"></a>前端：小程序调起支付</h4><h4 id="前端：公众号调起支付"><a href="#前端：公众号调起支付" class="headerlink" title="前端：公众号调起支付"></a>前端：公众号调起支付</h4><h4 id="前端：支付通知"><a href="#前端：支付通知" class="headerlink" title="前端：支付通知"></a>前端：支付通知</h4><h4 id="后端：支付通知"><a href="#后端：支付通知" class="headerlink" title="后端：支付通知"></a>后端：支付通知</h4><p>通知 URL 是初始化请求 API 中提交的参数 <code>notify_url</code>。支付完成后，平台会把相关支付和用户信息发送到该 URL，商户需要接收处理并按文档规范返回应答。</p><h4 id="后端：订单查询"><a href="#后端：订单查询" class="headerlink" title="后端：订单查询"></a>后端：订单查询</h4><p>由于网络异常或者系统的波动，可能会出现用户支付成功，但是商户侧未能成功接收到支付结果通知的情况，此时建议商户主动调用订单查询API确认订单状态。</p><p><strong>方案一</strong><br>以订单下单成功时间为基准，每隔 5 秒/30 秒/1 分钟/3 分钟/5 分钟/10 分钟/30 分钟调用订单查询 API 查询一次，最后一次查询还是未返回支付成功状态，则停止后续查询。（轮询时间间隔和次数，商户可以根据自身业务场景自定义设置）。</p><p><strong>方案二</strong><br>定时任务每隔 30 秒启动一次，找出最近 10 分钟内创建并且未支付的订单，调用订单查询 API 核实订单状态。系统记录订单查询的次数，在 10 次查询之后状态还是未支付成功，则停止后续查询。（轮询时间间隔和次数，商户可以根据自身业务场景自定义设置）。</p><h4 id="后端：申请退款"><a href="#后端：申请退款" class="headerlink" title="后端：申请退款"></a>后端：申请退款</h4><h4 id="后端：查询退款"><a href="#后端：查询退款" class="headerlink" title="后端：查询退款"></a>后端：查询退款</h4><h4 id="后端：关闭订单"><a href="#后端：关闭订单" class="headerlink" title="后端：关闭订单"></a>后端：关闭订单</h4><p>商户订单支付失败需要生成新单号重新发起支付，要对原订单号调用关单，避免重复支付；系统下单后，用户支付超时，系统退出不再受理，避免用户继续，请调用关单接口。</p><h4 id="后端：通用方法"><a href="#后端：通用方法" class="headerlink" title="后端：通用方法"></a>后端：通用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 计算签名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(TreeMap&lt;String, String&gt; params)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 1. 除 sign 字段外，所有參數按照字段名的 ascii 碼從小到大排序後使用 QueryString 的格式(即 key1=value1&amp;key2=value2...)拼接而成，空值不傳遞，不參與簽名組串。</span></span><br><span class="line">   String queryString = <span class="keyword">new</span> ArrayList&lt;&gt;(params.keySet())</span><br><span class="line">            .stream()</span><br><span class="line">            .filter(key -&gt; !StringUtils.isEmpty(params.get(key)))</span><br><span class="line">            .map(key -&gt; key + <span class="string">"="</span> + params.get(key))</span><br><span class="line">            .collect(Collectors.joining(<span class="string">"&amp;"</span>));</span><br><span class="line"></span><br><span class="line">   System.out.println(queryString);</span><br><span class="line">   <span class="comment">// 2. MD5 加签</span></span><br><span class="line">   <span class="keyword">if</span> (!StringUtils.isEmpty(params.get(<span class="string">"sign_type"</span>)) &amp;&amp; !params.get(<span class="string">"sign_type"</span>).equals(<span class="string">"MD5"</span>)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(<span class="string">"目前只支持MD5加密"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   queryString += <span class="string">"&amp;key=0dc0b16bc452a9a562c1430ff2a7e720"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> md5(queryString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* MD5加密，生成签名。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String queryString)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      MessageDigest m = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">      m.update(queryString.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">      <span class="keyword">byte</span>[] s = m.digest();</span><br><span class="line">      StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">byte</span> b : s) &#123;</span><br><span class="line">            result.append(Integer.toHexString((<span class="number">0x000000ff</span> &amp; b) | <span class="number">0xffffff00</span>).substring(<span class="number">6</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result.toString().toUpperCase();</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(<span class="string">"MD5加密失败："</span> + e.getMessage());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补单机制"><a href="#补单机制" class="headerlink" title="补单机制"></a>补单机制</h2><p>参考：<a href="https://open.swiftpass.cn/openapi/doc?index_1=67&amp;index_2=1&amp;chapter_1=1200&amp;chapter_2=1201">https://open.swiftpass.cn/openapi/doc?index_1=67&amp;index_2=1&amp;chapter_1=1200&amp;chapter_2=1201</a></p><p>对后台通知交互模式，如果平台收到商户的应答不是纯字符串 success 或超过 5 秒后返回时，平台认为通知失败，平台会通过一定的策略（通知频率为 0/15/15/30/180/1800/1800/1800/1800/3600，单位：秒）间接性重新发起通知，尽可能提高通知的成功率，但平台不保证通知最终能成功。</p><p>由于存在重新发送后台通知的情况，因此同样的通知可能会多次发送给商户系统。商户系统必须能够正确处理重复的通知。平台推荐的做法是，当收到通知进行处理时，首先检查对应业务数据的状态，判断该通知是否已经处理过，如果没有处理过再进行处理，如果处理过直接返回纯字符串 success。在对业务数据进行状态检查和处理之前，要采用数据锁进行并发控制，以避免函数重复插入数据造成的数据混乱。</p>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
          <category> 支付开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven 手册</title>
      <link href="/2021/04/27/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Maven%20%E6%89%8B%E5%86%8C/Maven%20%E6%89%8B%E5%86%8C/"/>
      <url>/2021/04/27/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Maven%20%E6%89%8B%E5%86%8C/Maven%20%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="指定-Java-版本"><a href="#指定-Java-版本" class="headerlink" title="指定 Java 版本"></a>指定 Java 版本</h2><p>在创建新的 Maven module 时, Maven 会默认用 1.5 的版本编译，导致编译出错。这时可以在 <code>pom.xml</code> 里面加上以下配置指定 Java 版本。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Maven 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 安装</title>
      <link href="/2021/04/22/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Elasticsearch%20%E6%89%8B%E5%86%8C/Elasticsearch%20%E5%AE%89%E8%A3%85/"/>
      <url>/2021/04/22/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Elasticsearch%20%E6%89%8B%E5%86%8C/Elasticsearch%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker pull elasticsearch:7.4.2</span><br><span class="line">7.4.2: Pulling from library/elasticsearch</span><br><span class="line">d8d02d457314: Pull complete </span><br><span class="line">...</span><br><span class="line">Digest: sha256:543bf7a3d61781bad337d31e6cc5895f16b55aed4da48f40c346352420927f74</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> elasticsearch:7.4.2</span><br><span class="line">docker.io/library/elasticsearch:7.4.2</span><br></pre></td></tr></table></figure><h4 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h4><p>创建挂载目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/elasticsearch/config</span><br><span class="line"></span><br><span class="line">mkdir /data/elasticsearch/data</span><br></pre></td></tr></table></figure></p><p>创建 elasticsearch 配置文件： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> /data/elasticsearch/config/elasticsearch.yml</span><br><span class="line"><span class="comment"># 允许任意IP访问elasticsearch</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http.host:0.0.0.0"</span> &gt;&gt; /data/elasticsearch/config/elasticsearch.yml</span><br></pre></td></tr></table></figure><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><p>执行容器命令：   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker run --name elasticsearch001 \</span><br><span class="line">                         -p 9200:9200 -p 9300:9300 \</span><br><span class="line">                         -e <span class="string">"discovery.type=single-node"</span> \</span><br><span class="line">                         -e ES_JAVA_OPTS=<span class="string">"-Xms64m -Xmx128m"</span> \</span><br><span class="line">                         -v /data/elasticsearch/config/elaticsearch.yml:/usr/share/elasticsearch/config/elaticsearch.yml \</span><br><span class="line">                         -v /data/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">                         -v /data/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">                         -d elasticsearch:7.4.2</span><br></pre></td></tr></table></figure><p>参数说明：</p><ol><li><code>-p 9200:9200</code></li><li><code>-p 9300:9300</code></li><li><code>-e &quot;discovery.type=single-node&quot;</code><br>运行模式：单机</li><li><code>-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx128m&quot;</code><br>重要：如果没有指定内存，elasticsearch 启动会将所有内存占用，服务器就卡死了</li></ol><h2 id="Docker-安装-Kibana"><a href="#Docker-安装-Kibana" class="headerlink" title="Docker 安装 Kibana"></a>Docker 安装 Kibana</h2><h4 id="拉取镜像-1"><a href="#拉取镜像-1" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker pull kibana:7.4.2</span><br><span class="line">7.4.2: Pulling from library/kibana</span><br><span class="line">d8d02d457314: Already exists </span><br><span class="line">bc64069ca967: Pull complete </span><br><span class="line">...</span><br><span class="line">Digest: sha256:355f9c979dc9cdac3ff9a75a817b8b7660575e492bf7dbe796e705168f167efc</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> kibana:7.4.2</span><br><span class="line">docker.io/library/kibana:7.4.2</span><br></pre></td></tr></table></figure><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name kibana001 -e ELASTICSEARCH_HOSTS=http://10.100.32.124:9200 -p 5601:5601 -d kibana:7.4.2</span><br><span class="line">fa6a5d36792226e786489044295bd055508c7b2c5b837b15e510e4d66f62fe34</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Elasticsearch 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 简介</title>
      <link href="/2021/04/22/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Elasticsearch%20%E6%95%99%E7%A8%8B/Elasticsearch%20%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/04/22/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Elasticsearch%20%E6%95%99%E7%A8%8B/Elasticsearch%20%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>全文搜索属于最常见的需求，开源的 Elasticsearch 是目前全文搜索引擎的首选。它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。</p><p>Elastic 的底层是开源库 Lucene。但是，你没法直接用 Lucene，必须自己写代码去调用它的接口。Elastic 是 Lucene 的封装，提供了 REST API 的操作接口，开箱即用。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h4 id="Index（索引）"><a href="#Index（索引）" class="headerlink" title="Index（索引）"></a>Index（索引）</h4><p>动词，相当于 MySQL 中的 insert。</p><p>名词，相当于 MySQL 中的 Database。</p><h4 id="Type（类型）"><a href="#Type（类型）" class="headerlink" title="Type（类型）"></a>Type（类型）</h4><p>在 Index 中，可以定义一个或多个 Type。类似于 MySQL 中的 Table，每一种 Type 的数据放在一起。</p><h4 id="Document（文档）"><a href="#Document（文档）" class="headerlink" title="Document（文档）"></a>Document（文档）</h4><p>保存在某个 Index 下，某种 Type 的一个数据，Document 是 JSON 格式的。Document 就像是 MySQL 中的某个 Table 里面的内容。</p><h4 id="倒排索引机制"><a href="#倒排索引机制" class="headerlink" title="倒排索引机制"></a>倒排索引机制</h4><p>假设现在有以下记录：</p><ol><li>红海行动</li><li>探索红海行动</li><li>红海特别行动</li><li>红海纪录篇</li><li>特工红海特别探索</li></ol><p>那么在 Elasticsearch 中，则会将记录分词，以以下的形式保存：</p><div class="table-container"><table><thead><tr><th style="text-align:left">词</th><th>记录</th></tr></thead><tbody><tr><td style="text-align:left">红海</td><td>1、2、3、4、5</td></tr><tr><td style="text-align:left">行动</td><td>1、2、3</td></tr><tr><td style="text-align:left">探索</td><td>2、5</td></tr><tr><td style="text-align:left">特别</td><td>3、5</td></tr><tr><td style="text-align:left">纪录篇</td><td>4</td></tr><tr><td style="text-align:left">特工</td><td>5</td></tr></tbody></table></div><blockquote><p>分词：将整词分析为单词，例如“红海特工行动”分析为“红海”、“特工”、“行动”。</p></blockquote><p>当检索“红海探索”时，命中：</p><div class="table-container"><table><thead><tr><th style="text-align:left">词</th><th>记录</th></tr></thead><tbody><tr><td style="text-align:left">红海</td><td>1、2、3、4、5</td></tr><tr><td style="text-align:left">探索</td><td>2、5</td></tr></tbody></table></div><p>从而得出：1、2、3、4、5、2、5 的记录符合条件，并根据相关性得分进行排序（2、5、1、3、4）。</p><blockquote><p>相关性得分：搜索的词在文档中出现的次数越多，相关性越高。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Elasticsearch 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 镜像</title>
      <link href="/2021/04/22/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Docker%20%E6%89%8B%E5%86%8C/Docker%20%E9%95%9C%E5%83%8F/"/>
      <url>/2021/04/22/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Docker%20%E6%89%8B%E5%86%8C/Docker%20%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="镜像安装-MySQL"><a href="#镜像安装-MySQL" class="headerlink" title="镜像安装 MySQL"></a>镜像安装 MySQL</h2><h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker search mysql</span><br></pre></td></tr></table></figure><h4 id="拉取-MySQL-8-0"><a href="#拉取-MySQL-8-0" class="headerlink" title="拉取 MySQL 8.0"></a>拉取 MySQL 8.0</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker pull mysql:8.0</span><br><span class="line">8.0: Pulling from library/mysql</span><br><span class="line">80369df48736: Pull complete </span><br><span class="line">e8f52315cb10: Pull complete </span><br><span class="line">cf2189b391fc: Pull complete </span><br><span class="line">cc98f645c682: Pull complete </span><br><span class="line">27a27ac83f74: Pull complete </span><br><span class="line">fa1f04453414: Pull complete </span><br><span class="line">d45bf7d22d33: Pull complete </span><br><span class="line">3dbac26e409c: Pull complete </span><br><span class="line">9017140fb8c1: Pull complete </span><br><span class="line">b76dda2673ae: Pull complete </span><br><span class="line">bea9eb46d12a: Pull complete </span><br><span class="line">e1f050a38d0f: Pull complete </span><br><span class="line">Digest: sha256:7345ce4ce6f0c1771d01fa333b8edb2c606ca59d385f69575f8e3e2ec6695eee</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:8.0</span><br><span class="line">docker.io/library/mysql:8.0</span><br></pre></td></tr></table></figure><h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mysql               8.0                 c8ee894bd2bd        3 weeks ago         456MB</span><br></pre></td></tr></table></figure><h4 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --name 指定容器名称</span></span><br><span class="line"><span class="comment"># -p 3306:3306将宿主机的3306端口映射到容器的3306端口上</span></span><br><span class="line"><span class="comment"># -e MYSQL_ROOT_PASSWORD 重置MYSQL ROOT的密码</span></span><br><span class="line"><span class="comment"># -d      指定镜像</span></span><br><span class="line">zhangqinghua$ docker run --name=beesgo_mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0</span><br><span class="line">c82e078ba80ce959cec46f3f615339b618ccdadc5f3623bff0abaf7f03b6cf6e</span><br></pre></td></tr></table></figure><h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker ps -a</span><br><span class="line">CONTAINER ID    IMAGE        CREATED          PORTS                               NAMES</span><br><span class="line">5555f130af86    mysql:8.0    5 seconds ago    0.0.0.0:3306-&gt;3306/tcp, 33060/tcp   beesgo_mysql</span><br></pre></td></tr></table></figure><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker <span class="built_in">exec</span> -it 5555f130af86 /bin/bash</span><br><span class="line">root@5555f130af86:/$</span><br></pre></td></tr></table></figure><h4 id="登陆-MySQL"><a href="#登陆-MySQL" class="headerlink" title="登陆 MySQL"></a>登陆 MySQL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@5555f130af86:/$ mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 8</span><br><span class="line">Server version: 8.0.18 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h4 id="创建数据库和用户"><a href="#创建数据库和用户" class="headerlink" title="创建数据库和用户"></a>创建数据库和用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password.policy=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password.length=4;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE DATABASE beesgo CHARACTER SET utf8mb4;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE USER <span class="string">'beesgo'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'beesgo'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all privileges on beesgo.* to <span class="string">'beesgo'</span>@<span class="string">'%'</span> with grant option;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; quit;</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><h4 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CTRL + P + Q</span><br><span class="line">root@5555f130af86:/<span class="comment"># read escape sequence</span></span><br><span class="line">zhangqinghua$</span><br></pre></td></tr></table></figure><h4 id="停掉容器"><a href="#停掉容器" class="headerlink" title="停掉容器"></a>停掉容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker stop beesgo_mysql</span><br><span class="line">beesgo_mysql</span><br></pre></td></tr></table></figure><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker rm  beesgo_mysql</span><br><span class="line">beesgo_mysql</span><br></pre></td></tr></table></figure><h4 id="数据库不适合运行在-Docker-中，为什么？"><a href="#数据库不适合运行在-Docker-中，为什么？" class="headerlink" title="数据库不适合运行在 Docker 中，为什么？"></a>数据库不适合运行在 Docker 中，为什么？</h4><ol><li>数据不安全</li><li>数据库的网络的要求高</li><li>运行数据库的时候需要一些硬件环境的支持</li><li>Docker 中打包的应用应该是无状态的应用</li></ol><h2 id="镜像安装-Redis"><a href="#镜像安装-Redis" class="headerlink" title="镜像安装 Redis"></a>镜像安装 Redis</h2><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz9hxps1f8ad2fzfttnbz ~]$ docker pull redis</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">8d691f585fa8: Pull complete </span><br><span class="line">8ccd02d17190: Pull complete </span><br><span class="line">4719eb1815f2: Pull complete </span><br><span class="line">200531706a7d: Pull complete </span><br><span class="line">eed7c26916cf: Pull complete </span><br><span class="line">e1285fcc6a46: Pull complete </span><br><span class="line">Digest: sha256:fe80393a67c7058590ca6b6903f64e35b50fa411b0496f604a85c526fb5bd2d2</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> redis:latest</span><br></pre></td></tr></table></figure><h4 id="运行镜像-1"><a href="#运行镜像-1" class="headerlink" title="运行镜像"></a>运行镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --name设置容器的名称</span></span><br><span class="line"><span class="comment"># -p映射6379端口</span></span><br><span class="line"><span class="comment"># -d指定镜像</span></span><br><span class="line"><span class="comment"># redis-server创建容器成功后，要运行的命令，这里是启动redis-server</span></span><br><span class="line"></span><br><span class="line">[root@izwz9hxps1f8ad2fzfttnbz ~]$ docker run --name=beesgo-redis -p 6379:6379 -d redis:latest redis-server</span><br><span class="line">8c26678baf89ab9f1b1cee94cc47411f20dbab6b23a8854558711f917399f4db</span><br></pre></td></tr></table></figure><h2 id="镜像安装-Nginx"><a href="#镜像安装-Nginx" class="headerlink" title="镜像安装 Nginx"></a>镜像安装 Nginx</h2><h2 id="镜像安装-Tomcat"><a href="#镜像安装-Tomcat" class="headerlink" title="镜像安装 Tomcat"></a>镜像安装 Tomcat</h2><h2 id="镜像安装禅道"><a href="#镜像安装禅道" class="headerlink" title="镜像安装禅道"></a>镜像安装禅道</h2><p>参考：<a href="https://www.zentao.net/book/zentaopmshelp/405.html">https://www.zentao.net/book/zentaopmshelp/405.html</a></p><h4 id="拉取镜像-1"><a href="#拉取镜像-1" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull easysoft/zentao:12.5.3</span><br></pre></td></tr></table></figure><h4 id="配置目录"><a href="#配置目录" class="headerlink" title="配置目录"></a>配置目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /data/zentao/zentaopms</span><br><span class="line">$ mkdir /data/zentao/mysqldata</span><br></pre></td></tr></table></figure><blockquote><p>禅道自带了数据库。配置宿主机目录是为了方便备份数据，不一定需要。</p></blockquote><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run --name zentao001 \</span><br><span class="line">                  -p 8899:80 \</span><br><span class="line">                  -v /data/zentao/zentaopms:/www/zentaopms \</span><br><span class="line">                  -v /data/zentao/mysqldata:/var/lib/mysql \</span><br><span class="line">                  -d easysoft/zentao:12.5.3</span><br></pre></td></tr></table></figure><h4 id="引导安装"><a href="#引导安装" class="headerlink" title="引导安装"></a>引导安装</h4><p>容器启动后，访问 <a href="http://localhost:8899，进行线上安装。">http://localhost:8899，进行线上安装。</a></p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210422154817.png" alt=""></p><p>过程中会要求输入管理员密码，数据库等（数据库可以使用自带的或者外网的）。</p><p>安装完成后。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210422155140.png" alt=""></p><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><p><strong>Access denied for user ‘root’@’localhost’ (using password: NO)</strong><br>容器启动成功后，<code>docker logs -f {container}</code> 查看日志，发现系统报错 <code>ERROR 1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: NO)</code> PHP 程序启动时建立了无密码的默认配置连接所导致，由于之后又使用了用户设置的my.php的数据库配置，因此程序功能正常）。</p><p><img src="https://raw.githubusercontent.com/zhangqinghua/hexo_image/master/WX20210422-154252.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Docker 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 安装</title>
      <link href="/2021/04/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Elasticsearch%20%E6%95%99%E7%A8%8B/Elasticsearch%20%E5%AE%89%E8%A3%85/"/>
      <url>/2021/04/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Elasticsearch%20%E6%95%99%E7%A8%8B/Elasticsearch%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="二进制文件安装"><a href="#二进制文件安装" class="headerlink" title="二进制文件安装"></a>二进制文件安装</h2><p>Elastic 需要 Java 8 环境。如果你的机器还没安装 Java，可以参考<a href="https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-get-on-debian-8">这篇文章</a>，注意要保证环境变量 <code>JAVA_HOME</code> 正确设置。</p><h4 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h4><p>安装完 Java，就可以跟着<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/zip-targz.html">官方文档</a>安装 Elastic。直接下载压缩包比较简单。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.1.zip</span><br><span class="line">$ unzip elasticsearch-5.5.1.zip</span><br><span class="line">$ <span class="built_in">cd</span> elasticsearch-5.5.1/</span><br></pre></td></tr></table></figure><h4 id="启动-elasticsearch"><a href="#启动-elasticsearch" class="headerlink" title="启动 elasticsearch"></a>启动 elasticsearch</h4><p>接着，进入解压后的目录，运行下面的命令，启动 Elastic。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/elasticsearch</span><br></pre></td></tr></table></figure><p>如果这时报错”max virtual memory areas vm.maxmapcount [65530] is too low”，要运行下面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure><h4 id="测试请求"><a href="#测试请求" class="headerlink" title="测试请求"></a>测试请求</h4><p>如果一切正常，Elastic 就会在默认的9200端口运行。这时，打开另一个命令行窗口，请求该端口，会得到说明信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:9200</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment"># 节点名字</span></span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"atntrTf"</span>,</span><br><span class="line">  <span class="comment"># 在集群中的名字</span></span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="comment"># 在集群中的Id</span></span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"tf9250XhQ6ee4h7YI11anA"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"5.5.1"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"19c13d0"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2017-07-18T20:44:24.823Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"6.6.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，请求9200端口，Elastic 返回一个 JSON 对象，包含当前节点、集群、版本等信息。</p><p>按下 Ctrl + C，Elastic 就会停止运行。</p><h4 id="配置远程访问"><a href="#配置远程访问" class="headerlink" title="配置远程访问"></a>配置远程访问</h4><p>默认情况下，Elastic 只允许本机访问，如果需要远程访问，可以修改 Elastic 安装目录的 <code>config/elasticsearch.yml</code> 文件，去掉 <code>network.host</code>的注释，将它的值改成 <code>0.0.0.0</code>，然后重新启动 Elastic。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">network.host: 0.0.0.0</span><br></pre></td></tr></table></figure><p>上面代码中，设成 <code>0.0.0.0</code> 让任何人都可以访问。线上服务不要这样设置，要设成具体的 IP。</p><h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker pull elasticsearch:7.4.2</span><br><span class="line">7.4.2: Pulling from library/elasticsearch</span><br><span class="line">d8d02d457314: Pull complete </span><br><span class="line">...</span><br><span class="line">Digest: sha256:543bf7a3d61781bad337d31e6cc5895f16b55aed4da48f40c346352420927f74</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> elasticsearch:7.4.2</span><br><span class="line">docker.io/library/elasticsearch:7.4.2</span><br></pre></td></tr></table></figure><h4 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h4><p>创建挂载目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/elasticsearch/config</span><br><span class="line"></span><br><span class="line">mkdir /data/elasticsearch/data</span><br></pre></td></tr></table></figure><p>创建 elasticsearch 配置文件： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> /data/elasticsearch/config/elasticsearch.yml</span><br><span class="line"><span class="comment"># 允许任意IP访问elasticsearch</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http.host:0.0.0.0"</span> &gt;&gt; /data/elasticsearch/config/elasticsearch.yml</span><br></pre></td></tr></table></figure><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><p>执行容器命令：   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker run --name elasticsearch001 \</span><br><span class="line">                         -p 9200:9200 -p 9300:9300 \</span><br><span class="line">                         -e <span class="string">"discovery.type=single-node"</span> \</span><br><span class="line">                         -e ES_JAVA_OPTS=<span class="string">"-Xms64m -Xmx128m"</span> \</span><br><span class="line">                         -v /data/elasticsearch/config/elaticsearch.yml:/usr/share/elasticsearch/config/elaticsearch.yml \</span><br><span class="line">                         -v /data/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">                         -v /data/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">                         -d elasticsearch:7.4.2</span><br></pre></td></tr></table></figure><p>参数说明：</p><ol><li><code>-p 9200:9200</code></li><li><code>-p 9300:9300</code></li><li><code>-e &quot;discovery.type=single-node&quot;</code><br>运行模式：单机</li><li><code>-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx128m&quot;</code><br>重要：如果没有指定内存，elasticsearch 启动会将所有内存占用，服务器就卡死了</li></ol><h2 id="Docker-安装-Kibana"><a href="#Docker-安装-Kibana" class="headerlink" title="Docker 安装 Kibana"></a>Docker 安装 Kibana</h2><h4 id="拉取镜像-1"><a href="#拉取镜像-1" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker pull kibana:7.4.2</span><br><span class="line">7.4.2: Pulling from library/kibana</span><br><span class="line">d8d02d457314: Already exists </span><br><span class="line">bc64069ca967: Pull complete </span><br><span class="line">...</span><br><span class="line">Digest: sha256:355f9c979dc9cdac3ff9a75a817b8b7660575e492bf7dbe796e705168f167efc</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> kibana:7.4.2</span><br><span class="line">docker.io/library/kibana:7.4.2</span><br></pre></td></tr></table></figure><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name kibana001 -e ELASTICSEARCH_HOSTS=http://10.100.32.124:9200 -p 5601:5601 -d kibana:7.4.2</span><br><span class="line">fa6a5d36792226e786489044295bd055508c7b2c5b837b15e510e4d66f62fe34</span><br></pre></td></tr></table></figure><blockquote><p>ELASTICSEARCH_HOSTS 只要指定宿主机的地址，不能使用 localhsot 或者 192.168.0.1。</p></blockquote><h4 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h4><p>打开浏览器，输入：<a href="http://localhost:5601">http://localhost:5601</a> 查看效果。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210418234416.png" alt=""></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>Exception in thread “main” java.nio.file.NoSuchFileException: /usr/share/elasticsearch/config/jvm.options</strong></p><ol><li>场景：Docker 启动 elasticsearch 失败。</li><li>原因：宿主机没有配置 <code>jvm.options</code> 文件。</li><li>解决：将文件拷出到宿主机，重启。</li></ol><p><strong>Caused By: java.nio.file.AccessDeniedExceion: /usr/share/elasticsearch/data/nodes</strong></p><ol><li>场景：Docker 启动 elasticsearch 失败。</li><li>原因：Docker 没有操作宿主机 elasticsearch 挂载的目录权限。</li><li>解决：修改目录权限：<code>chmod -R 777 /elasticsearcch/data/</code>。</li></ol><p><strong>Unable to revive connection: <a href="http://elasticsearch:9200">http://elasticsearch:9200</a></strong></p><ol><li>场景：Docker 启动 Kibana 提示 Kibana server is not ready yet，查询日志报错。</li><li>原因：没有指定 <code>ELASTICSEARCH_HOSTS</code> 地址，命令输错。</li><li>解决：<code>docker run --name kibana001 -e ELASTICSEARCH_HOSTS=http://192.168.42.2:9200</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Elasticsearch 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 初步检索</title>
      <link href="/2021/04/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Elasticsearch%20%E6%95%99%E7%A8%8B/Elasticsearch%20%E5%88%9D%E6%AD%A5%E6%A3%80%E7%B4%A2/"/>
      <url>/2021/04/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Elasticsearch%20%E6%95%99%E7%A8%8B/Elasticsearch%20%E5%88%9D%E6%AD%A5%E6%A3%80%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="cat"><a href="#cat" class="headerlink" title="_cat"></a>_cat</h2><h4 id="查看-ES-健康信息"><a href="#查看-ES-健康信息" class="headerlink" title="查看 ES 健康信息"></a>查看 ES 健康信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost:9200/_cat/health</span><br><span class="line">1618762998 16:23:18 docker-cluster green 1 1 3 3 0 0 0 0 - 100.0%</span><br></pre></td></tr></table></figure><h4 id="查看节点信息"><a href="#查看节点信息" class="headerlink" title="查看节点信息"></a>查看节点信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost:9200/_cat/nodes  </span><br><span class="line">172.17.0.5 66 96 1 0.12 0.03 0.01 dilm * 28e6018cc390</span><br></pre></td></tr></table></figure><h4 id="查看主节点"><a href="#查看主节点" class="headerlink" title="查看主节点"></a>查看主节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost:9200/_cat/master</span><br><span class="line">iqIV_kIATDiLy46oUu-U7w 172.17.0.5 172.17.0.5 28e6018cc390</span><br></pre></td></tr></table></figure><h4 id="查看所有索引"><a href="#查看所有索引" class="headerlink" title="查看所有索引"></a>查看所有索引</h4><p>使用 <code>_cat/indices</code> 查询所有索引，类似 MySQL 的 <code>show databases;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost:9200/_cat/indices</span><br><span class="line">green open .kibana_task_manager_1   z_w2e978RwyfHT8yffAraQ 1 0 2 0 38.2kb 38.2kb</span><br><span class="line">green open .apm-agent-configuration EgVoY1rRQ8e0aIEPRmri-w 1 0 0 0   283b   283b</span><br><span class="line">green open .kibana_1                ZvfrNF4PQGKmCuE8Hl86sA 1 0 8 4 16.5kb 16.5kb</span><br></pre></td></tr></table></figure><h2 id="保存文档"><a href="#保存文档" class="headerlink" title="保存文档"></a>保存文档</h2><p>保存一个数据，保存在哪个索引的哪个类型下，指定用哪个唯一标识。</p><h4 id="POST-保存"><a href="#POST-保存" class="headerlink" title="POST 保存"></a>POST 保存</h4><p>POST 新增，如果不指定 id，会自动生成id。指定 id 则会修改这个数据，并新增版本号。</p><ol><li>不带 Id，新增操作；</li><li>带 Id，且存在此 Id，修改操作；</li><li>带 Id，且不存在此 Id，新增操作；</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ POST http://localhost:9200/customer/external</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"John Doe"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应数据：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"_index": "customer",            # 对应 MySQL 的数据库   </span><br><span class="line">"_type": "external",             # 对应 MySQL 的数据表</span><br><span class="line">"_id": "nQW3G3kBh2g-jSNW1mPf",   # 对应 MySQL 的记录，自动生成的 Id</span><br><span class="line">"_version": 1,                   # 版本号是1</span><br><span class="line">"result": "created",             # 是保存操作</span><br><span class="line">"_shards": &#123;</span><br><span class="line">"total": 2,</span><br><span class="line">"successful": 1,</span><br><span class="line">"failed": 0</span><br><span class="line">&#125;,</span><br><span class="line">"_seq_no": 2,</span><br><span class="line">"_primary_term": 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多次发送此请求，均是 created 操作。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"_index"</span>: <span class="string">"customer"</span>,</span><br><span class="line"><span class="attr">"_type"</span>: <span class="string">"external"</span>,</span><br><span class="line">"_id": "ngW6G3kBh2g-jSNWY2NB",  # 第二次发送此请求，Id 变了，表示是一个新的数据</span><br><span class="line">"_version": 1,</span><br><span class="line">"result": "created",</span><br><span class="line">"_shards": &#123;</span><br><span class="line">"total": 2,</span><br><span class="line">"successful": 1,</span><br><span class="line">"failed": 0</span><br><span class="line">&#125;,</span><br><span class="line">"_seq_no": 3,</span><br><span class="line">"_primary_term": 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果带上 Id，此 Id 不存在，则是新增操作，此 Id 存在，则是 updated 操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ POST http://localhost:9200/customer/external/ngW6G3kBh2g-jSNWY2NB</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"John Doe"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"_index"</span>: <span class="string">"customer"</span>,</span><br><span class="line"><span class="attr">"_type"</span>: <span class="string">"external"</span>,</span><br><span class="line"><span class="attr">"_id"</span>: <span class="string">"ngW6G3kBh2g-jSNWY2NB"</span>,</span><br><span class="line"><span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"result"</span>: <span class="string">"updated"</span>,</span><br><span class="line"><span class="attr">"_shards"</span>: &#123;</span><br><span class="line"><span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"_seq_no"</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PUT-保存"><a href="#PUT-保存" class="headerlink" title="PUT  保存"></a>PUT  保存</h4><p>第一次发送，是新增操作，后续请求，是更新操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对应 MySQL 的数据库、表、记录。</span></span><br><span class="line">$ PUT http://localhost:9200/customer/external/1</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"John Doe"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应的元数据：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"_index"</span>: <span class="string">"customer"</span>,</span><br><span class="line"><span class="attr">"_type"</span>: <span class="string">"external"</span>,</span><br><span class="line"><span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">"_version": 1,       # 版本号，第一次操作，版本号是1</span><br><span class="line">"result": "created", # 操作类型，第一次操作，是保存，后面的操作，是更新</span><br><span class="line">"_shards": &#123;         # 分片信息</span><br><span class="line">"total": 2,</span><br><span class="line">"successful": 1,</span><br><span class="line">"failed": 0</span><br><span class="line">&#125;,</span><br><span class="line">"_seq_no": 0,</span><br><span class="line">"_primary_term": 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二次发送响应：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"_index"</span>: <span class="string">"customer"</span>,</span><br><span class="line"><span class="attr">"_type"</span>: <span class="string">"external"</span>,</span><br><span class="line"><span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">"_version": 2,       # 第二次操作，版本号变成2</span><br><span class="line">"result": "updated", # 第二次操作，变成更新</span><br><span class="line">"_shards": &#123;</span><br><span class="line">"total": 2,</span><br><span class="line">"successful": 1,</span><br><span class="line">"failed": 0</span><br><span class="line">&#125;,</span><br><span class="line">"_seq_no": 1,</span><br><span class="line">"_primary_term": 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PUT 操作必须带 Id，这是跟 POST 最大的区别。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ PUT http://localhost:9200/customer/external</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"John Doe"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"error"</span>: <span class="string">"Incorrect HTTP method for uri [/customer/external] and method [PUT], allowed: [POST]"</span>,</span><br><span class="line"><span class="attr">"status"</span>: <span class="number">405</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><p>Elasticsearch 使用 GET 请求来查询文档。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ GET http://localhost:9200/customer/external/1</span><br></pre></td></tr></table></figure><p>响应数据：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"_index"</span>: <span class="string">"customer"</span>,</span><br><span class="line"><span class="attr">"_type"</span>: <span class="string">"external"</span>,</span><br><span class="line"><span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">"_seq_no": 1,        # 并发控制字段，每次更新就会 +1，用来做乐观锁</span><br><span class="line">"_primary_term": 1,  # 同上，主分片重新分配。如重启，就会变化</span><br><span class="line">"found": true,       # 是否找到了数据</span><br><span class="line">"_source": &#123;         # 数据的内容</span><br><span class="line">"name": "John Doe"</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_seq_no</code> 和 <code>_primary_term</code> 可以用来做并发更新操作，假设我们有 2 个线程要对这条数据进行修改操作。</p><p>线程一进行修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ PUT http://localhost:9200/customer/external/1?if_seq_no=1&amp;if__primary_term=1</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"John Doe"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"_index"</span>: <span class="string">"customer"</span>,</span><br><span class="line"><span class="attr">"_type"</span>: <span class="string">"external"</span>,</span><br><span class="line"><span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"_version"</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">"result"</span>: <span class="string">"updated"</span>,</span><br><span class="line"><span class="attr">"_shards"</span>: &#123;</span><br><span class="line"><span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"_seq_no"</span>: <span class="number">9</span>,</span><br><span class="line"><span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时 <code>_seq_no</code> 和 <code>_primary_term</code> 已经变更了，如果线程二还是持有旧的数据，则会修改失败：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ PUT http://localhost:9200/customer/external/1?if_seq_no=1&amp;if__primary_term=1</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"John Doe"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"error"</span>: &#123;</span><br><span class="line"><span class="attr">"root_cause"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line"><span class="attr">"reason"</span>: <span class="string">"[1]: version conflict, required seqNo [8], primary term [1]. current document has seqNo [9] and primary term [1]"</span>,</span><br><span class="line"><span class="attr">"index_uuid"</span>: <span class="string">"2dqEzaASRGWaJBIpVgMqvg"</span>,</span><br><span class="line"><span class="attr">"shard"</span>: <span class="string">"0"</span>,</span><br><span class="line"><span class="attr">"index"</span>: <span class="string">"customer"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line"><span class="attr">"reason"</span>: <span class="string">"[1]: version conflict, required seqNo [8], primary term [1]. current document has seqNo [9] and primary term [1]"</span>,</span><br><span class="line"><span class="attr">"index_uuid"</span>: <span class="string">"2dqEzaASRGWaJBIpVgMqvg"</span>,</span><br><span class="line"><span class="attr">"shard"</span>: <span class="string">"0"</span>,</span><br><span class="line"><span class="attr">"index"</span>: <span class="string">"customer"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"status"</span>: <span class="number">409</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时线程二只能重新查询一次数据，然后再更新，跟 CAS 相似。</p><h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><p>前面的 POST 和 PUT 均可以新增和更新文档。但是如果我们希望明确的指定更新文档，则可以使用 _update 请求。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ POST http://localhost:9200/customer/external/1/_update</span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"doc"</span>: &#123;             <span class="comment"># 嵌套的 doc 属性</span></span><br><span class="line">      <span class="string">"name"</span>:<span class="string">"John Doe"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"_index"</span>: <span class="string">"customer"</span>,</span><br><span class="line"><span class="attr">"_type"</span>: <span class="string">"external"</span>,</span><br><span class="line"><span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"_version"</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">"result"</span>: <span class="string">"noop"</span>,</span><br><span class="line"><span class="attr">"_shards"</span>: &#123;</span><br><span class="line"><span class="attr">"total"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"successful"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"_seq_no"</span>: <span class="number">9</span>,</span><br><span class="line"><span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重复请求，则返回成功，但是没有更新：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"_index"</span>: <span class="string">"customer"</span>,</span><br><span class="line"><span class="attr">"_type"</span>: <span class="string">"external"</span>,</span><br><span class="line"><span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">"_version": 4,          # 不变</span><br><span class="line">"result": "noop",       # 表示没有操作</span><br><span class="line">"_shards": &#123;</span><br><span class="line">"total": 0,</span><br><span class="line">"successful": 0,</span><br><span class="line">"failed": 0</span><br><span class="line">&#125;,</span><br><span class="line">"_seq_no": 9,           # 不变</span><br><span class="line">"_primary_term": 1      # 不变</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_update</code> 请求必须嵌套一层 doc 属性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ POST http://localhost:9200/customer/external/1/_update</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"John Doe"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"error"</span>: &#123;</span><br><span class="line"><span class="attr">"root_cause"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line"><span class="attr">"reason"</span>: <span class="string">"[1]: version conflict, required seqNo [8], primary term [1]. current document has seqNo [9] and primary term [1]"</span>,</span><br><span class="line"><span class="attr">"index_uuid"</span>: <span class="string">"2dqEzaASRGWaJBIpVgMqvg"</span>,</span><br><span class="line"><span class="attr">"shard"</span>: <span class="string">"0"</span>,</span><br><span class="line"><span class="attr">"index"</span>: <span class="string">"customer"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line"><span class="attr">"reason"</span>: <span class="string">"[1]: version conflict, required seqNo [8], primary term [1]. current document has seqNo [9] and primary term [1]"</span>,</span><br><span class="line"><span class="attr">"index_uuid"</span>: <span class="string">"2dqEzaASRGWaJBIpVgMqvg"</span>,</span><br><span class="line"><span class="attr">"shard"</span>: <span class="string">"0"</span>,</span><br><span class="line"><span class="attr">"index"</span>: <span class="string">"customer"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"status"</span>: <span class="number">409</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><p>DELETE 请求用来删除文档。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ DELETE http://localhost:9200/customer/external/1</span><br></pre></td></tr></table></figure><p>响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"_index"</span>: <span class="string">"customer"</span>,</span><br><span class="line"><span class="attr">"_type"</span>: <span class="string">"external"</span>,</span><br><span class="line"><span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"_version"</span>: <span class="number">5</span>,</span><br><span class="line"><span class="attr">"result"</span>: <span class="string">"deleted"</span>,</span><br><span class="line"><span class="attr">"_shards"</span>: &#123;</span><br><span class="line"><span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"_seq_no"</span>: <span class="number">10</span>,</span><br><span class="line"><span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次查找，提示数据不存在：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ GET http://localhost:9200/customer/external/1</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_index"</span>: <span class="string">"customer"</span>,</span><br><span class="line"><span class="string">"_type"</span>: <span class="string">"external"</span>,</span><br><span class="line"><span class="string">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="string">"found"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以可以来删除整个索引：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询所有索引，存在 customer</span></span><br><span class="line">$ curl http://localhost:9200/_cat/indices </span><br><span class="line">green  open .kibana_task_manager_1       GfxC_x2NQIGGkUEnhlFugA 1 0     2 0 31.5kb 31.5kb</span><br><span class="line">green  open kibana_sample_data_ecommerce 6IRUVk8qRKCO4p8DD5r0tw 1 0  4675 0  4.7mb  4.7mb</span><br><span class="line">green  open .apm-agent-configuration     Su0kz7ljSSW6GkIoUtddug 1 0     0 0   283b   283b</span><br><span class="line">green  open kibana_sample_data_logs      7DeKSAJ3T3KFhm48WEE14A 1 0 14074 0 11.7mb 11.7mb</span><br><span class="line">green  open kibana_sample_data_flights   d_Dw3tLzSWSEqSaL7ziGbw 1 0 13059 0  6.3mb  6.3mb</span><br><span class="line">green  open .kibana_1                    TYaPkgSGRyGhWdg657t4Cg 1 0   158 6    1mb    1mb</span><br><span class="line">yellow open customer                     OUgakvzFRHyZPp0ZmuKlQw 1 1     1 0   230b   230b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 customer 索引</span></span><br><span class="line">$ DELETE http://localhost:9200/customer</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"acknowledged"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有索引，不存在 customer</span></span><br><span class="line">$ curl http://localhost:9200/_cat/indices </span><br><span class="line">green  open .kibana_task_manager_1       GfxC_x2NQIGGkUEnhlFugA 1 0     2 0 31.5kb 31.5kb</span><br><span class="line">green  open kibana_sample_data_ecommerce 6IRUVk8qRKCO4p8DD5r0tw 1 0  4675 0  4.7mb  4.7mb</span><br><span class="line">green  open .apm-agent-configuration     Su0kz7ljSSW6GkIoUtddug 1 0     0 0   283b   283b</span><br><span class="line">green  open kibana_sample_data_logs      7DeKSAJ3T3KFhm48WEE14A 1 0 14074 0 11.7mb 11.7mb</span><br><span class="line">green  open kibana_sample_data_flights   d_Dw3tLzSWSEqSaL7ziGbw 1 0 13059 0  6.3mb  6.3mb</span><br><span class="line">green  open .kibana_1                    TYaPkgSGRyGhWdg657t4Cg 1 0   158 6    1mb    1mb</span><br></pre></td></tr></table></figure><blockquote><p>Elasticsearch 没有提供删除 type（类型）的操作。</p></blockquote><h2 id="批量-API"><a href="#批量-API" class="headerlink" title="批量 API"></a>批量 API</h2><p>Elasticserch 使用 <code>_bulk</code> 来做批量操作，语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ POST http://localhost:9200/customer/external/_bulk</span><br><span class="line"></span><br><span class="line">&#123;action: &#123;metadata&#125;&#125; \n</span><br><span class="line">&#123;request body&#125; \n</span><br><span class="line">&#123;action: &#123;metadata&#125;&#125; \n</span><br><span class="line">&#123;request body&#125; \n</span><br></pre></td></tr></table></figure><h4 id="批量新增"><a href="#批量新增" class="headerlink" title="批量新增"></a>批量新增</h4><p>批量新增，不指定 Id。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">POST /customer/external/_bulk</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"123"</span>&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"456"</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"took"</span> : 8,                             <span class="comment"># 花费了8ms</span></span><br><span class="line">  <span class="string">"errors"</span> : <span class="literal">false</span>,                       <span class="comment"># 没有发生任何错误</span></span><br><span class="line">  <span class="string">"items"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"customer"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"external"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"oAXvG3kBh2g-jSNWkmM_"</span>,   <span class="comment"># 第一条记录Id</span></span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 3,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"customer"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"external"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"oQXvG3kBh2g-jSNWkmM_"</span>,   <span class="comment"># 第二条记录Id</span></span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 4,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /customer/external/oAXvG3kBh2g-jSNWkmM_</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">"customer"</span>,</span><br><span class="line">  <span class="string">"_type"</span> : <span class="string">"external"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"oAXvG3kBh2g-jSNWkmM_"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : 1,</span><br><span class="line">  <span class="string">"_seq_no"</span> : 2,</span><br><span class="line">  <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">  <span class="string">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"_source"</span> : &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"123"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>批量新增，指定 Id。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">POST /customer/external/_bulk</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_id"</span>: <span class="string">"1"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"123"</span>&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_id"</span>: <span class="string">"2"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"456"</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"took"</span> : 99,</span><br><span class="line">  <span class="string">"errors"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"items"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"customer"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"external"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 3,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"updated"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 5,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 200</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span> : &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"customer"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"external"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"2"</span>,</span><br><span class="line">        <span class="string">"_version"</span> : 1,</span><br><span class="line">        <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="string">"_shards"</span> : &#123;</span><br><span class="line">          <span class="string">"total"</span> : 2,</span><br><span class="line">          <span class="string">"successful"</span> : 1,</span><br><span class="line">          <span class="string">"failed"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_seq_no"</span> : 6,</span><br><span class="line">        <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">        <span class="string">"status"</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /customer/external/2</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">"customer"</span>,</span><br><span class="line">  <span class="string">"_type"</span> : <span class="string">"external"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"2"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : 1,</span><br><span class="line">  <span class="string">"_seq_no"</span> : 6,</span><br><span class="line">  <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">  <span class="string">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"_source"</span> : &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"456"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="批量修改"><a href="#批量修改" class="headerlink" title="批量修改"></a>批量修改</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /customer/external/_bulk</span><br><span class="line"><span class="comment"># 修改操作，重试3次。</span></span><br><span class="line">&#123;<span class="string">"update"</span> : &#123;<span class="string">"_index"</span>: <span class="string">"website"</span>, <span class="string">"_type"</span>: <span class="string">"blog"</span>, <span class="string">"_id"</span>: <span class="string">"123"</span>,<span class="string">"_retry_on_confict"</span>: 3&#125;&#125;</span><br><span class="line"><span class="comment"># 修改内容</span></span><br><span class="line">&#123;<span class="string">"doc"</span> : &#123;<span class="string">"title"</span>: <span class="string">"My update blog post"</span>&#125;&#125;</span><br><span class="line"><span class="comment"># 修改操作，重试3次。</span></span><br><span class="line">&#123;<span class="string">"update"</span> : &#123;<span class="string">"_index"</span>: <span class="string">"website"</span>, <span class="string">"_type"</span>: <span class="string">"blog"</span>, <span class="string">"_id"</span>: <span class="string">"123"</span>,<span class="string">"_retry_on_confict"</span>: 3&#125;&#125;</span><br><span class="line"><span class="comment"># 修改内容</span></span><br><span class="line">&#123;<span class="string">"doc"</span> : &#123;<span class="string">"title"</span>: <span class="string">"My update blog post"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /customer/external/_bulk</span><br><span class="line">&#123;<span class="string">"delete"</span> : <span class="string">"_index"</span>, <span class="string">"website"</span>, <span class="string">"_type"</span>: <span class="string">"blog"</span>, <span class="string">"_id"</span>: <span class="string">"123"</span>&#125;</span><br><span class="line">&#123;<span class="string">"delete"</span> : <span class="string">"_index"</span>, <span class="string">"website"</span>, <span class="string">"_type"</span>: <span class="string">"blog"</span>, <span class="string">"_id"</span>: <span class="string">"123"</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="混合操作"><a href="#混合操作" class="headerlink" title="混合操作"></a>混合操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /customer/external/_bulk</span><br><span class="line"><span class="comment"># 删除操作</span></span><br><span class="line">&#123;<span class="string">"delete"</span> : <span class="string">"_index"</span>, <span class="string">"website"</span>, <span class="string">"_type"</span>: <span class="string">"blog"</span>, <span class="string">"_id"</span>: <span class="string">"123"</span>&#125;</span><br><span class="line"><span class="comment"># 创建操作，和 index 类似</span></span><br><span class="line">&#123;<span class="string">"create"</span> : &#123;<span class="string">"_index"</span>, <span class="string">"website"</span>, <span class="string">"_type"</span>: <span class="string">"blog"</span>, <span class="string">"_id"</span>: <span class="string">"123"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"title"</span>  : <span class="string">"My First blog post"</span>&#125;</span><br><span class="line"><span class="comment"># 创建操作</span></span><br><span class="line">&#123;<span class="string">"index"</span>  : &#123;<span class="string">"_index"</span>, <span class="string">"website"</span>, <span class="string">"_type"</span>: <span class="string">"blog"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"title"</span>  : <span class="string">"My Second blog post"</span>&#125;</span><br><span class="line"><span class="comment"># 修改操作，重试3次。</span></span><br><span class="line">&#123;<span class="string">"update"</span> : &#123;<span class="string">"_index"</span>: <span class="string">"website"</span>, <span class="string">"_type"</span>: <span class="string">"blog"</span>, <span class="string">"_id"</span>: <span class="string">"123"</span>,<span class="string">"_retry_on_confict"</span>: 3&#125;&#125;</span><br><span class="line"><span class="comment"># 修改内容</span></span><br><span class="line">&#123;<span class="string">"doc"</span> : &#123;<span class="string">"title"</span>: <span class="string">"My update blog post"</span>&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Elasticsearch 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 进阶检索</title>
      <link href="/2021/04/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Elasticsearch%20%E6%95%99%E7%A8%8B/Elasticsearch%20%E8%BF%9B%E9%98%B6%E6%A3%80%E7%B4%A2/"/>
      <url>/2021/04/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Elasticsearch%20%E6%95%99%E7%A8%8B/Elasticsearch%20%E8%BF%9B%E9%98%B6%E6%A3%80%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="样本测试数据"><a href="#样本测试数据" class="headerlink" title="样本测试数据"></a>样本测试数据</h2><p>Elasticsearch 准备了一份顾客银行账户信息的虚构的 <a href="https://gitee.com/ufo360/picgo2/raw/master/accounts.json">JSON 文档样本</a>。每个文档都有下列的 schema（模式）:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"account_number"</span>: <span class="number">0</span>,</span><br><span class="line">   <span class="attr">"balance"</span>: <span class="number">16623</span>,</span><br><span class="line">   <span class="attr">"firstname"</span>: <span class="string">"Bradshaw"</span>,</span><br><span class="line">   <span class="attr">"lastname"</span>: <span class="string">"Mckenzie"</span>,</span><br><span class="line">   <span class="attr">"age"</span>: <span class="number">29</span>,</span><br><span class="line">   <span class="attr">"gender"</span>: <span class="string">"F"</span>,</span><br><span class="line">   <span class="attr">"address"</span>: <span class="string">"244 Columbus Place"</span>, <span class="attr">"employer"</span>: <span class="string">"Euron"</span>,</span><br><span class="line">   <span class="attr">"email"</span>: <span class="string">"bradshawmckenzie@euron.com"</span>, <span class="attr">"city"</span>: <span class="string">"Hobucken"</span>,</span><br><span class="line">   <span class="attr">"state"</span>: <span class="string">"CO"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将这份数据导入到 Elasticsearch 中。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210503143906.png" alt=""></p><h2 id="Search-API"><a href="#Search-API" class="headerlink" title="Search API"></a>Search API</h2><p>ES 支持两种基本方式检索 :</p><ol><li>一个是通过使用 REST Request URI 发送搜索参数（URL + 检索参数）</li><li>一个是通过使用 REST Request Body 来发送它们（URL + 请求体）</li></ol><h4 id="REST-Request-URI"><a href="#REST-Request-URI" class="headerlink" title="REST Request URI"></a>REST Request URI</h4><p>检索 bank 下所有信息，包括 type 和 docs：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 0,                       # 执行搜索的时间（毫秒）</span><br><span class="line">  &quot;timed_out&quot; : false,              # 告诉我们搜索是否超时</span><br><span class="line">  &quot;_shards&quot; : &#123;                     # 告诉我们多少个分片被搜索了，以及统计了成功/失败的搜索分片</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;                        # 搜索结果</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 1000,               # 总数</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;             # </span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,              # 最高得分（全文检索用）</span><br><span class="line">    &quot;hits&quot; : [                      # 实际的搜索结果数组（默认为前 10 的文档）</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;bank&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;customer&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,             # 相关性得分（全文检索用）</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;account_number&quot; : 1,</span><br><span class="line">          &quot;balance&quot; : 39225,</span><br><span class="line">          &quot;firstname&quot; : &quot;Amber&quot;,</span><br><span class="line">          &quot;lastname&quot; : &quot;Duke&quot;,</span><br><span class="line">          &quot;age&quot; : 32,</span><br><span class="line">          &quot;gender&quot; : &quot;M&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;880 Holmes Lane&quot;,</span><br><span class="line">          &quot;employer&quot; : &quot;Pyrami&quot;,</span><br><span class="line">          &quot;email&quot; : &quot;amberduke@pyrami.com&quot;,</span><br><span class="line">          &quot;city&quot; : &quot;Brogan&quot;,</span><br><span class="line">          &quot;state&quot; : &quot;IL&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;bank&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;customer&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;6&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;account_number&quot; : 6,</span><br><span class="line">          &quot;balance&quot; : 5686,</span><br><span class="line">          &quot;firstname&quot; : &quot;Hattie&quot;,</span><br><span class="line">          &quot;lastname&quot; : &quot;Bond&quot;,</span><br><span class="line">          &quot;age&quot; : 36,</span><br><span class="line">          &quot;gender&quot; : &quot;M&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;671 Bristol Street&quot;,</span><br><span class="line">          &quot;employer&quot; : &quot;Netagy&quot;,</span><br><span class="line">          &quot;email&quot; : &quot;hattiebond@netagy.com&quot;,</span><br><span class="line">          &quot;city&quot; : &quot;Dante&quot;,</span><br><span class="line">          &quot;state&quot; : &quot;TN&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带上参数的请求方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search?q=*&amp;sort=account_number:asc</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 9,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 1000,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;bank&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;customer&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;0&quot;,</span><br><span class="line">        &quot;_score&quot; : null,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;account_number&quot; : 0,</span><br><span class="line">          &quot;balance&quot; : 16623,</span><br><span class="line">          &quot;firstname&quot; : &quot;Bradshaw&quot;,</span><br><span class="line">          &quot;lastname&quot; : &quot;Mckenzie&quot;,</span><br><span class="line">          &quot;age&quot; : 29,</span><br><span class="line">          &quot;gender&quot; : &quot;F&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;244 Columbus Place&quot;,</span><br><span class="line">          &quot;employer&quot; : &quot;Euron&quot;,</span><br><span class="line">          &quot;email&quot; : &quot;bradshawmckenzie@euron.com&quot;,</span><br><span class="line">          &quot;city&quot; : &quot;Hobucken&quot;,</span><br><span class="line">          &quot;state&quot; : &quot;CO&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot; : [                  # 结果的排序 key（键）（没有则按 score 排序）</span><br><span class="line">          0</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;bank&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;customer&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : null,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;account_number&quot; : 1,</span><br><span class="line">          &quot;balance&quot; : 39225,</span><br><span class="line">          &quot;firstname&quot; : &quot;Amber&quot;,</span><br><span class="line">          &quot;lastname&quot; : &quot;Duke&quot;,</span><br><span class="line">          &quot;age&quot; : 32,</span><br><span class="line">          &quot;gender&quot; : &quot;M&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;880 Holmes Lane&quot;,</span><br><span class="line">          &quot;employer&quot; : &quot;Pyrami&quot;,</span><br><span class="line">          &quot;email&quot; : &quot;amberduke@pyrami.com&quot;,</span><br><span class="line">          &quot;city&quot; : &quot;Brogan&quot;,</span><br><span class="line">          &quot;state&quot; : &quot;IL&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot; : [</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="REST-Request-Body"><a href="#REST-Request-Body" class="headerlink" title="REST Request Body"></a>REST Request Body</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 5,</span><br><span class="line">  &quot;sort&quot;: &#123;</span><br><span class="line">    &quot;account_number&quot;: &#123;</span><br><span class="line">      &quot;order&quot; : &quot;desc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>REST Request Body 使用到了 Query DSL。</p><h2 id="Query-DSL"><a href="#Query-DSL" class="headerlink" title="Query DSL"></a>Query DSL</h2><p>Elasticsearch 提供了一个可以执行查询的 JSON 风格的 DSL（domain-specific language 领域特定语言）。这个被称为 Query DSL。该查询语言非常全面，并且刚开始的时候感觉有点复杂，真正学好它的方法是从一些基础的示例开始的。</p><p>一个查询语句的典型结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   QUERY_NAME: &#123;</span><br><span class="line">      ARGUMENT: VALUE, </span><br><span class="line">      ARGUMENT: VALUE,</span><br><span class="line">      ... </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是针对某个字段，那么它的结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   QUERY_NAME: &#123;</span><br><span class="line">      FIELD_NAME: &#123;</span><br><span class="line">         ARGUMENT: VALUE, </span><br><span class="line">         ARGUMENT: VALUE,</span><br><span class="line">         ... </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;                        # 定义如何查询</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;                 # 查询类型【代表查询所有的所有】，es 中可以在 query 中组合非常多的查询类型完成复杂查询</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 0,                        # 除了 query 参数之外，我们也可以传递其它的参数以改变查询结果。如 sort，from + size 限定，完成分页功能</span><br><span class="line">  &quot;size&quot;: 5,</span><br><span class="line">  &quot;sort&quot;: &#123;                         # sort 排序，多字段排序，会在前序字段相等时后续字段内部排序，否则以前序为准</span><br><span class="line">    &quot;account_number&quot;: &#123;</span><br><span class="line">      &quot;order&quot; : &quot;desc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 1,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 1000,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;bank&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;customer&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;999&quot;,</span><br><span class="line">        &quot;_score&quot; : null,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;account_number&quot; : 999,</span><br><span class="line">          &quot;balance&quot; : 6087,</span><br><span class="line">          &quot;firstname&quot; : &quot;Dorothy&quot;,</span><br><span class="line">          &quot;lastname&quot; : &quot;Barron&quot;,</span><br><span class="line">          &quot;age&quot; : 22,</span><br><span class="line">          &quot;gender&quot; : &quot;F&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;499 Laurel Avenue&quot;,</span><br><span class="line">          &quot;employer&quot; : &quot;Xurban&quot;,</span><br><span class="line">          &quot;email&quot; : &quot;dorothybarron@xurban.com&quot;,</span><br><span class="line">          &quot;city&quot; : &quot;Belvoir&quot;,</span><br><span class="line">          &quot;state&quot; : &quot;CA&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot; : [</span><br><span class="line">          999</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;bank&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;customer&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;998&quot;,</span><br><span class="line">        &quot;_score&quot; : null,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;account_number&quot; : 998,</span><br><span class="line">          &quot;balance&quot; : 16869,</span><br><span class="line">          &quot;firstname&quot; : &quot;Letha&quot;,</span><br><span class="line">          &quot;lastname&quot; : &quot;Baker&quot;,</span><br><span class="line">          &quot;age&quot; : 40,</span><br><span class="line">          &quot;gender&quot; : &quot;F&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;206 Llama Court&quot;,</span><br><span class="line">          &quot;employer&quot; : &quot;Dognosis&quot;,</span><br><span class="line">          &quot;email&quot; : &quot;lethabaker@dognosis.com&quot;,</span><br><span class="line">          &quot;city&quot; : &quot;Dunlo&quot;,</span><br><span class="line">          &quot;state&quot; : &quot;WV&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot; : [</span><br><span class="line">          998</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匹配查询「match」"><a href="#匹配查询「match」" class="headerlink" title="匹配查询「match」"></a>匹配查询「match」</h4><p><code>match</code> 能够对字段进行匹配查询。</p><p><strong>1. 基本类型（非字符串），精确匹配</strong></p><p>查询出 <code>account_number</code> = 20 的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;account_number&quot;: &quot;20&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 字符串，全文检索</strong></p><p><code>match</code> 当搜索字符串类型的时候，会进行全文检索，并且每条记录有相关性得分。</p><p>查询出 <code>address</code> 中包含 <code>mill</code> 单词的所有记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &quot;mill&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3. 字符串，多个单词（分词 + 全文检索）</strong></p><p>查询出 <code>address</code> 中包含 <code>mill</code> 或者 <code>road</code> 或者 <code>mill road</code> 的所有记录，并给出相关性得分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &quot;mill road&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 短语匹配「match_phrase」</strong></p><p>将需要匹配的值当成一个整体单词（不分词）进行检索。</p><p>查出 <code>address</code> 中包含<code>mill road</code> 的所有记录，并给出相关性得分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &quot;mill road&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. 多字段匹配「multi_match」</strong></p><p>查询 <code>state</code> 或者 <code>address</code> 包含 <code>mill</code> 的记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;mill&quot;,</span><br><span class="line">      &quot;fields&quot;: [&quot;state&quot;, &quot;address&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6. term</strong></p><p>和 <code>match</code> 一样。匹配某个属性的值。全文检索字段用 <code>match</code>，其他非 <code>text</code> 字段匹配用 <code>term</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: &#123;</span><br><span class="line">              &quot;value&quot;: &quot;28&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;address&quot;: &quot;990 Mill Road&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复合查询「bool」"><a href="#复合查询「bool」" class="headerlink" title="复合查询「bool」"></a>复合查询「bool」</h4><p><code>bool</code> 用来做复合查询，它可以合并任何其它查询语句，包括复合语句。了解这一点是很重要的，这就意味着复合语句之间可以互相嵌套，可以表达非常复杂的逻辑。</p><div class="table-container"><table><thead><tr><th style="text-align:left">事件</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left">must</td><td>子句（查询）必须出现在匹配的文档中，并将有助于得分。</td></tr><tr><td style="text-align:left">must_not</td><td>子句（查询）不能出现在匹配的文档中。</td></tr><tr><td style="text-align:left">should</td><td>子句（查询）应该出现在匹配的文档中，并将有助于得分。</td></tr><tr><td style="text-align:left">filter</td><td>子句（查询）必须出现在匹配的文档中，并将无助于得分。</td></tr></tbody></table></div><p><strong>1. must：必须达到列举的所有条件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;address&quot;: &quot;mill&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;gender&quot;: &quot;M&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. must_not：必须不是指定的情况</strong></p><p><code>address</code> 包含 <code>mill</code>，并且 <code>gender</code> 是 <code>M</code>，如果 <code>address</code> 里面有 <code>lane</code> 最好不过，但是 <code>email</code> 必须不包含 <code>baluba.com</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;address&quot;: &quot;mill&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;gender&quot;: &quot;M&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ], </span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;address&quot;: &quot;lane&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ], </span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;email&quot;: &quot;baluba.com&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. should：应该达到列举的条件，如果达到会增加相关文档的评分</strong><br><code>should</code> 并不会改变查询的结果。如果 query 中只有 <code>should</code> 且只有一种匹配规则，那么 <code>should</code> 的条件就会被作为默认匹配条件而去改变查询结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;address&quot;: &quot;mill&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;gender&quot;: &quot;M&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ], </span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;address&quot;: &quot;lane&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. filter：结果过滤</strong><br>并不是所有的查询都需要产生分数，特别是那些仅用于 “filtering”（过滤）的文档。为了不计算分数 Elasticsearch 会自动检查场景并且优化查询的执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;address&quot;: &quot;mill&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ], </span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">          &quot;balance&quot;: &#123;</span><br><span class="line">            &quot;gte&quot;: 10000, </span><br><span class="line">            &quot;lte&quot;: 20000</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Elasticsearch 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 聚合检索</title>
      <link href="/2021/04/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Elasticsearch%20%E6%95%99%E7%A8%8B/Elasticsearch%20%E8%81%9A%E5%90%88%E6%A3%80%E7%B4%A2/"/>
      <url>/2021/04/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Elasticsearch%20%E6%95%99%E7%A8%8B/Elasticsearch%20%E8%81%9A%E5%90%88%E6%A3%80%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Elasticsearch 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 映射关系</title>
      <link href="/2021/04/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Elasticsearch%20%E6%95%99%E7%A8%8B/Elasticsearch%20%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2021/04/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Elasticsearch%20%E6%95%99%E7%A8%8B/Elasticsearch%20%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h2><p>在 ES 中，字段的类型很关键：</p><ol><li>在索引的时候，如果字段第一次出现，会自动识别某个类型；</li><li>那么如果一个字段已经存在了，并且设置为某个类型。再来一条数据，字段的数据不与当前的类型相符，就会出现字段冲突的问题。如果发生了冲突，在 2.x 版本会自动拒绝；</li><li>如果自动映射无法满足需求，就需要使用者自己来设置映射类型，因此，就需要使用者了解 ES 中的类型；</li></ol><h4 id="字段中的索引和存储"><a href="#字段中的索引和存储" class="headerlink" title="字段中的索引和存储"></a>字段中的索引和存储</h4><p><code>index</code> 定义字段的分析类型以及检索方式：</p><ol><li>如果是 <code>no</code>，则无法通过检索查询到该字段；</li><li>如果设置为 <code>analyzed</code> 则将会通过默认的 standard 分析器进行分析。</li><li>如果设置为 <code>not_analyzed</code> 则会将整个字段存储为关键词，常用于 Id、汉字短语、邮箱等复杂的字符串；</li></ol><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><p>字符串类型，es中最常用的类型。比较重要的参数：</p><ol><li><code>index</code> 分析<br><code>analyzed</code>（默认）<br><code>not_analyzed</code> 设置为该值可以保证该字段能通过检索查询到<br><code>no</code></li><li><code>store</code> 存储<br><code>true</code> 独立存储<br><code>false</code>（默认）不存储，从 <code>_source</code> 中解析</li></ol><h2 id="numeric"><a href="#numeric" class="headerlink" title="numeric"></a>numeric</h2><p>数值类型，注意 numeric 并不是一个类型，它包括多种类型，比如：<code>long</code>、<code>integer</code>、<code>short</code>、<code>byte</code>、<code>double</code>、<code>float</code>，每种的存储空间都是不一样的，一般默认推荐 <code>integer</code> 和 <code>float</code>。</p><p>重要的参数：</p><ol><li><code>index</code> 分析<br><code>not_analyzed</code>（默认），设置为该值可以保证该字段能通过检索查询到<br><code>no</code></li><li><code>store</code> 存储<br><code>true</code> 独立存储<br><code>false</code>（默认）不存储，从 <code>_source</code> 中解析</li></ol><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><p>日期类型，该类型可以接受一些常见的日期表达方式。</p><p>重要的参数：</p><ol><li><code>index</code> 分析<br><code>not_analyzed</code>（默认），设置为该值可以保证该字段能通过检索查询到<br><code>no</code></li><li><code>store</code> 存储<br><code>true</code> 独立存储<br><code>false</code>（默认）不存储，从 <code>_source</code> 中解析</li><li><code>format</code> 格式化<br><code>epoch_millis</code>（默认）<br><code>strict_date_optional_time</code></li></ol><p>我们也可以自定义格式化内容，例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"date": &#123;</span><br><span class="line">  "type":   "date",</span><br><span class="line">  "format": "yyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h4><p>这个类型可以用来标识IPV4的地址。</p><p>重要的参数：</p><ol><li><code>index</code> 分析<br><code>not_analyzed</code>（默认），设置为该值可以保证该字段能通过检索查询到<br><code>no</code></li><li><code>store</code> 存储<br><code>true</code> 独立存储<br><code>false</code>（默认）不存储，从 <code>_source</code> 中解析</li></ol><h4 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h4><p>布尔类型，所有的类型都可以标识布尔类型：</p><ol><li><code>True</code>: 所有非 <code>False</code> 的都是 <code>True</code></li><li><code>False</code>: 表示该值的有:<code>false</code>、<code>&quot;false&quot;</code>、<code>&quot;off&quot;</code>、<code>&quot;no&quot;</code>、<code>&quot;0&quot;</code>、<code>&quot;&quot;</code>、<code>0</code>、<code>0.0</code></li></ol><p>重要的参数：</p><ol><li><code>index</code> 分析<br><code>not_analyzed</code>（默认），设置为该值可以保证该字段能通过检索查询到<br><code>no</code></li><li><code>store</code> 存储<br><code>true</code> 独立存储<br><code>false</code>（默认）不存储，从 <code>_source</code> 中解析</li></ol><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p><code>mapping</code> 是用来定义一个文档（<code>document</code>），以及它所包含的属性（<code>field</code>）是如何存储和索引的。比如，使用 <code>mapping</code> 来定义：</p><ol><li>哪些字符串属性应该被看做全文本属性（full text fields）；</li><li>哪些属性包含数字，日期或者地理位置；</li><li>文档中的所有属性是否都能被索引（<code>_all</code> 配置）；</li><li>日期的格式；</li><li>自定义映射规则来执行动态添加属性。</li></ol><h4 id="查看-mapping-信息"><a href="#查看-mapping-信息" class="headerlink" title="查看 mapping 信息"></a>查看 mapping 信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_mapping</span><br></pre></td></tr></table></figure><p>相应数据：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"bank"</span> : &#123;</span><br><span class="line">    <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">      <span class="attr">"properties"</span> : &#123;</span><br><span class="line">        <span class="attr">"account_number"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"address"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"age"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建-mapping-信息"><a href="#创建-mapping-信息" class="headerlink" title="创建 mapping 信息"></a>创建 mapping 信息</h4><p><strong>1. 创建索引并指定映射</strong><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT /my-index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"age"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"integer"</span></span><br><span class="line">      &#125;, </span><br><span class="line">      <span class="attr">"email"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">      &#125;, </span><br><span class="line">      <span class="attr">"name"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"acknowledged"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"shards_acknowledged"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"index"</span> : <span class="string">"my-index"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 添加新的字段映射</strong><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /my-index/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"employee-id"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"keyword"</span>, </span><br><span class="line">      <span class="attr">"index"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"acknowledged"</span> : <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="更新-mapping-信息"><a href="#更新-mapping-信息" class="headerlink" title="更新 mapping 信息"></a>更新 mapping 信息</h4><p>对于已经存在的映射字段，我们不能更新。更新必须创建新的索引进行数据迁移。</p><h4 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h4><p>先创建出一个新的索引的正确映射：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUT /new-index</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后使用 <code>_reindex</code> 进行数据迁移：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST _reindex</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"source"</span>: &#123;</span><br><span class="line">      <span class="attr">"index"</span>: <span class="string">"my-index"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">""</span>            # 旧版本 ES 的 type 类型 例如：在 bank/customer 中，cusomter 就是 type</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"dest"</span>: &#123;</span><br><span class="line">      <span class="attr">"index"</span>: <span class="string">"new-index"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Elasticsearch 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 分词器</title>
      <link href="/2021/04/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Elasticsearch%20%E6%95%99%E7%A8%8B/Elasticsearch%20%E5%88%86%E8%AF%8D%E5%99%A8/"/>
      <url>/2021/04/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Elasticsearch%20%E6%95%99%E7%A8%8B/Elasticsearch%20%E5%88%86%E8%AF%8D%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>tokenizer（分词器）接收一个字符流，将之分割为独立的 tokens（词元，通常是独立的单词），然后输出 tokens 流。</p><p>例如，whitespace tokenizer 遇到空白字符时分割文本，它会将文本 “Quick brown fox!” 分割为 [Quick, brown, fox!]。</p><p>tokenizer 还负责记录各个 term（词条）的顺序或 position（位置）（用于 phrase（短语）和 word proximity（词近邻查询）），以及 term（词条）所代表的原始 word（单词）的 start（起始）和 end（结束）的 character offsets（字符偏移量）（用于高亮显示搜索的内容）。</p><p>Elasticsearch 提供了很多内置的分词器，可以用来构建 custom analyzers。</p><h2 id="standard-tokenizer"><a href="#standard-tokenizer" class="headerlink" title="standard tokenizer"></a>standard tokenizer</h2><p>standard tokenizer 是 Elasticsearch 提供的默认分词器，它可以将一段英文文本按照空格分词，并去掉末尾符号。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  "analyzer": "standard",  # 使用 standard tokenizer</span><br><span class="line">  "text": "hello world!"   # 要分词的文本</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"hello"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"world"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">11</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是 standard tokenizer 无法处理中文分词，它会把每一个中文当作一个分词：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"分词器接收一个字符"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"分"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;IDEOGRAPHIC&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"词"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;IDEOGRAPHIC&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"器"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;IDEOGRAPHIC&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ik-分词器"><a href="#ik-分词器" class="headerlink" title="ik 分词器"></a>ik 分词器</h2><p>ik 分词器对中文具有良好支持。要安装 ik 分词器，我们只需要到 <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a> 下载跟 Elasticsearch 对应的版本，然后解压到 Elasticsearch 的 plugins 目录下即可。</p><p>判断是否安装成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 Elasticsearch 容器后，执行命令</span></span><br><span class="line">[root@28e6018cc390 elasticsearch]<span class="comment"># bin/elasticsearch-plugin list</span></span><br><span class="line">ik-7.4.2</span><br></pre></td></tr></table></figure></p><p>注意：MacOS 系统要移除掉 .DS_Store 目录，否则会抛异常 <code>Exception in thread &quot;main&quot; java.nio.file.FileSystemException: /usr/share/elasticsearch/plugins/.DS_Store/plugin-descriptor.properties: Not a directory</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls -a</span><br><span class="line">.DS_Storeik-7.4.2</span><br><span class="line"></span><br><span class="line">$ rm -rf .DS_Store</span><br></pre></td></tr></table></figure><p>最后，重启一下 Elasticsearch。</p><p>ik 提供了 <code>ik_smart</code> 和 <code>ik_max_word</code> 两种分词器。</p><h4 id="config-分析"><a href="#config-分析" class="headerlink" title="config 分析"></a>config 分析</h4><p>在 ik 的 config 目录下，有几个文件。</p><ol><li>IKAnalyzer.cfg.xml：用来配置自定义词库</li><li>main.dic：ik原生内置的中文词库，总共有27万多条，只要是这些单词，都会被分在一起</li><li>quantifier.dic：存放了一些单位相关的词</li><li>suffix.dic：存放了一些后缀</li><li>surname.dic：中国的姓氏</li><li>stopword.dic：英文停用词</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210505101256.png" alt=""></p><p>其中最常用的两个：</p><ol><li>main.dic：包含了原生的中文词语，会按照这个里面的词语去分词,只要是这些单词，都会被分在一起</li><li>stopword.dic：包含了英文的停用词 ( 停用词 stop word ,比如 a 、the 、and、 at 、but 等 . 通常像停用词，会在分词的时候，直接被干掉，不会建立在倒排索引中 )</li></ol><h4 id="测试-ik-smart-分词"><a href="#测试-ik-smart-分词" class="headerlink" title="测试 ik_smart 分词"></a>测试 ik_smart 分词</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /my-index/_mapping</span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"ik_smart"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"我是中国人"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"我"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"是"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"中国人"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-ik-max-word-分词"><a href="#测试-ik-max-word-分词" class="headerlink" title="测试 ik_max_word 分词"></a>测试 ik_max_word 分词</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"我是中国人"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"我"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"是"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"中国人"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"中国"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"国人"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义词库"><a href="#自定义词库" class="headerlink" title="自定义词库"></a>自定义词库</h2><p>有一些特殊的流行词，一般不会在 ik 的原生词典 main.dic 里。</p><p>举个例子，比如2019年很火的 “盘他”，就无法正确解析：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: [&quot;盘他&quot;,&quot;杠精&quot;,&quot;脱粉&quot;],</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"盘"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"他"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到使用ik的 <code>ik_max_word</code> 分词器还是将每个汉字作为一个 <code>term</code>，这个时候去使用这些词语去搜索，效果肯定不是很理想。</p><h4 id="配置本地词库"><a href="#配置本地词库" class="headerlink" title="配置本地词库"></a>配置本地词库</h4><p><strong>1. 新建自定义分词库</strong></p><p>在 config 目录下新建一个 custom 文件夹，然后新建一个文件：artisan.dic。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210505114424.png" alt=""></p><p>将希望不分词的词语放到该文件中，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">盘他</span><br><span class="line">杠精</span><br><span class="line">脱粉</span><br></pre></td></tr></table></figure><p><strong>2. 添加到 ik 的配置文件中</strong></p><p>打开 <code>IKAnalyzer.cfg.xml</code> 文件，在 <code>ext_ditc</code> 节点添加自定义的扩展字典。当然 ik 本身提供的 <code>extra_main.dic</code> 词语更加丰富。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210505114644.png" alt=""></p><p><strong>3. 重启 ES，查看分词</strong><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"text"</span>: [<span class="string">"盘他"</span>,<span class="string">"杠精"</span>,<span class="string">"脱粉"</span>],</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"盘他"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"盘"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"他"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"杠精"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"脱粉"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">8</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，和未添加自定义词典相比，已经可以按照自己指定的规则进行分词了。</p><h4 id="配置远程词库"><a href="#配置远程词库" class="headerlink" title="配置远程词库"></a>配置远程词库</h4><p>部署一个web服务器，提供一个http接口，通过modified和tag两个http响应头，来提供词语的热更新。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210505120557.png" alt=""></p><h4 id="停用自定义词库"><a href="#停用自定义词库" class="headerlink" title="停用自定义词库"></a>停用自定义词库</h4><p>比如了、的、啥、么，我们可能并不想去建立索引，让人家搜索。</p><p><strong>1. 新建自定义停用词词典</strong></p><p>我们在新建的目录 <code>custom</code> 下新建一个文件：<code>artisan_stopword.dic</code>，添加停用词。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210505115414.png" alt=""></p><p><strong>2. 添加到 ik 的配置文件中</strong></p><p>在 <code>ext_stopwords</code> 节点 添加自定义的停用词扩展字典，ik 本身提供的 <code>extra_stopword.dic</code> 这里我们也添加进去吧。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210505115457.png" alt=""></p><p><strong>3. 重启 ES，查看停用词</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210505115942.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不同的分词器，分词有明显的区别，所以以后定义一个索引不能再使用默认的 <code>mapping</code> 了，要手工建立 <code>mapping</code>, 因为要选择分词器。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Elasticsearch 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 防火墙设置</title>
      <link href="/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/"/>
      <url>/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p><code>systemctl</code> 是 CentOS 7 的服务管理工具中主要的工具，它融合之前 <code>service</code> 和 <code>chkconfig</code> 的功能于一体。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动一个服务</span></span><br><span class="line">systemctl start firewalld.service</span><br><span class="line"><span class="comment"># 关闭一个服务</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="comment"># 重启一个服务</span></span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line"><span class="comment"># 显示一个服务的状态</span></span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"><span class="comment"># 在开机时启用一个服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld.service</span><br><span class="line"><span class="comment"># 在开机时禁用一个服务</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line"><span class="comment"># 查看服务是否开机启动</span></span><br><span class="line">systemctl is-enabled firewalld.service</span><br><span class="line"><span class="comment"># 查看已启动的服务列表</span></span><br><span class="line">systemctl list-unit-files|grep enabled</span><br><span class="line"><span class="comment"># 查看启动失败的服务列表</span></span><br><span class="line">systemctl --failed</span><br></pre></td></tr></table></figure><h2 id="firewall基本使用"><a href="#firewall基本使用" class="headerlink" title="firewall基本使用"></a>firewall基本使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status firewalld </span><br><span class="line"><span class="comment"># 开机启用</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br><span class="line"><span class="comment"># 开机禁用</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><h2 id="firewalld-cmd命令"><a href="#firewalld-cmd命令" class="headerlink" title="firewalld-cmd命令"></a>firewalld-cmd命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">firewall-cmd --version</span><br><span class="line"><span class="comment"># 查看帮助</span></span><br><span class="line">firewall-cmd --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 显示状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="comment"># 查看所有打开的端口</span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"><span class="comment"># 更新防火墙规则</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment"># 查看区域信息</span></span><br><span class="line">firewall-cmd --get-active-zones</span><br><span class="line"><span class="comment"># 查看指定接口所属区域</span></span><br><span class="line">firewall-cmd --get-zone-of-interface=eth0</span><br><span class="line"><span class="comment"># 拒绝所有包</span></span><br><span class="line">firewall-cmd --panic-on</span><br><span class="line"><span class="comment"># 取消拒绝状态</span></span><br><span class="line">firewall-cmd --panic-off</span><br><span class="line"><span class="comment"># 查看是否拒绝</span></span><br><span class="line">firewall-cmd --query-panic</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个端口是否开放</span></span><br><span class="line">firewall-cmd --zone=public --query-port=80/tcp</span><br><span class="line"><span class="comment"># 查看所有开启的端口</span></span><br><span class="line">firewall-cmd --permanent --zone=public --list-ports</span><br><span class="line"><span class="comment"># 开启一个端口（--permanent永久生效，没有此参数重启后失效）</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent </span><br><span class="line"><span class="comment"># 关闭一个端口</span></span><br><span class="line">firewall-cmd --zone= public --remove-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个服务是否开放</span></span><br><span class="line">firewall-cmd --zone=public --query-service=https</span><br><span class="line"><span class="comment"># 查看所有开启的服务</span></span><br><span class="line">firewall-cmd --permanent --zone=public --list-services</span><br><span class="line"><span class="comment"># 开启一个服务（--permanent永久生效，没有此参数重启后失效）</span></span><br><span class="line">firewall-cmd --zone=public --add-service=https --permanent</span><br><span class="line"><span class="comment"># 关闭一个服务</span></span><br><span class="line">firewall-cmd --zone=public --remove-service=https --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置（修改后要重新加载配置才生效）</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 整机状态</title>
      <link href="/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E6%95%B4%E6%9C%BA%E7%8A%B6%E6%80%81/"/>
      <url>/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E6%95%B4%E6%9C%BA%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h4 id="uptime-查询平均负载"><a href="#uptime-查询平均负载" class="headerlink" title="uptime 查询平均负载"></a>uptime 查询平均负载</h4><p><code>uptime</code> 命令能够打印系统总共运行了多长时间和系统的平均负载。<code>uptime</code> 命令可以显示的信息显示依次为：现在时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的 1 分钟、5 分钟和 15 分钟内的平均负载。</p><p>系统平均负载是指在特定时间间隔内运行队列中的平均进程数。如果每个 CPU 内核的当前活动进程数不大于 3 的话，那么系统的性能是良好的。如果每个 CPU 内核的任务数大于 5，那么这台机器的性能有严重问题。如果你的 Linux 主机是 1 个双核 CPU 的话，当 load Average 为 6 的时候说明机器已经被充分使用了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10:10                          系统当前时间</span></span><br><span class="line"><span class="comment"># up 3 days, 59 mins             主机已运行时间,时间越大，说明你的机器越稳定。</span></span><br><span class="line"><span class="comment"># 2 users                        用户连接数，是总连接数而不是用户数</span></span><br><span class="line"><span class="comment"># load averages: 2.87 2.50 2.29  系统平均负载，统计最近1，5，15分钟的系统平均负载</span></span><br><span class="line">zhangqinghua$ uptime</span><br><span class="line">10:10  up 3 days, 59 mins, 2 users, load averages: 2.87 2.50 2.29</span><br></pre></td></tr></table></figure><h4 id="top-实时查询系统运行情况"><a href="#top-实时查询系统运行情况" class="headerlink" title="top 实时查询系统运行情况"></a>top 实时查询系统运行情况</h4><p><code>top</code> 命令可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统性能和运行信息的实用工具。通过 <code>top</code> 命令所提供的互动式界面，用热键可以管理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># top - 11:07:27                 当前系统时间</span></span><br><span class="line"><span class="comment"># up 31 days                     系统已经运行了31天</span></span><br><span class="line"><span class="comment"># 2 users                        2个用户当前登录</span></span><br><span class="line"><span class="comment"># load average                   系统负载，统计最近1，5，15分钟的系统平均负载</span></span><br><span class="line"><span class="comment"># Tasks:  82 total               总进程数</span></span><br><span class="line"><span class="comment"># 1 running                      正在运行的进程数</span></span><br><span class="line"><span class="comment"># 81 sleeping                    睡眠的进程数</span></span><br><span class="line"><span class="comment"># 0 stopped                      停止的进程数</span></span><br><span class="line"><span class="comment"># 0 zombie                       冻结进程数</span></span><br><span class="line"><span class="comment"># %Cpu(s)   0.3 us               用户空间占用CPU百分比</span></span><br><span class="line"><span class="comment"># %Cpu(s)   0.5 us               内核空间占用CPU百分比</span></span><br><span class="line"><span class="comment"># %Cpu(s)   0.0 ni               用户进程空间内改变过优先级的进程占用CPU百分比</span></span><br><span class="line"><span class="comment"># %Cpu(s)   99  id               空闲CPU百分比</span></span><br><span class="line"><span class="comment"># %Cpu(s)   0.0 wa               等待输入输出的CPU时间百分比</span></span><br><span class="line"><span class="comment"># %Cpu(s)   0.0 hi               硬中断（Hardware IRQ）占用CPU的百分比</span></span><br><span class="line"><span class="comment"># %Cpu(s)   0.0 si               软中断（Software Interrupts）占用CPU的百分比</span></span><br><span class="line"><span class="comment"># %Cpu(s)   0.0 st               ?</span></span><br><span class="line"><span class="comment"># KiB Mem :  3881692 total       物理内存总量</span></span><br><span class="line"><span class="comment"># KiB Mem :  2273716 used        使用的物理内存总量</span></span><br><span class="line"><span class="comment"># KiB Mem :  157092  free        空闲内存总量</span></span><br><span class="line"><span class="comment"># KiB Mem :  1450884 buff/cache  用作内核缓存的内存量</span></span><br><span class="line"><span class="comment"># KiB Swap:  0 total             交换区总量</span></span><br><span class="line"><span class="comment"># KiB Swap:  0 free              空闲交换区总量</span></span><br><span class="line"><span class="comment"># KiB Swap:  0 used              使用的交换区总量</span></span><br><span class="line"><span class="comment"># KiB Swap:  1331200 avail Mem   代表可用于进程下一次分配的物理内存数量</span></span><br><span class="line"></span><br><span class="line">top - 11:07:27 up 31 days,  2:16,  2 users,  load average: 0.01, 0.30, 0.33</span><br><span class="line">Tasks:  82 total,   1 running,  81 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.3 us,  0.5 sy,  0.0 ni, 99.2 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  3881692 total,   157092 free,  2273716 used,  1450884 buff/cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used.  1331200 avail Mem </span><br><span class="line"></span><br><span class="line"><span class="comment"># PID 进程Id</span></span><br><span class="line"><span class="comment"># USER   进程所有者的用户名</span></span><br><span class="line"><span class="comment"># PR        优先级</span></span><br><span class="line"><span class="comment"># NI        nice值。负值表示高优先级，正值表示低优先级</span></span><br><span class="line"><span class="comment"># VIRT      进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</span></span><br><span class="line"><span class="comment"># RES       进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</span></span><br><span class="line"><span class="comment"># SHR       共享内存大小，单位kb</span></span><br><span class="line"><span class="comment"># S         进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程</span></span><br><span class="line"><span class="comment"># %CPU      上次更新到现在的CPU时间占用百分比</span></span><br><span class="line"><span class="comment"># %MEM      进程使用的物理内存百分比</span></span><br><span class="line"><span class="comment"># TIME+     进程使用的CPU时间总计，单位1/100秒</span></span><br><span class="line"><span class="comment"># COMMAND   命令名/命令行</span></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class="line">29336 root      20   0 3570612 621528  13748 S   3.0 16.0  16:02.36 java</span><br><span class="line">23436 root      20   0 1294092  12612   6860 S   1.0  0.3  12:18.56 staragent-core</span><br><span class="line"> 1052 root      20   0 1005228  16268   3256 S   0.3  0.4  86:54.00 /usr/<span class="built_in">local</span>/clou</span><br><span class="line">32750 root      20   0 3921148 414736  13172 S   0.3 10.7   1:17.68 java</span><br></pre></td></tr></table></figure><p>在 <code>top</code> 命令执行过程中可以使用的一些交互命令：</p><ol><li><code>P</code>   根据CPU使用百分比大小进行排序；</li><li><code>M</code>   根据驻留内存大小进行排序；</li><li><code>T</code>   根据时间/累计时间进行排序；</li><li><code>c</code>   切换显示命令名称和完整命令行；</li><li><code>k</code>   终止一个进程；</li><li><code>q</code>   退出程序；</li></ol><h4 id="查询进程的线程消耗时间排行"><a href="#查询进程的线程消耗时间排行" class="headerlink" title="查询进程的线程消耗时间排行"></a>查询进程的线程消耗时间排行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -m 显示所有的线程</span></span><br><span class="line"><span class="comment"># -p pid 进程使用CPU的时间</span></span><br><span class="line"><span class="comment"># -o 该参数后是用户自定义格式</span></span><br><span class="line">[root@iZwz9cp52a5yqx9b86ehecZ icebartech-mlen]<span class="comment"># ps -mp 29336 -o THREAD,tid,time</span></span><br><span class="line">USER     %CPU PRI SCNT WCHAN  USER SYSTEM   TID     TIME</span><br><span class="line">root      1.1   -    - -         -      -     - 00:18:56</span><br><span class="line">root      0.0  19    - futex_    -      - 29336 00:00:00</span><br><span class="line">root      0.0  19    - futex_    -      - 29337 00:00:24</span><br><span class="line">root      0.0  19    - futex_    -      - 29338 00:00:20</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h4 id="假如生产环境出现-CPU-占用过高，请谈谈你的分析思路和定位？"><a href="#假如生产环境出现-CPU-占用过高，请谈谈你的分析思路和定位？" class="headerlink" title="假如生产环境出现 CPU 占用过高，请谈谈你的分析思路和定位？"></a>假如生产环境出现 CPU 占用过高，请谈谈你的分析思路和定位？</h4><p>需要结合 Linux 和 JDK 命令一块分析。</p><ol><li>top 命令找出 CPU 占用最高的进程；</li><li>ps -ef 或 jps 进一步定位，得知是一个怎样的后台程序；</li><li>定位到具体线程或者代码；</li><li>将需要的线程 Id 转换为 16 进制格式（英文小写）；</li><li>jstack</li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 磁盘命令</title>
      <link href="/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E7%A3%81%E7%9B%98%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E7%A3%81%E7%9B%98%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="磁盘状态"><a href="#磁盘状态" class="headerlink" title="磁盘状态"></a>磁盘状态</h2><h4 id="查询磁盘剩余空间"><a href="#查询磁盘剩余空间" class="headerlink" title="查询磁盘剩余空间"></a>查询磁盘剩余空间</h4><p><code>df</code> 用于查看磁盘剩余空间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz98nlvwu8fv5c0warnfz ~]<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        40G   30G  7.5G  80% /</span><br><span class="line">devtmpfs        3.7G     0  3.7G   0% /dev</span><br><span class="line">tmpfs           3.7G     0  3.7G   0% /dev/shm</span><br><span class="line">tmpfs           3.7G  8.6M  3.7G   1% /run</span><br><span class="line">tmpfs           3.7G     0  3.7G   0% /sys/fs/cgroup</span><br><span class="line">tmpfs           756M     0  756M   0% /run/user/0</span><br></pre></td></tr></table></figure><h4 id="查询某个目录所占空间大小"><a href="#查询某个目录所占空间大小" class="headerlink" title="查询某个目录所占空间大小"></a>查询某个目录所占空间大小</h4><p><code>du</code> 用来查看某个目录所占空间大小，语法：du [-abckmsh] [文件或者目录名]。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不加任何选项和参数只列出目录（包含子目录）大小。</span></span><br><span class="line">$ du folder</span><br><span class="line">16folder/SubFolder2</span><br><span class="line">240592folder/SubFolder1</span><br><span class="line">240640folder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直查指定目录大小</span></span><br><span class="line">$ du --max-depth=1 /data/ -h</span><br><span class="line">1.9G/data/deploy</span><br><span class="line">4.0K/data/wwwlogs</span><br><span class="line">216M/data/mysql</span><br><span class="line">2.1G/data/</span><br><span class="line"></span><br><span class="line"><span class="comment"># -a 全部文件与目录大小都列出来</span></span><br><span class="line">$ du -a folder</span><br><span class="line">16folder/.DS_Store</span><br><span class="line">8folder/File2</span><br><span class="line">8folder/SubFolder2/File2</span><br><span class="line">8folder/SubFolder2/File1</span><br><span class="line">16folder/SubFolder2</span><br><span class="line">240576folder/SubFolder1/File2.ttc</span><br><span class="line">16folder/SubFolder1/.DS_Store</span><br><span class="line">0folder/SubFolder1/File1</span><br><span class="line">240592folder/SubFolder1</span><br><span class="line">8folder/File1</span><br><span class="line">240640folder</span><br><span class="line"></span><br><span class="line"><span class="comment"># -c 最后加总</span></span><br><span class="line">$ du  -c folder</span><br><span class="line">16folder/SubFolder2</span><br><span class="line">240592folder/SubFolder1</span><br><span class="line">240640folder</span><br><span class="line">240640total </span><br><span class="line"></span><br><span class="line"><span class="comment"># -s：只列出总和</span></span><br><span class="line">$ du -s folder</span><br><span class="line">240640folder</span><br><span class="line"></span><br><span class="line"><span class="comment"># -h：系统自动调节单位  -m：以MB为单位输出 -k：以KB为单位输出 </span></span><br><span class="line"><span class="comment"># -b：列出的值以bytes为单位输出，默认是以Kbytes</span></span><br><span class="line">$ du -h folder</span><br><span class="line">8.0Kfolder/SubFolder2</span><br><span class="line">117Mfolder/SubFolder1</span><br><span class="line">118Mfolder</span><br></pre></td></tr></table></figure><h2 id="清理磁盘"><a href="#清理磁盘" class="headerlink" title="清理磁盘"></a>清理磁盘</h2><h4 id="释放磁盘已删除文件"><a href="#释放磁盘已删除文件" class="headerlink" title="释放磁盘已删除文件"></a>释放磁盘已删除文件</h4><p>已删除的文件可能由于进程未结算，还占用空间。这时候需要杀掉进程或长期服务器才能把空间释放出来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询已删除但未释放空间的文件（-h 以合适的单位显示）</span></span><br><span class="line">$ lsof | grep deleted -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对待这种进程不停对文件写日志的操作，要释放文件占用的磁盘空间，最好在线清空这个文件</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">""</span> &gt; myfile.iso</span><br></pre></td></tr></table></figure><h4 id="分区和格式化磁盘的"><a href="#分区和格式化磁盘的" class="headerlink" title="分区和格式化磁盘的"></a>分区和格式化磁盘的</h4><p>后续添加：<a href="https://www.cnblogs.com/zhang-jun-jie/p/9266810.html">https://www.cnblogs.com/zhang-jun-jie/p/9266810.html</a></p><h2 id="磁盘分析"><a href="#磁盘分析" class="headerlink" title="磁盘分析"></a>磁盘分析</h2><h4 id="评估磁盘-I-O-性能"><a href="#评估磁盘-I-O-性能" class="headerlink" title="评估磁盘 I/O 性能"></a>评估磁盘 I/O 性能</h4><p><code>iostat</code> 用于评估磁盘 I/O 性能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2      每隔2秒采样一次</span></span><br><span class="line"><span class="comment"># 3      共采样3次</span></span><br><span class="line"><span class="comment"># rkB/s  每秒读取数据量 kB</span></span><br><span class="line"><span class="comment"># wkB/s  每秒写入数据量 kB</span></span><br><span class="line"><span class="comment"># svctm  I/O请求的平均服务时间，单位毫秒。svctm和await的值相近，表示没有I/O等待，磁盘性能很好</span></span><br><span class="line"><span class="comment"># await  I/O请求的平均等待时间，单位毫秒，值越小，性能越好。如果svctm和await的值差距大，需要优化程序或更换磁盘</span></span><br><span class="line"><span class="comment"># util   一秒钟有百分几的时间用于I/O操作。接近100%时，表示磁盘带宽跑满，需要优化程序或增加磁盘</span></span><br><span class="line"></span><br><span class="line">[root@izwz98nlvwu8fv5c0warnfz ~]<span class="comment"># iostat -xdk 2 3</span></span><br><span class="line">Linux 3.10.0-693.2.2.el7.x86_64 (izwz98nlvwu8fv5c0warnfz)       01/22/2021      _x86_64_        (4 CPU)</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">vda               0.04     2.55    0.05    2.16     2.39    36.06    34.81     0.01    2.96   12.86    2.75   0.13   0.03</span><br><span class="line">vdb               0.00     0.00    0.00    0.00     0.00     0.00    45.71     0.00    0.60    0.60    0.00   0.53   0.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">vda               0.00     0.00    0.00    2.00     0.00    14.00    14.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line">vdb               0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">vda               0.00     5.00    0.00    1.50     0.00    26.00    34.67     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line">vdb               0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br></pre></td></tr></table></figure><h4 id="查询进程的磁盘状态"><a href="#查询进程的磁盘状态" class="headerlink" title="查询进程的磁盘状态"></a>查询进程的磁盘状态</h4><p>还可以使用 <code>pidstat</code> 用于查看每个进程使用内存的用量分解信息，参考上面。</p><h4 id="查询文件状态"><a href="#查询文件状态" class="headerlink" title="查询文件状态"></a>查询文件状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">stat</span> /data</span><br><span class="line">  文件：<span class="string">"/data"</span></span><br><span class="line">  大小：4096      块：8          IO 块：4096   目录</span><br><span class="line">设备：fd01h/64769dInode：1572865     硬链接：5</span><br><span class="line">权限：(0755/drwxr-xr-x)  Uid：(    0/    root)   Gid：(    0/    root)</span><br><span class="line">最近访问：2020-05-15 18:00:35.958200010 +0800</span><br><span class="line">最近更改：2019-11-14 20:04:27.523461820 +0800</span><br><span class="line">最近改动：2019-11-14 20:04:27.523461820 +0800</span><br><span class="line">创建时间：-</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux CPU 命令</title>
      <link href="/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20CPU%20%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20CPU%20%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="vmstat-查看-CPU-概要"><a href="#vmstat-查看-CPU-概要" class="headerlink" title="vmstat 查看 CPU 概要"></a>vmstat 查看 CPU 概要</h4><p><code>vmstat</code> 用户查看 CPU 信息（包括但不限于），一般 <code>vmstat</code> 的使用是通过两个数字参数来完成，第一个参数是采样的时间间隔（s），第二个参数是采样的次数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># r   运行和等待CPU时间片的进程数，原则上整个系统的运行队列不能超过总核数的2倍，否则代表系统压力过大</span></span><br><span class="line"><span class="comment"># b   等待资源的进程数，比如正在等待磁盘I/O，网络I/O等</span></span><br><span class="line"><span class="comment"># us  用户进程消耗CPU时间百分比，us值高，用户进程消耗CPU时间多。如果长期大于50%，优化程序</span></span><br><span class="line"><span class="comment"># sy  内核进程消耗的CPU时间百分比。us + sy 参考值为80%，如果大于，说明存在CPU不足</span></span><br><span class="line"></span><br><span class="line">[root@iZwz9cp52a5yqx9b86ehecZ ~]<span class="comment"># vmstat -n 2 3</span></span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache    si   so    bi    bo   <span class="keyword">in</span>   cs us sy id wa st</span><br><span class="line"> 1  0      0 143396  72548 1372116    0    0     0    15    8    3  1  0 99  0  0</span><br><span class="line"> 0  0      0 141380  72556 1372156    0    0     0    22 2964 3377  1  1 99  0  0</span><br><span class="line"> 0  0      0 142652  72556 1372164    0    0     0    82 2905 3296  0  0 99  0  0</span><br></pre></td></tr></table></figure><h4 id="mpstat-查看-CPU-明细"><a href="#mpstat-查看-CPU-明细" class="headerlink" title="mpstat 查看 CPU 明细"></a>mpstat 查看 CPU 明细</h4><p><code>mpstat</code> 用于查看所有的CPU信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ALL          查询所有CPU信息</span></span><br><span class="line"><span class="comment"># 2            每隔2秒采样一次</span></span><br><span class="line">[root@izwz98nlvwu8fv5c0warnfz ~]<span class="comment"># mpstat -P ALL 2</span></span><br><span class="line">Linux 3.10.0-693.2.2.el7.x86_64 (izwz98nlvwu8fv5c0warnfz)       01/22/2021      _x86_64_        (4 CPU)</span><br><span class="line"></span><br><span class="line">11:58:09 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">11:58:11 AM  all    0.13    0.00    0.13    0.00    0.00    0.00    0.00    0.00    0.00   99.75</span><br><span class="line">11:58:11 AM    0    0.00    0.00    0.50    0.00    0.00    0.00    0.00    0.00    0.00   99.50</span><br><span class="line">11:58:11 AM    1    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</span><br><span class="line">11:58:11 AM    2    0.50    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.50</span><br><span class="line">11:58:11 AM    3    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</span><br><span class="line"></span><br><span class="line">11:58:11 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">11:58:13 AM  all    0.38    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.62</span><br><span class="line">11:58:13 AM    0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</span><br><span class="line">11:58:13 AM    1    0.50    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.50</span><br><span class="line">11:58:13 AM    2    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</span><br><span class="line">11:58:13 AM    3    1.01    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   98.99</span><br></pre></td></tr></table></figure><h4 id="pidstat-查看进程的-CPU-占用"><a href="#pidstat-查看进程的-CPU-占用" class="headerlink" title="pidstat 查看进程的 CPU 占用"></a>pidstat 查看进程的 CPU 占用</h4><p><code>pidstat</code> 用于查看每个进程使用 CPU 和内存的用量分解信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -u 2         每个2秒采样一次</span></span><br><span class="line"><span class="comment"># -p 1282167   进程Id</span></span><br><span class="line"></span><br><span class="line">[root@iZj6ci1r3ycwolsv7h3gbiZ ~]<span class="comment"># pidstat -u 2 -p 1282167 </span></span><br><span class="line">Linux 4.18.0-193.28.1.el8_2.x86_64 (iZj6ci1r3ycwolsv7h3gbiZ)    01/22/2021      _x86_64_        (4 CPU)</span><br><span class="line"></span><br><span class="line">12:01:53 PM   UID       PID    %usr %system  %guest   %<span class="built_in">wait</span>    %CPU   CPU  Command</span><br><span class="line">12:01:55 PM     0   1282167    0.50    0.00    0.00    0.00    0.50     3  java</span><br><span class="line">12:01:57 PM     0   1282167    0.50    0.00    0.00    0.00    0.50     3  java</span><br><span class="line">12:01:59 PM     0   1282167    4.50    0.50    0.00    0.00    5.00     3  java</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 内存命令</title>
      <link href="/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E5%86%85%E5%AD%98%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E5%86%85%E5%AD%98%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="内存状态"><a href="#内存状态" class="headerlink" title="内存状态"></a>内存状态</h2><h4 id="free-查看内存状态"><a href="#free-查看内存状态" class="headerlink" title="free 查看内存状态"></a>free 查看内存状态</h4><p><code>free</code> 命令用于查看应用程序可用内存数。</p><p>经验值：</p><ol><li>应用程序可用内存/系统物理内存 &lt; 20% 内存不足；</li><li>应用程序可用内存/系统物理内存 &gt; 70% 内存充足；</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照KB单位显示</span></span><br><span class="line">[root@izwz98nlvwu8fv5c0warnfz ~]<span class="comment"># free</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        7734544     3901428     1668240        8744     2164876     3535576</span><br><span class="line">Swap:             0           0           0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照MB单位显示</span></span><br><span class="line">[root@izwz98nlvwu8fv5c0warnfz ~]<span class="comment"># free -m</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           7553        3810        1629           8        2114        3452</span><br><span class="line">Swap:             0           0           0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照GB单位显示</span></span><br><span class="line">[root@izwz98nlvwu8fv5c0warnfz ~]<span class="comment"># free -g</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:              7           3           1           0           2           3</span><br><span class="line">Swap:             0           0           0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动选取合适单位显示</span></span><br><span class="line">[root@izwz98nlvwu8fv5c0warnfz ~]<span class="comment"># free -h</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           7.4G        3.7G        1.6G        8.5M        2.1G        3.4G</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure><h2 id="内存进程"><a href="#内存进程" class="headerlink" title="内存进程"></a>内存进程</h2><h4 id="pidstat-查看进程内存占用"><a href="#pidstat-查看进程内存占用" class="headerlink" title="pidstat 查看进程内存占用"></a>pidstat 查看进程内存占用</h4><p><code>pidstat</code> 用于查看每个进程使用 CPU 和内存的用量分解信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -u 2         每个2秒采样一次</span></span><br><span class="line"><span class="comment"># -p 1282167   进程Id</span></span><br><span class="line"></span><br><span class="line">[root@iZj6ci1r3ycwolsv7h3gbiZ ~]<span class="comment"># pidstat -u 2 -p 1282167 </span></span><br><span class="line">Linux 4.18.0-193.28.1.el8_2.x86_64 (iZj6ci1r3ycwolsv7h3gbiZ)    01/22/2021      _x86_64_        (4 CPU)</span><br><span class="line"></span><br><span class="line">12:01:53 PM   UID       PID    %usr %system  %guest   %<span class="built_in">wait</span>    %CPU   CPU  Command</span><br><span class="line">12:01:55 PM     0   1282167    0.50    0.00    0.00    0.00    0.50     3  java</span><br><span class="line">12:01:57 PM     0   1282167    0.50    0.00    0.00    0.00    0.50     3  java</span><br><span class="line">12:01:59 PM     0   1282167    4.50    0.50    0.00    0.00    5.00     3  java</span><br></pre></td></tr></table></figure><h2 id="释放内存"><a href="#释放内存" class="headerlink" title="释放内存"></a>释放内存</h2><h4 id="sync-释放内存"><a href="#sync-释放内存" class="headerlink" title="sync 释放内存"></a>sync 释放内存</h4><p>众所周知，Linux 系统会随着长时间的运行，会产生很多缓存，清理方式就是写一个数字到 <code>drop_caches</code> 文件里，这个数字通常为 3。</p><p><code>sync</code> 命令可以将所有未写的系统缓冲区写到磁盘中，执行之后就可以放心的释放缓存了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sync &amp;&amp; <span class="built_in">echo</span> 3 &gt;/proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 文件命令</title>
      <link href="/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E6%96%87%E4%BB%B6%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E6%96%87%E4%BB%B6%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h2><h4 id="按文件名搜索"><a href="#按文件名搜索" class="headerlink" title="按文件名搜索"></a>按文件名搜索</h4><p>模糊搜索指定文件（目录、文件名）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ find /data -cmin -100 | egrep  <span class="string">"icebartech"</span></span><br><span class="line">/data/wwwlogs/sportcenter.icebartech.com_nginx.log</span><br><span class="line">/data/deploy/Java/icebartech-vastscene/logs/start.log</span><br></pre></td></tr></table></figure><h4 id="按后缀名搜索"><a href="#按后缀名搜索" class="headerlink" title="按后缀名搜索"></a>按后缀名搜索</h4><p>将目前目录及其子目录下所有延伸档名是 c 的文件列出来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ find  -name <span class="string">"*.jar"</span></span><br><span class="line">./file/icebartech-cutterbar.jar</span><br><span class="line">./file/icebartech-cutterbar-1.jar</span><br></pre></td></tr></table></figure><h4 id="按文件类型搜索"><a href="#按文件类型搜索" class="headerlink" title="按文件类型搜索"></a>按文件类型搜索</h4><p>将目前目录其其下子目录中所有一般文件列出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ find -<span class="built_in">type</span> f</span><br><span class="line">./deploy/logs/enweis/info.enweis.log</span><br><span class="line">./deploy/logs/enweis/error.enweis.log</span><br></pre></td></tr></table></figure><h4 id="按体积大小搜索"><a href="#按体积大小搜索" class="headerlink" title="按体积大小搜索"></a>按体积大小搜索</h4><p>将指定大小的文件搜索处理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -size +800M</span><br></pre></td></tr></table></figure><h4 id="按时间搜索"><a href="#按时间搜索" class="headerlink" title="按时间搜索"></a>按时间搜索</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># +n：&gt;n -n: &lt;n n: =n</span></span><br><span class="line"><span class="comment"># mtime 修改实际（天） mmin 修改实际（分）</span></span><br><span class="line"><span class="comment"># atime 访问实际（天） amin 访问实际（分）</span></span><br><span class="line"><span class="comment"># ctime 创建实际（天） cmin 创建实际（分）</span></span><br><span class="line"><span class="comment"># /data 目录下一天内创建的文件</span></span><br><span class="line">$ find /data -ctime -1</span><br><span class="line">/data/wwwlogs/80_nginx.log</span><br><span class="line">/data/wwwlogs/enjoyshop.icebartech.com_nginx.log</span><br><span class="line">/data/wwwlogs/sportcenter.icebartech.com_nginx.log</span><br></pre></td></tr></table></figure><h4 id="排除指定文件"><a href="#排除指定文件" class="headerlink" title="排除指定文件"></a>排除指定文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ find /data -ctime -1 | egrep -v <span class="string">"enjoyshop"</span></span><br><span class="line">/data/wwwlogs/80_nginx.log</span><br><span class="line">/data/wwwlogs/sportcenter.icebartech.com_nginx.log</span><br><span class="line"></span><br><span class="line">$ find /data -ctime -1 | egrep -v <span class="string">"(enjoyshop|sportcenter)"</span></span><br><span class="line">/data/wwwlogs/80_nginx.log</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><h4 id="上传文件到服务器"><a href="#上传文件到服务器" class="headerlink" title="上传文件到服务器"></a>上传文件到服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传文件到服务站指定目录</span></span><br><span class="line">scp users/test.txt root@127.0.0.1:/usr/<span class="built_in">local</span>/users</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传文件到服务器指定目录并修改文件名</span></span><br><span class="line">scp users/test.txt root@127.0.0.1:/usr/<span class="built_in">local</span>/users/tests2.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># （test 目录存在）上传 users 文件夹到服务器 /usr/local/test 目录</span></span><br><span class="line">scp -r users root@127.0.0.1:/usr/<span class="built_in">local</span>/<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># （test 目录不存在）上传 users 文件夹到服务器指 /usr/local/ 目录并修改文件夹名称为 test</span></span><br><span class="line">scp -r users root@127.0.0.1:/usr/<span class="built_in">local</span>/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="从服务器下载文件"><a href="#从服务器下载文件" class="headerlink" title="从服务器下载文件"></a>从服务器下载文件</h4><p>从远程复制到本地，只要将从本地复制到远程的命令的后 2 个参数调换顺序即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scp root@www.runoob.com:/home/root/others/music /home/space/music/1.mp3 </span><br><span class="line"></span><br><span class="line">scp -r www.runoob.com:/home/root/others/ /home/space/music/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果远程服务器防火墙有为scp命令设置了指定的端口，我们需要使用 -P 参数来设置命令的端口号，命令格式如下：</span></span><br><span class="line">scp -P 4588 remote@www.runoob.com:/usr/<span class="built_in">local</span>/sin.sh /home/administrator</span><br></pre></td></tr></table></figure></p><h2 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h2><h4 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l</span><br><span class="line">total 65640</span><br><span class="line">drwxr-xr-x   3 zhangqinghua  staff        96  4 18 22:42 config</span><br><span class="line">drwxr-xr-x   4 zhangqinghua  staff       128  4 18 23:10 data</span><br><span class="line">drwxr-xr-x@ 12 zhangqinghua  staff       384  4 18 22:58 elasticsearch-5.5.1</span><br><span class="line">-rw-r--r--@  1 zhangqinghua  staff  33511694  4 18 22:58 elasticsearch-5.5.1.zip</span><br><span class="line">drwxr-xr-x   2 zhangqinghua  staff        64  4 18 22:49 plugins</span><br></pre></td></tr></table></figure><h4 id="修改权限-1"><a href="#修改权限-1" class="headerlink" title="修改权限"></a>修改权限</h4><p>将 <code>/data/deploy</code> 目录下所有文件改为可读可写。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod -R 777 /data/deploy/;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/lv8549510/article/details/85406215">https://blog.csdn.net/lv8549510/article/details/85406215</a></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h4 id="删除文件提示无法删除"><a href="#删除文件提示无法删除" class="headerlink" title="删除文件提示无法删除"></a>删除文件提示无法删除</h4><p>当使用 <code>rm</code> 删除文件和文件夹的时候提示：rm: 无法删除”bash”: 不允许的操作</p><p>删除属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chattr -i authorized_keys2</span><br><span class="line">chattr -a authorized_keys2</span><br><span class="line">chattr -u authorized_keys2</span><br></pre></td></tr></table></figure><p>再次删除该文件，即可正常删除了</p>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 下载工具</title>
      <link href="/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/"/>
      <url>/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h2><ol><li>wget</li><li>mwget</li><li>axel <a href="https://blog.kieng.cn/1147.html">https://blog.kieng.cn/1147.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 网络命令</title>
      <link href="/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="查询本机端口占用情况"><a href="#查询本机端口占用情况" class="headerlink" title="查询本机端口占用情况"></a>查询本机端口占用情况</h4><p>lsof 用于查看某一端口的占用情况，比如查看 8000 端口使用情况：<code>lsof -i:8000</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ lsof -i:8000</span><br><span class="line">COMMAND   PID USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME</span><br><span class="line">lwfs    22065 root    6u  IPv4 4395053      0t0  TCP *:irdmi (LISTEN)</span><br></pre></td></tr></table></figure><p>netstat 命令用于显示网络状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找出程序运行的端口（并不是所有的进程都能找到，没有权限的会不显示，使用 root 权限查看所有的信息。）</span></span><br><span class="line">$ netstat -ap | grep nginx</span><br><span class="line">tcp        0      0 0.0.0.0:http            0.0.0.0:*               LISTEN      24872/nginx: worker </span><br><span class="line">tcp        0      0 0.0.0.0:818             0.0.0.0:*               LISTEN      24872/nginx: worker </span><br><span class="line">tcp        0      0 0.0.0.0:https           0.0.0.0:*               LISTEN      24872/nginx: worker </span><br><span class="line">tcp        0      0 0.0.0.0:svn             0.0.0.0:*               LISTEN      24872/nginx: worker </span><br><span class="line">tcp        0      0 iZwz9cp52a5yqx9b8:https 119.123.69.251:65008    ESTABLISHED 24872/nginx: worker </span><br><span class="line">tcp        0      0 iZwz9cp52a5yqx9b8:https 119.123.69.251:65014    ESTABLISHED 24872/nginx: worker </span><br><span class="line">unix  3      [ ]         STREAM     CONNECTED     175354591 24872/nginx: worker  </span><br><span class="line">unix  3      [ ]         STREAM     CONNECTED     175354590 30572/nginx: master  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出运行在指定端口的进程</span></span><br><span class="line">$ netstat -pan | grep 60819</span><br><span class="line">tcp        0      0 0.0.0.0:60819           0.0.0.0:*               LISTEN      16586/java          </span><br><span class="line">tcp        1      0 127.0.0.1:60819         127.0.0.1:47942         CLOSE_WAIT  16586/java </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否有未知IP在进行发包</span></span><br><span class="line">$ netstat -lntupa</span><br></pre></td></tr></table></figure><h4 id="测试远程端口开放状态"><a href="#测试远程端口开放状态" class="headerlink" title="测试远程端口开放状态"></a>测试远程端口开放状态</h4><p>我们可以使用 <code>nmap</code> 命令来查看目标服务器的端口开放状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ nmap 120.77.246.50</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-05 15:10 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> gsm.icebartch.com (120.77.246.50)</span><br><span class="line">Host is up (0.0071s latency).</span><br><span class="line">Not shown: 995 filtered ports</span><br><span class="line">PORT     STATE  SERVICE</span><br><span class="line">22/tcp   open   ssh</span><br><span class="line">80/tcp   open   http</span><br><span class="line">443/tcp  open   https</span><br><span class="line">3306/tcp closed mysql</span><br><span class="line">3690/tcp open   svn</span><br></pre></td></tr></table></figure><h4 id="测试远程端口连通性"><a href="#测试远程端口连通性" class="headerlink" title="测试远程端口连通性"></a>测试远程端口连通性</h4><p>在确认了目标服务器的端口开放性之后，我们就可以使用 <code>telnet</code> 来测试端口的连通性了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连通的情况，出现Escape character</span></span><br><span class="line">$ telnet 120.77.246.50 22</span><br><span class="line">Trying 120.77.246.50...</span><br><span class="line">Connected to gsm.icebartch.com.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">SSH-2.0-OpenSSH_7.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不通的情况，一直卡死</span></span><br><span class="line">$ telnet 120.77.246.50 21</span><br><span class="line">Trying 120.77.246.50...</span><br></pre></td></tr></table></figure><h4 id="修改Linux系统实例默认远程端口"><a href="#修改Linux系统实例默认远程端口" class="headerlink" title="修改Linux系统实例默认远程端口"></a>修改Linux系统实例默认远程端口</h4><ol><li>修改配置<br>将 <code>/etc/ssh/sshd_config</code> 下 <code>Port 22</code> 改为 <code>Port 1022</code></li><li>重启 sshd 服务。<br><code>systemctl restart sshd</code> </li><li>开发防火墙<br>可选</li><li>重新登录<br><code>ssh -p 1022 root@xxxx</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 远程连接</title>
      <link href="/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
      <url>/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h4 id="重装后无法登录"><a href="#重装后无法登录" class="headerlink" title="重装后无法登录"></a>重装后无法登录</h4><p>出现这个问题的原因是你本地保存的主机密钥与服务器的密钥不一致，通常因为你重装了服务器的系统，这样它的密钥就变了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ ssh root@120.76.98.47</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br><span class="line">The fingerprint <span class="keyword">for</span> the ECDSA key sent by the remote host is</span><br><span class="line">SHA256:O+8bUuRS7w2VG1Jk4cqFcfqxBBDLjma35OsXJ6ymznw.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key <span class="keyword">in</span> /Users/zhangqinghua/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending ECDSA key <span class="keyword">in</span> /Users/zhangqinghua/.ssh/known_hosts:33</span><br><span class="line">ECDSA host key <span class="keyword">for</span> 120.76.98.47 has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br></pre></td></tr></table></figure><p>解决方法有 2 种：</p><ol><li>删除 <code>.ssh/known_hosts</code> 对应的前面记录。</li><li>清除对应的机器的缓存 <code>ssh-keygen -R 你的远程服务器ip地址</code>。</li></ol><h4 id="SSH-远程连接报错：ssh-exchange-identification-read-Connection-reset-by-peer"><a href="#SSH-远程连接报错：ssh-exchange-identification-read-Connection-reset-by-peer" class="headerlink" title="SSH 远程连接报错：ssh_exchange_identification: read: Connection reset by peer"></a>SSH 远程连接报错：ssh_exchange_identification: read: Connection reset by peer</h4><p>发现是公司网络问题，使用手机热点网络能连。被阿里云的云盾拦截了：<a href="https://help.aliyun.com/knowledge_detail/37914.html">https://help.aliyun.com/knowledge_detail/37914.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 历史记录</title>
      <link href="/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/04/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%89%8B%E5%86%8C/Linux%20%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="历史操作"><a href="#历史操作" class="headerlink" title="历史操作"></a>历史操作</h2><h3 id=""><a href="#" class="headerlink" title="#"></a>#</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">history</span></span><br><span class="line">1093  clear</span><br><span class="line">1094  find /data | egrep <span class="string">".jar"</span> - ls</span><br><span class="line">1095  find /data | egrep <span class="string">"icebartech-pianoroom"</span> - ls</span><br><span class="line">1096  find /data/deploy/Java/icebartech- | egrep <span class="string">".jar"</span> - ls</span><br><span class="line">1097  find /data/deploy/Java/ | egrep <span class="string">".jar"</span> - ls</span><br><span class="line">1098  find /data/deploy/Java/ | egrep <span class="string">"icebartech-gsm"</span> - ls</span><br><span class="line">1099  find /data/deploy/Java/ | egrep <span class="string">"icebartech-gsm"</span> </span><br><span class="line">1100  <span class="built_in">history</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6 模块化</title>
      <link href="/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>模块化就是把代码进行拆分，方便重复利用。类似 Java 中的导包，要使用一个包，必须先导包。</p><p>模块功能主要由两个命令构成：<code>export</code> 和 <code>import</code>：</p><ol><li><p><code>export</code> 命令用于规定模块的对外接口；</p></li><li><p><code>import</code> 命令用于导入其他模块提供的功能；</p></li></ol><h2 id="user-js"><a href="#user-js" class="headerlink" title="user.js"></a>user.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Jack"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span>(name, age, add);</span><br></pre></td></tr></table></figure><h2 id="hello-js"><a href="#hello-js" class="headerlink" title="hello.js"></a>hello.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> util = &#123;</span><br><span class="line">sum(a, b) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">"./hello.js"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;name, add&#125; <span class="keyword">from</span> <span class="string">"./user.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"name: "</span> + name);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(util.sum(<span class="number">10</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure><blockquote><p>export 不仅可以导出对象，一切 JS 变量都可以导出，例如：基本类型变量、函数、数组、对象。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> ES6 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6 异步操作</title>
      <link href="/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>在 JavaScript 的世界中，所有代码都是单线程执行的。由于这个“缺陷”，导致 JavaScript 的所有网络操作，浏览器事件，都必须是异步执行。异步执行可以用回调函数实现。一旦有一连串的 Ajax 请求 a, b, c, d… 后面的请求依赖前面的请求结果，就需要层层嵌套。</p><p>这种缩进和层层嵌套的方式，非常容易造成上下文代码混乱，我们不得不非常小心翼翼处理内层函数与外层函数的数据，一旦内层函数使用了上层函数的变量，这种混乱程度就会加剧 总之，这种层叠上下文的层层嵌套方式，着实增加了神经的紧张程度。</p><p>我们可以通过 <code>Promise</code> 解决以上问题。</p><p>假设我们要查询一个用户的课程分数，需要经过以下步骤：</p><ol><li>查询当前用户信息；</li><li>按照当前用户 id 查询课程；</li><li>按照当前课程 id 查询分数；</li></ol><h2 id="Ajax-的写法"><a href="#Ajax-的写法" class="headerlink" title="Ajax 的写法"></a>Ajax 的写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">        url: <span class="string">"mock/user.json"</span>,</span><br><span class="line">        success(data) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"查询用户："</span> + data);</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                        url: <span class="string">"mock/user_corse_$&#123;data.id&#125;.json"</span>,</span><br><span class="line">                        success(data) &#123;</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">"用户课程："</span> + data);</span><br><span class="line">                                $.ajax(&#123;</span><br><span class="line">                                        url: <span class="string">"mock/corse_score.json"</span>,</span><br><span class="line">                                        success(data) &#123;</span><br><span class="line">                                                <span class="built_in">console</span>.log(<span class="string">"课程分数："</span> + data);</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        error(error) &#123;</span><br><span class="line">                                                <span class="built_in">console</span>.log(<span class="string">"查询课程分数出现异常了"</span>);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                &#125;);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        error(error) &#123;</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">"查询用户课程出现异常了"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        error(error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"查询用户信息出现异常了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Promoise-写法"><a href="#Promoise-写法" class="headerlink" title="Promoise 写法"></a>Promoise 写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Promoise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   $.ajax(&#123;</span><br><span class="line">      url: <span class="string">"mock/user.json"</span>,</span><br><span class="line">      success(data) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"查询数据成功："</span> + data);</span><br><span class="line">         resolve(data);</span><br><span class="line">      &#125;,</span><br><span class="line">      error(error) &#123;</span><br><span class="line">         reject(error);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">obj, resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   $.ajax(&#123;</span><br><span class="line">      url: <span class="string">"mock/user_corse_$&#123;data.id&#125;.json"</span>,</span><br><span class="line">      success(data) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"查询数据成功："</span> + data);</span><br><span class="line">         resolve(data);</span><br><span class="line">      &#125;,</span><br><span class="line">      error(error) &#123;</span><br><span class="line">         reject(error);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">obj, resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   $.ajax(&#123;</span><br><span class="line">      url: <span class="string">"mock/corse_score.json"</span>,</span><br><span class="line">      success(data) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"查询数据成功："</span> + data);</span><br><span class="line">         resolve(data);</span><br><span class="line">      &#125;,</span><br><span class="line">      error(error) &#123;</span><br><span class="line">         reject(error);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"查询数据失败："</span> + error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="改进写法"><a href="#改进写法" class="headerlink" title="改进写法"></a>改进写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, data</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      $.ajax(&#123;</span><br><span class="line">         url: url,</span><br><span class="line">         data: data,</span><br><span class="line">         success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            resolve(data);</span><br><span class="line">         &#125;,</span><br><span class="line">         error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            reject(err);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">get(<span class="string">`mock/user.json`</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"用户查询成功："</span> + data);</span><br><span class="line">   <span class="keyword">return</span> get(<span class="string">`mock/user_corse_<span class="subst">$&#123;data.id&#125;</span>.json`</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"课程查询成功："</span> + data);</span><br><span class="line">   <span class="keyword">return</span> get(<span class="string">`mock/corse_score_<span class="subst">$&#123;data.id&#125;</span>.json`</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"分数查询成功："</span> + data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"查询数据失败："</span> + error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过比较，我们知道了 <code>Promise</code> 的扁平化设计理念，也领略了这种上层设计带来的好处。我们的项目中会使用到这种异步处理的方式。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> ES6 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6 数组操作</title>
      <link href="/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>数组中新增了 <code>map</code> 和 <code>reduce</code> 方法。</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"1"</span>, <span class="string">"20"</span>, <span class="string">"-5"</span>, <span class="string">"3"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br><span class="line">arr = arr.map(<span class="function"><span class="params">s</span> =&gt;</span> <span class="built_in">parseInt</span>(s));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>reduce 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，接受四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，调用 <code>reduce</code> 的数组。</p><p><code>callback</code> （执行数组中每个值的函数）包含四个参数：</p><ol><li><code>previousValue</code><br>上一次调用回调返回的值，或者是提供的初始值。</li><li><code>currentValue</code><br>数组中当前被处理的元素。</li><li><code>index</code><br>当前元素在数组中的索引。</li><li><code>array</code><br>调用 <code>reduce</code> 的数组。</li></ol><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">20</span>, <span class="number">-5</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没 有 初 始 值 ： 19 </span></span><br><span class="line"><span class="built_in">console</span>.log(arr.reduce(<span class="function">(<span class="params">a, b </span>)=&gt;</span> a + b));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没 有 初 始 值 ： -300 </span></span><br><span class="line"><span class="built_in">console</span>.log(arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a * b));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指 定 初 始 值 ： 20</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指 定 初 始 值 ： 0</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a * b, <span class="number">0</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> ES6 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6 对象优化</title>
      <link href="/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E5%AF%B9%E8%B1%A1%E4%BC%98%E5%8C%96/"/>
      <url>/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E5%AF%B9%E8%B1%A1%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="新增的-API"><a href="#新增的-API" class="headerlink" title="新增的 API"></a>新增的 API</h2><p>ES6 给 Object 拓展了许多新的方法，如：</p><ol><li><code>keys(obj)</code><br>获取对象的所有 key 形成的数组。</li><li><code>values(obj)</code><br>获取对象的所有 value 形成的数组。</li><li><code>entries(obj)</code><br>获取对象的所有 key 和 value 形成的二维数组。格式：<code>[[k1,v1],[k2,v2],...]</code>。</li><li><code>assign(dest, ...src)</code><br>将多个 <code>src</code> 对象的值 拷贝到 <code>dest</code> 中。（第一层为深拷贝，第二层为浅拷贝）。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; </span><br><span class="line">   name: <span class="string">"jack"</span>, </span><br><span class="line">   age: <span class="number">21</span>,</span><br><span class="line">   language: [<span class="string">'java'</span>, <span class="string">'js'</span>, <span class="string">'css'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ["name", "age", "language"] </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(person));</span><br><span class="line"></span><br><span class="line"><span class="comment">// ["jack", 21, Array(3)] </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(person));</span><br><span class="line"></span><br><span class="line"><span class="comment">// [Array(2), Array(2), Array(2)]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(person));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;; </span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;; </span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.assign 方法的第一个参数是目标对象，后面的参数都是源对象。</span></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;a: 1, b: 2, c: 3&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(target)</span><br></pre></td></tr></table></figure><h2 id="声明对象简写"><a href="#声明对象简写" class="headerlink" title="声明对象简写"></a>声明对象简写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">23</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"张三"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统</span></span><br><span class="line"><span class="keyword">const</span> person1 = &#123; <span class="attr">age</span>: age, <span class="attr">name</span>: name &#125; </span><br><span class="line"><span class="built_in">console</span>.log(person1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6：属性名和属性值变量名一样，可以省略</span></span><br><span class="line"><span class="keyword">const</span> person2 = &#123; age, name &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;age: 23, name: "张三"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(person2)</span><br></pre></td></tr></table></figure><h2 id="对象函数属性简写"><a href="#对象函数属性简写" class="headerlink" title="对象函数属性简写"></a>对象函数属性简写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">        name: <span class="string">"jack"</span>,</span><br><span class="line">        <span class="comment">// 之前写法</span></span><br><span class="line">        eat1: <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" eating "</span> + food);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 新的写法</span></span><br><span class="line">        eat3(food) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" eating "</span> + food);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 箭头函数 this 不能使用对象.属性</span></span><br><span class="line">        eat2: <span class="function"><span class="params">food</span> =&gt;</span> <span class="built_in">console</span>.log(person.name + <span class="string">" eating "</span> + food),</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">person.eat1(<span class="string">"banana"</span>);</span><br><span class="line">person.eat2(<span class="string">"apple"</span>);</span><br><span class="line">person.eat3(<span class="string">"orage"</span>);</span><br></pre></td></tr></table></figure><h2 id="对象扩展运算符"><a href="#对象扩展运算符" class="headerlink" title="对象扩展运算符"></a>对象扩展运算符</h2><p>拓展运算符 <code>...</code> 用于取出参数对象所有可遍历属性然后拷贝到当前对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 拷贝对象（深拷贝）</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>: <span class="string">"Amy"</span>, <span class="attr">age</span>: <span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> somone = &#123;... person&#125;;</span><br><span class="line"><span class="comment">// &#123;name: "Amy", age: 15&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(someone); </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2. 合并对象</span></span><br><span class="line"><span class="keyword">let</span> age = &#123;<span class="attr">age</span>: <span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> name = &#123;<span class="attr">name</span>: <span class="string">"Amy"</span>&#125;;</span><br><span class="line"><span class="comment">// 如果两个对象的字段名重复，后面对象字段会覆盖前面对象的字段值</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;...age, ...name&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> ES6 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6 函数优化</title>
      <link href="/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E5%87%BD%E6%95%B0%E4%BC%98%E5%8C%96/"/>
      <url>/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E5%87%BD%E6%95%B0%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h2><p>在 ES6 以前，我们无法给一个函数参数设置默认值，只能采用变通写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 判断 b 是否为空，为空就给默认值 1 </span></span><br><span class="line">   b = b || <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p>现在可以这么写：直接给参数写上默认值，没传就会自动使用默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add2</span>(<span class="params">a , b = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(add2(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><h2 id="不定参数"><a href="#不定参数" class="headerlink" title="不定参数"></a>不定参数</h2><p>不定参数用来表示不确定参数个数，形如，<code>...变量名</code>，由 <code>...</code> 加上一个具名参数标识符组成。具名参数只能放在参数列表的最后，并且有且只有一个不定参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">...values</span>) </span>&#123; </span><br><span class="line">      <span class="built_in">console</span>.log(values.length)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">fun(<span class="number">1</span>, <span class="number">2</span>)      </span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line">fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> print = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">var</span> print = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line">print(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>多个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123; </span><br><span class="line">   <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写为：当只有一行语句，并且需要返回结果时，可以省略 &#123;&#125; , 结果会自动返回。</span></span><br><span class="line"><span class="keyword">var</span> sum2 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测 试 调 用 20</span></span><br><span class="line"><span class="built_in">console</span>.log(sum2(<span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码不止一行，可以用`&#123;&#125;`括起来</span></span><br><span class="line"><span class="keyword">var</span> sum3 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; </span><br><span class="line">   c = a + b;</span><br><span class="line">   <span class="keyword">return</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测 试 调 用 30</span></span><br><span class="line"><span class="built_in">console</span>.log(sum3(<span class="number">10</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure><h2 id="实战：箭头函数结合解构表达式"><a href="#实战：箭头函数结合解构表达式" class="headerlink" title="实战：箭头函数结合解构表达式"></a>实战：箭头函数结合解构表达式</h2><p>需求，声明一个对象，hello 方法需要对象的个别属性：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以前的方式</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">   name: <span class="string">"jack"</span>, <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">   language: [<span class="string">'java'</span>, <span class="string">'js'</span>, <span class="string">'css'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"hello,"</span> + person.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在的方式</span></span><br><span class="line"><span class="keyword">var</span> hello2 = <span class="function">(<span class="params">&#123; name &#125;</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">"hello,"</span> + name) &#125;;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">hello2(person);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> ES6 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6 字符串拓展</title>
      <link href="/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%93%E5%B1%95/"/>
      <url>/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h2 id="新增的-API"><a href="#新增的-API" class="headerlink" title="新增的  API"></a>新增的  API</h2><p>ES6 为字符串扩展了几个新的 API：</p><ol><li><code>includes()</code><br>返回布尔值，表示是否找到了参数字符串。</li><li><code>startsWith()</code><br>返回布尔值，表示参数字符串是否在原字符串的头部。</li><li><code>endsWith()</code><br>返回布尔值，表示参数字符串是否在原字符串的尾部。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"hello.vue"</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">"hello"</span>));<span class="comment">//true </span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">".vue"</span>));<span class="comment">//true </span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">"e"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">"hello"</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><p>模板字符串相当于加强版的字符串，用反引号 `，除了作为普通字符串，还可以用来定义多行字符串，还可以在字符串中加入变量和表达式。</p><p>多行字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ss = <span class="string">`</span></span><br><span class="line"><span class="string">         &lt;div&gt;</span></span><br><span class="line"><span class="string">         &lt;span&gt;hello world&lt;span&gt;</span></span><br><span class="line"><span class="string">         &lt;/div&gt;</span></span><br><span class="line"><span class="string">         `</span> </span><br><span class="line"><span class="built_in">console</span>.log(ss)</span><br></pre></td></tr></table></figure><p>字符串插入变量和表达式。变量名写在 ${} 中，${} 中可以放入 JavaScript 表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"张三"</span>; </span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> info = <span class="string">`我是<span class="subst">$&#123;name&#125;</span>，今年<span class="subst">$&#123;age&#125;</span>了`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(info)；</span><br></pre></td></tr></table></figure><p>字符串中调用函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"这是一个函数"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(∩_∩)O 哈哈~，这是一个函数</span></span><br><span class="line"><span class="keyword">let</span> sss = <span class="string">`O(∩_∩)O 哈 哈 ~，<span class="subst">$&#123;fun()&#125;</span>`</span>; <span class="built_in">console</span>.log(sss);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> ES6 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6 解构表达式</title>
      <link href="/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E8%A7%A3%E6%9E%84%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E8%A7%A3%E6%9E%84%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">//以前我们想获取其中的值，只能通过角标。ES6 可以这样：</span></span><br><span class="line"><span class="keyword">const</span> [x,y,z] = arr;<span class="comment">// x，y，z 将与 arr 中的每个位置对应来取值</span></span><br><span class="line"><span class="comment">// 然后打印</span></span><br><span class="line"><span class="built_in">console</span>.log(x,y,z);</span><br></pre></td></tr></table></figure><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">"jack"</span>, <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">language: [<span class="string">'java'</span>, <span class="string">'js'</span>, <span class="string">'css'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解构表达式获取值，将 person 里面每一个属性和左边对应赋值</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, age, language &#125; = person;</span><br><span class="line"><span class="comment">// 等价于下面</span></span><br><span class="line"><span class="comment">// const name = person.name;</span></span><br><span class="line"><span class="comment">// const age = person.age;</span></span><br><span class="line"><span class="comment">// const language = person.language;</span></span><br><span class="line"><span class="comment">// 可以分别打印console.log(name); console.log(age);</span></span><br><span class="line"><span class="built_in">console</span>.log(language);</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展：如果想要将 name 的值赋值给其他变量，可以如下,nn 是新的变量名</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: nn, age, language &#125; = person; <span class="built_in">console</span>.log(nn);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(language);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> ES6 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6 声明变量</title>
      <link href="/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F/"/>
      <url>/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="let-声明变量"><a href="#let-声明变量" class="headerlink" title="let 声明变量"></a>let 声明变量</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 声明的变量往往会越域</span></span><br><span class="line"><span class="comment">// let 声明的变量有严格局部作用域</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">1</span>; <span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// ReferenceError: b is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var 可以声明多次</span></span><br><span class="line"><span class="comment">// let 只能声明一次</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span> <span class="keyword">var</span> m = <span class="number">2</span> <span class="keyword">let</span> n = <span class="number">3</span></span><br><span class="line"><span class="comment">// let n = 4 console.log(m)// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(n)<span class="comment">// Identifier 'n' has already been declared</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var 会变量提升</span></span><br><span class="line"><span class="comment">// let 不存在变量提升console.log(x);// undefined var x = 10;</span></span><br><span class="line"><span class="built_in">console</span>.log(y);<span class="comment">//ReferenceError: y is not defined let y = 20;</span></span><br></pre></td></tr></table></figure><h2 id="const-声明常量（只读变量）"><a href="#const-声明常量（只读变量）" class="headerlink" title="const 声明常量（只读变量）"></a>const 声明常量（只读变量）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 声明之后不允许改变</span></span><br><span class="line"><span class="comment">// 2. 一但声明必须初始化，否则会报错</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="number">3</span>; <span class="comment">//Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> ES6 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 生命周期钩子函数</title>
      <link href="/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue2%20%E6%95%99%E7%A8%8B/Vue%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
      <url>/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue2%20%E6%95%99%E7%A8%8B/Vue%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程 ：创建实例，装载模板，渲染模板等等。Vue 为生命周期中的每个状态都设置了钩子函数（监听函数）。每当 Vue 实例处于不同的生命周期时，对应的函数就会被触发调用。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210406150932.png" alt=""></p><h2 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h2><ol><li><p><code>beforeCreated</code><br>我们在用 Vue 时都要进行实例化，因此，该函数就是在 Vue 实例化时调用，也可以将他理解为初始化函数比较方便一点，在 Vue1.0 时，这个函数的名字就是 <code>init</code>。</p></li><li><p><code>created</code><br>在创建实例之后进行调用。</p></li><li><p><code>beforeMount</code><br>页面加载完成，没有渲染。如：此时页面还是 <code></code>。</p></li><li><p><code>mounted</code><br>我们可以将他理解为原生 js 中的 <code>window.onload=function({.,.})</code>。</p><p>它的功能就是： 在 DOM 文档渲染完毕之后将要执行的函数，该函数在 Vue1.0 版本中名字为 <code>compiled</code>。 此时页面中的 <code></code> 已被渲染成张三。</p></li><li><p><code>beforeUpdate</code><br>组件更新之前。</p></li><li><p><code>updated</code><br>组件更新之后。</p></li><li><p><code>beforeDestroy</code><br>该函数将在销毁实例前进行调用 。</p></li><li><p><code>destroyed</code><br>函数将在销毁实例时进行调用。</p></li></ol><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"num"</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"num++"</span>&gt;</span>赞！<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">         &#123;&#123;name&#125;&#125;，非常帅！！！有&#123;&#123;num&#125;&#125;个人点赞。</span><br><span class="line">      <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>, <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">         name: <span class="string">"张三"</span>, <span class="attr">num</span>: <span class="number">100</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      methods: &#123;</span></span><br><span class="line"><span class="undefined">         show() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</span></span><br><span class="line"><span class="undefined">         &#125;,</span></span><br><span class="line"><span class="undefined">         add() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.num++;</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      beforeCreate() &#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"=========beforeCreate============="</span>);</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"数据模型未加载："</span> + <span class="keyword">this</span>.name, <span class="keyword">this</span>.num);</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">" 方 法 未 加 载 ："</span> + <span class="keyword">this</span>.show());</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"html 模板未加载："</span> + <span class="built_in">document</span>.getElementById(<span class="string">"num"</span>));</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"=========created============="</span>);</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"数据模型已加载："</span> + <span class="keyword">this</span>.name, <span class="keyword">this</span>.num);</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">" 方 法 已 加 载 ："</span> + <span class="keyword">this</span>.show());</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"html 模板已加载："</span> + <span class="built_in">document</span>.getElementById(<span class="string">"num"</span>));</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"html 模板未渲染："</span> + <span class="built_in">document</span>.getElementById(<span class="string">"num"</span>).innerText);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      beforeMount() &#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"=========beforeMount============="</span>);</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"html 模板未渲染："</span> + <span class="built_in">document</span>.getElementById(<span class="string">"num"</span>).innerText);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      mounted() &#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"=========mounted============="</span>);</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"html 模板已渲染："</span> + <span class="built_in">document</span>.getElementById(<span class="string">"num"</span>).innerText);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      beforeUpdate() &#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"=========beforeUpdate============="</span>);</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">" 数 据 模 型 已 更 新 ："</span> + <span class="keyword">this</span>.num);</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"html 模板未更新："</span> + <span class="built_in">document</span>.getElementById(<span class="string">"num"</span>).innerText);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      updated() &#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"=========updated============="</span>);</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"数据模型已更新："</span> + <span class="keyword">this</span>.num);</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"html 模板已更新："</span> + <span class="built_in">document</span>.getElementById(<span class="string">"num"</span>).innerText);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue2 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 组件化</title>
      <link href="/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue2%20%E6%95%99%E7%A8%8B/Vue%20%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
      <url>/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue2%20%E6%95%99%E7%A8%8B/Vue%20%E7%BB%84%E4%BB%B6%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>在大型应用开发的时候，页面可以划分成很多部分。往往不同的页面，也会有相同的部分。例如可能会有相同的头部导航。</p><p>但是如果每个页面都独自开发，这无疑增加了我们开发的成本。所以我们会把页面的不同部分拆分成独立的组件，然后在不同页面就可以共享这些组件，避免重复开发。</p><p>在 Vue 里，所有的 Vue 实例都是组件。例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。</p><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><p>我们通过 Vue 的 <code>component</code> 方法来定义一个全局组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--使用定义好的全局组件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="comment">// 定义全局组件，两个参数：1，组件名称。2，组件参数</span></span></span><br><span class="line"><span class="javascript">   Vue.component(<span class="string">"counter"</span>, &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"count++"</span>&gt;</span>你点了我 &#123;&#123; count &#125;&#125; 次，我记住了.<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span><br><span class="line"><span class="undefined">      data() &#123;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">            count: 0</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span></span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210406144753.png" alt=""></p><ol><li>组件其实也是一个 Vue 实例，因此它在定义时也会接收：<code>data</code>、<code>methods</code>、生命周期函数等；</li><li>不同的是组件不会与页面的元素绑定，否则就无法复用了，因此没有 <code>el</code> 属性；</li><li>但是组件渲染需要 HTML 模板，所以增加了 <code>template</code> 属性，值就是 HTML 模板；</li><li>全局组件定义完毕，任何 Vue 实例都可以直接在 HTML 中通过组件名称来使用组件了；</li><li><code>data</code> 必须是一个函数，不再是一个对象；</li></ol><h2 id="组件的复用"><a href="#组件的复用" class="headerlink" title="组件的复用"></a>组件的复用</h2><p>定义好的组件，可以任意复用多次：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--使用定义好的全局组件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>组件的 data 属性必须是函数！<br>一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝；</p></blockquote><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><p>一旦全局注册，就意味着即便以后你不再使用这个组件，它依然会随着 Vue 的加载而加载。因此，对于一些并不频繁使用的组件，我们会采用局部注册。</p><p>我们先在外部定义一个对象，结构与创建组件时传递的第二个参数一致：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">const</span> counter = &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"count++"</span>&gt;</span>你点了我 &#123;&#123; count &#125;&#125; 次，我记住了.<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span><br><span class="line"><span class="undefined">      data() &#123;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">            count: 0</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 Vue 中使用它：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>, </span></span><br><span class="line"><span class="undefined">      components: &#123;</span></span><br><span class="line"><span class="javascript">         counter: counter <span class="comment">// 将定义的对象注册为组件</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>components</code> 就是当前 vue 对象子组件集合：</p><ol><li>其 <code>key</code> 就是子组件名称；</li><li>其值就是组件对象名；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue2 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 计算属性和监听器</title>
      <link href="/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue2%20%E6%95%99%E7%A8%8B/Vue%20%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/"/>
      <url>/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue2%20%E6%95%99%E7%A8%8B/Vue%20%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>某些结果是基于之前数据实时计算出来的，我们可以利用计算属性来完成。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>西游记：价格&#123;&#123;xyjPrice&#125;&#125;，数量：</span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"xyjNum"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>水浒传：价格&#123;&#123;shzPrice&#125;&#125;，数量：</span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"shzNum"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>总价：&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"> <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>, <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="undefined">         xyjPrice: 56.73,</span></span><br><span class="line"><span class="undefined">         shzPrice: 47.98,</span></span><br><span class="line"><span class="undefined">         xyjNum: 1,</span></span><br><span class="line"><span class="undefined">         shzNum: 1</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      computed: &#123;</span></span><br><span class="line"><span class="undefined">         totalPrice() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">this</span>.xyjPrice * <span class="keyword">this</span>.xyjNum + <span class="keyword">this</span>.shzPrice * <span class="keyword">this</span>.shzNum;</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">   &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：只要依赖的属性发生变化，就会重新计算这个属性：</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210406141623.png" alt=""></p><h2 id="侦听"><a href="#侦听" class="headerlink" title="侦听"></a>侦听</h2><p><code>watch</code> 可以让我们监控一个值的变化。从而做出相应的反应。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>西游记：价格&#123;&#123;xyjPrice&#125;&#125;，数量：</span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"xyjNum"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>水浒传：价格&#123;&#123;shzPrice&#125;&#125;，数量：</span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"shzNum"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>总价：&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      &#123;&#123;msg&#125;&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"> <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>, <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="undefined">         xyjPrice: 56.73,</span></span><br><span class="line"><span class="undefined">         shzPrice: 47.98,</span></span><br><span class="line"><span class="undefined">         xyjNum: 1,</span></span><br><span class="line"><span class="undefined">         shzNum: 1,</span></span><br><span class="line"><span class="javascript">         msg: <span class="string">""</span>,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      computed: &#123;</span></span><br><span class="line"><span class="undefined">         totalPrice() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">this</span>.xyjPrice * <span class="keyword">this</span>.xyjNum + <span class="keyword">this</span>.shzPrice * th</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      watch: &#123;</span></span><br><span class="line"><span class="undefined">         xyjNum(newVal, oldVal) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (newVal &gt;= <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="javascript">               <span class="keyword">this</span>.msg = <span class="string">"西游记没有更多库存了"</span>; <span class="keyword">this</span>.xyjNum = <span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">               <span class="keyword">this</span>.msg = <span class="string">""</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210406142235.png" alt=""></p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>过滤器不改变真正的 <code>data</code>，而只是改变渲染的结果，并返回过滤后的版本。在很多不同的情况下，过滤器都是有用的，比如尽可能保持 API 响应的干净，并在前端处理数据的格式。</p><p>示例：展示用户列表性别显示男女。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"user in userList"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用代码块实现，有代码侵入 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.gender===1? "男":"女"&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>, </span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="undefined">         userList: [</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'jacky'</span>, <span class="attr">gender</span>: <span class="number">1</span> &#125;,</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'peter'</span>, <span class="attr">gender</span>: <span class="number">0</span> &#125;</span></span><br><span class="line"><span class="undefined">         ]</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>过滤器常用来处理文本格式化的操作。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式。</p></blockquote><h4 id="局部过滤器"><a href="#局部过滤器" class="headerlink" title="局部过滤器"></a>局部过滤器</h4><p>注册在当前 Vue 实例中，只有当前实例能用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- | 管道符号：表示使用后面的过滤器处理前面的数据 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.gender | genderFilter&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>, <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="undefined">         userList: [</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'jacky'</span>, <span class="attr">gender</span>: <span class="number">1</span> &#125;,</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'peter'</span>, <span class="attr">gender</span>: <span class="number">0</span> &#125;</span></span><br><span class="line"><span class="undefined">         ]</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// filters 定义局部过滤器，只可以在当前 vue 实例中使用</span></span></span><br><span class="line"><span class="undefined">      filters: &#123;</span></span><br><span class="line"><span class="undefined">         genderFilter(gender) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> gender === <span class="number">1</span> ? <span class="string">'男~'</span> : <span class="string">'女~'</span></span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h4><p>任何 vue 实例都可以使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="comment">// 在创建 Vue 实例之前全局定义过滤器：</span></span></span><br><span class="line"><span class="javascript">   Vue.filter(<span class="string">'capitalize'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span></span><br><span class="line"><span class="undefined">   &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue2 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 指令</title>
      <link href="/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue2%20%E6%95%99%E7%A8%8B/Vue%20%E6%8C%87%E4%BB%A4/"/>
      <url>/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue2%20%E6%95%99%E7%A8%8B/Vue%20%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="v-text、v-html"><a href="#v-text、v-html" class="headerlink" title="v-text、v-html"></a>v-text、v-html</h4><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p><code>v-bind</code> 用于给 HTML 标签的属性绑定值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 动态链接 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"link"</span>&gt;</span>gogogo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 动态样式，只有绑定的值为 true 时才显示 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;active: isActive, 'text-danger': hasError&#125;"</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 动态样式，另外一种，直接显示 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;color: mycolor, fontSize: mysize&#125;"</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">         link: <span class="string">"http://www.baidu.com"</span>,</span></span><br><span class="line"><span class="javascript">         isActive: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">         hasError: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">         mycolor: red,</span></span><br><span class="line"><span class="javascript">         mysize: <span class="string">"16px"</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p><code>v-model</code> 用于表单项的双向绑定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      精通的语言：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"language"</span> <span class="attr">value</span>=<span class="string">"Java"</span>&gt;</span>Java<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"language"</span> <span class="attr">value</span>=<span class="string">"PHP"</span>&gt;</span>PHP<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"language"</span> <span class="attr">value</span>=<span class="string">"Python"</span>&gt;</span>Python<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      选中了：&#123;&#123;language.join(",")&#125;&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="undefined">         language: []</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p><code>v-on</code> 用于绑定事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125; 非常帅，有&#123;&#123;num&#125;&#125;个人为他点赞<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"num++"</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"cancel"</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> m = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">         name: <span class="string">"zhangsan"</span>,</span></span><br><span class="line"><span class="undefined">         num: 1</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      methods: &#123;</span></span><br><span class="line"><span class="undefined">         cancel() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.num = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在事件处理程序过程中调用 <code>event.preventDefault()</code> 或者 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这一点，但更好的方式是：方法只是纯粹的数据逻辑，而不是去处理 DOM 事件的细节。</p><p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了事件修饰符。修饰符是由 <code>.</code> 开头的指令后缀来表示的：</p><ol><li><code>.stop</code> 阻止事件冒泡到父元素；</li><li><code>.prevent</code> 阻止默认事件的发生；</li><li><code>.capture</code> 使用事件捕捉模式；</li><li><code>.self</code> 只有元素自身触发事件才执行。（冒泡或捕捉的都不执行）；</li><li><code>.once</code>  只执行一次；</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125; 非常帅，有&#123;&#123;num&#125;&#125;个人为他点赞<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"num++"</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 触发事件后，不要传递到上面 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.stop</span>=<span class="string">"cancel"</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 点击链接后，默认行为是跳转到对应的页面 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 点击链接后，阻止跳转事件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">v-on:click:prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 可以链式调用，阻止冒泡传递 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">v-on:click:prevent.stop</span>=<span class="string">"alert(123)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> m = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">         name: <span class="string">"zhangsan"</span>,</span></span><br><span class="line"><span class="undefined">         num: 1</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      methods: &#123;</span></span><br><span class="line"><span class="undefined">         cancel() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.num = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在监听键盘事件时，我们经常需要检查常用的键值。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 keycode 是 13 时调用 submit 方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>记住所有的 keycode 比较困难，所以 Vue 为最常用的按键提供了别名：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>全部的按键别名：</p><ol><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li><li><code>.delete</code> 捕捉删除和退格键</li></ol><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器（组合按钮）： </p><ol><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 同时按下 alt + C 按键时触发 clear 方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.alt.67</span>=<span class="string">"clear"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Ctrl + 鼠标左键触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.ctrl.click</span>=<span class="string">"clear"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果希望在HTML中直接调用Vue的变量，只需加上 <code>$data.xxx</code> 即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">"关联分类"</span> <span class="attr">:visible.sync</span>=<span class="string">"cateRelationDialogVisible"</span> <span class="attr">width</span>=<span class="string">"30%"</span> <span class="attr">v-on:close</span>=<span class="string">"$data.catelogPath=[]"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>遍历数据渲染页面是非常常用的需求，Vue 中通过 <code>v-for</code> 指令来实现。</p><p>1、遍历数组</p><p>语法：<code>v-for=&quot;item in items&quot;</code>：</p><ol><li><code>items</code>：要遍历的数组，需要在 Vue 的 <code>data</code> 中定义好；</li><li><code>item</code>：迭代得到的当前正在遍历的元素；</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"user in users"</span>&gt;</span></span><br><span class="line">            姓名：&#123;&#123;user.name&#125;&#125; 性别：&#123;&#123;user.sex&#125;&#125; 年龄：&#123;&#123;user.age&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> m = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="undefined">         users: [</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">"柳岩"</span>, <span class="attr">gender</span>: <span class="string">"女"</span>, <span class="attr">age</span>: <span class="number">21</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">"张三"</span>, <span class="attr">gender</span>: <span class="string">"男"</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">"范冰冰"</span>, <span class="attr">gender</span>: <span class="string">"女"</span>, <span class="attr">age</span>: <span class="number">24</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">"刘亦菲"</span>, <span class="attr">gender</span>: <span class="string">"女"</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">"古力娜扎"</span>, <span class="attr">gender</span>: <span class="string">"女"</span>, <span class="attr">age</span>: <span class="number">25</span>&#125;,</span></span><br><span class="line"><span class="undefined">         ]</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210406135642.png" alt=""></p><p>2、数据角标</p><p>在遍历的过程中，如果我们需要知道数组角标，可以指定第二个参数： <code>v-for=&quot;(item,index) in items&quot;</code>：   </p><ol><li><code>items</code>：要迭代的数组</li><li><code>item</code>：迭代得到的数组元素别名</li><li><code>index</code>：迭代到的当前元素索引，从 0 开始。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(user, index) in users"</span>&gt;</span></span><br><span class="line">            姓名：&#123;&#123;user.name&#125;&#125; 性别：&#123;&#123;user.sex&#125;&#125; 年龄：&#123;&#123;user.age&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> m = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="undefined">         users: [</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">"柳岩"</span>, <span class="attr">gender</span>: <span class="string">"女"</span>, <span class="attr">age</span>: <span class="number">21</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">"张三"</span>, <span class="attr">gender</span>: <span class="string">"男"</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">"范冰冰"</span>, <span class="attr">gender</span>: <span class="string">"女"</span>, <span class="attr">age</span>: <span class="number">24</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">"刘亦菲"</span>, <span class="attr">gender</span>: <span class="string">"女"</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">"古力娜扎"</span>, <span class="attr">gender</span>: <span class="string">"女"</span>, <span class="attr">age</span>: <span class="number">25</span>&#125;,</span></span><br><span class="line"><span class="undefined">         ]</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210406135946.png" alt=""></p><p>3、遍历对象</p><p>v-for 除了可以迭代数组，也可以迭代对象。语法基本类似。</p><p><code>v-for=&quot;value in object&quot;</code>。</p><p><code>v-for=&quot;(value,key) in object&quot;</code>。</p><p><code>v-for=&quot;(value,key,index) in object&quot;</code>。</p><ol><li>1 个参数时，得到的是对象的属性值</li><li>2 个参数时，第一个是属性值，第二个是属性名</li><li>3 个参数时，第三个是索引，从 0 开始</li></ol><p>4、key</p><p>用来标识每一个元素的唯一特征，这样 Vue 可以使用“就地复用”策略有效的提高渲染的效率。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">”item.id”</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in items"</span> <span class="attr">:key</span>=<span class="string">”index”</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最佳实践：</p><ol><li>如果 <code>items</code> 是普通数组，可以使用 <code>index</code> 作为每个元素的唯一标识；</li><li>如果 <code>items</code> 是对象数组，可以使用 <code>item.id</code> 作为每个元素的唯一标识；</li></ol><h4 id="v-if、v-show"><a href="#v-if、v-show" class="headerlink" title="v-if、v-show"></a>v-if、v-show</h4><p><code>v-if</code> 顾名思义，条件判断。当得到结果为 <code>true</code> 时，所在的元素才会被渲染。</p><p><code>v-show</code> 当得到结果为 <code>true</code> 时，所在的元素才会被显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- false 时候，此标签不存在 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"canShow"</span>&gt;</span>看到我啦<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- false 时候，此标签 display:none --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"canShow"</span>&gt;</span>看到我啦<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> m = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">         canShow: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、与 <code>v-for</code> 结合</p><p>当 <code>v-if</code> 和 <code>v-for</code> 出现在一起时，<code>v-for</code> 优先级更高。也就是说，会先遍历，再判断条件。</p><p>修改 <code>v-for</code> 中的案例，添加<code>v-if</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 只显示女性 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(user,index) in users"</span> <span class="attr">v-if</span>=<span class="string">"user.gender == '女'"</span>&gt;</span></span><br><span class="line">      姓名：&#123;&#123;user.name&#125;&#125; 性别：&#123;&#123;user.sex&#125;&#125; 年龄：&#123;&#123;user.age&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-else、v-else-if"><a href="#v-else、v-else-if" class="headerlink" title="v-else、v-else-if"></a>v-else、v-else-if</h4><p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"random &gt;= 0.75"</span>&gt;</span>0.75<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"random &gt;= 0.50"</span>&gt;</span>0.50<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"random &gt;= 0.25"</span>&gt;</span>0.25<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>=<span class="string">"random &gt;= 0.75"</span>&gt;</span>0.00<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> m = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="undefined">         random: 0.67</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue2 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基本语法</title>
      <link href="/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue2%20%E6%95%99%E7%A8%8B/Vue%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue2%20%E6%95%99%E7%A8%8B/Vue%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125; 非常帅<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> m = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">         name: <span class="string">"zhangsan"</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210406125205.png" alt=""></p><h4 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h4><p>使用 <code>v-model</code> 属性可以实现双向绑定功能，模型变化，视图变化，反之亦然。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125; 非常帅，有&#123;&#123;num&#125;&#125;个人为他点赞<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> m = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">         name: <span class="string">"zhangsan"</span>,</span></span><br><span class="line"><span class="undefined">         num: 1</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210406125139.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210406125244.png" alt=""></p><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125; 非常帅，有&#123;&#123;num&#125;&#125;个人为他点赞<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"num++"</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> m = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">         name: <span class="string">"zhangsan"</span>,</span></span><br><span class="line"><span class="undefined">         num: 1</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210406125334.png" alt=""></p><h4 id="声明方法"><a href="#声明方法" class="headerlink" title="声明方法"></a>声明方法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125; 非常帅，有&#123;&#123;num&#125;&#125;个人为他点赞<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"num++"</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"cancel"</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> m = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">         name: <span class="string">"zhangsan"</span>,</span></span><br><span class="line"><span class="undefined">         num: 1</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      methods: &#123;</span></span><br><span class="line"><span class="undefined">         cancel() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.num = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210406125413.png" alt=""></p><p>点击清空后，数字重置为 0。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210406125539.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>创建 Vue 实例，关联页面的模版；</li><li>将自己的数据（data）渲染到关联的模版，响应式的；</li><li>指令来简化对 DOM 的一些操作；</li><li>声明方法来做更复杂的操作，methods 里面可以封装方法；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue2 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 安装</title>
      <link href="/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue2%20%E6%95%99%E7%A8%8B/Vue%20%E5%AE%89%E8%A3%85/"/>
      <url>/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue2%20%E6%95%99%E7%A8%8B/Vue%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ mkdir vue2</span><br><span class="line">zhangqinghua$ <span class="built_in">cd</span> vue2</span><br></pre></td></tr></table></figure><h4 id="初始化-node-项目"><a href="#初始化-node-项目" class="headerlink" title="初始化 node 项目"></a>初始化 node 项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ npm init -y</span><br><span class="line">Wrote to /Users/zhangqinghua/Desktop/web/vue2/package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"vue2"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"keywords"</span>: [],</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="安装-Vue-依赖"><a href="#安装-Vue-依赖" class="headerlink" title="安装 Vue 依赖"></a>安装 Vue 依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ npm install vue</span><br><span class="line">npm WARN vue2@1.0.0 No description</span><br><span class="line">npm WARN vue2@1.0.0 No repository field.</span><br><span class="line"></span><br><span class="line">+ vue@2.6.12</span><br><span class="line">updated 1 package and audited 1 package <span class="keyword">in</span> 1.462s</span><br><span class="line">found 0 vulnerabilities</span><br></pre></td></tr></table></figure><h4 id="创建-index-html-文件"><a href="#创建-index-html-文件" class="headerlink" title="创建 index.html 文件"></a>创建 index.html 文件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ npm install vue</span><br><span class="line">npm WARN vue2@1.0.0 No description</span><br><span class="line">npm WARN vue2@1.0.0 No repository field.</span><br><span class="line"></span><br><span class="line">+ vue@2.6.12</span><br><span class="line">updated 1 package and audited 1 package in 1.462s</span><br><span class="line">found 0 vulnerabilities</span><br></pre></td></tr></table></figure><h4 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h4><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210406125205.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue2 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 简介</title>
      <link href="/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue2%20%E6%95%99%E7%A8%8B/Vue%20%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue2%20%E6%95%99%E7%A8%8B/Vue%20%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>MVVM 思想的含义：</p><ol><li><p>M Model<br>模型，包括数据和一些基本操作。</p></li><li><p>V View<br>视图，页面渲染结果。</p></li><li><p>VM View-Model<br>模型与视图间的双向操作（无需开发人员干涉）。</p></li></ol><p>在 MVVM 之前，开发人员从后端获取需要的数据模型，然后要通过 DOM 操作 Model 渲染到 View 中。而后当用户操作视图，我们还需要通过 DOM 获取 View 中的数据，然后同步到 Model 中。</p><p>在 MVVM 中，VM 要做的事情就是把 DOM 操作完全封装起来，开发人员不用再关心 Model 和 View 之间是如何相互影响的：</p><ol><li><p>只要我们 Model 发生了改变，View 上自然就会表现出来；</p></li><li><p>当用户修改了 View，Model 中的数据也会跟着改变；</p></li></ol><p>MVVM 把开发人员从繁琐的 DOM 操作中解放出来，把关注点放在如何操作 Model 上。</p><h2 id="Vue-简介"><a href="#Vue-简介" class="headerlink" title="Vue 简介"></a>Vue 简介</h2><p>Vue 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue2 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6 简介</title>
      <link href="/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/04/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6%20%E6%95%99%E7%A8%8B/ES6%20%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>ECMAScript 6.0（以下简称 ES6，ECMAScript 是一种由 Ecma 国际(前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association)通过ECMA-262 标准化的脚本程序设计语言）是 JavaScript 语言的下一代标准，已经在 2015  年 6  月正式发布了，并且从 ECMAScript 6 开始，开始采用年号来做版本。即 ECMAScript 2015，就是 ECMAScript 6。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。每年一个新版本。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210406152344.png" alt=""></p><h2 id="什么是-ECMAScript"><a href="#什么是-ECMAScript" class="headerlink" title="什么是 ECMAScript"></a>什么是 ECMAScript</h2><p>来看下前端的发展历程：</p><ol><li><p>Web 1.0 时代<br>最初的网页以 HTML 为主，是纯静态的网页。网页是只读的，信息流只能从服务的到客户端单向流通。开发人员也只关心页面的样式和内容即可。</p></li><li><p>Web 2.0 时代<br>1995 年，网景工程师 Brendan Eich 花了 10 天时间设计了 JavaScript 语言。</p><p>1996 年，微软发布了 JScript，其实是 JavaScript 的逆向工程实现。</p><p>1996 年 11 月，JavaScript 的创造者 Netscape  公司，决定将 JavaScript  提交给标准化组织 ECMA，希望这种语言能够成为国际标准。</p><p>1997 年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。JavaScript 和 JScript 都是 ECMAScript 的标准实现者，随后各大浏览器厂商纷纷实现了 ECMAScript 标准。</p></li></ol><p>所以，ECMAScript 是浏览器脚本语言的规范，而各种我们熟知的 js 语言，如 JavaScript 则是规范的具体实现。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> ES6 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud 性能优化</title>
      <link href="/2021/03/20/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringCloud/SpringCloiud%20%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2021/03/20/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringCloud/SpringCloiud%20%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/QQ401476683/article/details/106135906">Spring Cloud速度优化，一次提高三十倍吞吐量的优化经验</a><br><a href="https://cloud.tencent.com/developer/article/1584920">如何提升springboot服务吞吐量</a><br><a href="https://www.cnblogs.com/lonelyJay/p/10076158.html">SpringCloud从入门到进阶（八）——单点部署Zuul的压力测试与调优（一）</a><br><a href="https://www.imooc.com/article/291243">SpringCloud 服务的平滑上下线</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>接口幂等性</title>
      <link href="/2021/03/18/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/"/>
      <url>/2021/03/18/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>之前负责的项目报了一个问题，用户操作回退失效。我们的设计里，操作回退是回到操作前的状态。经过查看日志发现，用户之前的操作做了两次，也就是说提交操作的接口被调用了两次，导致之用户上一次的状态和这一次的状态是一样的，所以操作回退是没有问题的，问题出在了操作的接口被调用了两次。</p><p>对于防止重复提交，是放在前端控制的，用户点击完按钮之后，后台返回成功的结果，按钮就不可见，实践证明，客户端的限制操作不是绝对可靠的。</p><p>针对上面的场景，就引入了今天的问题，什么是接口幂等性？如何保证接口幂等性？</p><h2 id="接口幂等性是什么"><a href="#接口幂等性是什么" class="headerlink" title="接口幂等性是什么"></a>接口幂等性是什么</h2><p>幂等性原本是数学上的概念，用在接口上就可以理解为：同一个接口，多次发出同一个请求，必须保证操作只执行一次。调用接口发生异常并且重复尝试时，总是会造成系统所无法承受的损失，所以必须阻止这种现象的发生。</p><h2 id="接口幂等性问题产生"><a href="#接口幂等性问题产生" class="headerlink" title="接口幂等性问题产生"></a>接口幂等性问题产生</h2><p>下面情况都有可能产生接口幂等性问题：</p><ol><li>用户使用浏览器后退按钮重复之前的操作，导致重复提交表单；</li><li><p>用户重复操作，用户在操作时候可能会无意触发多次下单交易，甚至没有响应而有意触发多次交易应用；</p></li><li><p>页面重复刷新；</p></li><li><p>浏览器重复的 HTTP 请求；</p></li><li><p>定时任务重复执行；</p></li><li><p>使用了失效或超时重试机制（Nginx 重试、RPC 重试或业务层重试等）；</p></li><li><p>网络波动, 可能会引起重复请求；</p></li></ol><p>当有接口幂等性问题时，可能会产生以下危害：</p><ol><li>消耗系统性能；</li><li>重复创建数据；</li></ol><h2 id="接口幂等性有什么用"><a href="#接口幂等性有什么用" class="headerlink" title="接口幂等性有什么用"></a>接口幂等性有什么用</h2><h2 id="接口幂等性实现方案"><a href="#接口幂等性实现方案" class="headerlink" title="接口幂等性实现方案"></a>接口幂等性实现方案</h2><p>解决办法分为两个方向，一个方向是客户端防止重复调用，一个是服务端进行校验。当然，客户端防止重复提交并不是绝对可靠的，优点是实现起来比较简单。</p><h4 id="按钮只可操作一次"><a href="#按钮只可操作一次" class="headerlink" title="按钮只可操作一次"></a>按钮只可操作一次</h4><p>一般是提交后把按钮置灰或 loding 状态，消除用户因为重复点击而产生的重复记录，比如添加操作，由于点击两次而产生两条记录。</p><h4 id="请求带-Ticket"><a href="#请求带-Ticket" class="headerlink" title="请求带 Ticket"></a>请求带 Ticket</h4><p>异步请求获取 Ticket，此 Ticket 是唯一并且一次性的，保存在页面中，每次发起支付请求都带上 Ticket，后端检查 Ticket，若支付成功则删除 Ticket，这样就算重复提交也不会导致重复扣款。</p><h4 id="使用唯一索引防止新增脏数据"><a href="#使用唯一索引防止新增脏数据" class="headerlink" title="使用唯一索引防止新增脏数据"></a>使用唯一索引防止新增脏数据</h4><p>利用数据库唯一索引机制,当数据重复时,插入数据库会抛出异常,保证不会出现脏数据。</p><h4 id="状态机幂等"><a href="#状态机幂等" class="headerlink" title="状态机幂等"></a>状态机幂等</h4><p>在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机（状态变更图），就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。</p><p>解决场景：支付回调通知</p><blockquote><p>注意：订单等单据类业务，存在很长的状态流转，一定要深刻理解状态机，对业务系统设计能力提高有很大帮助 。</p></blockquote><h2 id="RESTful-的幂等性"><a href="#RESTful-的幂等性" class="headerlink" title="RESTful 的幂等性"></a>RESTful 的幂等性</h2><p>这里给出 RESTful 请求的幂等性要求：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th>幂等</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left">GET</td><td>✔</td><td>天然幂等</td></tr><tr><td style="text-align:left">HEAD</td><td>✔</td><td>天然幂等</td></tr><tr><td style="text-align:left">OPTIONS</td><td>✔</td><td>天然幂等</td></tr><tr><td style="text-align:left">DELETE</td><td>✔</td><td>天然幂等</td></tr><tr><td style="text-align:left">PUT</td><td>✔</td><td>天然幂等</td></tr><tr><td style="text-align:left">POST</td><td>✘</td><td>需要支持幂等</td></tr></tbody></table></div><p>对于POST方法，可能会出现多次提交的问题，比如由于网络不好等原因，造成请求超时，这是用户再点一次提交按钮。对此一般的幂等性解决方法如下：</p><ol><li>在提交的表单隐藏一个全局 Id，这个全局 Id 需要提前向后端获取，提交的时候把这个 Id 一起提交过来，按照上图所描述的业务逻辑，来支持幂等；</li><li>后端成功以后前端跳转，跳转到GET请求，把刚才提交的数据展示出来；</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.51cto.com/art/202101/641528.htm#:~:text=%E5%B9%82%E7%AD%89%E6%80%A7%E5%8E%9F%E6%9C%AC%E6%98%AF%E6%95%B0%E5%AD%A6,%E6%93%8D%E4%BD%9C%E5%8F%AA%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1%E3%80%82">什么是接口幂等性？为什么会产生这个问题？如何保证接口幂等性？</a></p><p><a href="https://www.jianshu.com/p/ead680f6b94c">接口的幂等性</a></p><p><a href="https://blog.csdn.net/qq_36011946/article/details/104200262">接口设计之幂等性设计</a></p><p><a href="https://blog.csdn.net/zuojunyuan/article/details/114921139">接口幂等性解决方案总结</a></p>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务 TX-LCN 常见问题</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20TX-LCN%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20TX-LCN%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>ClassNotFoundException: org.springframework.data.jdbc.repository.config.JdbcRepositoryConfigExtension</strong><br>场景：参考官网上的demo，直接启动 tm-demo 失败。<br>原因：启动类放错地方，且也提示了报错 <strong> WARNING </strong> : Your ApplicationContext is unlikely to start due to a @ComponentScan of the default package.<br>解决：建个包，把启动类放进去，再启动就 OK 了。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务 TX-LCN 改进优化</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20TX-LCN%20%E6%94%B9%E8%BF%9B%E4%BC%98%E5%8C%96/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20TX-LCN%20%E6%94%B9%E8%BF%9B%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><strong>关闭 TxManager 后，TxClient 一直处于连接不上的状态。即使重启 TxManager 也没有相应。</strong></p><ol><li>将 TxClient 的重试次数改成无限。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TxLCN 断开无限重试</span></span><br><span class="line"><span class="comment">* 1. 默认配置下TxManager下线后，TxClient会重试6次重连。如果6次都没有连上TxManager，则不再进行尝试。</span></span><br><span class="line"><span class="comment">*    这时即使重启了TxManager，也需要重启TxClient。</span></span><br><span class="line"><span class="comment">* 2. 所以我希望TxClient能够无限尝试重连TxManager。</span></span><br><span class="line"><span class="comment">* 3. 设置次数，14400 * 30 = 一个月</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RpcConfig <span class="title">rpcConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   RpcConfig rpcConfig = <span class="keyword">new</span> RpcConfig();</span><br><span class="line">   rpcConfig.setReconnectCount(<span class="number">14400</span> * <span class="number">30</span>);</span><br><span class="line">   <span class="keyword">return</span> rpcConfig;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务 TX-LCN 配置手册</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20TX-LCN%20%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20TX-LCN%20%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="Txlcn-Client-配置"><a href="#Txlcn-Client-配置" class="headerlink" title="Txlcn Client 配置"></a>Txlcn Client 配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># springcloud feign 下开启负载均衡时的配置。开启后同一个事务组下相同的模块会重复调用。</span></span><br><span class="line"><span class="comment"># 对应dubbo框架下需要设置的是 @Reference的loadbalance，有下面四种，作用都是开启后同一个事务组下相同的模块会重复调用。</span></span><br><span class="line"><span class="comment">#txlcn_random=com.codingapi.txlcn.tracing.dubbo.TxlcnRandomLoadBalance</span></span><br><span class="line"><span class="comment">#txlcn_roundrobin=com.codingapi.txlcn.tracing.dubbo.TxlcnRoundRobinLoadBalance</span></span><br><span class="line"><span class="comment">#txlcn_leastactive=com.codingapi.txlcn.tracing.dubbo.TxlcnLeastActiveLoadBalance</span></span><br><span class="line"><span class="comment">#txlcn_consistenthash=com.codingapi.txlcn.tracing.dubbo.TxlcnConsistentHashLoadBalance</span></span><br><span class="line"></span><br><span class="line"><span class="string">tx-lcn.ribbon.loadbalancer.dtx.enabled=true</span></span><br><span class="line"><span class="comment"># tx-manager 的配置地址，多个用,分割。注意设置上的地址在启动的时候会检查并连接，连接不成功会启动失败。</span></span><br><span class="line"><span class="comment"># tx-manager 下集群策略，当增加一个新的tx-manager后，tx-manager也会通知到其他的在线模块，然后tx-client会在连接上后面加入的模块。</span></span><br><span class="line"><span class="string">tx-lcn.client.manager-address=127.0.0.1:8070,127.0.0.1:8071</span></span><br><span class="line"><span class="comment"># 该参数是分布式事务框架存储的业务切面信息。采用的是h2数据库。绝对路径。该参数默认的值为&#123;user.dir&#125;/.txlcn/&#123;application.name&#125;-&#123;application.port&#125;</span></span><br><span class="line"><span class="string">tx-lcn.aspect.log.file-path=logs/.txlcn/demo-8080</span></span><br><span class="line"><span class="comment"># 调用链长度等级，默认值为3.标识调用连长度为3，该参数是用于识别分布式事务的最大通讯时间。</span></span><br><span class="line"><span class="string">tx-lcn.client.chain-level=3</span></span><br><span class="line"><span class="comment"># 该参数为tc与tm通讯时的最大超时时间，单位毫米。该参数不需要配置会在连接初始化时由tm返回。</span></span><br><span class="line"><span class="string">tx-lcn.client.tm-rpc-timeout=2000</span></span><br><span class="line"><span class="comment"># 该参数为分布式事务的最大时间，单位毫米。该参数不需要配置会在连接初始化时由tm返回。</span></span><br><span class="line"><span class="string">tx-lcn.client.dtx-time=50000</span></span><br><span class="line"><span class="comment"># 该参数为雪花算法的机器编号。该参数不需要配置会在连接初始化时由tm返回。</span></span><br><span class="line"><span class="string">tx-lcn.client.machine-id=1</span></span><br><span class="line"><span class="comment">#该参数为事务方法注解切面的orderNumber，默认值为0.</span></span><br><span class="line"><span class="string">tx-lcn.client.dtx-aspect-order=0</span></span><br><span class="line"><span class="comment">#该参数为事务连接资源方法切面的orderNumber，默认值为0.</span></span><br><span class="line"><span class="string">tx-lcn.client.resource-order=0</span></span><br><span class="line"><span class="comment">#是否开启日志记录。当开启以后需要配置对应logger的数据库连接配置信息。</span></span><br><span class="line"><span class="string">tx-lcn.logger.enabled=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#该参数为tm下的配置，tc下忽略</span></span><br><span class="line"><span class="string">tx-lcn.client.tx-manager-delay=2000</span></span><br><span class="line"><span class="comment">#该参数为tm下的配置，tc下忽略</span></span><br><span class="line"><span class="string">tx-lcn.client.tx-manager-heart=2000</span></span><br></pre></td></tr></table></figure><h4 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h4><p>微服务集群且用到 LCN 事务模式时，为保证性能请开启TX-LCN重写的负载策略：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SpringCloud 开启 (application.properties)</span></span><br><span class="line"><span class="string">tx-lcn.springcloud.loadbalance.enabled=true</span></span><br></pre></td></tr></table></figure><p>关闭业务RPC重试：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭Ribbon的重试机制</span></span><br><span class="line"><span class="string">ribbon.MaxAutoRetriesNextServer=0</span></span><br></pre></td></tr></table></figure><p>为什么要关闭服务调用的重试。远程业务调用失败有两种可能： （1），远程业务执行失败 （2）、远程业务执行成功，网络失败。对于第2种，事务场景下重试会发生，某个业务执行两次的问题。 如果业务上控制某个事务接口的幂等，则不用关闭重试。</p><h2 id="Txlcn-Manager-配置"><a href="#Txlcn-Manager-配置" class="headerlink" title="Txlcn Manager 配置"></a>Txlcn Manager 配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.application.name=tx-manager</span></span><br><span class="line"><span class="string">server.port=7970</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql 配置</span></span><br><span class="line"><span class="string">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/tx-manager?characterEncoding=UTF-8</span></span><br><span class="line"><span class="string">spring.datasource.username=root</span></span><br><span class="line"><span class="string">spring.datasource.password=root</span></span><br><span class="line">        </span><br><span class="line"><span class="string">mybatis.configuration.map-underscore-to-camel-case=true</span></span><br><span class="line"><span class="string">mybatis.configuration.use-generated-keys=true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># TxManager Host Ip 默认为 127.0.0.1</span></span><br><span class="line"><span class="string">tx-lcn.manager.host=127.0.0.1</span></span><br><span class="line"><span class="comment"># TxClient连接请求端口 默认为 8070</span></span><br><span class="line"><span class="string">tx-lcn.manager.port=8070</span></span><br><span class="line"><span class="comment"># 心跳检测时间(ms) 默认为 300000</span></span><br><span class="line"><span class="string">tx-lcn.manager.heart-time=300000</span></span><br><span class="line"><span class="comment"># 分布式事务执行总时间(ms) 默认为36000</span></span><br><span class="line"><span class="string">tx-lcn.manager.dtx-time=36000</span></span><br><span class="line"><span class="comment">#参数延迟删除时间单位ms  默认为dtx-time值</span></span><br><span class="line"><span class="string">tx-lcn.message.netty.attr-delay-time=36000</span></span><br><span class="line"><span class="comment">#事务处理并发等级 默认为128</span></span><br><span class="line"><span class="string">tx-lcn.manager.concurrent-level=128</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#后台登陆密码，默认值为codingapi</span></span><br><span class="line"><span class="string">tx-lcn.manager.admin-key=codingapi</span></span><br><span class="line"><span class="comment">#分布式事务锁超时时间 默认为-1，当-1时会用tx-lcn.manager.dtx-time的时间</span></span><br><span class="line"><span class="string">tx-lcn.manager.dtx-lock-time=-1</span></span><br><span class="line"><span class="comment">#雪花算法的sequence位长度，默认为12位.</span></span><br><span class="line"><span class="string">tx-lcn.manager.seq-len=12</span></span><br><span class="line"><span class="comment">#异常回调开关</span></span><br><span class="line"><span class="string">tx-lcn.manager.ex-url-enabled=false</span></span><br><span class="line"><span class="comment"># 事务异常通知（任何http协议地址。未指定协议时，为TxManager提供的接口）</span></span><br><span class="line"><span class="string">tx-lcn.manager.ex-url=/provider/email-to/***@**.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启日志,默认为false</span></span><br><span class="line"><span class="string">tx-lcn.logger.enabled=true</span></span><br><span class="line"><span class="string">logging.level.com.codingapi=debug</span></span><br><span class="line"><span class="comment">#redis 的设置信息</span></span><br><span class="line"><span class="string">spring.redis.host=127.0.0.1</span></span><br><span class="line"><span class="string">spring.redis.port=6379</span></span><br><span class="line"><span class="string">spring.redis.password=</span></span><br></pre></td></tr></table></figure><h4 id="特别注意-1"><a href="#特别注意-1" class="headerlink" title="特别注意"></a>特别注意</h4><ol><li>TxManager 所有配置均有默认配置，请按需覆盖默认配置。</li><li>特别注意 TxManager 进程会监听两个端口号，一个为 TxManager 端口，另一个是事务消息端口。TxClient 默认连接事务消息端口是 8070，所以，为保证 TX-LCN 基于默认配置运行良好，请设置 TxManager 端口号为8069 或者指定事务消息端口为 8070。</li><li>分布式事务执行总时间 a 与 TxClient 通讯最大等待时间 b、TxManager 通讯最大等待时间 c、微服务间通讯时间 d、微服务调用链长度 e 几个时间存在着依赖关系。 a &gt;= 2c + (b + c + d) * (e - 1), 特别地，b、c、d 一致时，a &gt;= (3e-1)b。你也可以在此理论上适当在减小 a 的值，发生异常时能更快得到自动补偿，即 a &gt;= (3e-1)b - Δ（原因）。 最后，调用链小于等于 3 时，将基于默认配置运行良好。</li><li>若用 <code>tx-lcn.manager.ex-url=/provider/email-to/xxx@xx.xxx</code> 这个配置，配置管理员邮箱信息(如QQ邮箱)。</li></ol><p>配置管理员邮箱信息：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.mail.host=smtp.qq.com</span></span><br><span class="line"><span class="string">spring.mail.port=587</span></span><br><span class="line"><span class="string">spring.mail.username=xxxxx@**.com</span></span><br><span class="line"><span class="string">spring.mail.password=*********</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务 TX-LCN 快速入门</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20TX-LCN%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20TX-LCN%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Txlcn-Client-配置"><a href="#Txlcn-Client-配置" class="headerlink" title="Txlcn Client 配置"></a>Txlcn Client 配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># springcloud feign 下开启负载均衡时的配置。开启后同一个事务组下相同的模块会重复调用。</span></span><br><span class="line"><span class="comment"># 对应dubbo框架下需要设置的是 @Reference的loadbalance，有下面四种，作用都是开启后同一个事务组下相同的模块会重复调用。</span></span><br><span class="line"><span class="comment">#txlcn_random=com.codingapi.txlcn.tracing.dubbo.TxlcnRandomLoadBalance</span></span><br><span class="line"><span class="comment">#txlcn_roundrobin=com.codingapi.txlcn.tracing.dubbo.TxlcnRoundRobinLoadBalance</span></span><br><span class="line"><span class="comment">#txlcn_leastactive=com.codingapi.txlcn.tracing.dubbo.TxlcnLeastActiveLoadBalance</span></span><br><span class="line"><span class="comment">#txlcn_consistenthash=com.codingapi.txlcn.tracing.dubbo.TxlcnConsistentHashLoadBalance</span></span><br><span class="line"></span><br><span class="line"><span class="string">tx-lcn.ribbon.loadbalancer.dtx.enabled=true</span></span><br><span class="line"><span class="comment"># tx-manager 的配置地址，多个用,分割。注意设置上的地址在启动的时候会检查并连接，连接不成功会启动失败。</span></span><br><span class="line"><span class="comment"># tx-manager 下集群策略，当增加一个新的tx-manager后，tx-manager也会通知到其他的在线模块，然后tx-client会在连接上后面加入的模块。</span></span><br><span class="line"><span class="string">tx-lcn.client.manager-address=127.0.0.1:8070,127.0.0.1:8071</span></span><br><span class="line"><span class="comment"># 该参数是分布式事务框架存储的业务切面信息。采用的是h2数据库。绝对路径。该参数默认的值为&#123;user.dir&#125;/.txlcn/&#123;application.name&#125;-&#123;application.port&#125;</span></span><br><span class="line"><span class="string">tx-lcn.aspect.log.file-path=logs/.txlcn/demo-8080</span></span><br><span class="line"><span class="comment"># 调用链长度等级，默认值为3.标识调用连长度为3，该参数是用于识别分布式事务的最大通讯时间。</span></span><br><span class="line"><span class="string">tx-lcn.client.chain-level=3</span></span><br><span class="line"><span class="comment"># 该参数为tc与tm通讯时的最大超时时间，单位毫米。该参数不需要配置会在连接初始化时由tm返回。</span></span><br><span class="line"><span class="string">tx-lcn.client.tm-rpc-timeout=2000</span></span><br><span class="line"><span class="comment"># 该参数为分布式事务的最大时间，单位毫米。该参数不需要配置会在连接初始化时由tm返回。</span></span><br><span class="line"><span class="string">tx-lcn.client.dtx-time=50000</span></span><br><span class="line"><span class="comment"># 该参数为雪花算法的机器编号。该参数不需要配置会在连接初始化时由tm返回。</span></span><br><span class="line"><span class="string">tx-lcn.client.machine-id=1</span></span><br><span class="line"><span class="comment">#该参数为事务方法注解切面的orderNumber，默认值为0.</span></span><br><span class="line"><span class="string">tx-lcn.client.dtx-aspect-order=0</span></span><br><span class="line"><span class="comment">#该参数为事务连接资源方法切面的orderNumber，默认值为0.</span></span><br><span class="line"><span class="string">tx-lcn.client.resource-order=0</span></span><br><span class="line"><span class="comment">#是否开启日志记录。当开启以后需要配置对应logger的数据库连接配置信息。</span></span><br><span class="line"><span class="string">tx-lcn.logger.enabled=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#该参数为tm下的配置，tc下忽略</span></span><br><span class="line"><span class="string">tx-lcn.client.tx-manager-delay=2000</span></span><br><span class="line"><span class="comment">#该参数为tm下的配置，tc下忽略</span></span><br><span class="line"><span class="string">tx-lcn.client.tx-manager-heart=2000</span></span><br></pre></td></tr></table></figure><h4 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h4><p>微服务集群且用到 LCN 事务模式时，为保证性能请开启TX-LCN重写的负载策略：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SpringCloud 开启 (application.properties)</span></span><br><span class="line"><span class="string">tx-lcn.springcloud.loadbalance.enabled=true</span></span><br></pre></td></tr></table></figure><p>关闭业务RPC重试：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭Ribbon的重试机制</span></span><br><span class="line"><span class="string">ribbon.MaxAutoRetriesNextServer=0</span></span><br></pre></td></tr></table></figure><p>为什么要关闭服务调用的重试。远程业务调用失败有两种可能： （1），远程业务执行失败 （2）、远程业务执行成功，网络失败。对于第2种，事务场景下重试会发生，某个业务执行两次的问题。 如果业务上控制某个事务接口的幂等，则不用关闭重试。</p><h2 id="Txlcn-Manager-配置"><a href="#Txlcn-Manager-配置" class="headerlink" title="Txlcn Manager 配置"></a>Txlcn Manager 配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.application.name=tx-manager</span></span><br><span class="line"><span class="string">server.port=7970</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql 配置</span></span><br><span class="line"><span class="string">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/tx-manager?characterEncoding=UTF-8</span></span><br><span class="line"><span class="string">spring.datasource.username=root</span></span><br><span class="line"><span class="string">spring.datasource.password=root</span></span><br><span class="line">        </span><br><span class="line"><span class="string">mybatis.configuration.map-underscore-to-camel-case=true</span></span><br><span class="line"><span class="string">mybatis.configuration.use-generated-keys=true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># TxManager Host Ip 默认为 127.0.0.1</span></span><br><span class="line"><span class="string">tx-lcn.manager.host=127.0.0.1</span></span><br><span class="line"><span class="comment"># TxClient连接请求端口 默认为 8070</span></span><br><span class="line"><span class="string">tx-lcn.manager.port=8070</span></span><br><span class="line"><span class="comment"># 心跳检测时间(ms) 默认为 300000</span></span><br><span class="line"><span class="string">tx-lcn.manager.heart-time=300000</span></span><br><span class="line"><span class="comment"># 分布式事务执行总时间(ms) 默认为36000</span></span><br><span class="line"><span class="string">tx-lcn.manager.dtx-time=36000</span></span><br><span class="line"><span class="comment">#参数延迟删除时间单位ms  默认为dtx-time值</span></span><br><span class="line"><span class="string">tx-lcn.message.netty.attr-delay-time=36000</span></span><br><span class="line"><span class="comment">#事务处理并发等级 默认为128</span></span><br><span class="line"><span class="string">tx-lcn.manager.concurrent-level=128</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#后台登陆密码，默认值为codingapi</span></span><br><span class="line"><span class="string">tx-lcn.manager.admin-key=codingapi</span></span><br><span class="line"><span class="comment">#分布式事务锁超时时间 默认为-1，当-1时会用tx-lcn.manager.dtx-time的时间</span></span><br><span class="line"><span class="string">tx-lcn.manager.dtx-lock-time=-1</span></span><br><span class="line"><span class="comment">#雪花算法的sequence位长度，默认为12位.</span></span><br><span class="line"><span class="string">tx-lcn.manager.seq-len=12</span></span><br><span class="line"><span class="comment">#异常回调开关</span></span><br><span class="line"><span class="string">tx-lcn.manager.ex-url-enabled=false</span></span><br><span class="line"><span class="comment"># 事务异常通知（任何http协议地址。未指定协议时，为TxManager提供的接口）</span></span><br><span class="line"><span class="string">tx-lcn.manager.ex-url=/provider/email-to/***@**.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启日志,默认为false</span></span><br><span class="line"><span class="string">tx-lcn.logger.enabled=true</span></span><br><span class="line"><span class="string">logging.level.com.codingapi=debug</span></span><br><span class="line"><span class="comment">#redis 的设置信息</span></span><br><span class="line"><span class="string">spring.redis.host=127.0.0.1</span></span><br><span class="line"><span class="string">spring.redis.port=6379</span></span><br><span class="line"><span class="string">spring.redis.password=</span></span><br></pre></td></tr></table></figure><h4 id="特别注意-1"><a href="#特别注意-1" class="headerlink" title="特别注意"></a>特别注意</h4><ol><li>TxManager 所有配置均有默认配置，请按需覆盖默认配置。</li><li>特别注意 TxManager 进程会监听两个端口号，一个为 TxManager 端口，另一个是事务消息端口。TxClient 默认连接事务消息端口是 8070，所以，为保证 TX-LCN 基于默认配置运行良好，请设置 TxManager 端口号为8069 或者指定事务消息端口为 8070。</li><li>分布式事务执行总时间 a 与 TxClient 通讯最大等待时间 b、TxManager 通讯最大等待时间 c、微服务间通讯时间 d、微服务调用链长度 e 几个时间存在着依赖关系。 a &gt;= 2c + (b + c + d) * (e - 1), 特别地，b、c、d 一致时，a &gt;= (3e-1)b。你也可以在此理论上适当在减小 a 的值，发生异常时能更快得到自动补偿，即 a &gt;= (3e-1)b - Δ（原因）。 最后，调用链小于等于 3 时，将基于默认配置运行良好。</li><li>若用 <code>tx-lcn.manager.ex-url=/provider/email-to/xxx@xx.xxx</code> 这个配置，配置管理员邮箱信息(如QQ邮箱)。</li></ol><p>配置管理员邮箱信息：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.mail.host=smtp.qq.com</span></span><br><span class="line"><span class="string">spring.mail.port=587</span></span><br><span class="line"><span class="string">spring.mail.username=xxxxx@**.com</span></span><br><span class="line"><span class="string">spring.mail.password=*********</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务 TX-LCN 介绍</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20TX-LCN%20%E4%BB%8B%E7%BB%8D/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20TX-LCN%20%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/codingapi/txlcn-demo">官网例子</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务 Seata 常见问题</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20Seata%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20Seata%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>can not register RM,err:can not connect to services-server.</strong><br>场景：SpringCloud 引入 seata client 以来后，启动警告。<br>原因：没有启动 seata server。<br>解决：启动 seata server。</p><p><strong>Could not found property service.disableGlobalTransaction, try to use default value instead.</strong><br>场景：SpringCloud 引入 seata client 以来后，启动警告。<br>原因：没有配置或者seata 无法识别 <code>.yml</code> 的 <code>service.disableGlobalTransaction</code> 属性。<br>解决：使用 <code>.properties</code> 的配置文件或者另外创建 file.conf 文件写入 “service {disableGlobalTransaction: false}”。</p><p><strong>will connect to 127.0.0.1:8091</strong><br>场景：SpringCloud 引入 seata client 以来后，第一次启动能连接上本地 seata，第二次启动没法连接上本地 seata。<br>原因：？？<br>解决：关闭 seata server 命令行，重新打开运行 seata server。</p><p>正常情况，Seata 日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">16:48:50.705  INFO --- [ettyServerNIOWorker_1_4_8] i.s.c.r.processor.server.RegTmProcessor  : TM register success,message:RegisterTMRequest&#123;applicationId=&apos;easybyte-log&apos;, transactionServiceGroup=&apos;easybyte-log&apos;&#125;,channel:[id: 0xfe8578f6, L:/127.0.0.1:8091 - R:/127.0.0.1:49393],client version:1.0.0</span><br><span class="line">16:48:50.714  INFO --- [rverHandlerThread_1_6_500] i.s.c.r.processor.server.RegRmProcessor  : RM register success,message:RegisterRMRequest&#123;resourceIds=&apos;jdbc:mysql://47.119.139.41:3306/easybyte&apos;, applicationId=&apos;easybyte-log&apos;, transactionServiceGroup=&apos;easybyte-log&apos;&#125;,channel:[id: 0x0ab655bf, L:/127.0.0.1:8091 - R:/127.0.0.1:49392],client version:1.0.0</span><br></pre></td></tr></table></figure><p>异常情况，Seata 日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">16:47:19.896  INFO --- [ettyServerNIOWorker_1_1_8] i.s.c.r.n.AbstractNettyRemotingServer    : channel:[id: 0x5b47e626, L:/127.0.0.1:8091 - R:/127.0.0.1:49374] read idle.</span><br><span class="line">16:47:19.896  INFO --- [ettyServerNIOWorker_1_2_8] i.s.c.r.n.AbstractNettyRemotingServer    : channel:[id: 0xd2688132, L:/127.0.0.1:8091 - R:/127.0.0.1:49375] read idle.</span><br><span class="line">16:47:19.899  INFO --- [ettyServerNIOWorker_1_1_8] i.s.c.r.n.AbstractNettyRemotingServer    : 127.0.0.1:49374 to server channel inactive.</span><br><span class="line">16:47:19.899  INFO --- [ettyServerNIOWorker_1_2_8] i.s.c.r.n.AbstractNettyRemotingServer    : 127.0.0.1:49375 to server channel inactive.</span><br><span class="line">16:47:19.899  INFO --- [ettyServerNIOWorker_1_1_8] i.s.c.r.n.AbstractNettyRemotingServer    : remove unused channel:[id: 0x5b47e626, L:/127.0.0.1:8091 - R:/127.0.0.1:49374]</span><br><span class="line">16:47:19.899  INFO --- [ettyServerNIOWorker_1_2_8] i.s.c.r.n.AbstractNettyRemotingServer    : remove unused channel:[id: 0xd2688132, L:/127.0.0.1:8091 - R:/127.0.0.1:49375]</span><br><span class="line">16:47:19.914  INFO --- [ettyServerNIOWorker_1_2_8] i.s.c.r.n.AbstractNettyRemotingServer    : closeChannelHandlerContext channel:[id: 0xd2688132, L:/127.0.0.1:8091 - R:/127.0.0.1:49375]</span><br><span class="line">16:47:19.914  INFO --- [ettyServerNIOWorker_1_1_8] i.s.c.r.n.AbstractNettyRemotingServer    : closeChannelHandlerContext channel:[id: 0x5b47e626, L:/127.0.0.1:8091 - R:/127.0.0.1:49374]</span><br><span class="line">16:47:19.916  INFO --- [ettyServerNIOWorker_1_2_8] i.s.c.r.n.AbstractNettyRemotingServer    : 127.0.0.1:49375 to server channel inactive.</span><br><span class="line">16:47:19.916  INFO --- [ettyServerNIOWorker_1_1_8] i.s.c.r.n.AbstractNettyRemotingServer    : 127.0.0.1:49374 to server channel inactive.</span><br><span class="line">16:47:19.916  INFO --- [ettyServerNIOWorker_1_2_8] i.s.c.r.n.AbstractNettyRemotingServer    : remove unused channel:[id: 0xd2688132, L:/127.0.0.1:8091 ! R:/127.0.0.1:49375]</span><br><span class="line">16:47:19.916  INFO --- [ettyServerNIOWorker_1_1_8] i.s.c.r.n.AbstractNettyRemotingServer    : remove unused channel:[id: 0x5b47e626, L:/127.0.0.1:8091 ! R:/127.0.0.1:49374]</span><br></pre></td></tr></table></figure><p>2021-04-22: 发现是没有加上 <code>@GlobalTransactional</code> 注解引起的。第一个服务加了 <code>@GlobalTransactional</code> 注解，第二个服务没有加，结果第二个服务一直启动不了。<br>2021-04-22: 又发现不是这个问题。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务 Seata Server 安装</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20Seata%20Server%20%E5%AE%89%E8%A3%85/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20Seata%20Server%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务 Seata 介绍</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20Seata%20%E4%BB%8B%E7%BB%8D/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20Seata%20%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p><h2 id="Seata-术语"><a href="#Seata-术语" class="headerlink" title="Seata 术语"></a>Seata 术语</h2><p><strong>TC (Transaction Coordinator) - 事务协调者</strong><br>维护全局和分支事务的状态，驱动全局事务提交或回滚。</p><p><strong>TM (Transaction Manager) - 事务管理器</strong><br>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p><p><strong>RM (Resource Manager) - 资源管理器</strong><br>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p><h2 id="TCC-模式"><a href="#TCC-模式" class="headerlink" title="TCC 模式"></a>TCC 模式</h2><p>回顾总览中的描述：一个分布式的全局事务，整体是 两阶段提交 的模型。全局事务是由若干分支事务组成的，分支事务要满足 两阶段提交 的模型要求，即需要每个分支事务都具备自己的：</p><ol><li>一阶段 prepare 行为。</li><li>二阶段 commit 或 rollback 行为。</li></ol><p><img src="https://img.alicdn.com/tfs/TB14Kguw1H2gK0jSZJnXXaT1FXa-853-482.png" alt=""></p><p>根据两阶段行为模式的不同，我们将分支事务划分为 Automatic (Branch) Transaction Mode 和 Manual (Branch) Transaction Mode。</p><p>AT 模式（参考链接 TBD）基于支持本地 ACID 事务的关系型数据库：</p><ol><li>一阶段 prepare 行为：在本地事务中，一并提交业务数据更新和相应回滚日志记录。</li><li>二阶段 commit 行为：马上成功结束，自动异步批量清理回滚日志。</li><li>二阶段 rollback 行为：通过回滚日志，自动生成补偿操作，完成数据回滚。</li></ol><p>相应的，TCC 模式，不依赖于底层数据资源的事务支持：</p><ol><li>一阶段 prepare 行为：调用 自定义 的 prepare 逻辑。</li><li>二阶段 commit 行为：调用 自定义 的 commit 逻辑。</li><li>二阶段 rollback 行为：调用 自定义 的 rollback 逻辑。</li></ol><p>所谓 TCC 模式，是指支持把自定义的分支事务纳入到全局事务的管理中。</p><h2 id="Saga-模式"><a href="#Saga-模式" class="headerlink" title="Saga 模式"></a>Saga 模式</h2><p>Saga 模式是 Seata 提供的长事务解决方案，在 Saga 模式中，业务流程中每个参与者都提交本地事务，当出现某一个参与者失败则补偿前面已经成功的参与者，一阶段正向服务和二阶段补偿服务都由业务开发实现。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210422164520.png" alt=""></p><p>理论基础：Hector &amp; Kenneth 发表论⽂ Sagas （1987）。</p><p>适用场景：</p><ol><li>业务流程长、业务流程多</li><li>参与者包含其它公司或遗留系统服务，无法提供 TCC 模式要求的三个接口</li></ol><p>优缺点：</p><ol><li>一阶段提交本地事务，无锁，高性能</li><li>事件驱动架构，参与者可异步执行，高吞吐</li><li>补偿服务易于实现</li><li>不保证隔离性</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务 框架对比</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<h2 id="CAP-兼容"><a href="#CAP-兼容" class="headerlink" title="CAP 兼容"></a>CAP 兼容</h2><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><h4 id="TX-LCN"><a href="#TX-LCN" class="headerlink" title="TX-LCN"></a>TX-LCN</h4><p>在相同条件下各种事务模式的效率关系：TCC &gt; LCN &gt; TXC。</p><p>相比本地事务各模式的下降率：</p><div class="table-container"><table><thead><tr><th style="text-align:left">框架</th><th>模式</th><th>下降率</th></tr></thead><tbody><tr><td style="text-align:left">Dubbo</td><td>LCN</td><td>31.3%</td></tr><tr><td style="text-align:left">Dubbo</td><td>TXC</td><td>36.1%</td></tr><tr><td style="text-align:left">Dubbo</td><td>TCC</td><td>28.6%</td></tr><tr><td style="text-align:left">SpringCloud</td><td>LCN</td><td>21.5%</td></tr><tr><td style="text-align:left">SpringCloud</td><td>TXC</td><td>27.1%</td></tr><tr><td style="text-align:left">SpringCloud</td><td>TCC</td><td>21.5%</td></tr></tbody></table></div><blockquote><p>下降率是指在相同的RPC框架下各种事务模式相同条件下的吞吐量相比本地事务吞吐量的下降比例。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2></blockquote><h2 id="使用企业"><a href="#使用企业" class="headerlink" title="使用企业"></a>使用企业</h2><ol><li>Seata: <a href="https://github.com/seata/seata/issues/1246">135</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务 TCC</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20TCC/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20TCC/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍 TCC 的原理，以及从代码的角度上分析如何实现的；不涉及具体使用示例。本文分析的是 Github 中开源项目 <a href="https://github.com/changmingxie/tcc-transaction">tcc-transaction</a> 的代码。当然 Github 上有多个 TCC 项目，但是他们原理相近，所以不过多介绍，有兴趣的小伙伴自行阅读源码。</p><h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><p>tcc-transaction 的架构由以下部分组成：</p><ol><li>一个完整的业务活动由一个主业务服务与若干从业务服务组成；</li><li>主业务服务负责发起并完成整个业务活动。</li><li>从业务服务提供TCC型业务操作。</li><li>业务活动管理器控制业务活动的一致性，它登记业务活动中的操作，并在业务活动提交时进行 confirm 操作，在业务活动取消时进行 cancel 操作；</li></ol><p>TCC 和 2PC/3PC 很像，不过 TCC 的事务控制都是业务代码层面的，而 2PC/3PC 则是资源层面的。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/20210317003130.png" alt=""></p><p>TCC 事务其实主要包含两个阶段：Try 阶段、Confirm/Cancel 阶段。</p><p>从 TCC 的逻辑模型上我们可以看到，TCC 的核心思想是，Try 阶段检查并预留资源，确保在 Confirm 阶段有资源可用，这样可以最大程度的确保 Confirm 阶段能够执行成功。</p><ol><li><p>Try-尝试执行业务<br>完成所有业务检查(一致性)</p><p>预留必须业务资源(准隔离性)</p></li><li><p>Confirm-确认执行业务<br>真正执行业务。</p><p>不作任何业务检查。</p><p>只使用 Try 阶段预留的业务资源。</p><p>Confirm 操作必须保证幂等性。</p></li><li><p>Cancel-取消执行业务<br>释放Try阶段预留的业务资源。</p><p>Cancel操作必须保证幂等性。</p></li></ol><h2 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h2><p>下面通过一个示例来讨论 TCC 事务：Tom 需要给 Tracy 转 10 元，当使用 TCC 解决这种事务时，应该如何去做呢？</p><h4 id="转账面临的主要问题"><a href="#转账面临的主要问题" class="headerlink" title="转账面临的主要问题"></a>转账面临的主要问题</h4><p>我们考虑一下这个转账过程面临的问题：</p><ol><li>需要确保 Tom 账户余额不少于10元；</li><li>需要确保账户余额的正确性，例如：假设 Tom 只有 10 元钱，但是 Tom 同时给 Tracy、Angle 转账 10 元；Tom 给其他人转账时，也可能收到其他人转过来的钱，此时账户的余额不能出现错乱（Tracy 账户也面临过类似的问题）；</li><li>当并发量比较大时，要能够确保性能；</li></ol><h4 id="TCC-解决问题的思路"><a href="#TCC-解决问题的思路" class="headerlink" title="TCC 解决问题的思路"></a>TCC 解决问题的思路</h4><p>TCC 解决分布式事物的思路是，一个大事务拆解成多个小事务。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/002.png" alt=""></p><h4 id="TCC-处理逻辑"><a href="#TCC-处理逻辑" class="headerlink" title="TCC 处理逻辑"></a>TCC 处理逻辑</h4><p>使用 TCC 事务时，伪代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Compensable</span>(confirmMethod = <span class="string">"transferConfirm"</span>, cancelMethod = <span class="string">"transferCancel"</span>)</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transferTry</span><span class="params">(<span class="keyword">long</span> fromAccountId, <span class="keyword">long</span> toAccountId, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查Tom账户</span></span><br><span class="line">    <span class="comment">//锁定Tom账户</span></span><br><span class="line">    <span class="comment">//锁定Tracy账户</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transferConfirm</span><span class="params">(<span class="keyword">long</span> fromAccountId, <span class="keyword">long</span> toAccountId, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//tom账户-10元</span></span><br><span class="line">    <span class="comment">//tracy账户+10元</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transferCancel</span><span class="params">(<span class="keyword">long</span> fromAccountId, <span class="keyword">long</span> toAccountId, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//解除Tom账户锁定</span></span><br><span class="line">    <span class="comment">//接触Tracy账户锁定</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Try 逻辑中需要确保 Tom 账户的余额足够，并锁定需要使用的资源（Tom、Tracy 账户）；如果这一步操作执行成功（没有出现异常），那么将执行 Confirm 方法，如果执行失败，那么将执行 Cancel 方法。注意 Confirm、Cancel 需要做好幂等。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/006.png" alt=""></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>在上面的 TCC 事务中，转账操作其实涉及六次操作，实际项目中，在任何一个步骤都可能失败，那么当任何一个步骤失败时，TCC 框架是如何做到数据一致性的呢？</p><h4 id="整体流程图"><a href="#整体流程图" class="headerlink" title="整体流程图"></a>整体流程图</h4><p>以下为 TCC 的处理流程图，它可以确保不管是在 Try 阶段，还是在 Confirm/Cancel 阶段都可以确保数据的一致性。</p><p><img src="https://cdn.jsdelivr.net/gh/zhangqinghua/hexo_image/007.png" alt=""></p><p>从流程图上可以看到，TCC 依赖于一条事务处理记录，在开始 TCC 事务前标记创建此记录，然后在 TCC 的每个环节持续更新此记录的状态，这样就可以知道事务执行到那个环节了，当一次执行失败，进行重试时同样根据此数据来确定当前阶段，并判断应该执行什么操作。</p><p>因为存在失败重试的逻辑，所以 Cancel、Commit 方法必须实现幂等。其实在分布式开发中，凡是涉及到写操作的地方都应该实现幂等。</p><h4 id="TCC-核心处理逻辑"><a href="#TCC-核心处理逻辑" class="headerlink" title="TCC 核心处理逻辑"></a>TCC 核心处理逻辑</h4><p>因为使用了 <code>@Compensable</code> 注解，所以当调用 <code>transferTry</code> 方法前，首先进入代理类中。在 TCC 中有两个 <code>Interceptor</code> 会对 <code>@Compensable</code> 标注的方法生效，他们分别是：<code>CompensableTransactionInterceptor</code>（TCC 主要逻辑在此 <code>Interceptor</code> 中完成）、<code>ResourceCoordinatorInterceptor</code>（处理资源相关的事宜）。</p><p><code>CompensableTransactionInterceptor#interceptCompensableMethod</code> 是 TCC 的核心处理逻辑。<code>interceptCompensableMethod</code> 封装请求数据，为 TCC 事务做准备，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">interceptCompensableMethod</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    Method method = CompensableMethodUtils.getCompensableMethod(pjp);</span><br><span class="line">    Compensable compensable = method.getAnnotation(Compensable.class);</span><br><span class="line">    Propagation propagation = compensable.propagation();</span><br><span class="line">    TransactionContext transactionContext = FactoryBuilder.factoryOf(compensable.transactionContextEditor())</span><br><span class="line">                                                          .getInstance()</span><br><span class="line">                                                          .get(pjp.getTarget(), method, pjp.getArgs());</span><br><span class="line">    <span class="keyword">boolean</span> asyncConfirm = compensable.asyncConfirm();</span><br><span class="line">    <span class="keyword">boolean</span> asyncCancel = compensable.asyncCancel();</span><br><span class="line">    <span class="keyword">boolean</span> isTransactionActive = transactionManager.isTransactionActive();</span><br><span class="line">    <span class="keyword">if</span> (!TransactionUtils.isLegalTransactionContext(isTransactionActive, propagation, transactionContext)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SystemException(<span class="string">"no active compensable transaction while propagation is mandatory for method "</span> + method.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    MethodType methodType = CompensableMethodUtils.calculateMethodType(propagation, isTransactionActive, transactionContext);</span><br><span class="line">    <span class="keyword">switch</span> (methodType) &#123;</span><br><span class="line">        <span class="keyword">case</span> ROOT:</span><br><span class="line">            <span class="keyword">return</span> rootMethodProceed(pjp, asyncConfirm, asyncCancel);</span><br><span class="line">        <span class="keyword">case</span> PROVIDER:</span><br><span class="line">            <span class="keyword">return</span> providerMethodProceed(pjp, transactionContext, asyncConfirm, asyncCancel);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>rootMethodProceed</code> 是 TCC 和核心处理逻辑，实现了对 Try、Confirm、Cancel 的执行，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">rootMethodProceed</span><span class="params">(ProceedingJoinPoint pjp, <span class="keyword">boolean</span> asyncConfirm, <span class="keyword">boolean</span> asyncCancel)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    Object returnValue = <span class="keyword">null</span>;</span><br><span class="line">    Transaction transaction = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        transaction = transactionManager.begin();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           returnValue = pjp.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable tryingException) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isDelayCancelException(tryingException)) &#123;</span><br><span class="line">               transactionManager.syncTransaction();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               logger.warn(String.format(<span class="string">"compensable transaction trying failed. transaction content:%s"</span>, JSON.toJSONString(transaction)), tryingException);</span><br><span class="line">               transactionManager.rollback(asyncCancel);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> tryingException;</span><br><span class="line">        &#125;</span><br><span class="line">       transactionManager.commit(asyncConfirm);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        transactionManager.cleanAfterCompletion(transaction);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个方法中我们看到，首先执行的是 <code>@Compensable</code> 注解标注的方法（Try），如果抛出异常，那么执行 rollback 方法（Cancel），否则执行 <code>commit</code> 方法（ Confirm ）。</p><h4 id="异常处理流程"><a href="#异常处理流程" class="headerlink" title="异常处理流程"></a>异常处理流程</h4><p>考虑到在 Try、Cancel、Confirm 过程中都可能发生异常，所以在任何一步失败时，系统都能够要么回到最初（未转账）状态，要么到达最终（已转账）状态。下面讨论一下 TCC 代码层面是如何保证一致性的。</p><p><strong>Begin</strong><br>在前面的代码中，可以看到执行 try 之前，TCC 通过 <code>transactionManager.begin()</code> 开启了一个事务，这个 begin 方法的核心是：</p><ol><li>创建一个记录，用于记录事务执行到那个环节了；</li><li>注册当前事务到 <code>TransactionManager</code> 中，在 Confirm、Cancel 过程中可以使用此 <code>Transaction</code> 来 commit 或者 rollback；</li></ol><p><code>TransactionManager#begin</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Transaction <span class="title">begin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Transaction transaction = <span class="keyword">new</span> Transaction(TransactionType.ROOT);</span><br><span class="line">   transactionRepository.create(transaction);</span><br><span class="line">   registerTransaction(transaction);</span><br><span class="line">   <span class="keyword">return</span> transaction;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CachableTransactionRepository#create</code> 创建一个用于标识事务执行环节的记录，然后将 <code>transaction</code> 放到缓存中区。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Transaction transaction)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = doCreate(transaction);</span><br><span class="line">    <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        putToCache(transaction);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CachableTransactionRepository</code> 有多个子类（<code>FileSystemTransactionRepository</code>、<code>JdbcTransactionRepository</code>、<code>RedisTransactionRepository</code>、<code>ZooKeeperTransactionRepository</code>），通过这些类可以实现记录 db、file、redis、zk 等的解决方案。</p><p><strong>commit/rollback</strong><br>在commit、rollback中，都有这样一行代码，用于更新事务状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transactionRepository.update(transaction);</span><br></pre></td></tr></table></figure><p>这行代码将当前事务的状态标记为 commit/rollback，如果失败会抛出异常，不会执行后续的 Confirm/Cancel 方法；如果成功，才会执行 Confirm/Cancel 方法。</p><p><strong>Scheduler</strong><br>如果在 try/commit/rollback 过程中失败了，请求( <code>transferTry</code> 方法)将会立即返回，TCC 在这里引入了重试机制，即通过定时程序查询执行失败的任务，然后进行补偿操作。具体见：<code>TransactionRecovery#startRecover</code> 查询所有异常事务，然后逐个进行处理。注意重试操作有一个最大重试次数的限制，如果超过最大重试次数，此事务将会被忽略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startRecover</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Transaction&gt; transactions = loadErrorTransactions();</span><br><span class="line">   recoverErrorTransactions(transactions);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Transaction&gt; <span class="title">loadErrorTransactions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> currentTimeInMillis = Calendar.getInstance().getTimeInMillis();</span><br><span class="line">    TransactionRepository transactionRepository = transactionConfigurator.getTransactionRepository();</span><br><span class="line">    RecoverConfig recoverConfig = transactionConfigurator.getRecoverConfig();</span><br><span class="line">    <span class="keyword">return</span> transactionRepository.findAllUnmodifiedSince(<span class="keyword">new</span> Date(currentTimeInMillis - recoverConfig.getRecoverDuration() * <span class="number">1000</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recoverErrorTransactions</span><span class="params">(List&lt;Transaction&gt; transactions)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Transaction transaction : transactions) &#123;</span><br><span class="line">        <span class="keyword">if</span> (transaction.getRetriedCount() &gt; transactionConfigurator.getRecoverConfig().getMaxRetryCount()) &#123;</span><br><span class="line">           logger.error(String.format(<span class="string">"recover failed with max retry count,will not try again. txid:%s, status:%s,retried count:%d,transaction content:%s"</span>, transaction.getXid(), transaction.getStatus().getId(), transaction.getRetriedCount(), JSON.toJSONString(transaction)));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (transaction.getTransactionType().equals(TransactionType.BRANCH)</span><br><span class="line">                &amp;&amp; (transaction.getCreateTime().getTime() +</span><br><span class="line">               transactionConfigurator.getRecoverConfig().getMaxRetryCount() *</span><br><span class="line">                       transactionConfigurator.getRecoverConfig().getRecoverDuration() * <span class="number">1000</span></span><br><span class="line">                &gt; System.currentTimeMillis())) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           transaction.addRetriedCount();</span><br><span class="line">            <span class="keyword">if</span> (transaction.getStatus().equals(TransactionStatus.CONFIRMING)) &#123;</span><br><span class="line">               transaction.changeStatus(TransactionStatus.CONFIRMING);</span><br><span class="line">                transactionConfigurator.getTransactionRepository().update(transaction);</span><br><span class="line">                transaction.commit();</span><br><span class="line">               transactionConfigurator.getTransactionRepository().delete(transaction);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (transaction.getStatus().equals(TransactionStatus.CANCELLING)</span><br><span class="line">                    || transaction.getTransactionType().equals(TransactionType.ROOT)) &#123;</span><br><span class="line">               transaction.changeStatus(TransactionStatus.CANCELLING);</span><br><span class="line">               transactionConfigurator.getTransactionRepository().update(transaction);</span><br><span class="line">                transaction.rollback();</span><br><span class="line">               transactionConfigurator.getTransactionRepository().delete(transaction);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> OptimisticLockException</span><br><span class="line">                    || ExceptionUtils.getRootCause(throwable) <span class="keyword">instanceof</span> OptimisticLockException) &#123;</span><br><span class="line">               logger.warn(String.format(<span class="string">"optimisticLockException happened while recover. txid:%s, status:%s,retried count:%d,transaction content:%s"</span>, transaction.getXid(), transaction.getStatus().getId(), transaction.getRetriedCount(), JSON.toJSONString(transaction)), throwable);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               logger.error(String.format(<span class="string">"recover failed, txid:%s, status:%s,retried count:%d,transaction content:%s"</span>, transaction.getXid(), transaction.getStatus().getId(), transaction.getRetriedCount(), JSON.toJSONString(transaction)), throwable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>目前解决分布式事务的方案中，最稳定可靠的方案有：TCC、2PC/3PC、最终一致性。这三种方案各有优劣，有自己的适用场景。下面我们简单讨论一下 TCC 主要的优缺点。</p><p>TCC 的主要优点有：</p><ol><li>因为 Try 阶段检查并预留了资源，所以 Confirm 阶段一般都可以执行成功；</li><li>资源锁定都是在业务代码中完成，不会 block 住 DB，可以做到对 DB 性能无影响；</li><li>TCC 的实时性较高，所有的 DB 写操作都集中在 Confirm 中，写操作的结果实时返回（失败时因为定时程序执行时间的关系，略有延迟）;</li></ol><p>TCC 的主要缺点有：</p><ol><li>因为事务状态管理，将产生多次 DB 操作，这将损耗一定的性能，并使得整个TCC事务时间拉长；</li><li>事务涉及方越多，Try、Confirm、Cancel 中的代码就越复杂，可复用性就越底（这一点主要是相对最终一致性方案而言的）。另外涉及方越多，这几个阶段的处理时间越长，失败的可能性也越高；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务 XA</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20XA/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20XA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务 解决方案</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务 理论基础</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>事务是指在一个操作单元中的所有操作最终要保持一致的行为，要么所有操作都成功，要么所有的操作都被撤销。</p><p>举个例子：你去小卖铺买东西，“一手交钱、一手交货”就是一个事务的例子，交钱和交货必须全部成功，事务才算成功，任一个操作失败，事务都将撤销所有已成功的活动。</p><p>事务可以看作是一次大的操作，它是由不同的小操作组成，这么操作要么全部成功，要么全部失败。例如：</p><ol><li>转账：包含转出和转入操作；</li><li>网购：包含下单、扣减库存、支付等操作；</li></ol><h2 id="事务的四个特性"><a href="#事务的四个特性" class="headerlink" title="事务的四个特性"></a>事务的四个特性</h2><ol><li>原子性（要么全部执行、要么全部不执行）<br>操作这些指令时，要么全部执行成功，要么全部不执行。只要其中一个指令执行失败，所有的指令都执行失败，数据进行回滚，回到执行前的数据状态；</li><li><p>一致性（能量守恒、总量不变）<br>食物的执行使数据从一个状态转换成为另一个状态，数据库的完整性没有被破坏；</p><p>eg：拿转装来说，假设用户 A 和 B 两者的钱加起来一共是 2000，那么不管 A 和 B 之间如何转账，转几次帐，事务结束后两个用户的钱相加起来应该还是 2000，这就是事务一致性。</p></li><li><p>隔离性（信息彼此独立，互不干扰）<br>隔离性是当多个用户并发访问数据库时，比如操作同一张表，数据库为每一个用户开启的食物，不能被其它事务的操作所干扰，多个并发事务之间要相互隔离。</p></li><li><p>持久性（不会轻易改变）<br>当事务正确完成后，它对于数据的改变是永久性的。</p></li></ol><h2 id="本地实现事务"><a href="#本地实现事务" class="headerlink" title="本地实现事务"></a>本地实现事务</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="comment">-- 1. 本地数据库操作：张三减少金额</span></span><br><span class="line"><span class="comment">-- 2. 本地数据库操作：李四增加金额</span></span><br><span class="line"><span class="keyword">commit</span> <span class="keyword">transaction</span>;</span><br></pre></td></tr></table></figure><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><p>随着互联网的快速发展，软件系统由原来的单体应用转变为分布式应用。分布式应用会把一个应用系统拆分成可独立部署的多个服务，因此需要服务与服务之间远程协作才能完成事务操作。这种分布式系统环境下由不同的服务之间通过网络远程协作完成的事务称之为分布式事务，例如用户注册送积分事务、创建订单减库存事务，银行转账事务等都是分布式事务。</p><h2 id="CAP-原则"><a href="#CAP-原则" class="headerlink" title="CAP 原则"></a>CAP 原则</h2><p>CAP 原则又叫 CAP 定理，同时又被称作布鲁尔定理（Brewer’s theorem），指的是在一个分布式系统中，不可能同时满足以下三点：</p><ol><li><p>Consistency 一致性（副本最新）<br>指在写操作完成后开始的任何读操作都必须返回该值，或者后续写操作的结果。</p><p>也就是说，在一致性系统中，一旦客户端将值写入任何一台服务器并获取响应，那么之后客户端从其他任何服务器读取的都是刚写入的数据。</p><p>一致性保证了不管向哪台服务器写入数据，其他的服务器能实时同步数据。</p></li><li><p>Availability 可用性（高可用）<br>可用性是指，每次向未崩溃的节点发送请求，总能保证收到响应数据（允许不是最新数据）。</p></li><li><p>Partition tolerance 分区容忍性（能容忍网络分区）<br>分布式系统在遇到任何网络分区故障的时候，仍然能够对外提供满意一致性的可用性的服务。也就是说，服务器 A 和 B 发送给对方的任何消息都是可以放弃的，也就是说 A 和 B 可能因为各种意外情况，导致无法成功进行同步。分布式系统要能容忍这种情况。除非整个网络环境都发生了故障。</p></li></ol><blockquote><p>什么是分区：在分布式系统中，不同的节点分布在不同的子网络下，由于一些特殊的原因，这些子节点之间出现了网络不通的状态，但它们的内部子网络是正常的。从而导致了整个系统的环境被切分成了若干个孤立的区域。这就是分区。</p></blockquote><h2 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h2><p>一致性可以分为强一致性和弱一致性。所谓强一致性，即复制是同步的，弱一致性，复制是异步的。</p><p>CAP 理论中，我们只能在 C、A、P 中选择两个条件。而对于业务系统而言，我们往往选择牺牲一致性来换取系统的可用性和分区容错性。不过这里要指出的是，所谓的“牺牲一致性”不是完全放弃数据一致性，而是牺牲强一致性换取弱一致性。</p><h4 id="强一致性"><a href="#强一致性" class="headerlink" title="强一致性"></a>强一致性</h4><p>系统中的某个数据被成功更新后，后续任何对该数据的读取操作都将得到更新后的值。也称为：原子一致性（Atomic Consistency）、线性一致性（Linearizable Consistency）。</p><p>两个要求：</p><ol><li>任何一次读都能读到某个数据的最近一次写的数据；</li><li>系统中的所有进程，看到的操作顺序，都和全局时钟下的顺序一致。</li></ol><p>简而言之，在任意时刻，所有节点中的数据是一样的。例如，对于关系型数据库，要求更新过的数据能被后续的访问都能看到。</p><p>总结：</p><ol><li>一个集群需要对外部提供强一致性，所以只要集群内部某一台服务器的数据发生了变化，那么就需要等待集群内其他服务器的数据同步完成之后，才能保证对外提供服务；</li><li>保证了强一致性，务必会造成损耗可用性；</li></ol><h4 id="弱一致性"><a href="#弱一致性" class="headerlink" title="弱一致性"></a>弱一致性</h4><p>系统中的某个数据被更新后，后续对该数据的读取操作可能得到更改后的值，也可能是更改前的值。</p><p>但即使过了“不一致时间窗口”这段时间后，后续对该数据的读取也不一定是最新的。</p><p>所以说，可以理解为数据更新后，如果能容忍后续的访问只能访问到部分或者全部访问不到，则是若一致性。</p><h4 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h4><p>是若一致性的特殊形式，存储系统保证在没有新的更新的条件下，最终所有的访问都是最新更新的值。</p><p>不能保证任意时刻任意节点上的同一份数据都是相同的，但是随着时间的迁移，不同节点上的同一份数据总是向着趋同的方向变化。</p><h2 id="BASE-理论"><a href="#BASE-理论" class="headerlink" title="BASE 理论"></a>BASE 理论</h2><p>BASE 理论即 Basic Available（基本可用）、Soft State（柔性状态）、Eventual Consisstency（最终一致性）：</p><ol><li><p>基本可用<br>整个系统在某些不可抗力的情况下，仍然能够保证“可用性”，即一定时间内仍然能够返回一个明确的结果。</p><p>例如：当举行大促时，响应时间可以适当延长，或者给部分用户返回一个降级页面，从而缓解服务器压力。</p></li><li><p>柔性状态<br>即允许系统中的数据存在中间状态，并认为该状态的存在不会影响系统的整体可用性，允许系统不同节点的数据副本之间进行数据同步的过程存在延迟。</p><p>例如：微信支付，等待回调，中间有几秒延迟，使用“支付中”状态表示。</p></li><li><p>最终一致性<br>同一数据的不同副本的状态，可以不需要实时一致，但一定要保证经过一定时间后仍然是一致的。</p></li></ol><p>BASE 理论是对 CAP 中的一致性和可用性进行一个权衡的结果，理论的核心思想是：我们无法做到强一致性，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>分析具体应用场景，包括以下三个：A、服务内跨数据库的事务；B、跨内部服务的事务；C、跨外部服务的事务。</p><p>其中划分内部和外部的标准是：内部服务我们可以控制其实现，修改配置或代码；外部服务指的是第三方的，只能约定通信的方式和具体协议，具体代码实现在控制范围之外。</p><h4 id="转账"><a href="#转账" class="headerlink" title="转账"></a>转账</h4><p>转账是最经典的分布式事务场景，假设用户 A 使用银行 app 发起一笔跨行转账给用户 B，银行系统首先扣掉用户 A 的钱，然后增加用户 B 账户中的余额。此时就会出现 2 种异常情况：</p><ol><li>用户 A 的账户扣款成功，用户 B 账户余额增加失败；</li><li>用户 A 的账户扣款失败，用户 B 账户余额增加成功；</li></ol><p>对于银行系统来说，以上 2 种情况都是不允许发生，此时就需要分布式事务来保证转账操作的成功。</p><h4 id="扣库存"><a href="#扣库存" class="headerlink" title="扣库存"></a>扣库存</h4><p>在电商系统中，下单是用户最常见操作。在下单接口中必定会涉及生成订单 id, 扣减库存等操作，对于微服务架构系统，订单 id 与库存服务一般都是独立的服务，此时就需要分布式事务来保证整个下单接口的成功。</p><h4 id="同步超时"><a href="#同步超时" class="headerlink" title="同步超时"></a>同步超时</h4><p>在微服务体系架构下，我们的支付与订单都是作为单独的系统存在。订单的支付状态依赖支付系统的通知，假设一个场景：我们的支付系统收到来自第三方支付的通知，告知某个订单支付成功，接收通知接口需要同步调用订单服务变更订单状态接口，更新订单状态为成功。</p><p>流程图如下，从图中可以看出有两次调用，第三方支付调用支付服务，以及支付服务调用订单服务，这两步调用都可能出现调用超时的情况，此处如果没有分布式事务的保证，就会出现用户订单实际支付情况与最终用户看到的订单支付情况不一致的情况。</p><pre class="mermaid">sequenceDiagram   autonumber   participant A as 第三方支付   participant B as 支付服务   participant C as 订单服务   A->>B: 支付成功   B->>C: 支付成功   C->>C: 更新状态   C->>B: 返回结果    B->>A: 返回结果</pre><h2 id="分布式事务的场景类型"><a href="#分布式事务的场景类型" class="headerlink" title="分布式事务的场景类型"></a>分布式事务的场景类型</h2><p>分布式事务的应用类型包括以下三个：A、服务内跨数据库的事务；B、跨内部服务的事务；C、跨外部服务的事务。</p><p>其中划分内部和外部的标准是：内部服务我们可以控制其实现，修改配置或代码；外部服务指的是第三方的，只能约定通信的方式和具体协议，具体代码实现在控制范围之外。</p><h4 id="服务内跨数据库"><a href="#服务内跨数据库" class="headerlink" title="服务内跨数据库"></a>服务内跨数据库</h4><p>在同一个服务方法内，访问两个或两个以上数据库。</p><p>我们知道，Java 事务是通过 <code>Connection</code> 对象控制的。不同的数据库，是不同的数据库链接，通过不同的 <code>Connection</code> 对象实现。传统数据库事务无法实现事务控制，需要引入事务协调者的概念。这个场景中分布式体现在数据库的部署上。</p><pre class="mermaid">graph TB   XXX应用 --> A[(A)]   XXX应用 --> B[(B)]</pre><h4 id="跨内部服务的事务"><a href="#跨内部服务的事务" class="headerlink" title="跨内部服务的事务"></a>跨内部服务的事务</h4><p>一个服务通过微服务框架或者 RPC 调用调用其他的服务，多个子服务需要同时成功或失败。每个子服务都有自己的持久化方式，不一定是数据库，体现事务的持久性。每个子服务部署在不同的服务容器中，不同的服务容器部署在不同的服务器节点上。这个场景中分布式体现在服务（或应用）的部署上。</p><p>这时候，事务的概念已经超出“数据库”的范畴了。</p><p><img src="https://img-blog.csdn.net/20180612134212895" alt=""></p><h4 id="跨外部服务的事务"><a href="#跨外部服务的事务" class="headerlink" title="跨外部服务的事务"></a>跨外部服务的事务</h4><p>这个场景是在跨内部服务的事务的基础上更进一步，服务的具体实现在我们控制范围之外。我们不能限制其实现语言，不能要求指定方法上加标注（注解）。甚至除了服务调用的网络通道外，我们不能期望服务间访问相同的 Zookeeper 作为事务协调器。在这个场景中，我们只能在通信协议层面做约定，是最彻底的分布式场景。</p><p><img src="https://img-blog.csdn.net/20180612134232972" alt=""></p><p><pre class="mermaid">graph TB   subgraph 公司内部   支付服务-->订单服务   end   支付服务-->微信支付</pre></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://xiaomi-info.github.io/2020/01/02/distributed-transaction/">分布式事务，这一篇就够了</a><br><a href="https://www.jianshu.com/p/044e95223a17">阿里分布式事务框架Seata原理解析</a><br><a href="https://cloud.tencent.com/developer/article/1543101">使用Seata彻底解决Spring Cloud中的分布式事务问题！</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud 提高部署速度</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringCloud/SpringCloud%20%E6%8F%90%E9%AB%98%E9%83%A8%E7%BD%B2%E9%80%9F%E5%BA%A6/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringCloud/SpringCloud%20%E6%8F%90%E9%AB%98%E9%83%A8%E7%BD%B2%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<ol><li>只编译必须的模块。</li><li>体积瘦身。</li><li>提高启动速度。</li></ol><h2 id="打包指定的模块"><a href="#打包指定的模块" class="headerlink" title="打包指定的模块"></a>打包指定的模块</h2><p>在多模块的 Maven 项目中，如果每次打包整个工程显得有些冗余和笨重。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br><span class="line"></span><br><span class="line"><span class="comment"># [INFO] icebartech-parent .................................. SUCCESS [  1.406 s]</span></span><br><span class="line"><span class="comment"># [INFO] icebartech-beetlsql ................................ SUCCESS [ 15.974 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte ........................................... SUCCESS [  0.060 s]</span></span><br><span class="line"><span class="comment"># [INFO] aframework ......................................... SUCCESS [  0.065 s]</span></span><br><span class="line"><span class="comment"># [INFO] icebartech-core .................................... SUCCESS [ 15.247 s]</span></span><br><span class="line"><span class="comment"># [INFO] icebartech-oss ..................................... SUCCESS [  3.345 s]</span></span><br><span class="line"><span class="comment"># [INFO] icebartech-sms ..................................... SUCCESS [  3.655 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-api ....................................... SUCCESS [  9.841 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-gateway ................................... SUCCESS [  4.043 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-swagger ................................... SUCCESS [  3.582 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-log ....................................... SUCCESS [  4.723 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-auth ...................................... SUCCESS [  5.448 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-product ................................... SUCCESS [  4.815 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-store ..................................... SUCCESS [  4.883 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-merchant .................................. SUCCESS [  5.926 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-base ...................................... SUCCESS [  4.157 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-flow ...................................... SUCCESS [  3.539 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-consumer .................................. SUCCESS [  3.471 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-media ..................................... SUCCESS [  3.906 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-stats ..................................... SUCCESS [  3.871 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-member .................................... SUCCESS [  4.311 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-market .................................... SUCCESS [  4.254 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-template .................................. SUCCESS [  3.564 s]</span></span><br><span class="line"><span class="comment"># [INFO] ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># [INFO] BUILD SUCCESS</span></span><br><span class="line"><span class="comment"># [INFO] ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># [INFO] Total time:  01:56 min</span></span><br><span class="line"><span class="comment"># [INFO] Finished at: 2021-03-16T12:22:29+08:00</span></span><br><span class="line"><span class="comment"># [INFO] ------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><p>我们可以使用命令 <code>mvn clean package install -pl 模块的名称 -am</code> 打包指定模块。</p><ol><li><code>-pl</code><br>打包指定模块。</li><li><code>-am</code><br>打包所指定模块的依赖模块。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package install -pl easybyte-template -am</span><br><span class="line"></span><br><span class="line"><span class="comment"># [INFO] icebartech-parent .................................. SUCCESS [  0.732 s]</span></span><br><span class="line"><span class="comment"># [INFO] icebartech-beetlsql ................................ SUCCESS [  6.958 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte ........................................... SUCCESS [  0.051 s]</span></span><br><span class="line"><span class="comment"># [INFO] aframework ......................................... SUCCESS [  0.056 s]</span></span><br><span class="line"><span class="comment"># [INFO] icebartech-core .................................... SUCCESS [ 10.841 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-api ....................................... SUCCESS [ 11.444 s]</span></span><br><span class="line"><span class="comment"># [INFO] easybyte-template .................................. SUCCESS [  5.048 s]</span></span><br><span class="line"><span class="comment"># [INFO] ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># [INFO] BUILD SUCCESS</span></span><br><span class="line"><span class="comment"># [INFO] ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># [INFO] Total time:  36.369 s</span></span><br><span class="line"><span class="comment"># [INFO] Finished at: 2021-03-16T12:09:57+08:00</span></span><br><span class="line"><span class="comment"># [INFO] ------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Swagger 教程</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Swagger/Swagger%20%E6%95%99%E7%A8%8B/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Swagger/Swagger%20%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="创建多个分组"><a href="#创建多个分组" class="headerlink" title="创建多个分组"></a>创建多个分组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> docket().paths(PathSelectors.ant(<span class="string">"/admin/**"</span>))</span><br><span class="line">                  .build()</span><br><span class="line">                  .groupName(<span class="string">"2.平台端"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> docket().paths(PathSelectors.ant(<span class="string">"/merchant/**"</span>))</span><br><span class="line">                  .build()</span><br><span class="line">                  .groupName(<span class="string">"3.商户端"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> docket().paths(PathSelectors.ant(<span class="string">"/store/**"</span>))</span><br><span class="line">                  .build()</span><br><span class="line">                  .groupName(<span class="string">"4.门店端"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ApiSelectorBuilder <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .host(swagger2CoreConfig.host())</span><br><span class="line">            .directModelSubstitute(LocalDate.class, String.class)</span><br><span class="line">            .directModelSubstitute(LocalTime.class, String.class)</span><br><span class="line">            .directModelSubstitute(LocalDateTime.class, String.class)</span><br><span class="line">            .directModelSubstitute(ZonedDateTime.class, String.class)</span><br><span class="line">            .apiInfo(swagger2CoreConfig.apiInfo())</span><br><span class="line">            .select()</span><br><span class="line">            <span class="comment">// 扫描路径</span></span><br><span class="line">            .apis(Swagger2CoreConfig.basePackage(<span class="string">"com.icebartech,com.easybyte"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时间格式优化"><a href="#时间格式优化" class="headerlink" title="时间格式优化"></a>时间格式优化</h2><p>Swagger UI 的页面中，请求的数据类型会被序列化成字符串，显示在 Model Schema 中。但是，Java8 中的 <code>LocalDateTime</code> 类型会被序列化成很复杂的字符串，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@ApiModelProperty</span>(value = <span class="string">"时间段（HH:mm）（开始）"</span>, example = <span class="string">"09:30"</span>)</span><br><span class="line"><span class="keyword">private</span> LocalTime startTime;</span><br></pre></td></tr></table></figure></p><p>显示效果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"startTime"</span>: &#123;</span><br><span class="line">      <span class="attr">"hour"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"minute"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"nano"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"second"</span>: <span class="number">0</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决的办法其实很简单，在 Swagger 的配置中，添加 <code>directModelSubstitute</code> 方法的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">.directModelSubstitute(LocalDateTime.class, Date.class)</span><br><span class="line">.directModelSubstitute(LocalDate.class, String.class)</span><br><span class="line">.directModelSubstitute(LocalTime.class, String.class)</span><br><span class="line">.directModelSubstitute(ZonedDateTime.class, String.class)</span><br><span class="line">.apiInfo(apiInfo()).select()</span><br><span class="line">.apis(RequestHandlerSelectors.basePackage(<span class="string">"com.abcd.restful"</span>)).paths(PathSelectors.any()).build();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder().title(<span class="string">"Platform API"</span>).contact(<span class="string">"abcd"</span>).version(<span class="string">"1.0"</span>).build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>directModelSubstitute</code> 方法顾名思义就是在序列化的时候用一个类型代替一个类型。</p><p>上面的例子，<code>LocalDateTime</code> 类型用 <code>Date</code> 类型替代，<code>LocalDate</code> 类型直接用 <code>String</code> 类型替代，这样就避免的 Swagger 原生的序列化方法把 <code>LocalDateTime</code> 序列化的很复杂。效果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"finishTime"</span>: <span class="string">"18:30"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="限制对象无限嵌套"><a href="#限制对象无限嵌套" class="headerlink" title="限制对象无限嵌套"></a>限制对象无限嵌套</h2><p><a href="https://blog.csdn.net/henuboy/article/details/80822032">https://blog.csdn.net/henuboy/article/details/80822032</a></p><h2 id="扫描多个包路径"><a href="#扫描多个包路径" class="headerlink" title="扫描多个包路径"></a>扫描多个包路径</h2><p>需要重写 <code>basePackage</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ApiSelectorBuilder <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .host(swagger2CoreConfig.host())</span><br><span class="line">            .directModelSubstitute(LocalDate.class, String.class)</span><br><span class="line">            .directModelSubstitute(LocalTime.class, String.class)</span><br><span class="line">            .directModelSubstitute(LocalDateTime.class, String.class)</span><br><span class="line">            .directModelSubstitute(ZonedDateTime.class, String.class)</span><br><span class="line">            .apiInfo(swagger2CoreConfig.apiInfo())</span><br><span class="line">            .select()</span><br><span class="line">            <span class="comment">// 扫描路径</span></span><br><span class="line">            .apis(Swagger2CoreConfig.basePackage(<span class="string">"com.icebartech,com.easybyte"</span>));</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"Guava"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Predicate&lt;RequestHandler&gt; <span class="title">basePackage</span><span class="params">(<span class="keyword">final</span> String basePackage)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> input -&gt; declaringClass(input).transform(handlerPackage(basePackage)).or(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"Guava"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Function&lt;Class&lt;?&gt;, Boolean&gt; handlerPackage(<span class="keyword">final</span> String basePackage) &#123;</span><br><span class="line">   <span class="keyword">return</span> input -&gt; &#123;</span><br><span class="line">      <span class="comment">// 循环判断匹配</span></span><br><span class="line">      <span class="keyword">for</span> (String strPackage : basePackage.split(<span class="string">","</span>)) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isMatch = input.getPackage().getName().startsWith(strPackage);</span><br><span class="line">            <span class="keyword">if</span> (isMatch) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"Guava"</span>, <span class="string">"deprecation"</span>&#125;)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Optional&lt;? extends Class&lt;?&gt;&gt; declaringClass(RequestHandler input) &#123;</span><br><span class="line">   <span class="keyword">return</span> Optional.fromNullable(input.declaringClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="微服务聚合文档"><a href="#微服务聚合文档" class="headerlink" title="微服务聚合文档"></a>微服务聚合文档</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ApiIgnore</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSwaggerResourcesProvider</span> <span class="keyword">implements</span> <span class="title">SwaggerResourcesProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SiteProperties siteProperties;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SwaggerProperties swaggerProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/custom/api-docs"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">test</span><span class="params">(HttpServletRequest request, String group)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 当前域名 https://beesgo.chinabeego.com/api</span></span><br><span class="line">        String baseUrl = request.getRequestURL().toString().replace(<span class="string">"/custom/api-docs"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="comment">// String baseUrl = "http://localhost:8081/api";</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取网关（本地）模块的swagger数据（只保留头部描述）</span></span><br><span class="line">        JSONObject localApiDocs = JSONObject.fromObject(Request.Get(baseUrl + <span class="string">"/v2/api-docs?group=Last.所有接口"</span>)</span><br><span class="line">                                                               .execute()</span><br><span class="line">                                                               .returnContent()</span><br><span class="line">                                                               .toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除掉basePath，由各自的path定义</span></span><br><span class="line">        localApiDocs.put(<span class="string">"basePath"</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取其它模块的swagger数据</span></span><br><span class="line">        List&lt;JSONObject&gt; routesApiDocs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        swaggerProperties.getServices().parallelStream().forEach(servername -&gt; &#123;</span><br><span class="line">            String url = <span class="string">"http://localhost:8081"</span> + <span class="string">"/"</span> + servername + <span class="string">"/api/v2/api-docs?group="</span> + group;</span><br><span class="line">            System.out.println(url);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String ret = Request.Get(url).execute().returnContent().toString();</span><br><span class="line">                JSONObject object = JSONObject.fromObject(ret);</span><br><span class="line">                routesApiDocs.add(object);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                log.warn(<span class="string">"Swagger整合微服务「&#123;&#125;」失败，接口「&#123;&#125;」访问失败"</span>, servername, url);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 整合其它模块的path数据</span></span><br><span class="line">        JSONObject paths = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        <span class="keyword">for</span> (JSONObject route : routesApiDocs) &#123;</span><br><span class="line">            <span class="comment">// 因为本地的basePath已经移除掉，需要这里定义basePath，才能转发到真正的微服务的路径上去</span></span><br><span class="line">            <span class="keyword">if</span> (!route.containsKey(<span class="string">"paths"</span>)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!route.containsKey(<span class="string">"basePath"</span>)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 /api 来替换真实路径，有网关兜底。</span></span><br><span class="line">            <span class="comment">// String basePath = route.getString("basePath");</span></span><br><span class="line">            String basePath = <span class="string">"/api"</span>;</span><br><span class="line">            JSONObject routePaths = route.getJSONObject(<span class="string">"paths"</span>);</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            Iterator&lt;String&gt; keys = routePaths.keys();</span><br><span class="line">            <span class="keyword">while</span> (keys.hasNext()) &#123;</span><br><span class="line">                String key = keys.next();</span><br><span class="line">                paths.put(basePath + key, routePaths.getJSONObject(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        localApiDocs.put(<span class="string">"paths"</span>, paths);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 整合其它模块的definitions数据（入参，返回的描述）</span></span><br><span class="line">        JSONObject definitions = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        <span class="keyword">for</span> (JSONObject route : routesApiDocs) &#123;</span><br><span class="line">            <span class="keyword">if</span> (route.containsKey(<span class="string">"definitions"</span>)) &#123;</span><br><span class="line">                JSONObject routeDefinitions = route.getJSONObject(<span class="string">"definitions"</span>);</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                Iterator&lt;String&gt; keys = routeDefinitions.keys();</span><br><span class="line">                <span class="keyword">while</span> (keys.hasNext()) &#123;</span><br><span class="line">                    String key = keys.next();</span><br><span class="line">                    definitions.put(key, routeDefinitions.getJSONObject(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        localApiDocs.put(<span class="string">"definitions"</span>, definitions);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 整合其它模块的tags数据，使得swagger根据tags对path进行排序</span></span><br><span class="line">        List&lt;JSONObject&gt; tags = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (JSONObject route : routesApiDocs) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!route.containsKey(<span class="string">"tags"</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; route.getJSONArray(<span class="string">"tags"</span>).size(); i++) &#123;</span><br><span class="line">                tags.add(route.getJSONArray(<span class="string">"tags"</span>).getJSONObject(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tags.sort(Comparator.comparing(l -&gt; l.getString(<span class="string">"name"</span>)));</span><br><span class="line">        localApiDocs.put(<span class="string">"tags"</span>, tags);</span><br><span class="line">        <span class="keyword">return</span> localApiDocs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里要将多个swagger文档整合在一起</span></span><br><span class="line"><span class="comment">     * 1. swagger的头部信息取自http://localhost:8081/api/v2/api-docs</span></span><br><span class="line"><span class="comment">     * 2. swagger的各个服务取自ttp://localhost:8081/api/order/v2/api-docs</span></span><br><span class="line"><span class="comment">     * 3. 创建一个新文档，将上面2个整合在一起</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SwaggerResource&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;SwaggerResource&gt; resources = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String group : swaggerProperties.getGroups()) &#123;</span><br><span class="line">            SwaggerResource swaggerResource = <span class="keyword">new</span> SwaggerResource();</span><br><span class="line">            swaggerResource.setName(group);</span><br><span class="line">            <span class="comment">// 这里使用自定义的api-docs地址</span></span><br><span class="line">            swaggerResource.setLocation(<span class="string">"/custom/api-docs?group="</span> + group);</span><br><span class="line">            swaggerResource.setSwaggerVersion(<span class="string">"1.0"</span>);</span><br><span class="line">            resources.add(swaggerResource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resources;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Swagger文档数据</span></span><br><span class="line"><span class="attr">swagger:</span></span><br><span class="line">  <span class="comment"># 接口分组</span></span><br><span class="line"><span class="attr">  groups:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">2.</span><span class="string">平台端</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">3.</span><span class="string">商户端</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">4.</span><span class="string">门店端</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">5.</span><span class="string">小程序</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">6.</span><span class="string">通用接口</span></span><br><span class="line">  <span class="comment"># 聚合文档，涉及到的服务</span></span><br><span class="line"><span class="attr">  services:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">easybyte-log</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">easybyte-base</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">easybyte-auth</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">easybyte-merchant</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">easybyte-store</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">easybyte-product</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">easybyte-flow</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">easybyte-media</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">easybyte-consumer</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">easybyte-stats</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">easybyte-member</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">easybyte-market</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">easybyte-template</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Swagger </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud 分布式事务解决方案</title>
      <link href="/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringCloud/SpringCloud%20%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2021/03/16/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringCloud/SpringCloud%20%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="XA"><a href="#XA" class="headerlink" title="XA"></a>XA</h2><p>XA 又称两阶段提交，顾名思义就是要分两步提交。存在一个负责协调各个本地资源管理器的事务管理器，本地资源管理器一般是由数据库实现，事务管理器在第一阶段的时候询问各个资源管理器是否都就绪？如果收到每个资源的回复都是 yes，则在第二阶段提交事务，如果其中任意一个资源的回复是 no, 则回滚事务。</p><p>大致的流程：</p><ol><li><p>第一阶段（prepare）<br>事务管理器向所有本地资源管理器发起请求，询问是否是 ready 状态，所有参与者都将本事务能否成功的信息反馈发给协调者；</p></li><li><p>第二阶段 (commit/rollback)<br>事务管理器根据所有本地资源管理器的反馈，通知所有本地资源管理器，步调一致地在所有分支上提交或者回滚。</p></li></ol><p>存在的问题：</p><ol><li><p>同步阻塞<br>当参与事务者存在占用公共资源的情况，其中一个占用了资源，其他事务参与者就只能阻塞等待资源释放，处于阻塞状态。</p></li><li><p>单点故障<br>一旦事务管理器出现故障，整个系统不可用。</p></li><li><p>数据不一致<br>在阶段二，如果事务管理器只发送了部分 commit 消息，此时网络发生异常，那么只有部分参与者接收到 commit 消息，也就是说只有部分参与者提交了事务，使得系统数据不一致。</p></li><li><p>不确定性<br>当协事务管理器发送 commit 之后，并且此时只有一个参与者收到了 commit，那么当该参与者与事务管理器同时宕机之后，重新选举的事务管理器无法确定该条消息是否提交成功。</p></li></ol><h2 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h2><p>TCC 由 Try、Confirm、Cancel 三个阶段来进行：</p><ol><li><p>Try 阶段<br>尝试执行，完成所有业务检查（一致性）, 预留必须业务资源（准隔离性）。</p><p>在 Try 阶段，是对业务系统进行检查及资源预览，比如订单和存储操作，需要检查库存剩余数量是否够用，并进行预留，预留操作的话就是新建一个可用库存数量字段，Try 阶段操作是对这个可用库存数量进行操作。</p></li><li><p>Confirm 阶段<br>确认执行真正执行业务，不作任何业务检查，只使用 Try 阶段预留的业务资源，Confirm 操作满足幂等性。要求具备幂等设计，Confirm 失败后需要进行重试。</p></li><li><p>Cancel 阶段<br>取消执行，释放 Try 阶段预留的业务资源 Cancel 操作满足幂等性 Cancel 阶段的异常和 Confirm 阶段异常处理方案基本上一致。</p></li></ol><p>TCC 事务机制相比于 XA，解决了其几个缺点：</p><ol><li><p>单点故障<br>解决了协调者单点，由主业务方发起并完成这个业务活动。业务活动管理器也变成多点，引入集群。</p></li><li><p>同步阻塞<br>引入超时，超时后进行补偿，并且不会锁定整个资源，将资源转换为业务逻辑形式，粒度变小。</p></li><li><p>数据一致性<br>有了补偿机制之后，由业务活动管理器控制一致性。</p></li></ol><p>基于 TCC 实现分布式事务，会将原来只需要一个接口就可以实现的逻辑拆分为 Try、Confirm、Cancel 三个接口，所以代码实现复杂度相对较高。</p><h2 id="本地消息表"><a href="#本地消息表" class="headerlink" title="本地消息表"></a>本地消息表</h2><h2 id="最大努力通知"><a href="#最大努力通知" class="headerlink" title="最大努力通知"></a>最大努力通知</h2><p>最大努力通知是最简单的一种柔性事务，适用于一些最终一致性时间敏感度低的业务，且被动方处理结果 不影响主动方的处理结果。</p><p>这个方案的大致意思就是：</p><ol><li>系统 A 本地事务执行完之后，发送个消息到 MQ；</li><li>这里会有个专门消费 MQ 的服务，这个服务会消费 MQ 并调用系统 B 的接口；</li><li>要是系统 B 执行成功就 ok 了；要是系统 B 执行失败了，那么最大努力通知服务就定时尝试重新调用系统 B, 反复 N 次，最后还是不行就放弃。</li></ol><h2 id="可靠消息最终一致性"><a href="#可靠消息最终一致性" class="headerlink" title="可靠消息最终一致性"></a>可靠消息最终一致性</h2><p>123</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>123</p><h4 id="XA-1"><a href="#XA-1" class="headerlink" title="XA"></a>XA</h4><p>目前支付宝使用两阶段提交思想实现了分布式事务服务 (Distributed Transaction Service, DTS) ，它是一个分布式事务框架，用来保障在大规模分布式环境下事务的最终一致性。</p><blockquote><p>开源版本为 Seata。</p></blockquote><h4 id="TCC-1"><a href="#TCC-1" class="headerlink" title="TCC"></a>TCC</h4><p>TCC 需要事务接口提供 try, confirm, cancel 三个接口，提高了编程的复杂性。依赖于业务方来配合提供这样的接口，推行难度大，所以一般不推荐使用这种方式。</p><h4 id="可靠消息最终一致性-1"><a href="#可靠消息最终一致性-1" class="headerlink" title="可靠消息最终一致性"></a>可靠消息最终一致性</h4><p>目前市面上支持该方案的 mq 只有阿里的 rocketmq, 该方案应用场景也比较多，比如用户注册成功后发送邮件、电商系统给用户发送优惠券等需要保证最终一致性的场景。</p><h4 id="本地消息表-1"><a href="#本地消息表-1" class="headerlink" title="本地消息表"></a>本地消息表</h4><p>跨行转账可通过该方案实现。</p><p>用户 A 向用户 B 发起转账，首先系统会扣掉用户 A 账户中的金额，将该转账消息写入消息表中，如果事务执行失败则转账失败，如果转账成功，系统中会有定时轮询消息表，往 mq 中写入转账消息，失败重试。mq 消息会被实时消费并往用户 B 中账户增加转账金额，执行失败会不断重试。</p><p><img src="https://xiaomi-info.github.io/2020/01/02/distributed-transaction/bank-transfer.jpg" alt=""></p><p>小米海外商城用户订单数据状态变更，会将变更状态记录消息表中，脚本将订单状态消息写入 mq，最终消费 mq 给用户发送邮件、短信、push 等。</p><h4 id="最大努力通知-1"><a href="#最大努力通知-1" class="headerlink" title="最大努力通知"></a>最大努力通知</h4><p>最大努力通知最常见的场景就是支付回调，支付服务收到第三方服务支付成功通知后，先更新自己库中订单支付状态，然后同步通知订单服务支付成功。如果此次同步通知失败，会通过异步脚步不断重试地调用订单服务的接口。</p><pre class="mermaid">sequenceDiagram    participant 微信服务    participant 支付服务    loop 最大重试N次        微信服务->>支付服务: 支付成功        支付服务-->>微信服务: 处理失败    end    支付服务-->>微信服务: 处理成功</pre><p>小米海外商城目前除了支付回调外，最常用的场景是订单数据同步。例如系统 A、B 进行数据同步，当系统 A 发生订单数据变更，先将数据变更消息写入小米 notify 系统（作用等同 mq），然后 notify 系统异步处理该消息来调用系统 B 提供的接口并进行重试到最大次数。</p><pre class="mermaid">sequenceDiagram   participant 服务A   participant Notify   participant 服务B   服务A ->> Notify: 订单同步   Notify -->> 服务A: 处理成功   loop 最大重试N次      Notify ->> 服务B: 订单同步      服务B -->> Notify: 处理失败   end   服务B -->> Notify: 处理成功</pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud OpenFeign</title>
      <link href="/2021/02/28/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringCloud/SpringCloud%20OpenFeign/"/>
      <url>/2021/02/28/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringCloud/SpringCloud%20OpenFeign/</url>
      
        <content type="html"><![CDATA[<p>Feign 是一个声明式 WebService 客户端。使用 Feign 能让便携 WebService 客户端更加简单。</p><p>它的使用方法是定一个一个服务接口然后在上面添加注解。Feign 也支持可拔插式的编码器和解码器。SpringCloud 对 Feign 进行了封装，使其支持了 Spring MVC 标准注解和 <code>HttpMessageConverters</code>。Feign 可以与 Eureke 和 Ribbon 组合使用以支持负载均衡。</p><h2 id="Feign-能干什么"><a href="#Feign-能干什么" class="headerlink" title="Feign 能干什么"></a>Feign 能干什么</h2><p>Feign 旨在使编写 Java Http 客户端变得更加容易。</p><p>前面在使用 Ribbon + RestTemplate 时，利用 RestTemplate 对 Http 请求的封装处理，形成了一套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。</p><p>所以，Feign 在此基础上做了进一步封装，由它来帮助我们定义和实现依赖服务接口的定义。在 Feign 的实现下，我们只需创建一个接口并使用注解的方式来配置它（以前是 Dao 接口上面标注 Mapper 注解，现在是一个微服务接口上标注一个 Feign 注解），即可完成对服务提供方的接口绑定，简化了使用 Spring Cloud Ribbon 时，自动封装服务调用客户端的开发量。</p><h2 id="Feign-集成了-Ribbon"><a href="#Feign-集成了-Ribbon" class="headerlink" title="Feign 集成了 Ribbon"></a>Feign 集成了 Ribbon</h2><p>利用 Ribbon 维护了 Payment 的服务列表信息，并且通过轮询实现了客户端和负载均衡。而与 Ribbon 不同的是，通过 Feign 只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。</p><h2 id="Feign-和-OpenFeign-的区别"><a href="#Feign-和-OpenFeign-的区别" class="headerlink" title="Feign 和 OpenFeign 的区别"></a>Feign 和 OpenFeign 的区别</h2><p>Feign 是 SpringCloud 组件中的一个轻量级 RESTful 的 HTTP 服务客户端。Feign 内置了 Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign 的使用方法是：使用 Feign 的注解定义接口，调用这个接口，就可以调用服务注册中心的服务。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>OpenFeign 是 Spring Cloud 在 Feign 的基础上支持了 SpringMVC 的注解，如 @RequestMapping 等等。OpenFeign 的 @FeignClient 可以解析 SpringMVC 的@RequestMapping 注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其它服务。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="OpenFeign-使用步骤"><a href="#OpenFeign-使用步骤" class="headerlink" title="OpenFeign 使用步骤"></a>OpenFeign 使用步骤</h2><h4 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h4><ol><li>注册中心<br>已启动了一个 Eureka 注册中心，地址为本机 8080 端口。当然，如果是其他注册中心也可以。</li><li>服务注册<br>已经注册了两个服务名为 ORDER_PROVIDE 和 ORDER_COMSUMER 的服务，地址分别为本机 8081 和 8082 端口。</li><li>提供服务<br> 服务提供者 ORDER_PROVIDE 提供 <code>getUserById</code> 和 <code>sayHi</code> 的接口。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   IUserAdminService userAdminService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">   <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"/getUserById/&#123;userId&#125;"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> BaseResponse&lt;UserVO&gt; <span class="title">getUserById</span><span class="params">(@PathVariable Integer userId)</span></span>&#123; </span><br><span class="line">      <span class="keyword">return</span> BaseResponse.success(userVO);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"/sayHi"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">()</span></span>&#123;</span><br><span class="line">   String number= UUID.randomUUID().toString();</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"service,port:"</span>+serverPort+<span class="string">",number:"</span>+ number;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>给消费者服务 ORDER_COMSUMER 添加 OpenFeign 的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置-YML"><a href="#配置-YML" class="headerlink" title="配置 YML"></a>配置 YML</h4><h4 id="创建生产者和消费者服务，将其注册到注册中心"><a href="#创建生产者和消费者服务，将其注册到注册中心" class="headerlink" title="创建生产者和消费者服务，将其注册到注册中心"></a>创建生产者和消费者服务，将其注册到注册中心</h4><h2 id="OpenFeign-超时控制"><a href="#OpenFeign-超时控制" class="headerlink" title="OpenFeign 超时控制"></a>OpenFeign 超时控制</h2><h2 id="OpenFeign-日志打印"><a href="#OpenFeign-日志打印" class="headerlink" title="OpenFeign 日志打印"></a>OpenFeign 日志打印</h2>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security</title>
      <link href="/2021/02/21/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringBoot/Spring%20Security/"/>
      <url>/2021/02/21/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringBoot/Spring%20Security/</url>
      
        <content type="html"><![CDATA[<p>示例一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()           <span class="comment">// 确保对我们应用程序的任何请求都需要对用户进行身份验证</span></span><br><span class="line">        .anyRequest()</span><br><span class="line">        .authenticated()</span><br><span class="line">        .and()</span><br><span class="line">        .formLogin()                   <span class="comment">// 允许用户使用基于表单的登录进行身份验证</span></span><br><span class="line">        .and()</span><br><span class="line">        .httpBasic();                  <span class="comment">// 允许用户使用 HTTP Basic 身份验证进行身份验证</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例一：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        .anyRequest()</span><br><span class="line">        .authenticated()</span><br><span class="line">        .and()</span><br><span class="line">        .formLogin()</span><br><span class="line">        .loginPage(<span class="string">"/login"</span>)           <span class="comment">// 指定登录页面的位置。</span></span><br><span class="line">        .permitAll();                  <span class="comment">// 授予所有用户(即未经身份验证的用户)访问我们登录页面的权限。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>示例一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()                                                  <span class="comment">// http.authorizeRequests()方法有多个子级，每个匹配器均按声明 Sequences 考虑。        </span></span><br><span class="line">        .antMatchers(<span class="string">"/resources/**"</span>, <span class="string">"/signup"</span>, <span class="string">"/about"</span>).permitAll()        <span class="comment">// 如果 URL 以“/resources /”开头，等于“/signup”或等于“/about”，则任何用户都可以访问请求。          </span></span><br><span class="line">        .antMatchers(<span class="string">"/admin/**"</span>).hasRole(<span class="string">"ADMIN"</span>)                            <span class="comment">// 任何以“/admin /”开头的 URL 都将限于角色为“ ROLE_ADMIN”的用户。</span></span><br><span class="line">        .antMatchers(<span class="string">"/db/**"</span>).access(<span class="string">"hasRole('ADMIN') and hasRole('DBA')"</span>)  <span class="comment">// 任何以“/db /”开头的 URL 都要求用户同时具有“ ROLE_ADMIN”和“ ROLE_DBA”</span></span><br><span class="line">        .anyRequest().authenticated()                                         <span class="comment">// 尚未匹配的任何 URL 仅要求对用户进行身份验证      </span></span><br><span class="line">        .and()</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        .formLogin();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.logout()                                   <span class="comment">// 提供注销支持。使用WebSecurityConfigurerAdapter时将自动应用。                          </span></span><br><span class="line">        .logoutUrl(<span class="string">"/my/logout"</span>)                    <span class="comment">// 触发注销的 URL 发生(默认为/logout)。如果启用了 CSRF 保护(默认)，则请求也必须是 POST。                          </span></span><br><span class="line">        .logoutSuccessUrl(<span class="string">"/my/index"</span>)              <span class="comment">// 发生注销后重定向到的 URL。默认值为/login?logout。                         </span></span><br><span class="line">        .logoutSuccessHandler(logoutSuccessHandler) <span class="comment">// 让我们指定一个自定义LogoutSuccessHandler。如果指定此选项，则logoutSuccessUrl()将被忽略。                           </span></span><br><span class="line">        .invalidateHttpSession(<span class="keyword">true</span>)                <span class="comment">// 指定注销时是否使HttpSession无效。默认情况下，这是“ true”。在幕后配置SecurityContextLogoutHandler。                          </span></span><br><span class="line">        .addLogoutHandler(logoutHandler)            <span class="comment">// 添加LogoutHandler。默认情况下，将SecurityContextLogoutHandler添加为最后的LogoutHandler。                            </span></span><br><span class="line">        .deleteCookies(cookieNamesToClear)          <span class="comment">// 允许指定成功注销后将删除的 cookie 名称。这是显式添加CookieClearingLogoutHandler的快捷方式。                         </span></span><br><span class="line">        .and()</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Gateway</title>
      <link href="/2021/02/17/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringCloud/SpringCloud%20Gateway/"/>
      <url>/2021/02/17/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringCloud/SpringCloud%20Gateway/</url>
      
        <content type="html"><![CDATA[<h2 id="附：常见问题"><a href="#附：常见问题" class="headerlink" title="附：常见问题"></a>附：常见问题</h2><p><strong>The following method did not exist: org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.setHandlePing(Z)V</strong><br>场景：SpringBoot 2.2.3 SpringCloud Hoxton.SR3 启动 gateway 服务报错。<br>原因：版本不兼容？官网上写了是 SR5以下对应 SpringBoot 2.2.X。<br>解决：使用最新版 2.2.13 和 SR10。</p><p><strong>predicates 修改了，不生效，总是跳转到 阿里云首页</strong><br>场景：predicates -Path修改不生效。<br>场景：切换不同浏览器能生效。<br>场景：www.baidu.com 不成功。CDNS、阿里云成功。<br>原因：未知。<br>解决：未知。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Nacos</title>
      <link href="/2021/02/17/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringCloud/SpringCloud%20Nocas/"/>
      <url>/2021/02/17/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringCloud/SpringCloud%20Nocas/</url>
      
        <content type="html"><![CDATA[<h2 id="附：Docker-安装-Nacos"><a href="#附：Docker-安装-Nacos" class="headerlink" title="附：Docker 安装 Nacos"></a>附：Docker 安装 Nacos</h2><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>在 MySQL 创建 Nocas 数据库 nacos_cofig。</p><p>然后执行 SQL 文件：<a href="https://github.com/alibaba/nacos/blob/master/config/src/main/resources/META-INF/nacos-db.sql">https://github.com/alibaba/nacos/blob/master/config/src/main/resources/META-INF/nacos-db.sql</a></p><blockquote><p>Nacos1 只支持 MySQL8 以下的版本。</p></blockquote><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker pull nacos/nacos-server:1.4.2</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">zhangqinghua$ docker images</span><br><span class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nacos/nacos-server           latest              9c0b55a5ab2c        4 weeks ago         935MB</span><br></pre></td></tr></table></figure><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker run --name nacos-quick -e MODE=standalone -p 8849:8848 \</span><br><span class="line">                                            -e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">                                            -e MYSQL_SERVICE_HOST=47.119.139.41 \</span><br><span class="line">                                            -e MYSQL_SERVICE_PORT=3306 \</span><br><span class="line">                                            -e MYSQL_SERVICE_DB_NAME=nacos_config \</span><br><span class="line">                                            -e MYSQL_SERVICE_USER=easybyte \</span><br><span class="line">                                            -e MYSQL_SERVICE_PASSWORD=easybyte \</span><br><span class="line">                                            -d nacos/nacos-server:1.4.2</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">配置项</th><th>描述</th><th>可选参数</th><th>默认值</th></tr></thead><tbody><tr><td style="text-align:left">MODE</td><td>模式（集群、单机）</td><td>cluster / standalone</td><td>cluster</td></tr><tr><td style="text-align:left">NACOS_SERVERS</td><td>nacos cluster地址</td><td>eg. ip1, ip2, ip3</td><td></td></tr><tr><td style="text-align:left">NACOS_SERVER_IP</td><td>多网卡下的自定义nacos服务器IP</td><td></td><td></td></tr><tr><td style="text-align:left">PREFER_HOST_MODE</td><td>是否支持 hostname</td><td>hostname / ip</td><td>ip</td></tr><tr><td style="text-align:left">NACOS_SERVER_PORT</td><td>服务端口号</td><td></td><td>8848</td></tr><tr><td style="text-align:left">SPRING_DATASOURCE_PLATFORM</td><td>单机模式支持 MySQL</td><td>mysql / empty</td><td>empty</td></tr><tr><td style="text-align:left">MYSQL_DATABASE_NUM</td><td>数据库数量</td><td></td><td>2</td></tr><tr><td style="text-align:left">MYSQL_MASTER_SERVICE_HOST</td><td>MySQL 主节点 host</td><td></td><td></td></tr><tr><td style="text-align:left">MYSQL_MASTER_SERVICE_PORT</td><td>MySQL 主节点 port</td><td></td><td>3306</td></tr><tr><td style="text-align:left">MYSQL_MASTER_SERVICE_DB_NAME</td><td>MySQL 主节点数据库名</td><td></td><td></td></tr><tr><td style="text-align:left">MYSQL_MASTER_SERVICE_USER</td><td>MySQL 主节点用户名</td><td></td><td></td></tr><tr><td style="text-align:left">MYSQL_MASTER_SERVICE_PASSWORD</td><td>MySQL 主节点密码</td><td></td><td></td></tr><tr><td style="text-align:left">MYSQL_SLAVE_SERVICE_HOST</td><td>MySQL 从节点 host</td><td></td><td></td></tr><tr><td style="text-align:left">MYSQL_SLAVE_SERVICE_PORT</td><td>MySQL 从节点 port</td><td></td><td>3306</td></tr><tr><td style="text-align:left">JVM_XMS</td><td>-Xms</td><td></td><td>2G</td></tr><tr><td style="text-align:left">JVM_XMX</td><td>-Xmx</td><td></td><td>2G</td></tr><tr><td style="text-align:left">JVM_XMN</td><td>-Xmx</td><td></td><td>2G</td></tr><tr><td style="text-align:left">JVM_MS</td><td>-XX:MetaspaceSize</td><td></td><td>128M</td></tr><tr><td style="text-align:left">JVM_MMS</td><td>-XX:MaxMetaspaceSize</td><td></td><td>320M</td></tr><tr><td style="text-align:left">NACOS_DEBUG</td><td>开启远程调试</td><td>y / n</td><td>n</td></tr><tr><td style="text-align:left">TOMCAT_ACCESSLOG_ENABLED</td><td>server.tomcat.accesslog</td><td></td><td>false</td></tr></tbody></table></div><h4 id="查看启动日志"><a href="#查看启动日志" class="headerlink" title="查看启动日志"></a>查看启动日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker logs -f mynacos</span><br></pre></td></tr></table></figure><h4 id="访问-Nacos"><a href="#访问-Nacos" class="headerlink" title="访问 Nacos"></a>访问 Nacos</h4><p>访问地址：<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a><br>账号密码：nacos / nacos</p><h2 id="附：常见问题"><a href="#附：常见问题" class="headerlink" title="附：常见问题"></a>附：常见问题</h2><p><strong>Docker 部署 Nacos 报错：java.lang.IllegalStateException: No DataSource set</strong><br>原因：Nacos1 不支持 MySQL8。<br>解决：1.切换 5.7 版本 2.修改 Nacos1 源码 3.使用Nacos2（目前没有 Dcoker 版本）</p><p><strong>启动报错：Caused by: java.net.UnknownHostException: jmenv.tbsite.net</strong><br>原因：启动模式没设置导致的。<br>解决：<code>sh startup.sh -m standalone</code>。</p><p>启动报错：Referenced from: /private/var/folders/wz/7_0z_zvj7_j8dsrm7cg6yz2w0000gn/T/librocksdbjni6447145289520783579.jnilib (which was built for Mac OS X 10.15)<br>原因：MacOS 版本过低。<br>解决：升级 MacOS 或使用 Docker。</p><p><strong>[NACOS HTTP-GET] The maximum number of tolerable server reconnection errors has been reached</strong><br>场景：SpringBoot 使用 Nacos 作为配置中心，启动报错。<br>原因：<code>spring.cloud.nacos.config</code> 必须配置在 <code>bootstrap.yml</code> 文件，而项目里放在了 <code>api-nacos.yml</code> 文件然后用 <code>spring.profiles.include</code> 引入。<br>解决：<code>spring.cloud.nacos.config</code> 配置在 <code>bootstrap.yml</code> 文件。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud 分布式事务协议</title>
      <link href="/2021/02/17/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringCloud/SpringCloud%20%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%8D%8F%E8%AE%AE/"/>
      <url>/2021/02/17/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/SpringCloud/SpringCloud%20%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>在分布式系统中，每个节点都可以知晓自己操作的成功或者失败，却无法知道其它节点操作的成功或失败。当一个事务跨多个节点时，为了保持事务的原子性和一致性，而引入一个协调者来统一掌控所有参与者的操作结果，并指示它们是否要把操作结果进行真正的提交或者回滚。</p><h2 id="二阶段提交"><a href="#二阶段提交" class="headerlink" title="二阶段提交"></a>二阶段提交</h2><p>二阶段提交（Two-phase Commit，2PC）是常用的分布式事务解决方案，即将食物的提交过程分为两个阶段来进行处理。</p><p>阶段：</p><ol><li>准备阶段；</li><li>提交阶段；</li></ol><p>参与角色：</p><ol><li>协调者：事务的发起者；</li><li>参与者：事务的执行者；</li></ol><h4 id="第一阶段：投票阶段"><a href="#第一阶段：投票阶段" class="headerlink" title="第一阶段：投票阶段"></a>第一阶段：投票阶段</h4><h4 id="第二阶段：提交执行"><a href="#第二阶段：提交执行" class="headerlink" title="第二阶段：提交执行"></a>第二阶段：提交执行</h4><p>当协调者从所有参与者节点获得相应的消息都为同意时：</p><ol><li>协调者节点向所有参与者节点发出“正式提交”的请求；</li><li>参与者节点正式完成操作后，并释放在整个事务期间占用的资源；</li><li>参与者节点向协调者节点发送 ack 完成消息；</li><li>协调者节点收到所有参与者节点的反馈的 ack 完成消息后，完成事务；</li></ol><h4 id="失败情况"><a href="#失败情况" class="headerlink" title="失败情况"></a>失败情况</h4><p>如果任一参与者节点在第一阶段返回的响应消息为中止，或者协调者节点在第一阶段的询问超时之前无法获取所有参与者节点的响应消息时：</p><ol><li>协调者节点向所有参与者节点发出“回滚操作”的请求；</li><li>参与者节点利用阶段 1 写入的undo 信息执行回滚，并释放在整个事务期间内占用的资源；</li><li>参与者节点向协调者节点发送 ack 回滚完成消息；</li><li>协调者节点受到所有参与者节点反馈的 ack 回滚完成消息后，取消事务；</li></ol><p>不管最后结果如何，第二阶段都会结束当前的事务。</p><h4 id="两阶段案例"><a href="#两阶段案例" class="headerlink" title="两阶段案例"></a>两阶段案例</h4><p>学校运动会上，一百米决赛正准备开始，裁判对每个人分别询问：</p><ol><li>裁判：张三同学你准备好了吗？准备好了进第一赛道；</li><li>张三：准备好了，随机进入第一赛道做好冲击姿势；</li><li>裁判：李四同学你准备好了吗？准备好了进第二赛道；</li><li>裁判：王五同学你准备好了吗？准备好了进第三赛道；</li><li>李四：准备好了。。。</li><li>王五：准备好了。。。</li><li>。。。</li><li>裁判：收到所有人的 OK 回复后，再次下令；</li><li>裁判：跑。。。</li><li>张三、李四执行完毕到达终点，汇报给裁判；</li><li>王五冲刺失败，汇报给了裁判；</li></ol><p>二阶段提交看起来确实能够提供原子性的操作，但是不幸的是，二阶段提交还是有几个缺点：</p><ol><li>性能问题<br>执行过程中，所有参与节点都是事务阻塞型的。当参与者占有公共资源时，其它第三方节点访问公共资源不得不处于阻塞状态； </li><li>可靠性问题<br>参与者发送故障，协调者需要给每个参与者额外指定超时时间，超时后整个事务失败。协调者发生故障，参与者会一直阻塞下去。需要额外的备机进行容错。</li><li>数据一致性问题<br>协调者在发出 commit 消息后宕机，而唯一接收到这条消息的参与者同时也宕机了。那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否已经提交。</li></ol><blockquote><p>优点：尽量保证了数据的强一致性，适合对数据强一致性要求很高的关键领域（其实也不能 100% 保证强一致性）。</p><p>缺点：实现复杂，牺牲了可用性，对性能影响较大，不适合高并发高性能的场景。</p></blockquote><h2 id="三阶段提交-3PC"><a href="#三阶段提交-3PC" class="headerlink" title="三阶段提交 3PC"></a>三阶段提交 3PC</h2><p>三阶段提交协议，是二阶段提交协议的改进版本，三阶段提交有两个改动点：</p><ol><li>在协调者和参与者中都引入超时机制；</li><li>在第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是一致的；</li></ol><p>也就是说，除了引入超时机制之外，3PC 把 2PC 的准备阶段再次一分为二，这样三阶段提交就有了 canCommit、preCommit、doCommit 三个阶段。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>尚硅谷Java大厂面试题全集</title>
      <link href="/2021/01/11/%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E9%9B%86/"/>
      <url>/2021/01/11/%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h4 id="线程池如何使用？"><a href="#线程池如何使用？" class="headerlink" title="线程池如何使用？"></a>线程池如何使用？</h4><p>单个线程，主要特点如下：</p><ol><li>创建一个单线程化的线程池，它只会用一唯一的工作线程来执行任务，保证所有任务按照指定顺序执行。</li><li>newSingleThreadExecutor 将 corePollSize 和 maximumPollSize 都设置为 1，它使用的是 LinkedBlockQueue。</li><li>适用一个任务一个任务执行的场景。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService(<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0L</span>, </span><br><span class="line">                                                                         TimeUnit.MILLISECONDS, </span><br><span class="line">                                                                         <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ExecutorService executor = Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    executor.execute(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">"\t 办理业务"</span>));</span><br><span class="line">&#125;</span><br><span class="line">executor.shutdown();</span><br><span class="line"></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br></pre></td></tr></table></figure><p>固定线程数</p><ol><li>执行长期任务，性能好很多。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads, <span class="number">0L</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ExecutorService executor = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    executor.execute(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">"\t 办理业务"</span>));</span><br><span class="line">&#125;</span><br><span class="line">executor.shutdown();</span><br><span class="line"></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span> 办理业务</span><br></pre></td></tr></table></figure><p>无限制线程数，主要特点如下：</p><ol><li>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li><li>任务来了就创建线程，当线程空闲超过 60 秒，就销毁线程。</li><li>适用执行很多短期异步的小程序或者负载较轻的服务。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE, <span class="number">60L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    executor.execute(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">"\t 办理业务"</span>));</span><br><span class="line">&#125;</span><br><span class="line">executor.shutdown();</span><br><span class="line"></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br></pre></td></tr></table></figure><h4 id="为什么用线程池，优势？"><a href="#为什么用线程池，优势？" class="headerlink" title="为什么用线程池，优势？"></a>为什么用线程池，优势？</h4><p>线程池做的工作主要是控制运行的线程的数量，处理过程中将任务放进队列，然后在线程创建后启动这些任务。如果线程数量超过了最大数量，则在队列中排队等候。等其它线程执行完毕，再从队列中取出任务来执行。</p><p>线程池的主要特点为：线程复用、控制最大并发数、管理线程。</p><p>线程池的好处有：</p><ol><li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的销毁。</li><li>提高响应速度。当任务到达时，任务可以不需要等待线程创建就能立即执行。</li><li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性。使用线程池可以进行统一的分配，调优和监控。</li></ol><h4 id="线程池有几个重要的参数？"><a href="#线程池有几个重要的参数？" class="headerlink" title="线程池有几个重要的参数？"></a>线程池有几个重要的参数？</h4><ol><li>corePoolSize 线程池中的常驻核心线程数；</li><li>maximumPollSize 线程池能够容纳同时执行的最大线程数，此值必须大于等于1；</li><li>keepAliveTime 多余的空闲线程的存活时间。当前线程池数量超过 corePoolSize 时，当空闲时间达到 keepAliveTime 值时，多余空闲线程会被销毁只剩下 corePoolSize 个线程为止；</li><li>unit keepAliveTime 的单位；</li><li>workQueue 任务队列，被提交但尚未被执行的任务；</li><li>threadFactory 表示生成线程池中工作线程的线程工厂，用于创建线程，一般默认即可；</li><li>handler 拒绝策略，表示当队列满了并且工作线程大于等于线程池的最大线程数时如何拒绝新的任务；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="蚂蚁花呗一面（一个小时）"><a href="#蚂蚁花呗一面（一个小时）" class="headerlink" title="蚂蚁花呗一面（一个小时）"></a>蚂蚁花呗一面（一个小时）</h2><h4 id="Java-容器有哪些？哪些是同步容器？哪些是并发容器？"><a href="#Java-容器有哪些？哪些是同步容器？哪些是并发容器？" class="headerlink" title="Java 容器有哪些？哪些是同步容器？哪些是并发容器？"></a>Java 容器有哪些？哪些是同步容器？哪些是并发容器？</h4><h4 id="ArrayList-和-LinkedList-的插入和访问的时间复杂度？"><a href="#ArrayList-和-LinkedList-的插入和访问的时间复杂度？" class="headerlink" title="ArrayList 和 LinkedList 的插入和访问的时间复杂度？"></a>ArrayList 和 LinkedList 的插入和访问的时间复杂度？</h4><h4 id="Java-反射原理，注解原理？"><a href="#Java-反射原理，注解原理？" class="headerlink" title="Java 反射原理，注解原理？"></a>Java 反射原理，注解原理？</h4><h4 id="新生代分为几个区？使用什么算法进行垃圾回收？为什么使用这个算法？"><a href="#新生代分为几个区？使用什么算法进行垃圾回收？为什么使用这个算法？" class="headerlink" title="新生代分为几个区？使用什么算法进行垃圾回收？为什么使用这个算法？"></a>新生代分为几个区？使用什么算法进行垃圾回收？为什么使用这个算法？</h4><h4 id="HashMap-在什么情况下会扩容，或者有哪些操作会导致扩容？"><a href="#HashMap-在什么情况下会扩容，或者有哪些操作会导致扩容？" class="headerlink" title="HashMap 在什么情况下会扩容，或者有哪些操作会导致扩容？"></a>HashMap 在什么情况下会扩容，或者有哪些操作会导致扩容？</h4><h4 id="HashMap-push-方法的执行过程？"><a href="#HashMap-push-方法的执行过程？" class="headerlink" title="HashMap push 方法的执行过程？"></a>HashMap push 方法的执行过程？</h4><h4 id="HashMap-检测到-hash-冲突后，将元素插入在链表的末尾还是开头？"><a href="#HashMap-检测到-hash-冲突后，将元素插入在链表的末尾还是开头？" class="headerlink" title="HashMap 检测到 hash 冲突后，将元素插入在链表的末尾还是开头？"></a>HashMap 检测到 hash 冲突后，将元素插入在链表的末尾还是开头？</h4><h4 id="1-8-还采用了红黑树，讲讲红黑树的特性，为什么人家一定要用红黑树而不是-AV了，B-树之类的？"><a href="#1-8-还采用了红黑树，讲讲红黑树的特性，为什么人家一定要用红黑树而不是-AV了，B-树之类的？" class="headerlink" title="1.8 还采用了红黑树，讲讲红黑树的特性，为什么人家一定要用红黑树而不是 AV了，B 树之类的？"></a>1.8 还采用了红黑树，讲讲红黑树的特性，为什么人家一定要用红黑树而不是 AV了，B 树之类的？</h4><h4 id="https-和-http-的区别，也没有用过其它安全传输手段？"><a href="#https-和-http-的区别，也没有用过其它安全传输手段？" class="headerlink" title="https 和 http 的区别，也没有用过其它安全传输手段？"></a>https 和 http 的区别，也没有用过其它安全传输手段？</h4><h4 id="线程池的工作原理，几个重要的参数，然后给了具体几个参数分析线程池会怎么做，最后问阻塞队列的作用是什么？"><a href="#线程池的工作原理，几个重要的参数，然后给了具体几个参数分析线程池会怎么做，最后问阻塞队列的作用是什么？" class="headerlink" title="线程池的工作原理，几个重要的参数，然后给了具体几个参数分析线程池会怎么做，最后问阻塞队列的作用是什么？"></a>线程池的工作原理，几个重要的参数，然后给了具体几个参数分析线程池会怎么做，最后问阻塞队列的作用是什么？</h4><h4 id="Linux-怎么查看系统负载情况？"><a href="#Linux-怎么查看系统负载情况？" class="headerlink" title="Linux 怎么查看系统负载情况？"></a>Linux 怎么查看系统负载情况？</h4><h4 id="请详细描述-Spring-MVC-处理请求全流程？"><a href="#请详细描述-Spring-MVC-处理请求全流程？" class="headerlink" title="请详细描述 Spring MVC 处理请求全流程？"></a>请详细描述 Spring MVC 处理请求全流程？</h4><h4 id="Spring-一个-bean-装配的过程？"><a href="#Spring-一个-bean-装配的过程？" class="headerlink" title="Spring 一个 bean 装配的过程？"></a>Spring 一个 bean 装配的过程？</h4><h4 id="讲一讲-AtomicInteger、为什么要用-CAS-而不是-synchronized？"><a href="#讲一讲-AtomicInteger、为什么要用-CAS-而不是-synchronized？" class="headerlink" title="讲一讲 AtomicInteger、为什么要用 CAS 而不是 synchronized？"></a>讲一讲 AtomicInteger、为什么要用 CAS 而不是 synchronized？</h4><h2 id="美团一面经验"><a href="#美团一面经验" class="headerlink" title="美团一面经验"></a>美团一面经验</h2><h4 id="最近做的比较熟悉的项目是哪个，画一下项目技术架构图"><a href="#最近做的比较熟悉的项目是哪个，画一下项目技术架构图" class="headerlink" title="最近做的比较熟悉的项目是哪个，画一下项目技术架构图"></a>最近做的比较熟悉的项目是哪个，画一下项目技术架构图</h4><h4 id="JVM-老年代和新生代的比例？"><a href="#JVM-老年代和新生代的比例？" class="headerlink" title="JVM 老年代和新生代的比例？"></a>JVM 老年代和新生代的比例？</h4><h4 id="YGC-和-FGC-发生的具体场景"><a href="#YGC-和-FGC-发生的具体场景" class="headerlink" title="YGC 和 FGC 发生的具体场景"></a>YGC 和 FGC 发生的具体场景</h4><h4 id="jstack、jmap、jutil-分别的意义？如何线上排查-JVM-的相关问题？"><a href="#jstack、jmap、jutil-分别的意义？如何线上排查-JVM-的相关问题？" class="headerlink" title="jstack、jmap、jutil 分别的意义？如何线上排查 JVM 的相关问题？"></a>jstack、jmap、jutil 分别的意义？如何线上排查 JVM 的相关问题？</h4><h4 id="线程池的构造类的方法的-5-个参数的具体意义？"><a href="#线程池的构造类的方法的-5-个参数的具体意义？" class="headerlink" title="线程池的构造类的方法的 5 个参数的具体意义？"></a>线程池的构造类的方法的 5 个参数的具体意义？</h4><h4 id="单机上一个线程池正在处理服务，如果忽然断电怎么办（正在处理的和阻塞队列里面的请求怎么处理）"><a href="#单机上一个线程池正在处理服务，如果忽然断电怎么办（正在处理的和阻塞队列里面的请求怎么处理）" class="headerlink" title="单机上一个线程池正在处理服务，如果忽然断电怎么办（正在处理的和阻塞队列里面的请求怎么处理）"></a>单机上一个线程池正在处理服务，如果忽然断电怎么办（正在处理的和阻塞队列里面的请求怎么处理）</h4><h4 id="使用无界阻塞队列会出现什么问题？"><a href="#使用无界阻塞队列会出现什么问题？" class="headerlink" title="使用无界阻塞队列会出现什么问题？"></a>使用无界阻塞队列会出现什么问题？</h4><h4 id="接口如何处理重复请求？"><a href="#接口如何处理重复请求？" class="headerlink" title="接口如何处理重复请求？"></a>接口如何处理重复请求？</h4>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HEXO 使用指南</title>
      <link href="/2021/01/10/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/HEXO%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2021/01/10/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/HEXO%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="隐藏文章"><a href="#隐藏文章" class="headerlink" title="隐藏文章"></a>隐藏文章</h2><p><a href="https://www.jianshu.com/p/79fe9fb9dfa0">https://www.jianshu.com/p/79fe9fb9dfa0</a></p><p><a href="https://blog.csdn.net/qq_15602635/article/details/83479980">https://blog.csdn.net/qq_15602635/article/details/83479980</a></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>ERROR Cannot find module ‘hexo’ from xxx</strong><br>场景：npm 安装完成后，使用 <code>hexo s</code> 命令提示异常。<br>原因：墙的问题，没有安装刚才。<br>解决：使用 <code>cnpm install</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 使用指南</title>
      <link href="/2021/01/10/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/IDEA%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2021/01/10/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/IDEA%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>作为一个从事 Java 开发的程序员，每天离不开编辑器的帮助。还记得刚开始学习 Java 编程的时候，使用 Eclipse 作为日常开发工具。后来工作以后，需要使用 Intellij IDEA，刚开始其实并不想怎么用。毕竟 Eclipse 已经足够强大，可以满足日常开发的需求，何必再花时间再去学习其他工具那。刚开始改变是困难的。但是没办法，公司强制使用，不得不去了解去使用。后来用了一段时间才发现 IDEA 是的真的强大。</p><p>真香啊~</p><p>下面就来介绍一下本人觉得 IDEA 一些强大的功能。</p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><h4 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h4><p>参考：<a href="https://blog.csdn.net/zhoukun1314/article/details/88910242">https://blog.csdn.net/zhoukun1314/article/details/88910242</a></p><h4 id="Install-plugin-from-disk"><a href="#Install-plugin-from-disk" class="headerlink" title="Install plugin from disk"></a>Install plugin from disk</h4><ol><li>Idea Plugin <a href="https://plugins.jetbrains.com/">官网</a>。</li><li>键入你需要下载的插件名称、下载 jar，无需解压。</li><li>打开settings，选择 <code>Install plugin from disk</code>, 选中压缩包。完成！</li></ol><h4 id="Install-javap"><a href="#Install-javap" class="headerlink" title="Install javap"></a>Install javap</h4><p><a href="https://blog.csdn.net/weixin_30409927/article/details/102951048">https://blog.csdn.net/weixin_30409927/article/details/102951048</a></p><h4 id="微服务开启-services"><a href="#微服务开启-services" class="headerlink" title="微服务开启 services"></a>微服务开启 services</h4><p>Views -&gt; Tool Windows -&gt; Services.</p><h2 id="配置优化"><a href="#配置优化" class="headerlink" title="配置优化"></a>配置优化</h2><h4 id="取消-IDEA-默认打开工程"><a href="#取消-IDEA-默认打开工程" class="headerlink" title="取消 IDEA 默认打开工程"></a>取消 IDEA 默认打开工程</h4><p>path : Appearance &amp; Behavior &gt; System Settings<br>value: Reopen last project on startupaa</p><h4 id="关闭参数提示"><a href="#关闭参数提示" class="headerlink" title="关闭参数提示"></a>关闭参数提示</h4><p>path : Editor &gt; General &gt; Apperance<br>value: Show parameter name hint</p><p>path : Editor &gt; General &gt; code completion (2019.3)<br>value: Show parameter name hint</p><p>path : Inlay Hints &gt; Java &gt; Parameter hints (2019.3)<br>value: Show parameter hints for</p><h4 id="关闭代码自动提示"><a href="#关闭代码自动提示" class="headerlink" title="关闭代码自动提示"></a>关闭代码自动提示</h4><p><a href="https://blog.csdn.net/wldds/article/details/98517106">https://blog.csdn.net/wldds/article/details/98517106</a></p><h4 id="切换快捷键"><a href="#切换快捷键" class="headerlink" title="切换快捷键"></a>切换快捷键</h4><p>path : keymap<br>value:</p><h4 id="自动下载源码"><a href="#自动下载源码" class="headerlink" title="自动下载源码"></a>自动下载源码</h4><p>path : Build, Execution, Deployment &gt; Build Tools &gt; Maven &gt; Importing<br>value: Automatically download</p><h4 id="默认不折叠一行"><a href="#默认不折叠一行" class="headerlink" title="默认不折叠一行"></a>默认不折叠一行</h4><p>path : Editor &gt; General &gt; Code Folding<br>value: One-line methods</p><h4 id="设置不索引-node-moudles-目录"><a href="#设置不索引-node-moudles-目录" class="headerlink" title="设置不索引 node_moudles 目录"></a>设置不索引 node_moudles 目录</h4><p>因为项目中前端是用 vue 写的，用 Idea 打开项目的时候，Updating Indexes 到 node_moudles 目录的时候  会很慢很慢很慢。。。。</p><p>鼠标右键 选择 Mark directory as 然后继续选择 Excluded。</p><h4 id="代码超出长度限制时不自动换行"><a href="#代码超出长度限制时不自动换行" class="headerlink" title="代码超出长度限制时不自动换行"></a>代码超出长度限制时不自动换行</h4><p>path : Editor &gt; Code Sytle &gt; Wrap on typing<br>value: 200 </p><h4 id="禁止单击拖拽"><a href="#禁止单击拖拽" class="headerlink" title="禁止单击拖拽"></a>禁止单击拖拽</h4><p>file-setting：勾选 Drag-and-drop with Alt pressed only</p><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><h4 id="等号对齐、参数对齐"><a href="#等号对齐、参数对齐" class="headerlink" title="等号对齐、参数对齐"></a>等号对齐、参数对齐</h4><p>path : Ediotr &gt; Java<br>value: Warpping and Braces &gt; Align when multiline</p><h4 id="单行注释与代码对齐"><a href="#单行注释与代码对齐" class="headerlink" title="单行注释与代码对齐"></a>单行注释与代码对齐</h4><p>path : Editor &gt; Code Style &gt; Java<br>value: Code Generation &gt; Comment Code &gt; enable add a space at comment start</p><h3 id="注释不格式化"><a href="#注释不格式化" class="headerlink" title="注释不格式化"></a>注释不格式化</h3><p>path : Code Style &gt; Java &gt; Java Doc<br>value: disable Enable JavaDoc Formatting</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h4 id="快捷键失灵"><a href="#快捷键失灵" class="headerlink" title="快捷键失灵"></a>快捷键失灵</h4><p>现象：黑苹果上，有时间切换app回来发现Idea的快捷键/键盘失灵。<br>原因：未知<br>解决：</p><h4 id="提示找不到符号，但是类存在"><a href="#提示找不到符号，但是类存在" class="headerlink" title="提示找不到符号，但是类存在"></a>提示找不到符号，但是类存在</h4><p>现象：类存在，Idea编辑器没有提示报错，但是编译时提示找不到符号<br>原因：未知<br>解决：<a href="https://blog.csdn.net/weixin_43789011/article/details/86620573">https://blog.csdn.net/weixin_43789011/article/details/86620573</a></p><h4 id="Cannot-resolve-symbol"><a href="#Cannot-resolve-symbol" class="headerlink" title="Cannot resolve symbol"></a>Cannot resolve symbol</h4><p>IDEA 无法识别同一个 package 里的其他类，将其显示为红色，但是 compile 没有问题。鼠标放上去后显示 “Cannot resolve symbol XXX”，重启 IDEA ，重新 sync gradle，Clean build 都没有用。</p><p>多半是因为 IDEA 之前发生了错误，某些 setting 出了问题。</p><p>解决方法：点击菜单中的 “File” -&gt; “Invalidate Caches / Restart”，然后点击对话框中的 “Invalidate and Restart”，清空 cache 并且重启。语法就会正确的高亮了。</p><h4 id="TextMate-Bundles-for-JavaScript"><a href="#TextMate-Bundles-for-JavaScript" class="headerlink" title="TextMate Bundles for JavaScript"></a>TextMate Bundles for JavaScript</h4><p>try again -&gt; remove .js</p><h4 id="Illuminated-Cloud-is-invalid"><a href="#Illuminated-Cloud-is-invalid" class="headerlink" title="Illuminated Cloud is invalid"></a>Illuminated Cloud is invalid</h4><p>plugins -&gt; disable Illuminated Cloud is invalid</p><h4 id="导入包报错：Cannot-resolve-com-xxx"><a href="#导入包报错：Cannot-resolve-com-xxx" class="headerlink" title="导入包报错：Cannot resolve com.xxx"></a>导入包报错：Cannot resolve com.xxx</h4><p>我这里的问题是，本地Maven的settings.xml配置了远程仓库，项目里也设置了另外一个远程仓库。下载依赖包找到本地的远程仓库去了。</p><p>把本地的settting文件删掉即可。</p><h4 id="中英文字体无法等宽"><a href="#中英文字体无法等宽" class="headerlink" title="中英文字体无法等宽"></a>中英文字体无法等宽</h4><p>参考：<a href="https://www.v2ex.com/t/187956">https://www.v2ex.com/t/187956</a></p><h4 id="Download-Sources报错java-lang-RuntimeException-Cannot-reconnect"><a href="#Download-Sources报错java-lang-RuntimeException-Cannot-reconnect" class="headerlink" title="Download Sources报错java.lang.RuntimeException: Cannot reconnect."></a>Download Sources报错java.lang.RuntimeException: Cannot reconnect.</h4><p>设置 -&gt; Maven -&gt; 钩上 Override.</p><p>参考：<a href="https://blog.csdn.net/LO_YUN/article/details/110630127?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;dist_request_id=1619614483617_28112&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control">https://blog.csdn.net/LO_YUN/article/details/110630127?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;dist_request_id=1619614483617_28112&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vultr 使用技巧</title>
      <link href="/2021/01/10/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vultr%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2021/01/10/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vultr%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="重制密码"><a href="#重制密码" class="headerlink" title="重制密码"></a>重制密码</h2><p>在我们使用Vultr VPS的时候，可能在某些情况下需要修改服务器的root密码，比如当VPS的快照恢复后原root密码会过期，这时需要重置root密码才能进行连接服务器，或者某些系统脚本也有可能会导致root密码无效，以及粗心大意自己忘记了Vultr VPS的root密码。</p><p>下面的教程将教大家怎样重置Vultr 的root密码。但是Vultr的不同操作系统修改root密码的方法是不一样的。本文将以CentOS 6 / CentOS 7系统为例，教大家如何修改Vultr 的root密码。</p><p>一、进入Vultr后台管理面板</p><p>按照下图指示，打开在线 Console，点击“View Console”。</p><p><img src="001.png" alt=""></p><p>二、重启VPS</p><p>点击右上角的“Send CtrlAltDel”如图，重新启动VPS。</p><p><img src="002.png" alt=""></p><p>三、编辑启动命令</p><p>当界面出现上图后，然后编辑第一启动项（按 e 键进入编辑）</p><p><img src="003.png" alt=""></p><p>然后按键盘上的 “下方向键” 向下移动光标，找到“linux16” 开头这行，将：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ro</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rw init=/sysroot/bin/sh</span><br></pre></td></tr></table></figure><p><img src="004.png" alt=""></p><p>四、重置密码</p><p>当按照上面修改好后，按 Ctrl + X 启动单用户模式。输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chroot /sysroot</span><br></pre></td></tr></table></figure><p>回车进入系统，输入下面命令进行重置密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>五、重启服务器</p><p>修改好密码后，输入下面指令进行重启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot -f</span><br></pre></td></tr></table></figure><p>大功告成！！！</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>001 两数之和</title>
      <link href="/2021/01/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98/001%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2021/01/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98/001%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案，但是数组中同一个元素不能使用两遍。</p><p>提示： </p><ol><li>2 &lt;= nums.length &lt;= 103 </li><li>-109 &lt;= nums[i] &lt;= 109 </li><li>-109 &lt;= target &lt;= 109 </li><li>只会存在一个有效答案 </li></ol><p>示例 1：</p><ol><li>输入：nums = [2,7,11,15], target = 9；</li><li>输出：[1,2]</li></ol><p>示例 2： </p><ol><li>输入：nums = [3,2,4], target = 6</li><li>输出：[1,2]</li></ol><p>示例 3： </p><ol><li>输入：nums = [3,3], target = 6</li><li>输出：[0,1]</li></ol><h2 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h2><p>最容易想到的方法是枚举数组中的每一个数 x，寻找数组中是否存在 target - x。</p><p>Java 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + nums[j] != target)</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>leetcode 结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行耗时:0 ms,击败了100.00% 的Java用户</span><br><span class="line">内存消耗:38.5 MB,击败了83.34% 的Java用户</span><br></pre></td></tr></table></figure><p>时间和空间复杂度：</p><ol><li>时间复杂度 $O(n^2)$<br>其中 N 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。</li><li>空间复杂度 $O(1)$<br>因为没有使用到额外的内存空间存储。</li></ol><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>注意到方法一的时间复杂度较高的原因是寻找 target - x 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。</p><p>使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 $O(n)$ 降低到 $O(1)$。</p><p>这样我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。</p><p>Java 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">   Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (map.containsKey(target - nums[i])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(target - nums[i]), i&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      map.put(nums[i], i);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>leetcode 结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行耗时:0 ms,击败了100.00% 的Java用户</span><br><span class="line">内存消耗:38.8 MB,击败了27.84% 的Java用户</span><br></pre></td></tr></table></figure><p>时间和空间复杂度：</p><ol><li>时间复杂度 $O(n)$<br>其中 N 是数组中的元素数量。对于每一个元素 x，我们可以 $O(1)$ 地寻找 target - x。</li><li>空间复杂度 $O(n)$<br>其中 N 是数组中的元素数量。主要为哈希表的开销。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
          <category> 力扣刷题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="/2020/11/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98/%E6%A0%88/"/>
      <url>/2020/11/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98/%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h4 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h4><p>给定一个只包括 <code>(</code>，<code>)</code>，<code>{</code>，<code>}</code>，<code>[</code>，<code>]</code> 的字符串，判断字符串是否有效。</p><ol><li>输入: <code>()</code> 输出: true</li><li>输入: <code>()[]{}</code> 输出: true</li><li>输入: <code>(]</code> 输出: false</li><li>输入: <code>([)]</code> 输出: false</li><li>输入: <code>{[]}</code> 输出: true </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1. 利用题目规则，替换字符串。</span></span><br><span class="line"><span class="comment">* 执行耗时:38 ms,击败了5.03% 的Java用户</span></span><br><span class="line"><span class="comment">* 内存消耗:39 MB,击败了5.00% 的Java用户</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> length = s.length() / <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">      s = s.replace(<span class="string">"()"</span>, <span class="string">""</span>).replace(<span class="string">"&#123;&#125;"</span>, <span class="string">""</span>).replace(<span class="string">"[]"</span>, <span class="string">""</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> s.length() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 2. 利用栈的特则，后进后出。</span></span><br><span class="line"><span class="comment">* 执行耗时:3 ms,击败了25.24% 的Java用户</span></span><br><span class="line"><span class="comment">* 内存消耗:36.5 MB,击败了92.68% 的Java用户</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">   Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">'('</span>) stack.push(<span class="string">')'</span>);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'['</span>) stack.push(<span class="string">']'</span>);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'&#123;'</span>) stack.push(<span class="string">'&#125;'</span>);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty() || c != stack.pop()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
          <category> 力扣刷题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="/2020/10/29/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/10/29/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h2><h2 id="Java-进阶"><a href="#Java-进阶" class="headerlink" title="Java 进阶"></a>Java 进阶</h2><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><ol><li>HashMap中的get()方法是如何实现的？</li><li>HashMap及线程安全的ConcurrentHashMap，以及各自优劣势</li><li>HashMap和HashTable以及CocurrentHashMap详细说明</li><li>HashMap实现原理，如何保证HashMap的线程安全</li><li>HashMap可以用在哪些场景？</li><li>ConcurrentHashMap是怎么解决并发问题的？</li><li>HashMap怎么从链表转换为红黑树？如果存入的是null键，放在桶的哪个位置？</li><li>HashMap如何解决Hash冲突</li><li>ConcurrentHashMap如何保证线程安全，并发度大小，jdk1.8有什么变化</li><li>为什么concurrenthashmap底层为什么要红黑树</li></ol><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><ol><li>ArrayList和LinkedList底层</li><li>ArrayList和LinkedList内部的实现大致是怎样的？他们之间的区别和优缺点</li><li>Collections.sort底层排序方式</li></ol><h2 id="Java-网络"><a href="#Java-网络" class="headerlink" title="Java 网络"></a>Java 网络</h2><ol><li>输入 ping IP 后敲回车，发包前会发生什么</li><li>网络IO模型？什么是多路复用IO？select和epoll的差别？</li><li>TCP三次握手的过程，如果没有第三次握手有什么问题？</li><li>网络编程nio和netty相关，netty的线程模型，零拷贝实现?</li><li>epoll和poll的区别，及其应用场景</li></ol><h2 id="Java-虚拟机"><a href="#Java-虚拟机" class="headerlink" title="Java 虚拟机"></a>Java 虚拟机</h2><ol><li>Java类加载机制？双亲委派模型的好处？</li><li>JVM的垃圾回收机制，以及回收算法有哪些</li><li>JVM什么时候会触发YGC，什么时候触发FGC？</li><li>JVM如何内存调优、内存泄漏如何排查</li><li>JVM，垃圾回收机制，内存划分等</li><li>jvm性能调优都做了什么</li><li>jvm GC原理，JVM怎么回收内存</li><li>Java的内存模型，Java8做了什么修改</li><li>如何进行JVM调优？有哪些方法？</li><li>Java内存模型：常问的JVM分代模型，以及JDK1.8后的区别，最后还问了JVM相关的调优参数</li><li>Java有哪些锁种类（乐观锁、悲观锁、可重入锁和synchroned）</li><li>Java内存分代模型，GC算法，JVM常见的启动参数，CMS算法的过程。</li><li>Java的内存结构，堆分为哪几部分，默认年龄多大进入老年代</li><li>讲一下oom以及遇到这种情况怎么处理的，是否使用过日志分析工具</li><li>CountDownLoatch、CyclicBarrier、Semapphore 使用过吗？</li></ol><h2 id="Java-多线程"><a href="#Java-多线程" class="headerlink" title="Java 多线程"></a>Java 多线程</h2><ol><li>多线程与高并发的关系和区别</li><li>Java 线程的状态及相互转换</li><li>JAVA并发包组件了解多少?</li><li>什么时候多线程会发生死锁?怎么来预防</li><li>多线程状态图，状态如何流转？</li><li>再谈谈 threadLocal的实际应用</li><li>讲讲多线程和并发工具的使用</li><li>Java如何实现线程安全</li></ol><h4 id="Java-内存模型"><a href="#Java-内存模型" class="headerlink" title="Java 内存模型"></a>Java 内存模型</h4><p>回答套路：</p><ol><li>JMM 简述</li><li>JMM 规范</li><li>JVM 实现</li><li>并发问题</li><li>原子操作</li></ol><p>涉及面试题：</p><ol><li>线程同步的几种方式和线程间通信</li><li>JMM 你谈谈！</li></ol><h4 id="volatile-相关"><a href="#volatile-相关" class="headerlink" title="volatile 相关"></a>volatile 相关</h4><ol><li><code>volatile</code> 是什么？</li><li><code>volatile</code> 的原理</li><li><code>volatile</code> 的工作原理</li><li><code>volatile</code> 关键字有什么用（包括底层原理）</li><li><code>volatile</code> 关键字，他是如何保证可见性，有序性</li><li>你在哪些地方用到过 <code>volatile</code>？</li><li><code>volatile</code> 如何解决原子性？</li></ol><h4 id="CAS-机制"><a href="#CAS-机制" class="headerlink" title="CAS 机制"></a>CAS 机制</h4><ol><li>CAS 你知道吗？</li><li>CAS 知道吗？如何实现？</li><li>CAS？CAS本质是什么？什么是原子性？Compare and Swap两步<em>*</em>作，为什么能保证原子性（涉及到CPU指令）？</li><li>讲一讲 AtomicInteger，为什么要用 CAS 而不是 synchronized？</li></ol><h4 id="各种锁机制"><a href="#各种锁机制" class="headerlink" title="各种锁机制"></a>各种锁机制</h4><ol><li>死锁的四个必要条件</li><li>死锁，死锁原因</li><li>页锁、乐观锁、悲观锁？</li><li>乐观锁如何保证线程安全？</li><li>重点问了Java线程锁：synchronized 和ReentrantLock相关的底层实现</li><li>sychronized的自旋锁、偏向锁、轻量级锁、重量级锁，分别介绍和联系</li><li>公平锁、非公平锁、可重入锁、递归锁、自旋转锁谈谈你的理解？请手写一个自旋锁。</li><li>synchronized 和 lock 的区别？synchronized 什么情况下是对象锁？什么情况下是全局锁？为什么？</li><li></li></ol><h4 id="synchronized相关"><a href="#synchronized相关" class="headerlink" title="synchronized相关"></a>synchronized相关</h4><ol><li>谈谈对 <code>synchronized</code> 关键字，类锁，方法锁，重入锁的理解</li><li>sychronized和ReentrantLock的区别</li><li>sychronized的自旋锁、偏向锁、轻量级锁、重量级锁，分别介绍和联系</li><li>synchronized 和 lock 有什么区别？用新的 Lock 有什么好处？你举例说说。</li></ol><h4 id="ReentrantLock-相关"><a href="#ReentrantLock-相关" class="headerlink" title="ReentrantLock 相关"></a>ReentrantLock 相关</h4><ol><li>ReentrantLock的内部实现</li><li>Synchronized和Lock哪个更好？</li><li>谈谈Synchronized与ReentrantLock的区别</li><li>重点问了Java线程锁：synchronized 和ReentrantLock相关的底层实现</li><li>synchronized 和 lock 有什么区别？用新的 Lock 有什么好处？你举例说说。</li></ol><h4 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h4><p>知识点：</p><ol><li>队列 + 阻塞队列</li><li>为什么？有什么用？</li><li>BlockingQueue 的核心方法？</li><li>架构梳理 + 种类分析</li><li>用在哪里？</li></ol><p>相关面试题：</p><ol><li>J.U.C下的常见类的使用，ThreadPool的深入考察，BlockingQueue的使用</li><li>简述线程池原理，FixedThreadPool用的阻塞队列是什么</li><li>阻塞队列知道吗？</li></ol><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><ol><li>常用的线程池有哪些?各自的应用场景?</li><li>用过线程池吗，对应的好处，如何用？</li><li>1000个多并发线程，10台机器，每台机器4核的，设计线程池大小。</li><li>线程池中的几种重要的参数及流程说明</li><li>线程池的底层实现以及常见的参数</li><li>简述线程池原理，FixedThreadPool用的阻塞队列是什么</li><li>线程池用过吗？ThreadPollExecutor 谈谈你的理解？ </li><li>线程池如何使用？</li><li>说说线程池的底层工作原理。</li><li>线程池的拒绝策略你谈谈</li><li>你在工作中单一的/固定的/可变的三种创建线程池的方法，你用哪个多？超级大坑。<br>一个都不用<br>阿里开发者手册</li><li>你在工作做是如何使用线程池的，是否自定义过线程池使用？<br>阿里开发者手册<br>case</li><li>合理配置线程池你是如何考虑的？</li><li>CPU 密集型<br>CPU 密集型的意思是该任务需要大量的运算，而没有阻塞，CPU 一直全速运行。<br>CPU 密集任务只有在真正的多核 CPU 上才可能得到加速（通过多线程）。<br>而在单核 CPU 上，无论你开几个模拟的多线程该任务都不可能得到加速，因为 CPU 总的运算能力就那些。<br>CPU 密集型任务配置尽可能少的线程数量：CPU 核数 + 1 个线程的线程池。</li><li>IO  密集型<br>IO 密集型，即该任务需要大量的IO，即大量的阻塞。<br>在单线程上运行 IO 密集型的任务会导致浪费大量的 CPU 运算能力浪费在等待。<br>所以在 IO 密集型任务中使用多线程可以大大的加速程序运行，即使在单核 CPU 上，这种加速主要是利用了被浪费掉的阻塞时间。<br>IO 密集型时，大部分线程都阻塞，故需要多配置线程数。<br>参考公式：CPU 核数 / （1 - 阻塞系统）（0.8 - 0.9）<br>比如 8 核 CPU：8 / (1 - 0.9) = 80.<br>或者：CPU 核数 * 2。</li><li>死锁编码以及定位分析<br>死锁是什么<br>代码举例<br>解决过程</li></ol><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ol><li>数据库三范式及判断、E-R图</li></ol><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><ol><li>drop、truncate、delete区别</li><li>查询语句不同元素（where、jion、limit、group by、having等等）执行先后顺序</li></ol><h4 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h4><ol><li>innodb和myisam存储引擎的区别</li></ol><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><ol><li>索引分类（主键、唯一索引、全文索引、覆盖索引等等），最左前缀原则，哪些条件无法使用索引</li><li>聚集索引与非聚集索引（使用非聚集索引的查询过程）</li><li>索引会不会使插入、删除作效率变低，怎么解决（分表<em>*</em>作）？</li><li><p>建索引的时候一般考虑什么？</p></li><li><p>B树和B+树的区别，为什么MySQL要使用B+树</p></li><li>数据库索引，B+树的特性和建树过程</li><li>数据库索引？B+树？为什么要建索引？什么样的字段需要建索引，</li><li>B树、B+树区别，索引为何使用B+树</li></ol><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><ol><li>MySQL相关的行锁，表锁，乐观锁，悲观锁。</li><li>死锁判定原理和具体场景</li><li>乐观锁和悲观锁、行锁与表锁、共享锁与排他锁（inndob如何手动加共享锁与排他锁）</li></ol><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><ol><li>数据库事务属性</li><li>数据库事务特点？事务隔离级别？项目中的事务实现？脏读、不可重复读、幻读各举个例子？</li><li>事务隔离级别和各自存在的问题（脏读、不可重复读、幻读）和解决方式（间隙锁及MVCC）</li><li>事务的ACID（原子性、一致性、隔离性、持久性）</li><li>MVCC（增加两个版本号）及delete、update、select时的具体控制</li></ol><h4 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h4><ol><li>数据库崩溃时事务的恢复机制（REDO日志和UNDO日志）</li></ol><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><ol><li>mysql优化，读写分离、主从复制</li></ol><h4 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h4><ol><li>查询缓慢和解决方式（explain、慢查询日志、show profile等）</li></ol><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><ol><li>如何做的MySQL优化</li><li>数据库性能调优如何做</li><li>SQL优化，常用的索引？</li></ol><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><ol><li>Redis的应用场景有哪些?</li><li>如何利用redis处理热点数据</li><li>Redis和Memcached的优劣势比较</li><li>讲讲Redis的架构和组件</li><li>谈谈一致hash算法（redis）</li></ol><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ol><li>Redis的数据存储类型有哪些?</li></ol><h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><ol><li>Redis的持久化方式，以及项目中用的哪种</li><li>Redis的持久化操作有哪些？</li></ol><h4 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h4><ol><li>Redis如何做高可用、集群</li><li>谈谈Redis相关的集群有哪些成熟方案</li><li>Redis是单线程还是多线程？Redis的分布式集群怎么做?</li><li>Redis数据一致性问题（分布式多节点和单机环境）</li></ol><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ol><li>Redis的缓存雪崩怎么解决？</li><li>Redis与数据库MySQL的双写一致如何解决？</li><li>Redis的缓存穿透怎么解决？</li><li>Redis缓存雪崩？击穿？穿透？</li><li>你们怎么保证Redis缓存和数据库的数据一致性？</li></ol><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><ol><li>Spring框架中IOC的原理是什么</li><li>用Spring如何实现一个切面</li></ol><h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2><ol><li>谈谈你的SOA以及微服务的理解？</li><li>具体谈谈Spring Cloud服务和注册?</li><li>SpringCloud的服务注册与发现是怎么设计的</li></ol><h2 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h2><ol><li>数组、链表（单向、双向、双端）、栈和队列、二叉树、红黑树、哈希表、堆（最大和最小）</li><li>个人经验：栈和队列、哈希表、链表、二叉树的题较多，图的较少</li><li>查找：二分查找及其变形</li><li>二叉树：前序、中序、后序遍历，按规定方式打印，两个节点之间操作（最近公共祖先、距离）等问题。</li><li>最大堆和最小堆：大数量级数据找最大几个等问题、堆如何调整等问题。</li><li>栈和队列：经常作为算法题要用到的数据结构</li><li>八大排序：3个简单的：冒泡、选择、插入及其优化，5个高级的：快速排序、归并排序、堆排序、希尔排序、桶排序（快排、归并、堆很重要）</li><li>手写堆排序</li><li>给阿里2万多名员工按年龄排序应该选择哪个算法？</li><li>数据结构基本都问了一遍：链表、队列等</li><li>比较重要的数据结构，如链表、队列、栈的基本理解以及大致实现</li><li>二叉搜索树和平衡二叉树有什么关系，强平衡二叉树（AVL树）和弱平衡二叉树（红黑树）有什么区别</li></ol><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ol><li>常用命令：用户控制、权限控制、进程控制、系统状态查询之类的</li><li>/etc/hosts文件什么做用？</li><li>Linux目录结构（尤其是/proc非常重要）</li><li>linux文件系统结构和启动流程）</li><li>Java服务端问题排查（OOM，CPU高，Load高，类冲突）</li><li>如何查看Java应用的线程信息</li><li>Thread dump文件如何分析（Runnable，锁，代码栈，操作系统线程ID关联）</li><li>生产服务器变慢，诊断思路和性能评估谈谈？<br>整机状态、CPU 状态、内存状态、磁盘状态、网络状态等等排查，相关命令。</li><li>假如生产环境出现CPU占用过高，请谈谈你的分析思路和定位</li></ol><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><ol><li>一个二进制文件运行出结果，操作系统做了什么（这是一个很全面的题）</li><li>死锁的条件及银行家算法、资源分配图之类的</li><li>进程间通信方式</li><li>linux的五种IO方式（阻塞与非阻塞、同步与异步的理解）</li><li>linux的select、poll、epoll的区别</li><li>进程与线程区别、内核级线程与用户级线程</li><li>页面置换算法，尤其是lru</li><li>进程调度算法</li><li>linux中断响应机制</li><li>虚拟内存机制</li><li>操作系统的用户态和核心态切换条件以及为什么要切换</li></ol><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><ol><li>OSI七层协议、TCP/IP四层协议</li><li>各层对应的网络设备（路由器、交换机、网关、网桥、集线器等等），各层对应的协议</li><li>数据链路层的CSMA/CD协议，笔试可能会用到</li><li>IP地址分类，子网划分（笔试常用）</li><li>TCP和UDP的区别</li><li>TCP三次握手和四次挥手，为什么三次握手，为什么四次挥手</li><li>TCP精髓问题：停止等待协议、连续ARQ协议、滑动窗口、流量控制、拥塞控制（慢开始、拥塞避免、快重传、快恢复）</li><li>HTTP状态码</li><li>HTTP缓存机制（cache-control、Expires之类的一系列请求与相应报头字段</li><li>session和cookie的区别，禁用cookie后怎么办</li><li>DNS解析的过程</li><li>常用协议的端口</li><li>一次web请求响应中，那个部分最耗时，tcp握手？业务逻辑处理？网络延迟？数据库查询？浏览器解析？</li><li>HTTP有哪些问题，加密算法有哪些，针对不同加密方式可能产生的问题，及其HTTPS是如何保证安全传输的</li></ol><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ol><li>常见的设计模式、手写一个单例、JDK、Spring原理里有哪些采用了设计模式。</li><li>设计模式，单例模式，怎么保证线程安全？锁效率太低，怎么提高效率？</li><li>设计模式与重构，谈谈你对重构的理解。</li><li>设计模式有哪些大类，及熟悉其中哪些设计模式</li></ol><h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><ol><li>常见的高并发场景有哪些，对应的架构设计方案是什么</li><li>介绍完整的分布式中间件有哪些，各自的应用场景和作用</li><li>双11秒杀活动，你的技术架构设计思路</li><li>分布式锁的实现知道到哪些？你更推荐哪一种锁?</li><li>有接触过哪些消息队列中间件？如何来选型？</li><li>分布式的cap了解么，分别指什么?</li><li>了解过集群雪崩么？</li><li>谈谈高并发场景下削峰，限流的实现？</li></ol><h2 id="工作经验"><a href="#工作经验" class="headerlink" title="工作经验"></a>工作经验</h2><ol><li>你之前工作的项目里个人最满意的，谈谈你的架构设计思路？</li><li>为什么要从上一家公司离职?</li><li>项目参与的核心设计有哪些</li><li>还有什么问题需要问的。</li><li>工作中觉得哪方面欠缺？</li><li>有问题要问么？</li><li>参与的项目，选一个，技术难点在哪？</li><li>项目介绍</li></ol><h2 id="个人发展"><a href="#个人发展" class="headerlink" title="个人发展"></a>个人发展</h2><ol><li>自我介绍</li><li>介绍一下自己。</li><li>如何看待加班问题？</li><li>为什么要选择这里？</li><li>未来2年是怎样打算的？</li><li>平时自己是怎么学习技术的，除了Java相关，还会去了解其他什么技术？</li><li>期待的薪资是多少？</li><li>对哪些技术比较熟悉？</li><li>说一下自己的优点。</li><li>与同事沟通的时候，如果遇到冲突了如何解决？</li><li>期望薪水？</li><li>为什么要离开现在的公司？</li><li>擅长哪些方面的技术</li><li>最近上过哪些技术站点，最近在看哪些书？</li><li>工作和生活中遇见最大挑战，怎么去克服</li><li>未来有什么打算</li></ol><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol><li>两个10G的文件，里面是一些url，内存只有1G，如何将这两个文件合并，找到相同的url？</li><li>代码题：两个有序数组，数组中存在重复数字，合并成一个有序数组，去除重复数字。</li><li>分布式系统原理：CAP，最终一致性，幂等操作等</li><li>高并发情况下，我们系统是如何支撑大量的请求的</li><li>集群如何同步会话状态</li><li>常用NOSQL，有做过比较?</li><li>什么情况会出现雪崩，以及如何应对？</li><li>负载均衡的原理</li><li>分布式锁的实现比较</li><li>分布式系统的全局Id如何实现</li><li>分布式锁的方案，redis和zookeeper哪个好，如果是集群部署，高并发情况下哪个性能更好。</li><li>负载均衡的原理</li><li>Docker容器</li><li>高并发情况下，系统是如何支持大量的请求的？</li><li>kafka、redis、rocketMQ、mycat等设计思路和适用场景</li><li>你熟悉哪些消息中间件,有做过性能比较?</li><li>谈谈分布式架构设计</li></ol><p><a href="https://youzhixueyuan.com/java-interview-questions">https://youzhixueyuan.com/java-interview-questions</a><br>done    2019蚂蚁金服 Java面试题目！涵盖现场3面真题<br>undone: 2019头条抖音Java 3面真题，含面试题答案！</p><p>1234567890a<br>我们是谁呢a<br>。。。。。a<br>我们是谁呢a<br>1234567890a</p><p>1234567890a<br>我们是谁呢a<br>。。。。。a<br>我们是谁呢a<br>1234567890a</p><p>aaaaaaaaaa<br>我们aaaaaJ<br>aaaaaaaaaa<br>aaaaaaaaaa<br>llllllllll<br>Input Mono Compressed</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2020/09/04/%E5%85%B6%E5%AE%83/Vue/"/>
      <url>/2020/09/04/%E5%85%B6%E5%AE%83/Vue/</url>
      
        <content type="html"><![CDATA[<h2 id="npm-run-dev-异常"><a href="#npm-run-dev-异常" class="headerlink" title="npm run dev 异常"></a>npm run dev 异常</h2><ol><li>TypeError: Cannot read property ‘parseComponent’ of undefined<br> vue、@vue/cli-service、vue-template-compiler 等版本不一致，没有细究。</li></ol><h2 id="运行期间"><a href="#运行期间" class="headerlink" title="运行期间"></a>运行期间</h2><ol><li><p>Uncaught TypeError: Cannot set property ‘render’ of undefined<br> 组件里写了script标签，没写 <code>export default {}</code>。</p></li><li><p>Vue 文件 render 函数直接操作html元素报错<br>如 <code>vnodes.push(&lt;span slot=&#39;title&#39;&gt;{(title)}&lt;/span&gt;)</code>，<a href="https://www.cnblogs.com/xhliang/p/13150769.html">解决方法-方案2</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务</title>
      <link href="/2020/09/04/%E5%85%B6%E5%AE%83/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/09/04/%E5%85%B6%E5%AE%83/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p>对象存储OSS提供Bucket级别的权限<a href="https://help.aliyun.com/document_detail/31954.html?spm=5176.8466010.acl.1.615e1450N7b9g0">访问控制</a>。</p><p>Bucket目前有三种访问权限：public-read-write，public-read和private，它们的含义如下：</p><ol><li><p>public-read-write<br> 公共读写，任何人（包括匿名访问者）都可以对该存储空间内文件进行读写操作。</p><p> 警告 互联网上任何用户都可以对该 Bucket 内的文件进行访问，并且向该 Bucket 写入数据。这有可能造成您数据的外泄以及费用激增，若被人恶意写入违法信息还可能会侵害您的合法权益。除特殊场景外，不建议您配置公共读写权限。</p></li><li><p>public-read<br> 公共读，私有写，只有该存储空间的拥有者可以对该存储空间内的文件进行写操作，任何人（包括匿名访问者）都可以对该存储空间中的文件进行读操作。</p><p> 警告 互联网上任何用户都可以对该 Bucket 内文件进行访问，这有可能造成您数据的外泄以及费用激增，请谨慎操作。</p></li><li><p>private<br> 私有读写，只有该存储空间的拥有者可以对该存储空间内的文件进行读写操作，其他人无法访问该存储空间内的文件。</p></li></ol><p>以读取图片的例子说来，如果是私有读写，则需要在图片连接后面加上访问密钥，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://huijie-ews-officialwebsite.oss-cn-hangzhou.aliyuncs.com/enweis/200723170935-160.jpg?Expires=1599210628&amp;OSSAccessKeyId=LTAI8BhoSy8azhCF&amp;Signature=pmXlGqxmox%2FwKezSyomDxoOZSMg%3D</span><br></pre></td></tr></table></figure><p>如果不加访问密钥则会有以下提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Error&gt;</span><br><span class="line">&lt;Code&gt;AccessDenied&lt;/Code&gt;</span><br><span class="line">&lt;Message&gt;You have no right to access this object because of bucket acl.&lt;/Message&gt;</span><br><span class="line">&lt;RequestId&gt;5F51FD89F56D43303688B470&lt;/RequestId&gt;</span><br><span class="line">&lt;HostId&gt;huijie-ews-officialwebsite.oss-cn-hangzhou.aliyuncs.com&lt;/HostId&gt;</span><br><span class="line">&lt;/Error&gt;</span><br></pre></td></tr></table></figure><blockquote><p>说明：<br>用户创建一个Bucket时，如果不指定Bucket权限，OSS会自动为该Bucket设置private权限。<br>对于private资源，需要获得授权才能访问。关于授权管理，可参考权限控制。<br>对于一个已经存在的Bucket，在对象存储 -&gt; 指定的bucket -&gt; 权限管理 里面设置读写权限。</p></blockquote><h2 id="对象存储-OSS"><a href="#对象存储-OSS" class="headerlink" title="对象存储 OSS"></a>对象存储 OSS</h2><h4 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h4><h4 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h4><p>目前阿里云有两种方式实现图片压缩功能：质量变换和图片高级压缩。</p><p><a href="https://help.aliyun.com/document_detail/44705.html?spm=a2c4g.11186623.4.3.64e41729322Z12">质量变换</a>操作是使用原图本身的格式对图片进行压缩，因此仅支持有损压缩的图片格式：JPG和WebP。对于无损压缩的图片格式（如PNG），由于其压缩前后图片质量没有变化，所以无法进行质量变换。即使为PNG格式的图片添加了质量变换的参数，也没有实际效果。</p><p>如果在质量变换时不指定Q或者q参数，可能会导致图片占用空间变大。如需获得特定质量的图片，请指定Q参数。</p><ol><li><p>将原图缩略为宽度和高度均为100，且相对质量为原图80%的JPG图。<br> <a href="https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/2171539851/p2629.jpg?x-oss-process=image/resize,w_100,h_100/quality,q_80">https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/2171539851/p2629.jpg?x-oss-process=image/resize,w_100,h_100/quality,q_80</a></p><p> <code>q</code>决定图片的相对质量，对原图按照q%进行质量压缩。例如，如果原图质量为100%，添加<code>quality,q_90</code>参数会得到质量为90％的图片。如果原图质量为80%，添加<code>quality,q_90</code>参数会得到质量72%的图片。</p></li><li><p>将原图缩略成宽度和高度均为100，且绝对质量为80%的JPG图。<br> <a href="https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/2171539851/p2629.jpg?x-oss-process=image/resize,w_100,h_100/quality,Q_80">https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/2171539851/p2629.jpg?x-oss-process=image/resize,w_100,h_100/quality,Q_80</a></p><p> <code>Q</code>决定图片的绝对质量，将原图质量压缩至Q%，如果原图质量小于指定参数值，则按照原图质量重新进行压缩。</p><p> 例如，如果原图质量是95%，添加<code>quality,Q_90</code>参数会得到质量90％的图片。如果原图质量是80%，添加<code>quality,Q_90</code>只能得到质量80%的图片。</p></li></ol><blockquote><p>说明 该参数只能对保存格式为JPG、WebP的图片使用，对其他格式的图片无效果。如果同时指定了<code>q</code>和<code>Q</code>，会按照<code>Q</code>的值进行处理。</p></blockquote><h4 id="图片高级压缩"><a href="#图片高级压缩" class="headerlink" title="图片高级压缩"></a>图片高级压缩</h4><h4 id="图片加密"><a href="#图片加密" class="headerlink" title="图片加密"></a>图片加密</h4><h4 id="图片在线预览"><a href="#图片在线预览" class="headerlink" title="图片在线预览"></a>图片在线预览</h4><p>使用 OSS 默认域名访问 html、图片资源，会有以附件形式下载的情况。若需要浏览器直接访问，需使用自定义域名进行访问。</p><ol><li><p>域名绑定<br> 对象存储 -&gt; bucketname -&gt; 域名管理。</p></li><li><p>证书托管<br> 申请证书后，下载 Nginx 证书配置上去。</p></li><li><p>公钥：pem，密钥：key。</p></li></ol><h4 id="图片小程序预览"><a href="#图片小程序预览" class="headerlink" title="图片小程序预览"></a>图片小程序预览</h4><p>微信小程序配置安全域名</p><h4 id="图片迁移"><a href="#图片迁移" class="headerlink" title="图片迁移"></a>图片迁移</h4><p>参考<a href="https://help.aliyun.com/document_detail/95074.html?spm=a2c4g.11186623.6.550.79154accS5qoSS">文档</a></p><ol><li>申请迁移资格<a href="https://page.aliyun.com/form/act998591440/index.htm?spm=5176.a2c3g.0.0.228c3d89NRZqzm">在线迁移公测申请</a></li><li>给待迁移数据的OSS用户分配迁移权限：AliyunOSSFullAccess、AliyunMGWFullAccess。</li><li>在<a href="https://mgw.console.aliyun.com/?spm=a2c4g.11186623.2.12.70f7614ccmJkHM#/job?_k=6w2hbo">迁移控制台</a>分别创建源地址和目的地址。<br> 如果只希望迁移某个文件夹，则 OSS Prefix 加上此文件夹名称。</li><li>迁移控制台创建迁移任务。</li></ol><p><a href="https://help.aliyun.com/document_detail/90090.html?spm=a2c4g.11186623.4.2.69157f85oBY3jH">存储类型转换</a></p><blockquote><p>图片存储类型为归档存储的无法迁移，我是手工去解冻的。</p></blockquote><h4 id="图片跨域设置"><a href="#图片跨域设置" class="headerlink" title="图片跨域设置"></a>图片跨域设置</h4><p>问题：图片没法上传，提示跨域。</p><p>oss -&gt; bucket -&gt; 权限管理 -&gt; 跨域设置</p><p>参考<a href="https://help.aliyun.com/document_detail/31870.html?spm=5176.8466060.cors.1.6d6e1450ab9CBj">设置跨域资源共享</a></p><p>来源：<em><br>允许的Methods：钩上全部<br>允许Headers：</em><br>暴露 Headers：ETag 和 x-oss-request-id<br>缓存时间（秒）：1<br>返回 Vary: Origin：不选</p><h4 id="访问控制-RAM"><a href="#访问控制-RAM" class="headerlink" title="访问控制 RAM"></a>访问控制 RAM</h4><ol><li>创建OSS用户，选择编程访问。</li><li>创建 AccessKey ID 和 AccessKey Secret。</li><li>添加权限：AliyunOSSFullAccess、AliyunOSSReadOnlyAccess、AliyunYundunNewBGPAntiDDoS、AliyunYundunNewBGPAntiDDoS。</li></ol><h2 id="云效"><a href="#云效" class="headerlink" title="云效"></a>云效</h2><h4 id="机器-Agent-管理"><a href="#机器-Agent-管理" class="headerlink" title="机器 Agent 管理"></a>机器 Agent 管理</h4><p>1、添加 Agent。</p><p>企业设置 -&gt; 机器管理 -&gt; 添加主机。</p><p>2、重启 Agent。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/staragent/bin/staragentctl restart;</span><br></pre></td></tr></table></figure><p>3、Agent 状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/staragent/bin/staragentctl status;</span><br></pre></td></tr></table></figure><p>4、卸载 Agent。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/home/staragent/bin/staragentctl stop;</span><br><span class="line">rm -rf /usr/sbin/staragent_sn;</span><br><span class="line">rm -rf /home/aol2</span><br><span class="line">rm -rf /home/staragent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">/home/staragent/bin/staragentctl stop &amp;&amp; rm -rf /usr/sbin/staragent_sn &amp;&amp; rm -rf /home/aol2 &amp;&amp; rm -rf /home/staragent</span><br></pre></td></tr></table></figure><p><a href="https://help.aliyun.com/document_detail/62360.html?spm=a2c40.rdc_buyecspage.resource.1.18e78477pl96zp">参考</a></p><p>5、安装 Python2。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Python2.7</span></span><br><span class="line">yum install -y python2;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建软连接</span></span><br><span class="line">ln -s /usr/bin/python2 /usr/bin/python</span><br></pre></td></tr></table></figure><h4 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h4><p>1、Java RDC 脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/data/deploy/Java/icebartech-cloudnote/package.tgz</span><br><span class="line"></span><br><span class="line">set -e;</span><br><span class="line">if [ -f &quot;/data/deploy/Java/icebartech-cloudnote/deploy.sh&quot; ]; </span><br><span class="line">    then /data/deploy/Java/icebartech-cloudnote/deploy.sh stop; </span><br><span class="line">fi;</span><br><span class="line">mkdir -p /data/deploy/Java/icebartech-cloudnote;</span><br><span class="line">tar xf /data/deploy/Java/icebartech-cloudnote/package.tgz -o -C /data/deploy/Java/icebartech-cloudnote;</span><br><span class="line">chmod -R 777 /data/deploy/Java/icebartech-cloudnote/deploy.sh;</span><br><span class="line">/data/deploy/Java/icebartech-cloudnote/deploy.sh start</span><br></pre></td></tr></table></figure></p><p>2、Web 打包 RDC 脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/data/deploy/Web/icebartech-bookstore/icebartech-bookstore-sys/package.tgz</span><br><span class="line"></span><br><span class="line">set -e;</span><br><span class="line">mkdir -p /data/deploy/Web/icebartech-bookstore/icebartech-bookstore-sys/dist;</span><br><span class="line">tar xf /data/deploy/Web/icebartech-bookstore/icebartech-bookstore-sys/package.tgz -o -C /data/deploy/Web/icebartech-bookstore/icebartech-bookstore-sys/dist;</span><br></pre></td></tr></table></figure><p>3、Web 源码 RDC 脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz</span><br><span class="line"></span><br><span class="line">set -e;</span><br><span class="line">mkdir -p /data/deploy/Web/icebartech-home/icebartech-home-sys;</span><br><span class="line">tar xf /data/deploy/Web/home/home-sys/package.tgz -o -C /data/deploy/Web/home/home-sys;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 介绍</title>
      <link href="/2020/09/02/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/Nginx%20%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/09/02/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/Nginx%20%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>Nginx 是一个 Web 服务器和反向代理服务器，用于HTTP、HTTPS、SMTP、POP3 和 IMAP 协议。因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Nginx—-Ngine X，是一款免费的、自由的、开源的、高性能HTTP服务器和反向代理服务器；也是 一个IMAP、POP3、SMTP代理服务器；Nginx以其高性能、稳定性、丰富的功能、简单的配置和 低资源消耗而闻名。</p><p>也就是说 Nginx 本身就可以托管网站（类似于 Tomcat 一样），进行 HTTP 服务处理，也可以作为反向代理服务器 、负载均衡器和 HTTP 缓存。</p><p>Nginx 解决了服务器的 C10K（就是在一秒之内连接客户端的数目为 10k 即 1 万）问题。它的设计不像传统的服务器那样使用线程处理请求，而是一个更加高级的机制—事件驱动机制，是一种异步 事件驱动结构。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol><li>反向代理。</li><li>负载均衡。</li><li>动静分离。</li><li>配置https。</li></ol><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol><li><p>更快<br>单次请求会得到更快的响应。</p><p>在高峰期(如有数以万计的并发请求)，Nginx 可以比其他 Web 服务器更快地响应请求。</p></li><li><p>高并发<br>单机支持 10 万以上的并发连接</p></li><li><p>低内存消耗<br>一般情况下，10000 个非活跃的 HTTP Keep-Alive 连接在 Nginx 中仅消耗 2.5MB 的内存，这是 Nginx 支持高并发连接的基础。</p></li><li><p>热部署<br>master 管理进程与 worker 工作进程的分离设计，使得 Nginx 能够提供热部署功能，即可以在 7×24 小时 不间断服务的前提下，升级 Nginx 的可执行文件。当然，它也支持不停止服务就更新配置项、更换日志 文件等功能。</p></li><li><p>高扩展性，跨平台<br>Nginx 的设计极具扩展性，它完全是由多个不同功能、不同层次、不同类型且耦合度极低的模块组成。因此，当对某一个模块修复 Bug 或进行升级时，可以专注于模块自身，无须在意其他。</p><p>而且在 HTTP 模块 中，还设计了 HTTP 过滤器模块：一个正常的 HTTP 模块在处理完请求后，会有一串 HTTP 过滤器模块对请求的结果进行再处理。这样，当我们开发一个新的HTTP模块时，不但可以使用诸如 HTTP 核心模块、 Events 模块、log 模块等不同层次或者不同类型的模块，还可以原封不动地复用大量已有的 HTTP 过滤器模块。</p><p>这种低耦合度的优秀设计，造就了 Nginx 庞大的第三方模块，当然，公开的第三方模块也如官方发布的模块一样容易使用。Nginx 的模块都是嵌入到二进制文件中执行的，无论官方发布的模块还是第三方模块都是如此。这使得 第三方模块一样具备极其优秀的性能，充分利用 Nginx 的高并发特性，因此，许多高流量的网站都倾向 于开发符合自己业务特性的定制模块。</p></li><li><p>高可靠性，用于反向代理，宕机的概率微乎其微<br>高可靠性是我们选择 Nginx 的最基本条件，因为 Nginx 的可靠性是大家有目共睹的，很多家高流量网站 都在核心服务器上大规模使用 Nginx。</p><p>Nginx 的高可靠性来自于其核心框架代码的优秀设计、模块设计 的简单性；另外，官方提供的常用模块都非常稳定，每个 worker 进程相对独立，master 进程在 1 个 worker 进程出错时可以快速“拉起”新的 worker 子进程提供服务。</p><p>理论上，Nginx 支持的并发连接上限取决于内存，10 万远未封顶。当然，能够及时地处理更多的并发请求，是与业务特点紧密相关的。</p></li><li><p>最自由的 BSD 许可协议<br>这是 Nginx 可以快速发展的强大动力。BSD 许可协议不只是允许用户免费使用 Nginx，它还允许用户在自己的项目中直接使用或修改 Nginx 源码，然后发布。这吸引了无数开发者继续为 Nginx 贡献自己的智慧。 </p></li></ol><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p>nginx: [alert] kill(31386, 1) failed (3: No such process)<br>Nginx 没有启动。</p></li><li><p>提示403<br>请求URL不对</p><p>没有权限，例如：”GET /welcome HTTP/1.1” 403 177 “-“ “Mozilla/5.0 (Windows NT 10.0; Win64; x64) </p></li></ol><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>1、简述一下什么是Nginx，它有什么优势和功能?</p><p>2、解释Nginx用途</p><p>3、列举一些 Nginx 的特性</p><p>4、请列举 Nginx 和 Apache 之间的不同点</p>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Nginx 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 安装</title>
      <link href="/2020/09/02/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/Nginx%20%E5%AE%89%E8%A3%85/"/>
      <url>/2020/09/02/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/Nginx%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>Centos 安装 Nginx 主要有 2 种方式，一种是源码包安装，另外一种是 yum 安装。</p><p>另外我们也可以把 Nginx 安装的 Docker 容器种。</p><h2 id="源码包安装"><a href="#源码包安装" class="headerlink" title="源码包安装"></a>源码包安装</h2><ol><li><p>下载源码并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /home/downloads</span><br><span class="line">sudo cd /home/downloads</span><br><span class="line">sudo wget http://nginx.org/download/nginx-1.8.0.tar.gz</span><br><span class="line"></span><br><span class="line">sudo tar -zxvf nginx-1.8.0.tar.gz</span><br><span class="line">sudo cd nginx-1.8.0</span><br></pre></td></tr></table></figure></li><li><p>编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装pcre库</span></span><br><span class="line">sudo yum install -y pcre pcre-devel</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装zlib库</span></span><br><span class="line">sudo yum install -y zlib zlib-devel</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装gcc g++（可选）</span></span><br><span class="line">sudo yum install gcc</span><br><span class="line">sudo yum install gcc-c++</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装SSL modules require the OpenSSL library</span></span><br><span class="line">yum -y install openssl openssl-devel</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装nginx</span></span><br><span class="line">sudo ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li><li><p>测试安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测配置文件</span></span><br><span class="line">sudo /usr/<span class="built_in">local</span>/nginx/sbin/nginx -t</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">sudo /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">sudo /usr/<span class="built_in">local</span>/nginx/sbin/nginx –s stop</span><br></pre></td></tr></table></figure></li><li><p>设置 systemctl 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在系统服务目录里创建 nginx.service 文件。</span></span><br><span class="line">sudo vi /lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure></li></ol><p>nginx.service 内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]                                              # 服务的说明</span><br><span class="line">Description=nginx                                   # 描述服务</span><br><span class="line">After=network.target                                # 描述服务类别</span><br><span class="line">  </span><br><span class="line">[Service]                                           # 服务运行参数的设置，注意：[Service]的启动、重启、停止命令全部要求使用绝对路径</span><br><span class="line">Type=forking                                        # 是后台运行的形式</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx               # 为服务的具体运行命令</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload    # 为重启命令</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s quit        # 为停止命令</span><br><span class="line">PrivateTmp=true                                     # 表示给服务分配独立的临时空间</span><br><span class="line">  </span><br><span class="line">[Install]                                           # 运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><ol><li>常用 systemctl 命令。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx.service</span><br><span class="line"><span class="comment"># 停止开机自启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> nginx.service</span><br><span class="line"><span class="comment"># 查看服务当前状态</span></span><br><span class="line">systemctl status nginx.service</span><br><span class="line"><span class="comment"># 启动 nginx 服务</span></span><br><span class="line">systemctl start nginx.service　</span><br><span class="line"><span class="comment"># 停止 nginx 服务</span></span><br><span class="line">systemctl stop nginx.service　</span><br><span class="line"><span class="comment"># 重新启动服务</span></span><br><span class="line">systemctl restart nginx.service　</span><br><span class="line"><span class="comment"># 查看所有已启动的服务</span></span><br><span class="line">systemctl list-units --<span class="built_in">type</span>=service</span><br></pre></td></tr></table></figure></li></ol><h2 id="yum-安装"><a href="#yum-安装" class="headerlink" title="yum 安装"></a>yum 安装</h2><h4 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h4><p>默认情况 Centos7 中无 Nginx 的源，需要通过以下命令添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h4><p>通过 <code>yum search nginx</code> 看看是否已经添加源成功。如果成功则执行下列命令安装 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y nginx</span><br></pre></td></tr></table></figure><h4 id="启动-Nginx-并设置开机自动运行"><a href="#启动-Nginx-并设置开机自动运行" class="headerlink" title="启动 Nginx 并设置开机自动运行"></a>启动 Nginx 并设置开机自动运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nginx.service</span><br></pre></td></tr></table></figure><h4 id="Nginx-的默认路径"><a href="#Nginx-的默认路径" class="headerlink" title="Nginx 的默认路径"></a>Nginx 的默认路径</h4><ol><li><p>配置路径<br><code>/etc/nginx/</code></p></li><li><p>PID 目录<br><code>/var/run/nginx.pid</code></p></li><li><p>站点目录<br><code>/usr/share/nginx/html</code></p></li><li><p>访问日志<br><code>/var/log/nginx/access.log</code></p></li><li><p>错误日志<br><code>/var/log/nginx/error.log</code></p></li></ol><h2 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h2><p>1、取最新版的 Nginx 镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx:latest</span><br></pre></td></tr></table></figure><p>2、查看本地镜像。</p><p>执行命令后可以看到我们已经安装了最新版本的 Nginx 镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>3、运行容器。</p><p>安装完成后，我们可以使用以下命令来运行 nginx 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-test -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><p>参数说明：</p><ol><li><p><code>--name nginx-test</code><br>容器名称。</p></li><li><p><code>-p 8080:80</code><br>端口进行映射，将本地 8080 端口映射到容器内部的 80 端口。</p></li><li><p><code>-d nginx</code><br>设置容器在在后台一直运行。</p></li></ol><h2 id="docker-compose-安装"><a href="#docker-compose-安装" class="headerlink" title="docker-compose 安装"></a>docker-compose 安装</h2><p>1、在 /opt 目录下创建 docker_nginx 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在/opt目录下创建docker_nginx目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">mkdir docker_nginx</span><br></pre></td></tr></table></figure><p>2、创建docker-compose.yml文件并编写下面的内容，保存退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3.1&apos;</span><br><span class="line">services: </span><br><span class="line">  nginx:</span><br><span class="line">    restart: always</span><br><span class="line">    image: daocloud.io/library/nginx:latest</span><br><span class="line">    container_name: nginx</span><br><span class="line">    ports: </span><br><span class="line">      - 80:80</span><br></pre></td></tr></table></figure><p>3、执行 docker-compose 命令编译运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Nginx 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 配置详解</title>
      <link href="/2020/09/02/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/09/02/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 定义 Nginx 运行的用户和用户组，如果提示没有权限，可以使用 root 用户。</span><br><span class="line">user www www;</span><br><span class="line"></span><br><span class="line"># Nginx 进程数，建议设置为等于 CPU 总核心数。</span><br><span class="line">worker_processes 8;</span><br><span class="line"> </span><br><span class="line"># 全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class="line">error_log /usr/local/nginx/logs/error.log info;</span><br><span class="line"></span><br><span class="line"># 进程pid文件</span><br><span class="line">pid /usr/local/nginx/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"># 指定进程可以打开的最大文件描述符数目</span><br><span class="line"># 工作模式与连接数上限</span><br><span class="line"># 这个指令是指当一个 Nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与 Nginx 进程数相除，但是 Nginx 分配请求并不是那么均匀，所以最好与 ulimit -n 的值保持一致。</span><br><span class="line"># 现在在 Linux 2.6 内核下开启文件打开数为 65535，worker_rlimit_nofile就相应应该填写 65535。</span><br><span class="line"># 这是因为 Nginx 调度时分配请求到进程并不是那么的均衡，所以假如填写 10240，总并发量达到3-4万时就有进程可能超过 10240了，这时会返回 502 错误。</span><br><span class="line">worker_rlimit_nofile 65535;</span><br></pre></td></tr></table></figure><h2 id="event-配置"><a href="#event-配置" class="headerlink" title="event 配置"></a>event 配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span><br><span class="line">    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class="line">    #补充说明：</span><br><span class="line">    #与apache相类，nginx针对不同的操作系统，有不同的事件模型</span><br><span class="line">    #A）标准事件模型</span><br><span class="line">    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><br><span class="line">    #B）高效事件模型</span><br><span class="line">    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><br><span class="line">    #Epoll：使用于Linux内核2.6版本及以后的系统。</span><br><span class="line">    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><br><span class="line">    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><br><span class="line">    use epoll;</span><br><span class="line"></span><br><span class="line">    #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class="line">    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span><br><span class="line">    worker_connections 65535;</span><br><span class="line"></span><br><span class="line">    #keepalive超时时间。</span><br><span class="line">    keepalive_timeout 60;</span><br><span class="line"></span><br><span class="line">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span><br><span class="line">    #分页大小可以用命令getconf PAGESIZE 取得。</span><br><span class="line">    #[root@web001 ~]# getconf PAGESIZE</span><br><span class="line">    #4096</span><br><span class="line">    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span><br><span class="line">    client_header_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br><span class="line">    open_file_cache max=65535 inactive=60s;</span><br><span class="line"></span><br><span class="line">    #这个是指多长时间检查一次缓存的有效信息。</span><br><span class="line">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span><br><span class="line">    open_file_cache_valid 80s;</span><br><span class="line"></span><br><span class="line">    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br><span class="line">    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span><br><span class="line">    open_file_cache_min_uses 1;</span><br><span class="line">    </span><br><span class="line">    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件时记录cache错误.</span><br><span class="line">    open_file_cache_errors on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="http-配置"><a href="#http-配置" class="headerlink" title="http 配置"></a>http 配置</h2><p>设定 HTTP 服务器，利用它的反向代理功能提供负载均衡支持。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">    #文件扩展名与文件类型映射表</span><br><span class="line">    include mime.types;</span><br><span class="line"></span><br><span class="line">    #默认文件类型</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #默认编码</span><br><span class="line">    #charset utf-8;</span><br><span class="line"></span><br><span class="line">    #服务器名字的hash表大小</span><br><span class="line">    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><br><span class="line">    server_names_hash_bucket_size 128;</span><br><span class="line"></span><br><span class="line">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br><span class="line">    client_header_buffer_size 32k;</span><br><span class="line"></span><br><span class="line">    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><br><span class="line">    large_client_header_buffers 4 64k;</span><br><span class="line"></span><br><span class="line">    #设定通过nginx上传文件的大小</span><br><span class="line">    client_max_body_size 8m;</span><br><span class="line"></span><br><span class="line">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class="line">    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><br><span class="line">    sendfile on;</span><br><span class="line"></span><br><span class="line">    #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class="line">    autoindex on;</span><br><span class="line"></span><br><span class="line">    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">     </span><br><span class="line">    tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">    #长连接超时时间，单位是秒</span><br><span class="line">    keepalive_timeout 120;</span><br><span class="line"></span><br><span class="line">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class="line">    fastcgi_connect_timeout 300;</span><br><span class="line">    fastcgi_send_timeout 300;</span><br><span class="line">    fastcgi_read_timeout 300;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">    #gzip模块设置</span><br><span class="line">    gzip on; #开启gzip压缩输出</span><br><span class="line">    gzip_min_length 1k;    #最小压缩文件大小</span><br><span class="line">    gzip_buffers 4 16k;    #压缩缓冲区</span><br><span class="line">    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">    gzip_comp_level 2;    #压缩等级</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">    #开启限制IP连接数的时候需要使用</span><br><span class="line">    #limit_zone crawler $binary_remote_addr 10m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #负载均衡配置</span><br><span class="line">    upstream jh.w3cschool.cn &#123;</span><br><span class="line">     </span><br><span class="line">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class="line">        server 192.168.80.121:80 weight=3;</span><br><span class="line">        server 192.168.80.122:80 weight=2;</span><br><span class="line">        server 192.168.80.123:80 weight=3;</span><br><span class="line"></span><br><span class="line">        #nginx的upstream目前支持4种方式的分配</span><br><span class="line">        #1、轮询（默认）</span><br><span class="line">        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="line">        #2、weight</span><br><span class="line">        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class="line">        #例如：</span><br><span class="line">        #upstream bakend &#123;</span><br><span class="line">        #    server 192.168.0.14 weight=10;</span><br><span class="line">        #    server 192.168.0.15 weight=10;</span><br><span class="line">        #&#125;</span><br><span class="line">        #2、ip_hash</span><br><span class="line">        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class="line">        #例如：</span><br><span class="line">        #upstream bakend &#123;</span><br><span class="line">        #    ip_hash;</span><br><span class="line">        #    server 192.168.0.14:88;</span><br><span class="line">        #    server 192.168.0.15:80;</span><br><span class="line">        #&#125;</span><br><span class="line">        #3、fair（第三方）</span><br><span class="line">        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class="line">        #upstream backend &#123;</span><br><span class="line">        #    server server1;</span><br><span class="line">        #    server server2;</span><br><span class="line">        #    fair;</span><br><span class="line">        #&#125;</span><br><span class="line">        #4、url_hash（第三方）</span><br><span class="line">        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class="line">        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><br><span class="line">        #upstream backend &#123;</span><br><span class="line">        #    server squid1:3128;</span><br><span class="line">        #    server squid2:3128;</span><br><span class="line">        #    hash $request_uri;</span><br><span class="line">        #    hash_method crc32;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        #tips:</span><br><span class="line">        #upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span><br><span class="line">        #    ip_hash;</span><br><span class="line">        #    server 127.0.0.1:9090 down;</span><br><span class="line">        #    server 127.0.0.1:8080 weight=2;</span><br><span class="line">        #    server 127.0.0.1:6060;</span><br><span class="line">        #    server 127.0.0.1:7070 backup;</span><br><span class="line">        #&#125;</span><br><span class="line">        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span><br><span class="line"></span><br><span class="line">        #每个设备的状态设置为:</span><br><span class="line">        #1.down表示单前的server暂时不参与负载</span><br><span class="line">        #2.weight为weight越大，负载的权重就越大。</span><br><span class="line">        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><br><span class="line">        #4.fail_timeout:max_fails次失败后，暂停的时间。</span><br><span class="line">        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class="line"></span><br><span class="line">        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><br><span class="line">        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><br><span class="line">        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><br><span class="line">        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    #虚拟主机的配置</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        #监听端口</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        #域名可以有多个，用空格隔开</span><br><span class="line">        server_name www.w3cschool.cn w3cschool.cn;</span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">        root /data/www/w3cschool;</span><br><span class="line"></span><br><span class="line">        #对******进行负载均衡</span><br><span class="line">        location ~ .*.(php|php5)?$</span><br><span class="line">        &#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #图片缓存时间设置</span><br><span class="line">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 10d;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #JS和CSS缓存时间设置</span><br><span class="line">        location ~ .*.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 1h;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #日志格式设定</span><br><span class="line">        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><br><span class="line">        #$remote_user：用来记录客户端用户名称；</span><br><span class="line">        #$time_local： 用来记录访问时间与时区；</span><br><span class="line">        #$request： 用来记录请求的url与http协议；</span><br><span class="line">        #$status： 用来记录请求状态；成功是200，</span><br><span class="line">        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><br><span class="line">        #$http_referer：用来记录从那个页面链接访问过来的；</span><br><span class="line">        #$http_user_agent：记录客户浏览器的相关信息；</span><br><span class="line">        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><br><span class="line">        log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">        &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">        &apos;&quot;$http_user_agent&quot; $http_x_forwarded_for&apos;;</span><br><span class="line">         </span><br><span class="line">        #定义本虚拟主机的访问日志</span><br><span class="line">        access_log  /usr/local/nginx/logs/host.access.log  main;</span><br><span class="line">        access_log  /usr/local/nginx/logs/host.access.404.log  log404;</span><br><span class="line">         </span><br><span class="line">        #对 &quot;/&quot; 启用反向代理</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:88;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">             </span><br><span class="line">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">             </span><br><span class="line">            #以下是一些反向代理的配置，可选。</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line"></span><br><span class="line">            #允许客户端请求的最大单文件字节数</span><br><span class="line">            client_max_body_size 10m;</span><br><span class="line"></span><br><span class="line">            #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span><br><span class="line">            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span><br><span class="line">            client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">            #表示使nginx阻止HTTP应答代码为400或者更高的应答。</span><br><span class="line">            proxy_intercept_errors on;</span><br><span class="line"></span><br><span class="line">            #后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class="line">            #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">            proxy_connect_timeout 90;</span><br><span class="line"></span><br><span class="line">            #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br><span class="line">            proxy_send_timeout 90;</span><br><span class="line"></span><br><span class="line">            #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><br><span class="line">            proxy_read_timeout 90;</span><br><span class="line"></span><br><span class="line">            #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span><br><span class="line">            proxy_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">            #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class="line">            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><br><span class="line">            proxy_buffers 4 32k;</span><br><span class="line"></span><br><span class="line">            #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">            proxy_busy_buffers_size 64k;</span><br><span class="line"></span><br><span class="line">            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><br><span class="line">            #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">            proxy_temp_file_write_size 64k;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">        #设定查看Nginx状态的地址</span><br><span class="line">        location /NginxStatus &#123;</span><br><span class="line">            stub_status on;</span><br><span class="line">            access_log on;</span><br><span class="line">            auth_basic &quot;NginxStatus&quot;;</span><br><span class="line">            auth_basic_user_file confpasswd;</span><br><span class="line">            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #本地动静分离反向代理配置</span><br><span class="line">        #所有jsp的页面均交由tomcat或resin处理</span><br><span class="line">        location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class="line">        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span><br><span class="line">        pdf|xls|mp3|wma)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 15d; </span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        location ~ .*.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 1h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="server-配置"><a href="#server-配置" class="headerlink" title="server 配置"></a>server 配置</h2><h4 id="location-路径优先级"><a href="#location-路径优先级" class="headerlink" title="location 路径优先级"></a>location 路径优先级</h4><h2 id="location-路径"><a href="#location-路径" class="headerlink" title="location 路径"></a>location 路径</h2><h4 id="精准匹配"><a href="#精准匹配" class="headerlink" title="精准匹配"></a>精准匹配</h4><p>精准匹配要完成匹配路径，后面不能带能和字符串。</p><p>例如<code>www.baidu.com/sys/login</code>不能是<code>www.baidu.com/sys/login/admin_login</code>或者<code>www.baidu.com/sys/login/admin_login</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /sys/login &#123;</span><br><span class="line">    # ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、通用匹配。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /xxx &#123;</span><br><span class="line">#匹配所有以/xxx开头的路径</span><br><span class="line">#例如127.0.0.1:8080/xxxxxx可以为空，为空则和=匹配一样</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>1、请解释 Nginx 服务器上的 Master 和 Worker 进程分别是什么？</p><p>2、在 Nginx 中，如何使用未定义的服务器名称来阻止处理请求? </p><p>3、Nginx 是如何处理一个 HTTP 请求的呢?</p>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Nginx 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 反向代理</title>
      <link href="/2020/09/02/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/Nginx%20%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>/2020/09/02/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/Nginx%20%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>反向代理服务器决定那台服务器提供服务。</p><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>正向代理类似一个跳板机，代理访问外部资源。</p><p>举个例子：我是一个用户，我访问不了某网站，但是我能访问一个代理服务器，这个代理服务器呢,他能访问那个我不能访问的网站，于是我先连上代理服务器,告诉他我需要那个无法访问网站的内容，代理服务器去取回来,然后返回给我。从网站的角度，只在代理服务器来取内容的时候有一次记录，有时候并不知道是用户的请求，也隐藏了用户的资料，这取决于代理告不告诉网站。</p><pre class="mermaid">flowchart LR   客户端 --x 服务器   客户端 --> 正向代理   正向代理 --> 服务器</pre><p>正向代理的用途：</p><ol><li>访问原来无法访问的资源，如 google。</li><li>可以做缓存，加速访问资源。</li><li>对客户端访问授权，上网进行认证。</li><li>代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息。</li></ol><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>反向代理是指以代理服务器来接受 Internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器对外就表现为一个服务器。客户端是无感知代理的存在的，反向代理对外都是透明的，访问者者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。</p><pre class="mermaid">flowchart LR    客户端 --> 反向代理    反向代理 -.-> 淘宝A    反向代理 --> 淘宝B    subgraph 服务器集群        淘宝A        淘宝B    end</pre><p>反向代理的作用：</p><ol><li>负载均衡，通过反向代理服务器来优化网站的负载。</li><li>保证内网的安全，可以使用反向代理提供 WAF 功能，阻止 Web 攻击。</li></ol><h2 id="Nginx-实现反向代理"><a href="#Nginx-实现反向代理" class="headerlink" title="Nginx 实现反向代理"></a>Nginx 实现反向代理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    # tomcat首页</span><br><span class="line">    location /index &#123;</span><br><span class="line">        proxy_pass http://ncthz.top:8081/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 毕设前台首页</span><br><span class="line">    location ^~ /CR/ &#123;</span><br><span class="line">        proxy_pass http://ncthz.top:8080/CR/;</span><br><span class="line">    &#125;</span><br><span class="line">    # 毕设后台首页</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://ncthz.top:8080/CRAdmin/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>1、请解释代理中的正向代理和反向代理。</p>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Nginx 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 负载均衡</title>
      <link href="/2020/09/02/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/Nginx%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2020/09/02/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/Nginx%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<p>Nginx模块一般被分成三大类：handler、filter和upstream。前面的章节中，读者已经了解了handler、filter。利用这两类模块，可以使Nginx轻松完成任何单机工作。而本章介绍的upstream模块，将使Nginx跨越单机的限制，完成网络数据的接收、处理和转发。</p><p>从本质上说，upstream属于handler，只是它不产生自己的内容，而是通过请求后端服务器得到内容，所以才称为upstream（上游）。请求并取得响应内容的整个过程已经被封装到Nginx内部，所以upstream模块只需要开发若干回调函数，完成构造请求和解析响应等具体的工作。</p><h2 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h2><p>将客户端发起的请求，平均分配给每一台服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">upstream my_server&#123;</span><br><span class="line">    server ncthz.top:8080;</span><br><span class="line">    server ncthz.top:8081;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">        proxy_pass http://my_server/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h2><p>会将客户端的请求，根据服务器的权重值不同，分配不同的数量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">upstream my_server&#123;</span><br><span class="line">    server ncthz.top:8080 weight=8;     # 将8/10的请求转发到此服务。 </span><br><span class="line">    server ncthz.top:8081 weight=2;     # 将2/10的请求转发到此服务。</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">        proxy_pass http://my_server/;#tomcat首页</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IP-Hash"><a href="#IP-Hash" class="headerlink" title="IP Hash"></a>IP Hash</h2><p>基于发起请求的客户端的IP地址不同，它始终会将请求发送到指定的服务器上。就是说如果这个客户端的请求的IP地址不变，那么处理请求的服务器将一直是同一个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">upstream my_server&#123;</span><br><span class="line">ip_hash;</span><br><span class="line">    server ncthz.top:8080 weight=10;</span><br><span class="line">    server ncthz.top:8081 weight=2;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">        proxy_pass http://my_server/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Nginx 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 动静分离</title>
      <link href="/2020/09/02/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/Nginx%20%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/"/>
      <url>/2020/09/02/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/Nginx%20%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<p>在 Web 开发中，通常来说，动态资源其实就是指那些后台资源，而静态资源就是指 HTML，JavaScript，CSS，img 等文件。</p><p>一般来说，都需要将动态资源和静态资源分开，将静态资源部署在 Nginx 上，当一个请求来的时候，如果是静态资源的请求，就直接到 Nginx 配置的静态资源目录下面获取资源，如果是动态资源的请求，Nginx 利用反向代理的原理，把请求转发给后台应用去处理，从而实现动静分离。</p><p>在使用前后端分离之后，可以很大程度的提升静态资源的访问速度，同时在开过程中也可以让前后端开发并行可以有效的提高开发时间，也可以有些的减少联调时间。</p><p>静态资源并发 = worker_processes * worker_connections / 2。</p><p>动态资源并发 = worker_processes * worker_connections / 4。</p><h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       10000;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    # 拦截后台请求</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:8888;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 拦截静态资源</span><br><span class="line">    location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|js|css)$ &#123;</span><br><span class="line">        root /Users/dalaoyang/Downloads/static;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Nginx 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 集群部署</title>
      <link href="/2020/09/02/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/Nginx%20%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/09/02/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/Nginx%20%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>有待完善。。。</p><h2 id="什么是-Nginx-集群"><a href="#什么是-Nginx-集群" class="headerlink" title="什么是 Nginx 集群"></a>什么是 Nginx 集群</h2><h2 id="为什么需要-Nginx-集群"><a href="#为什么需要-Nginx-集群" class="headerlink" title="为什么需要 Nginx 集群"></a>为什么需要 Nginx 集群</h2><h2 id="集群方案"><a href="#集群方案" class="headerlink" title="集群方案"></a>集群方案</h2>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Nginx 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Europa Universalis</title>
      <link href="/2020/08/22/%E6%B8%B8%E6%88%8F%E7%9B%B8%E5%85%B3/Europa%20Universalis/"/>
      <url>/2020/08/22/%E6%B8%B8%E6%88%8F%E7%9B%B8%E5%85%B3/Europa%20Universalis/</url>
      
        <content type="html"><![CDATA[<h2 id="意识形态"><a href="#意识形态" class="headerlink" title="意识形态"></a>意识形态</h2><div class="table-container"><table><thead><tr><th style="text-align:left">单词</th><th>含义</th><th>单词</th><th>含义</th><th>单词</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left">discrepancy</td><td>矛盾</td><td>reinforce</td><td>加固</td><td>orthodox</td><td>普遍接受的；正统的</td></tr><tr><td style="text-align:left">spiritual</td><td>精神的 宗教的</td><td>course</td><td>科目</td><td>conversion</td><td>转换</td></tr><tr><td style="text-align:left">syncretize</td><td>融合</td><td>superstition</td><td>迷信</td><td>heathen</td><td>异教徒</td></tr><tr><td style="text-align:left">saint</td><td>圣人般的人</td><td>simony</td><td>买卖圣职罪</td><td></td></tr><tr><td style="text-align:left">churchman</td><td>教会人士</td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td></tr></tbody></table></div><h2 id="政治名词"><a href="#政治名词" class="headerlink" title="政治名词"></a>政治名词</h2><div class="table-container"><table><thead><tr><th style="text-align:left">单词</th><th>含义</th><th>单词</th><th>含义</th><th>单词</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left">envoy</td><td>使者</td><td></td><td></td><td></td></tr><tr><td style="text-align:left">lineage</td><td>血统</td><td></td><td></td><td></td></tr><tr><td style="text-align:left">administration</td><td>管理（部门）</td><td></td><td></td><td></td></tr><tr><td style="text-align:left">coffer</td><td>保险柜</td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td></tr></tbody></table></div><h2 id="形容词"><a href="#形容词" class="headerlink" title="形容词"></a>形容词</h2><div class="table-container"><table><thead><tr><th style="text-align:left">单词</th><th>含义</th><th>单词</th><th>含义</th><th>单词</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left">wane</td><td>衰落</td><td>disregard</td><td>漠视</td><td>firm</td><td>商号; 公司; 坚固的</td></tr><tr><td style="text-align:left">rage</td><td>愤怒; 激烈，猛烈</td><td>revolt</td><td>背叛; 厌恶</td><td>devout</td><td>虔诚的</td></tr><tr><td style="text-align:left">vacant</td><td>空着的</td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td></tr></tbody></table></div><h2 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h2><div class="table-container"><table><thead><tr><th style="text-align:left">单词</th><th>含义</th><th>单词</th><th>含义</th><th>单词</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left">preform</td><td>起…作用</td><td>set out</td><td>出发；启程</td><td></td></tr><tr><td style="text-align:left">contribution</td><td>贡献</td><td></td><td></td><td></td></tr><tr><td style="text-align:left">make an offer</td><td>出价</td><td></td><td></td></tr></tbody></table></div><h2 id="生物器官"><a href="#生物器官" class="headerlink" title="生物器官"></a>生物器官</h2><div class="table-container"><table><thead><tr><th style="text-align:left">单词</th><th>含义</th><th>单词</th><th>含义</th><th>单词</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left">stomach</td><td>胃；忍受</td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td></tr></tbody></table></div><h2 id="国家与地名"><a href="#国家与地名" class="headerlink" title="国家与地名"></a>国家与地名</h2><div class="table-container"><table><thead><tr><th style="text-align:left">单词</th><th>含义</th><th>单词</th><th>含义</th><th>单词</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left">Bornholm</td><td>博恩霍尔姆</td><td>Lolland</td><td>洛兰岛</td></tr><tr><td style="text-align:left">Naples</td><td>那不勒斯</td><td></td><td></td><td></td></tr><tr><td style="text-align:left">Neapolitan</td><td>那不勒斯的</td><td></td><td></td></tr></tbody></table></div><h2 id="人名"><a href="#人名" class="headerlink" title="人名"></a>人名</h2><div class="table-container"><table><thead><tr><th style="text-align:left">单词</th><th>含义</th><th>单词</th><th>含义</th><th>单词</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left">Wladyslaw</td><td>瓦迪斯瓦夫</td></tr><tr><td style="text-align:left">cnut</td><td>克努特</td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 游戏相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式简介</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>设计模式是经过高度抽象化的在编程中可以被反复使用的代码设计经验。正确的使用设计模式能有效提高代码的可读性、可靠性和可重用性。</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>设计模式有 7 个原则：单一职责原则、开闭原则、里氏替换原则、依赖倒转原则、接口隔离原则、合成/聚合复用原则、迪米特法则。接下来对这些原则一一进行讲解。</p><ol><li><p>单一职责原则<br>单一职责原则又称为单一功能原则，它规定一个类只有一个职责。如果又多个职责（功能）被设计在一个类中，这个类就违反了单一职责原则。</p></li><li><p>开闭原则<br>开闭原则规定软件中的对象（类、模块、函数等）对扩展开放，对修改关闭。这意味着一个实体允许在不改变其源代码的前提下改动其行为。该特性在产品化的环境下是特别有价值的，在这种环境下，改变源代码需要经过代码审核、单元测试等过程，以确保产品的使用价值。遵循这个原则的代码在扩展时并不发生改变，因此不需要经历上述过程。</p></li><li><p>里氏代换原则<br>里氏代换原则是对开闭原则的补充，规定了在任意父类可以出现的地方，子类都一定可以出现。实现开闭原则的关键就是抽象化，父类和子类的继承关系就是抽象化的具体表现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p></li><li><p>依赖倒转原则<br>依赖倒转原则指程序要依赖于抽象（比如 Java 中的抽象类和接口），而不依赖于具体的实现（比如 Java 中的实现类）。简单地说，就是要求基于抽象进行编程，不要求对实现进行编程。这就降低了模块直接的耦合度。</p></li><li><p>接口隔离原则<br>接口隔离原则指通过将不同的功能定义在不同的接口中来实现接口的隔离，这样就避免了其他类在依赖该接口（接口上定义的功能）时依赖其不需要的接口，可减少接口直接依赖的冗余性和复杂性。</p></li><li><p>合成/聚合复用原则<br>合成/聚合复用原则指通过在一个新的对象中引入（注入）已有的对象以达到类的功能复用和扩展的目的。它的设计原则是要尽量使用合成/聚合而不要使用继承来扩展类的功能。</p></li><li><p>迪米特法则<br>迪米特法则指一个对象尽可能少地与其他对象发生相互作用，即一个对象对其他对象应该有尽可能少的了解或依赖。其核心思想在于降低模块之间的耦合度，提高模块的内聚性。迪米特法则规定每个模块对其他模块都要有尽可能少的了解和依赖，因此很容易使系统模块直接功能独立，这使得各个模块的独立运行变得更简单，同时使得各个模块之间的组合变得更容易。</p></li></ol><h2 id="模式分类"><a href="#模式分类" class="headerlink" title="模式分类"></a>模式分类</h2><p>设计模式按照其功能和使用场景可以分为三大类：创建型模式、结构型模式和行为型模式。</p><ol><li><p>创建型模式<br>提供了许多优雅创建对象的方法，包含一下设计模式：工厂模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p></li><li><p>结构型模式<br>通过类和接口之间的继承和引用实现创建复杂结构对象的功能，包含：适配器模式、桥接模式、过滤器模式、组合模式、装饰器模式、外观模式、享元模式、代理模式。</p></li><li><p>行为模式<br>通过类之间不同的通信方式实现不同的行为方式，包括：责任链模式、命令模式、解析器模式、迭代器模式、中介者模式、备忘录模式、观察者模式、状态模式、策略模式、模版模式、访问者模式。</p></li><li><p>J2EE 模式<br>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的，包括：MVC 模式、业务代表模式、组合实体模式、数据访问对象模式、前端控制器模式、过滤拦截器模式、服务定位器模式、传输对象模式。</p></li></ol><p>下面用一个图片来整体描述一下设计模式之间的关系：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg" alt=""></p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ol><li>什么是设计模式？你是否在你的代码里面使用过任何设计模式？</li><li>设计模式的优点</li><li>单例模式的创建方式</li><li>JDK中使用了哪些设计模式？</li><li>如何编写线程安全的单例</li><li>代理模式有哪些类型？</li><li>讲一下MVC模式</li><li>拦截过滤器模式及其优点</li><li>DAO设计模式</li><li>Java 中什么叫单例设计模式？请用Java 写出线程安全的单例模式</li><li>在 Java 中，什么叫观察者设计模式（observer design pattern）？</li><li>使用工厂模式最主要的好处是什么？在哪里使用？</li><li>举一个用 Java 实现的装饰模式(decorator design pattern)？它是作用于对象层次还是类层次？</li><li>在 Java 中，为什么不允许从静态方法中访问非静态变量？</li><li>设计一个 ATM 机，请说出你的设计思路？</li><li>在 Java 中，什么时候用重载，什么时候用重写？</li><li>举例说明什么情况下会更倾向于使用抽象类而不是接口？</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>工厂模式是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><ol><li><p>举例说明<br>畜牧场有养马场，养牛场两种，用户到到养马场购买的动物是马，到养牛场购买的动物是牛。</p><p>在这里，畜牧场就是抽象工厂，养马场、养牛场就是具体工厂，动物就是抽象产品，马、牛是具体产品。</p></li><li><p>意图目的<br>定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中。这满足创建型模式中所要求的“创建与使用相分离”的特点。</p></li><li><p>主要解决<br>主要解决接口选择的问题。</p></li><li><p>如何解决<br>工厂模式中可以分为抽象工厂、具体工厂、抽象产品、具体产品 4 个要素组成。</p><p>畜牧场就是抽象工厂，养马场、养牛场就是具体工厂。</p><p>动物就是抽象产品，马、牛是具体产品。</p></li><li><p>关键代码<br>抽象工厂返回抽象产品。</p><p>具体工厂返回具体产品。</p></li><li><p>何时使用<br>客户不关心创建产品的细节，只关心产品的品牌。</p><p>客户只知道创建产品的工厂名，而不知道具体的产品名。比如去买一个苹果的笔记本，买一个华为的笔记本。</p></li><li><p>优点缺点<br> 创建一个产品对象只需要知道其名称即可。</p><p> 只需关心产品的接口，屏蔽产品的具体事项。    </p><p> 扩展方便，如果要增加一个产品，只要工厂类即可。</p><p> 每增加一个产品，都需要一个产品类，修改工厂类。容易使得系统中的个数成倍增加。一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。</p></li><li><p>注意事项<br>简单的对象之间用 <code>new</code> 创建，只有需要生成复杂对象的地方使用工厂方式。</p><p>当需要生成的产品不多且不会增加，一个具体工厂类就可以完成任务时，可删除抽象工厂类。这时工厂方法模式将退化到简单工厂模式。</p><p>工厂方法模式中考虑的是一类产品的生产，如畜牧场只养动物、电视机厂只生产电视机、计算机软件学院只培养计算机软件专业的学生等。</p><p>同种类称为同等级，也就是说：工厂方法模式只考虑生产同等级的产品，但是在现实生活中许多工厂是综合型的工厂，能生产多等级（种类） 的产品，如农场里既养动物又种植物，电器厂既生产电视机又生产洗衣机或空调，大学既有软件专业又有生物专业等。</p></li><li><p>使用场景<br>Hibernate 换数据库只需换方言和驱动就可以。</p><p>日记记录器，日志可能记录到数据库、本地硬盘、远程服务器等。用户可以选择记录日志到什么地方。</p><p>数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。</p><p>设计一个连接服务器的框架，需要三个协议，“POP3”、“IMAP”、“HTTP”，可以把这三个产品作为产品类，共同实现一个接口。</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>使用工厂模式设计畜牧场。</p><p>有很多种类的畜牧场，如养马场用于养马，养牛场用于养牛。对养马场和养牛场等具体工厂类，只要定义一个生成动物的方法 <code>newAnimal()</code> 即可。</p><p><img src="http://c.biancheng.net/uploads/allimg/181114/3-1Q11413554DT.gif" alt=""></p><p>1、使用实例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户去养马场购买马</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnimalFarm horseFarm = <span class="keyword">new</span> HorseFarm();</span><br><span class="line">        Animal horse = horseFarm.newAnimal();</span><br><span class="line">        horse.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">This is a Horse.</span><br></pre></td></tr></table></figure></p><p>2、抽象工厂、具体工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 畜牧场，抽象工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnimalFarm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取动物的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Animal <span class="title">newAnimal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 养马场，具体工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HorseFarm</span> <span class="keyword">implements</span> <span class="title">AnimalFarm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">newAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Horse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 养牛场，具体工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CattleFarm</span> <span class="keyword">implements</span> <span class="title">AnimalFarm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">newAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cattle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、抽象产品、具体产品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动物，抽象产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 马，具体产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Horse</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is a Horse."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 牛，具体产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cattle</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is a Cattle."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、模拟新增一个产品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户去养马场购买羊</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnimalFarm sheepFarm = <span class="keyword">new</span> SheepFarm();</span><br><span class="line">        Animal sheep = sheepFarm.newAnimal();</span><br><span class="line">        sheep.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 养羊场，具体工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SheepFarm</span> <span class="keyword">implements</span> <span class="title">AnimalFarm</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">newAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Sheep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 羊，具体产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is a Sheep."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JDK-中的工厂模式"><a href="#JDK-中的工厂模式" class="headerlink" title="JDK 中的工厂模式"></a>JDK 中的工厂模式</h4><p>如果单从隐藏创建逻辑这方面来讲，<code>Class.forName</code>、<code>Object.toString</code>、<code>Boolean.valueOf</code> 也属于工厂模式。</p><p>JDK 中使用到工厂模式 （可通过创建方法识别返回抽象/接口类型的实现）的类和方法：</p><ol><li><code>java.util.EnumSet</code>#of()</li><li><code>java.util.Calendar</code>#getInstance()</li><li><code>java.text.NumberFormat</code>#getInstance()</li><li><code>java.nio.charset.Charset</code>#forName()</li><li><code>java.util.ResourceBundle</code>#getBundle()</li><li><code>javax.xml.bind.JAXBContext</code>#createMarshaller()</li><li><code>java.net.URLStreamHandlerFactory</code>#createURLStreamHandler()</li></ol><p>Java 日历 <code>Calendar</code> 是一个抽象类，每个时区的实现都不一样。获取日历实例 <code>Calendar.getInstance()</code> 使用到了工厂模式。</p><ol><li>抽象工厂：<code>Calendar.getInstance()</code>。</li><li>具体工厂：<code>Calendar.createCalendar()</code>。</li><li>抽象产品：<code>Calendar</code>。</li><li>具体产品：<code>BuddhistCalendar</code>、<code>GregorianCalendar</code>、<code>JapaneseImperialCalendar</code>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用方法</span></span><br><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建工厂</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> createCalendar(TimeZone.getDefault(), Locale.getDefault(Locale.Category.FORMAT));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Calendar <span class="title">createCalendar</span><span class="params">(TimeZone zone, Locale aLocale)</span> </span>&#123;</span><br><span class="line">   CalendarProvider provider = LocaleProviderAdapter.getAdapter(CalendarProvider.class, aLocale).getCalendarProvider();</span><br><span class="line">   <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> provider.getInstance(zone, aLocale);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line">            <span class="comment">// fall back to the default instantiation</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Calendar cal = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (aLocale.hasExtensions()) &#123;</span><br><span class="line">      String caltype = aLocale.getUnicodeLocaleType(<span class="string">"ca"</span>);</span><br><span class="line">      <span class="keyword">if</span> (caltype != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (caltype) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"buddhist"</span>:</span><br><span class="line">               cal = <span class="keyword">new</span> BuddhistCalendar(zone, aLocale);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"japanese"</span>:</span><br><span class="line">               cal = <span class="keyword">new</span> JapaneseImperialCalendar(zone, aLocale);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"gregory"</span>:</span><br><span class="line">               cal = <span class="keyword">new</span> GregorianCalendar(zone, aLocale);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (cal == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// If no known calendar type is explicitly specified,</span></span><br><span class="line">      <span class="comment">// perform the traditional way to create a Calendar:</span></span><br><span class="line">      <span class="comment">// create a BuddhistCalendar for th_TH locale,</span></span><br><span class="line">      <span class="comment">// a JapaneseImperialCalendar for ja_JP_JP locale, or</span></span><br><span class="line">      <span class="comment">// a GregorianCalendar for any other locales.</span></span><br><span class="line">      <span class="comment">// <span class="doctag">NOTE:</span> The language, country and variant strings are interned.</span></span><br><span class="line">      <span class="keyword">if</span> (aLocale.getLanguage() == <span class="string">"th"</span> &amp;&amp; aLocale.getCountry() == <span class="string">"TH"</span>) &#123;</span><br><span class="line">            cal = <span class="keyword">new</span> BuddhistCalendar(zone, aLocale);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aLocale.getVariant() == <span class="string">"JP"</span> &amp;&amp; aLocale.getLanguage() == <span class="string">"ja"</span></span><br><span class="line">                  &amp;&amp; aLocale.getCountry() == <span class="string">"JP"</span>) &#123;</span><br><span class="line">            cal = <span class="keyword">new</span> JapaneseImperialCalendar(zone, aLocale);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cal = <span class="keyword">new</span> GregorianCalendar(zone, aLocale);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> cal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>EnumSet</code> 是枚举类型的高性能 <code>Set</code> 实现，它要求放入它的枚举常量必须属于同一枚举类型。<code>EnumSet</code> 提供了许多工厂方法以便于初始化。</p><ol><li>抽象工厂：<code>EnumSet.of</code></li><li>具体工厂：<code>EnumSet.of</code></li><li>抽象产品：<code>EnumSet</code></li><li>具体产品：<code>EnumSet&lt;GoodsOrderStatus&gt;</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用方法</span></span><br><span class="line">EnumSet&lt;GoodsOrderStatus&gt; set = EnumSet.of(GoodsOrderStatus.cancelled);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; <span class="function">EnumSet&lt;E&gt; <span class="title">of</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">   EnumSet&lt;E&gt; result = noneOf(e.getDeclaringClass());</span><br><span class="line">   result.add(e);</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; <span class="function">EnumSet&lt;E&gt; <span class="title">noneOf</span><span class="params">(Class&lt;E&gt; elementType)</span> </span>&#123;</span><br><span class="line">   Enum&lt;?&gt;[] universe = getUniverse(elementType);</span><br><span class="line">   <span class="keyword">if</span> (universe == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(elementType + <span class="string">" not an enum"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (universe.length &lt;= <span class="number">64</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> RegularEnumSet&lt;&gt;(elementType, universe);</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> JumboEnumSet&lt;&gt;(elementType, universe);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-中的工厂模式"><a href="#Spring-中的工厂模式" class="headerlink" title="Spring 中的工厂模式"></a>Spring 中的工厂模式</h2>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 创建型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>抽象工厂模式考虑多个等级产品的生产，将同一个具体工厂所生产的位于不同等级的一组产品称为一个产品族。</p><pre class="mermaid">flowchart LR    subgraph 联想产品族        联想鼠标         联想键盘        联想音响    end    subgraph 戴尔产品族        戴尔鼠标         戴尔键盘        戴尔音响    end    联想鼠标 -.-|产品等级| 戴尔鼠标    联想键盘 -.-|产品等级| 戴尔键盘     联想音响 -.-|产品等级| 戴尔音响</pre><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><ol><li><p>举例说明<br> 畜牧场有养马场，养牛场，既售卖马、牛又售卖干草、玉米杆等饲料。    </p><p> 电器厂有格力、海尔，既生产电视机又生产洗衣机，空调等。</p><p> 大学有清华大学，北京大学，既有软件专业，又有生物专业。</p></li><li><p>意图目的<br> 为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p></li><li><p>主要解决<br> 主要解决接口选择的问题。</p></li><li><p>如何解决<br> 抽象工厂模式同样由抽象工厂、具体工厂、抽象产品、具体产品 4 个元素组成。不同的是，抽象工厂的方法个数不同，抽象产品的个数也不同。</p><p> 畜牧场是抽象工厂，可以购买动物或者饲料。</p><p> 养马场，养牛场是具体工厂。</p><p> 动物、饲料属于抽象产品，多个抽象产品组成一个产品等级。</p><p> 马、牛、羊、干草、玉米杆属于具体产品，同一个具体工厂下的产品组成一个产品族。</p></li><li><p>关键代码<br> 有多个抽象产品，抽象工厂有多个方法来生产不同的抽象产品。</p></li><li><p>何时使用<br> 系统中有多个产品族，每个具体工厂创建同一族但属于不同等级结构的产品。</p><p> 系统一次只可能消费其中某一族产品，即同族的产品一起使用。如有人只喜欢穿某一个品牌的衣服和鞋。</p></li><li><p>优点缺点<br> 产品族易扩展，当增加一个新的产品族时不需要修改原代码，满足开闭原则。例如要添加养羊场这个产品族，只需创建新的具体工厂和具体产品即可，无需修改老代码。</p><p> 产品等级难扩展，当需要新增一个抽象产品时，抽象工厂需要新添加一个方法来生产它，所有的具体工厂都需要修改代码。</p></li><li><p>注意事项<br> 抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。</p></li><li><p>应用场景</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>假设我们有鼠标、键盘、耳机 3 类产品，然后生产商家有惠普、戴尔、华硕 3 个工厂，合计 6 个种类的产品。</p><p>1.创建产品接口及其产品实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mouse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Keybo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Earphone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 实现类</span></span><br></pre></td></tr></table></figure><p>2.创建产品的工厂<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PcFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Mouse <span class="title">createMouse</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Keybo <span class="title">createKeybo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Earphone <span class="title">createEarphone</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 惠普工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HpFactory</span> <span class="keyword">implements</span> <span class="title">PcFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mouse <span class="title">createMouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HpMouse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Keybo <span class="title">createKeybo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HpKeybo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Earphone <span class="title">createEarphone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HpEarphone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 其它工厂</span></span><br></pre></td></tr></table></figure></p><p>3.生产工厂的工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PcFactory <span class="title">hpFacotory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HpFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PcFactory <span class="title">dellFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DellFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PcFactory <span class="title">asusFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsusFactory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建惠普鼠标</span></span><br><span class="line">        FactoryProducer.hpFacotory().createMouse();</span><br><span class="line">        <span class="comment">// 创建惠普键盘</span></span><br><span class="line">        FactoryProducer.hpFacotory().createKeybo();</span><br><span class="line">         <span class="comment">// 创建惠普耳机</span></span><br><span class="line">        FactoryProducer.hpFacotory().createEarphone();</span><br><span class="line">        <span class="comment">// 。。。戴尔、华硕产品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外一个例子是关于农场的。</p><p>农场中除了像畜牧场一样可以养动物，还可以培养植物，如养马、养牛、种菜、种水果等，所以本实例比前面介绍的畜牧场类复杂，必须用抽象工厂模式来实现。</p><p>本例用抽象工厂模式来设计两个农场，一个是韶关农场用于养牛和种菜，一个是上饶农场用于养马和种水果，可以在以上两个农场中定义一个生成动物的方法 <code>newAnimal()</code> 和一个培养植物的方法 <code>newPlant()</code>。</p><p><img src="http://c.biancheng.net/uploads/allimg/181114/3-1Q114160132648.gif" alt=""></p><p>1、客户端使用过程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Farm sgFarm = <span class="keyword">new</span> SGfarm();</span><br><span class="line">        Plant plant = sgFarm.newPlant();</span><br><span class="line">        Animal animal = sgFarm.newAnimal();</span><br><span class="line">        plant.cost();</span><br><span class="line">        animal.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fruitage need <span class="number">10.10</span>$</span><br><span class="line">This is a Cattle.</span><br></pre></td></tr></table></figure></p><p>2、定义好抽象产品和具体产品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动物，抽象产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 马，具体产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Horse</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is a Horse."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 牛，抽象产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cattle</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is a Cattle."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 植物，抽象产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Plant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 水果，具体产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruitage</span> <span class="keyword">implements</span> <span class="title">Plant</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fruitage need 10.10$"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 蔬菜，具体产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vegetables</span> <span class="keyword">implements</span> <span class="title">Plant</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Vegetables need 5.00$"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、抽象工厂和具体工厂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 农场，抽象工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Farm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取植物</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Plant <span class="title">newPlant</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取动物</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Animal <span class="title">newAnimal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 韶关农场，具体工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SGfarm</span> <span class="keyword">implements</span> <span class="title">Farm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Plant <span class="title">newPlant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Fruitage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">newAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cattle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上饶农场，具体工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SRfarm</span> <span class="keyword">implements</span> <span class="title">Farm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Plant <span class="title">newPlant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vegetables();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">newAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Horse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、现在模拟新增产品族。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 广州农场，具体工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GZfarm</span> <span class="keyword">implements</span> <span class="title">Farm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Plant <span class="title">newPlant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vegetables();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">newAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cattle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Farm gzFarm = <span class="keyword">new</span> GZfarm();</span><br><span class="line">        Plant plant = gzFarm.newPlant();</span><br><span class="line">        Animal animal = gzFarm.newAnimal();</span><br><span class="line">        plant.cost();</span><br><span class="line">        animal.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vegetables need <span class="number">5.00</span>$</span><br><span class="line">This is a Cattle.</span><br></pre></td></tr></table></figure></p><p>5、现在模拟新增产品等级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饲料，抽象产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Feed</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">weight</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 干草，具体产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hay</span> <span class="keyword">implements</span> <span class="title">Feed</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">weight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hay is 20kg weight."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 玉米杆，具体产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cornstalk</span> <span class="keyword">implements</span> <span class="title">Feed</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">weight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cornstalk is 20kg weight."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 农场，抽象工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Farm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取植物</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Plant <span class="title">newPlant</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取动物</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Animal <span class="title">newAnimal</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取饲料</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Feed <span class="title">newFeed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... 具体工厂修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Farm gzFarm = <span class="keyword">new</span> GZfarm();</span><br><span class="line">        Plant plant = gzFarm.newPlant();</span><br><span class="line">        Animal animal = gzFarm.newAnimal();</span><br><span class="line">        Feed feed = gzFarm.newFeed();</span><br><span class="line">        plant.cost();</span><br><span class="line">        animal.show();</span><br><span class="line">        feed.weight();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK-源码"><a href="#JDK-源码" class="headerlink" title="JDK 源码"></a>JDK 源码</h2><h2 id="Spring-源码"><a href="#Spring-源码" class="headerlink" title="Spring 源码"></a>Spring 源码</h2>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 创建型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>单例模式是指一个类只有一个实例，且该类能自行创建这个实例。它属于创建型模式，提供了一种创建对象的最佳方式。</p><p>单例模式有以下特点：</p><ol><li>单例类只有一个实例。</li><li>单例类自己创建实例。</li><li>单例类对外提供一个访问该实例的全局访问点。</li></ol><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><ol><li><p>举例说明<br> 一个班级只有一个班主任。</p><p> Window 系统只能打开一个任务管理器。</p></li><li><p>意图目的<br> 确保一个类只有一个实例，并提供一个访问该实例的全局访问点。</p></li><li><p>主要解决<br> 一个全局使用的类的频繁创建与销毁。</p></li><li><p>如何解决<br> 单例模式主要角色有：单例类、访问类。</p><p> 单例类包含一个实例且能自行创建这个实例的类。比如上面的班级。</p><p> 访问类是使用单例类的类。比如上面的学生。</p></li><li><p>关键代码<br> 私有的构造函数。    </p><p> 判断实例是否已经存在，如果已经存在则返回，不存在则创建。</p></li><li><p>何时使用<br> 当你想控制实例的数量时。</p><p> 某类需要被频繁的创建和销毁。</p></li><li><p>优点缺点<br> 实例只创建一次，避免频繁的创建销毁。</p><p> 在内存中只有一个实例，减少内存开销。</p><p> 单例模式无法被继承。</p><p> 单例模式与单一职责原则冲突，即一个类只关心内部逻辑，而不关心外面是如何实例化的。</p></li><li><p>注意事项<br> 获取实例的方法需要加上同步锁。</p><p> 避免在方法外使用同步锁 <code>sychronized</code>。</p></li><li><p>应用场景<br> JDK Runtime。</p><p> Spring Bean。</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>我们将创建一个SingleObject类。SingleObject类有它的私有构造函数和本身的一个静态实例。</p><p>SingleObject类提供了一个静态方法，供外界获取它的静态实例。</p><pre class="mermaid">classDiagramDemo --> SingleObject : 获取唯一实例class Demo{    +main() void}class SingleObject {    -SingleObject instance    -SingleObject()    +getInstance() SingleObject    +show() void}</pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 SingleObject 的一个对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让构造函数为 private，这样该类就不会被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//不合法的构造函数</span></span><br><span class="line">        <span class="comment">//编译时错误：构造函数 SingleObject() 是不可见的</span></span><br><span class="line">        <span class="comment">//SingleObject object = new SingleObject();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">        Singleton object = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示消息</span></span><br><span class="line">        object.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单例模式的实现有多种方式，下面我们分别来讲一下。</p><p>1、懒汉式，线程不安全。</p><p>是否Lazy初始化：是。</p><p>是否多线程安全：否</p><p>实现难度：易</p><p>描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 <code>synchronized</code>，所以严格意义上它不算单例模式。这种方式 lazy loading 很明显，不要求现在安全，在多线程不能正常工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singletion <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、懒汉式，线程安全</p><p>Lazy 初始化：是</p><p>多线程安全：是</p><p>实现难度：易</p><p>描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是效率很低，99%的情况下不需要同步。</p><p>优点：第一次调试才初始化，避免内存浪费。</p><p>缺点：必须加锁 <code>synchronized</code> 才能保证单例，但加锁会 影响效率。<code>getInstance()</code> 的性能对应用程序不是很关键（该方法使用不频繁）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> sychronized Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singletion();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、饿汉式</p><p>Lazy 初始化：否</p><p>多线程安全：是</p><p>实现难度：易</p><p>描述：这种方式比较常用，但容易生产垃圾对象。</p><p>优点：没有加锁，执行效率会提高。</p><p>缺点：类加载时就初始化，浪费内存。</p><p>它基于 classloader 机制避免了多线程的同步问题。不过，instance 在类加载时就实例化（虽然导致类装载的原因有很多种，例如被静态方法调用），显然没有达到 lazy loading 的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、双检锁</p><p>JDK 版本：1.5 起。</p><p>Lazy 初始化：是</p><p>多线程安全：是</p><p>实现难度：较复杂</p><p>描述：这种方式才用双锁机制，安全且在多线程情况下能保持高性能。<code>getInstance()</code> 的性能对应用程序很关键。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、静态内部类</p><p>Lazy 初始化：是</p><p>多线程安全：是</p><p>实现难度：一般</p><p>描述：这种方式能达到双检锁方式一样的功效，但实现更简单，对静态域实现延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁可在实例域需要延迟初始化时使用。</p><p>这种方式同样利用了 classloader 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy laoding 的效果），而这种方式是 Singleton 类被装载了，类不一样初始化。因为 SingletonHolder 类没有被主动使用。只有通过显式调用 getInstance 方法时，才会显式装载 SinletonHolder 类，从而实例化 instance。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、枚举</p><p>JDK 版本：1.5 起。</p><p>Lazy 初始化：否</p><p>多线程安全：是</p><p>实现难度：易</p><p>描述：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一般情况下，不建议使用第 1、2 种懒汉方式。建议使用第 3 种饿汉方式。只有在明确要求实现 lazy loading 效果时，才使用第 5 种静态内部类方式。如果涉及到反序列化创建对象时，可以尝试第 6 种枚举方式。如果有其它特殊需求，可以考虑使用第 4 种 双检锁方式。</p></blockquote><h2 id="JDK-中的单例模式"><a href="#JDK-中的单例模式" class="headerlink" title="JDK 中的单例模式"></a>JDK 中的单例模式</h2><p>JDK 中主要是 <code>Runtime</code> 使用了单例模式。</p><p>每个 Java 应用程序都有一个 <code>Runtime</code> 类实例，它允许应用程序与运行应用程序的环境进行交互。可以从 <code>getRuntime</code> 方法获取当前运行时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 访问类</span></span><br><span class="line">Runtime runtime = Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 单例类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runtime</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Runtime currentRuntime = <span class="keyword">new</span> Runtime();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title">getRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Runtime</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-中的单例模式"><a href="#Spring-中的单例模式" class="headerlink" title="Spring 中的单例模式"></a>Spring 中的单例模式</h2><p>Spring 框架中的 Bean，或者说组件，获取实例的时候都是默认单例模式，这是在多线程开发的时候需要尤其注意的地方。</p><p>Spring官方文档中给出的bean的scope有五种：</p><ol><li><code>singleton</code></li><li><code>prototype</code></li><li><code>request</code></li><li><code>session</code></li><li><code>global session</code></li></ol><p>实际上，Spring 最基本的 scope 只有两种，即 <code>singleton</code> 和 <code>prototype</code>。</p><p>可以参看 Spring 源码中的 BeanDefinition.java 的定义，只有这两种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String SCOPE_SINGLETON = ConfigurableBeanFactory.SCOPE_SINGLETON;</span><br><span class="line">String SCOPE_PROTOTYPE = ConfigurableBeanFactory.SCOPE_PROTOTYPE;</span><br></pre></td></tr></table></figure><p>其他的各种 scope 都是自行扩展出来的。包括官网文档中没有列出来的 <code>servletContenxt</code> 、<code>thread</code>；SpringCloud提供的 <code>refresh</code> 等。</p><p>其继承关系大致如下：</p><pre class="mermaid">classDiagram    class Scope    <<interface>> Scope    Scope <|.. AbstractRequestAttributesScope    Scope <|.. RefreshScope    Scope <|.. ServletContextScope    Scope <|.. ThreadScope    AbstractRequestAttributesScope <|-- SessionScope    AbstractRequestAttributesScope <|-- RequestScope</pre><p>可以参看spring的 AbstractBeanFactory.java 中的 doGetBean 方法，理解两种bean的使用过程。</p><p>单例 Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/** Cache of singleton objects: bean name --&gt; bean instance */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Object&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create bean instance.</span></span><br><span class="line"><span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">    sharedInstance = getSingleton(beanName, <span class="keyword">new</span> ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">                <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">                <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">                destroySingleton(beanName);</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原型 Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">    <span class="comment">// It's a prototype -&gt; create a new instance.</span></span><br><span class="line">    Object prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        beforePrototypeCreation(beanName);</span><br><span class="line">        prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        afterPrototypeCreation(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 创建型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>原型模式是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在有些系统中，存在大量相同或相似对象的创建问题，如果用传统的构造函数来创建对象，会比较复杂且耗时耗资源，用原型模式生成对象就很高效，就像孙悟空拔下猴毛轻轻一吹就变出很多孙悟空一样简单。</p><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><ol><li><p>举例说明<br>细胞分裂。</p><p>相同的邮件，发给多个用户。</p><p>孙悟空拔下猴毛轻轻一吹就变出很多小孙悟空。</p></li><li><p>意图目的<br>用一个已经创建的实例作为原型，通过复制该对象来创建一个和原型相似的新对象。</p></li><li><p>主要解决<br>对象的创建过程比较麻烦，但复制比较简单的时候。</p><p>需要创建大量的对象，而它们之间相同或相似，即只是个别的几个属性不同的时候。</p></li><li><p>模式原理<br>原型模式中分为 3 个角色：抽象原型、具体原型、访问类。</p><p>抽象原型规定了具体原型对象必须实现的接口，例如 Java 中的 <code>Cloneable</code> 接口。</p><p>具体原型实现了抽象原型类的方法，比如上面的邮件对象。</p><p>访问类通过具体原型的 <code>clone</code> 方法创建出新的对象。</p></li><li><p>关键代码<br>对象实现 <code>Cloneable</code> 接口。</p></li><li><p>何时使用<br>对象的创建过程比较麻烦，但复制比较简单的时候。</p><p>需要创建大量的对象，而它们之间相同或相似，即只是个别的几个属性不同的时候。</p></li><li><p>优点缺点<br>提高创建对象性能。</p><p>逃避构造函数的约束。</p><p>必须实现 <code>Cloneable</code> 接口。</p></li><li><p>注意事项<br>克隆分为浅克隆和深克隆。</p></li><li><p>应用实例</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>我们将创建一个抽象类 Shape 和扩展了 Shape 类的实体类。下一步是定义类 ShapeCache，该类把 shape 对象存储在一个 Hashtable 中，并在请求的时候返回它们的克隆。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/prototype_pattern_uml_diagram.jpg" alt=""></p><p>1、创建一个实现了 Cloneable 接口的抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> String id;</span><br><span class="line">   <span class="keyword">protected</span> String type;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Object clone = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         clone = <span class="keyword">super</span>.clone();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> clone;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、创建扩展了上面抽象类的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span></span>&#123;</span><br><span class="line">     type = <span class="string">"Circle"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Circle::draw() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">()</span></span>&#123;</span><br><span class="line">     type = <span class="string">"Square"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Square::draw() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">()</span></span>&#123;</span><br><span class="line">     type = <span class="string">"Rectangle"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Rectangle::draw() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、创建一个类，从数据库获取实体类，并把它们存储在一个 Hashtable 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeCache</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Hashtable&lt;String, Shape&gt; shapeMap = <span class="keyword">new</span> Hashtable&lt;String, Shape&gt;();</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">getShape</span><span class="params">(String shapeId)</span> </span>&#123;</span><br><span class="line">      Shape cachedShape = shapeMap.get(shapeId);</span><br><span class="line">      <span class="keyword">return</span> (Shape) cachedShape.clone();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 对每种形状都运行数据库查询，并创建该形状</span></span><br><span class="line">   <span class="comment">// shapeMap.put(shapeKey, shape);</span></span><br><span class="line">   <span class="comment">// 例如，我们要添加三种形状</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Circle circle = <span class="keyword">new</span> Circle();</span><br><span class="line">      circle.setId(<span class="string">"1"</span>);</span><br><span class="line">      shapeMap.put(circle.getId(),circle);</span><br><span class="line"> </span><br><span class="line">      Square square = <span class="keyword">new</span> Square();</span><br><span class="line">      square.setId(<span class="string">"2"</span>);</span><br><span class="line">      shapeMap.put(square.getId(),square);</span><br><span class="line"> </span><br><span class="line">      Rectangle rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">      rectangle.setId(<span class="string">"3"</span>);</span><br><span class="line">      shapeMap.put(rectangle.getId(),rectangle);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、使用 ShapeCache 类来获取存储在 Hashtable 中的形状的克隆。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      ShapeCache.loadCache();</span><br><span class="line"> </span><br><span class="line">      Shape clonedShape = (Shape) ShapeCache.getShape(<span class="string">"1"</span>);</span><br><span class="line">      System.out.println(<span class="string">"Shape : "</span> + clonedShape.getType());        </span><br><span class="line"> </span><br><span class="line">      Shape clonedShape2 = (Shape) ShapeCache.getShape(<span class="string">"2"</span>);</span><br><span class="line">      System.out.println(<span class="string">"Shape : "</span> + clonedShape2.getType());        </span><br><span class="line"> </span><br><span class="line">      Shape clonedShape3 = (Shape) ShapeCache.getShape(<span class="string">"3"</span>);</span><br><span class="line">      System.out.println(<span class="string">"Shape : "</span> + clonedShape3.getType());        </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Shape : Circle</span><br><span class="line">Shape : Square</span><br><span class="line">Shape : Rectangle</span><br></pre></td></tr></table></figure><h2 id="JDK-中的原型模式"><a href="#JDK-中的原型模式" class="headerlink" title="JDK 中的原型模式"></a>JDK 中的原型模式</h2><h2 id="Spring-中的原型模式"><a href="#Spring-中的原型模式" class="headerlink" title="Spring 中的原型模式"></a>Spring 中的原型模式</h2>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 创建型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>建造者模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>建造者是指将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示。它属于创建型模式。</p><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><ol><li><p>举例说明<br>小明组装电脑去电脑城购买零件，可能有鼠标、键盘、硬盘等。现在需要结算订单金额（关注整体）。</p><p>小明去肯德基点套餐吃，这套餐可能包含一个汉堡、一杯可乐，或者烤鸡和薯条。需要结算账单金额（关注套餐）。</p></li><li><p>意图目的<br>将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成。它将变与不变相分离，即产品的组成部分是不变的，但每一部分是可以灵活选择的。</p></li><li><p>主要解决<br>复杂对象的创建问题。</p></li><li><p>如何解决<br> 建造者模式中有 3 个角色：产品、套餐、建造者。</p><p> 产品就是烤鸡、可乐、键盘、鼠标等具体的产品。</p><p> 套餐就是肯德基的套餐，电脑店的账单，它们有一个或多个产品组成。</p><p> 点餐机就是建造者。用户直接与建造者打交道，输入产品，得出套餐。</p></li><li><p>关键代码<br>套餐包含了多个产品。</p><p>建造者负责生成套餐。</p><p>用户得到套餐。</p></li><li><p>优点缺点<br>各个具体的建造者相互独立，有利于系统的扩展。</p><p>客户端不必知道产品内部组成的细节，便于控制细节风险。</p><p>产品的组成部分必须相同，这限制了其使用范围。</p><p>如果产品的内部变化复杂，该模式会增加很多的建造者类。</p></li><li><p>注意事项<br>与工厂模式的区别是，建造者更加关注与零件装配的顺序。</p></li><li><p>何时使用<br>一个产品由多个部件构成的，各个部件可以灵活选择，但其创建步骤都大同小异。</p></li><li><p>应用实例<br> <code>StringBuilder</code>。</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>我们假设一个快餐店的商业案例，其中，一个典型的套餐可以是一个汉堡（Burger）和一杯冷饮（Cold drink）。汉堡（Burger）可以是素食汉堡（Veg Burger）或鸡肉汉堡（Chicken Burger），它们是包在纸盒中。冷饮（Cold drink）可以是可口可乐（coke）或百事可乐（pepsi），它们是装在瓶子中。</p><p>我们将创建一个表示食物条目（比如汉堡和冷饮）的 Item 接口和实现 Item 接口的实体类，以及一个表示食物包装的 Packing 接口和实现 Packing 接口的实体类，汉堡是包在纸盒中，冷饮是装在瓶子中。</p><p>然后我们创建一个 Meal 类，带有 Item 的 ArrayList 和一个通过结合 Item 来创建不同类型的 Meal 对象的 MealBuilder。BuilderPatternDemo，我们的演示类使用 MealBuilder 来创建一个 Meal。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/builder_pattern_uml_diagram.jpg" alt=""></p><p>1、创建一个表示食物条目和食物包装的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Packing <span class="title">packing</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Packing</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">pack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、创建实现 Packing 接口的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bottle</span> <span class="keyword">implements</span> <span class="title">Packing</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">pack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Bottle"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> <span class="keyword">implements</span> <span class="title">Packing</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">pack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Wrapper"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、创建实现 Item 接口的抽象类，该类提供了默认的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Burger</span> <span class="keyword">implements</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Packing <span class="title">packing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Wrapper();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ColdDrink</span> <span class="keyword">implements</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Packing <span class="title">packing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Bottle();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、创建扩展了 Burger 和 ColdDrink 的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VegBurger</span> <span class="keyword">extends</span> <span class="title">Burger</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">25.0f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Veg Burger"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChickenBurger</span> <span class="keyword">extends</span> <span class="title">Burger</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">50.5f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Chicken Burger"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coke</span> <span class="keyword">extends</span> <span class="title">ColdDrink</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">30.0f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Coke"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pepsi</span> <span class="keyword">extends</span> <span class="title">ColdDrink</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">35.0f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Pepsi"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、创建一个 Meal 类，带有上面定义的 Item 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Meal</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Item&gt; items = <span class="keyword">new</span> ArrayList&lt;Item&gt;();    </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">      items.add(item);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getCost</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">float</span> cost = <span class="number">0.0f</span>;</span><br><span class="line">      <span class="keyword">for</span> (Item item : items) &#123;</span><br><span class="line">         cost += item.price();</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">return</span> cost;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showItems</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Item item : items) &#123;</span><br><span class="line">         System.out.print(<span class="string">"Item : "</span>+item.name());</span><br><span class="line">         System.out.print(<span class="string">", Packing : "</span>+item.packing().pack());</span><br><span class="line">         System.out.println(<span class="string">", Price : "</span>+item.price());</span><br><span class="line">      &#125;        </span><br><span class="line">   &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、创建一个 MealBuilder 类，实际的 builder 类负责创建 Meal 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MealBuilder</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Meal <span class="title">prepareVegMeal</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      Meal meal = <span class="keyword">new</span> Meal();</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> VegBurger());</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> Coke());</span><br><span class="line">      <span class="keyword">return</span> meal;</span><br><span class="line">   &#125;   </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Meal <span class="title">prepareNonVegMeal</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      Meal meal = <span class="keyword">new</span> Meal();</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> ChickenBurger());</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> Pepsi());</span><br><span class="line">      <span class="keyword">return</span> meal;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、BuiderPatternDemo 使用 MealBuider 来演示建造者模式（Builder Pattern）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      MealBuilder mealBuilder = <span class="keyword">new</span> MealBuilder();</span><br><span class="line"> </span><br><span class="line">      Meal vegMeal = mealBuilder.prepareVegMeal();</span><br><span class="line">      System.out.println(<span class="string">"Veg Meal"</span>);</span><br><span class="line">      vegMeal.showItems();</span><br><span class="line">      System.out.println(<span class="string">"Total Cost: "</span> +vegMeal.getCost());</span><br><span class="line"> </span><br><span class="line">      Meal nonVegMeal = mealBuilder.prepareNonVegMeal();</span><br><span class="line">      System.out.println(<span class="string">"\n\nNon-Veg Meal"</span>);</span><br><span class="line">      nonVegMeal.showItems();</span><br><span class="line">      System.out.println(<span class="string">"Total Cost: "</span> +nonVegMeal.getCost());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Veg Meal</span><br><span class="line">Item : Veg Burger, Packing : Wrapper, Price : <span class="number">25.0</span></span><br><span class="line">Item : Coke, Packing : Bottle, Price : <span class="number">30.0</span></span><br><span class="line">Total Cost: <span class="number">55.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Non-Veg Meal</span><br><span class="line">Item : Chicken Burger, Packing : Wrapper, Price : <span class="number">50.5</span></span><br><span class="line">Item : Pepsi, Packing : Bottle, Price : <span class="number">35.0</span></span><br><span class="line">Total Cost: <span class="number">85.5</span></span><br></pre></td></tr></table></figure><blockquote><p>建造者模式举例：去肯德基点餐，我们可以认为点餐就属于一个建造订单的过程。我们点餐的顺序是无关的，点什么东西也是没有要求的，可以单点，也可以点套餐，也可以套餐加单点，但是最后一定要点确认来完成订单。</p></blockquote><h2 id="JDK-中的建造者模式"><a href="#JDK-中的建造者模式" class="headerlink" title="JDK 中的建造者模式"></a>JDK 中的建造者模式</h2><p>StringBuilder 使用了建造者模式。</p><ol><li>每次 <code>append</code> 的字符串属于产品。</li><li><code>StringBuilder</code> 里面的 value 属于套餐。</li><li><code>StringBuilder</code> 属于创建者，负责 value 的生成。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">builder.append(<span class="string">"123"</span>);</span><br><span class="line">builder.append(<span class="string">"456"</span>);</span><br><span class="line">System.out.println(builder.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AbstractStringBuilder(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">    value = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 追加字符串方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.append(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> appendNull();</span><br><span class="line">    <span class="keyword">int</span> len = str.length();</span><br><span class="line">    ensureCapacityInternal(count + len);</span><br><span class="line">    str.getChars(<span class="number">0</span>, len, value, count);</span><br><span class="line">    count += len;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minimumCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minimumCapacity - value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        value = Arrays.copyOf(value,</span><br><span class="line">                newCapacity(minimumCapacity));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-中的建造者模式"><a href="#Spring-中的建造者模式" class="headerlink" title="Spring 中的建造者模式"></a>Spring 中的建造者模式</h2>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 创建型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在现实生活中，经常出现两个对象因接口不兼容而不能在一起工作的实例，这时需要第三者进行适配。例如，讲中文的人同讲英文的人对话时需要一个翻译，用直流电的笔记本电脑接交流电源时需要一个电源适配器，用计算机访问照相机的 SD 内存卡时需要一个读卡器等。</p><p>在软件设计中也可能出现：需要开发的具有某种业务功能的组件在现有的组件库中已经存在，但它们与当前系统的接口规范不兼容，如果重新开发这些组件成本又很高，这时用适配器模式能很好地解决这些问题。</p><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><ol><li><p>举例说明<br> 电脑能通过读卡器读取SD卡数据，现在要电脑支持读取TF卡数据。</p><p> 讲中文的人和讲英文的人对话时需要一个翻译。</p></li><li><p>意图目的<br> 将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</p></li><li><p>主要解决<br> 复用老系统的组件。</p></li><li><p>如何解决<br> 适配器模式中有适配者、被适配者、适配器 3 种角色。</p><p> 在上面例子中，SD卡就是适配者，系统可以直接读取其数据。</p><p> TF卡就是被兼容者，系统不能直接读取其数据。</p><p> 适配器模仿适配者的形式打造，但是里面的内容是TF卡，欺骗系统是SD卡。</p></li><li><p>关键代码<br> 适配器作为适配者的子类，让系统误以为是适配者。</p><p> 适配器持有一个被适配者，来个狸猫换太子。</p></li><li><p>何时使用<br> 使用第三方提供的组件，但组件接口定义和自己要求的接口定义不一致。</p><p> 以前开发的系统存在满足新系统功能需求的类，但其接口通新系统不一致。</p></li><li><p>优点缺点<br> 复用了现存的类，程序员不需要修改原有代码而重用现有的适配者类。</p><p> 将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题。</p><p> 过多地使用适配器，会让系统非常零乱，不易整体进行把握。</p></li><li><p>注意事项<br> 适配器模式不是在详细设计时添加的，而是解决正在服役的项目的问题，是一种妥协。</p></li><li><p>应用场景<br> Java <code>Reader</code> <code>InputStreamReader</code> <code>InputStream</code></p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>计算机通过读卡器去读取TF卡。</p><p>1、计算机已经支持了读取SD卡功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">        SDcard sdcard = <span class="keyword">new</span> SDcard();</span><br><span class="line">        String data = computer.read(sdcard);</span><br><span class="line">        System.out.println(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电脑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">read</span><span class="params">(SDcard sdcard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sdcard.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SD 内存卡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SDcard</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1001010"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Writing "</span> + data + <span class="string">" in SDcard..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TF 内存卡只能读，不能写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TFCard</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1001010"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、接下来在不改变计算机读取SD卡接口的情况下，通过适配器模式读取TF卡。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">        TFCard tfCard = <span class="keyword">new</span> TFCard();</span><br><span class="line">        TFCardAdapter tfCardAdapter = <span class="keyword">new</span> TFCardAdapter(tfCard);</span><br><span class="line">        computer.read(tfCardAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TF 内存卡只能读，不能写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TFCard</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1001010"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TFCardAdapter</span> <span class="keyword">extends</span> <span class="title">SDcard</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TFCard tfCard;</span><br><span class="line"></span><br><span class="line">    TFCardAdapter(TFCard tfCard) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tfCard = tfCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tfCard.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK-中的适配器模式"><a href="#JDK-中的适配器模式" class="headerlink" title="JDK 中的适配器模式"></a>JDK 中的适配器模式</h2><p>在 Java 中，<code>InputStreamReader</code> 和 <code>OutputStreamWriter</code> 都使用到了适配器模式。</p><pre class="mermaid">classDiagramclass Reader {    <<适配者>>    read() int}class InputStreamReader {    <<适配器>>    InputStream instance    read() int}class Writer {    <<适配者>>    write(data) void}class OutputStreamWriter {    <<适配器>>    OutputStream instance    write(data) void}class InputStream {    <<被适配者>>}class OutputStream {    <<被适配者>>}Reader <|-- InputStreamReaderInputStreamReader <-- InputStreamWriter <|-- OutputStreamWriterOutputStreamWriter <-- OutputStream</pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被适配者，与现有的系统不兼容</span></span><br><span class="line">InputStream stream = <span class="keyword">new</span> FileInputStream(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器将被适配者转换成为适配者</span></span><br><span class="line">Reader reader = <span class="keyword">new</span> InputStreamReader(stream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配者与系统兼容</span></span><br><span class="line">reader.read();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配者源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Reader</span> <span class="keyword">implements</span> <span class="title">Readable</span>, <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> cb[] = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (read(cb, <span class="number">0</span>, <span class="number">1</span>) == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> cb[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReader</span> <span class="keyword">extends</span> <span class="title">Reader</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 适配器持有一个被适配者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StreamDecoder sd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 适配器构造函数需要将被适配者传入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InputStreamReader</span><span class="params">(InputStream in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(in);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sd = StreamDecoder.forInputStreamReader(in, <span class="keyword">this</span>, (String)<span class="keyword">null</span>); <span class="comment">// ## check lock object</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="comment">// The default encoding should always be available</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 适配器重写了适配者的方法，使其兼容被适配者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sd.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被适配者源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-中的适配器模式"><a href="#Spring-中的适配器模式" class="headerlink" title="Spring 中的适配器模式"></a>Spring 中的适配器模式</h2>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 结构型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>桥接模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在现实生活中，某些类具有两个或多个维度的变化，如图形既可按形状分，又可按颜色分。如何设计类似于 Photoshop 这样的软件，能画不同形状和不同颜色的图形呢？如果用继承方式，m 种形状和 n 种颜色的图形就有 m×n 种，不但对应的子类很多，而且扩展困难。</p><p>当然，这样的例子还有很多，如不同颜色和字体的文字、不同品牌和功率的汽车、不同性别和职业的男女、支持不同平台和不同文件格式的媒体播放器等。如果用桥接模式就能很好地解决这些问题。</p><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><ol><li><p>举例说明<br>猪八戒投胎，灵魂在河的一边，河对面有两个肉体，红猪和绿猪；灵魂需要过桥，选择红猪的肉体或者绿猪的肉体完成投胎。</p><p>墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。</p></li><li><p>应用场景<br>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</p><p>对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 </p><p>如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。</p></li><li><p>意图目的<br>将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</p></li><li><p>主要解决<br>在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。</p></li><li><p>如何解决<br>把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。</p></li><li><p>何时使用<br>实现系统可能有多个角度分类，每一种角度都可能变化。</p></li><li><p>关键代码<br>抽象类依赖实现类。</p></li><li><p>优点<br>抽象和实现的分离。 </p><p>优秀的扩展能力。 </p><p>实现细节对客户透明。</p></li><li><p>缺点<br>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</p></li><li><p>注意事项<br>对于两个独立变化的维度，使用桥接模式再适合不过了。</p></li></ol><h4 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h4><ol><li>文字有字体和颜色两种属性。</li><li>汽车有不同的品牌和功率。</li><li>人分不同性别和职业。</li></ol><h4 id="模式原理"><a href="#模式原理" class="headerlink" title="模式原理"></a>模式原理</h4><p>桥接模式包含以下主要角色：</p><ol><li>抽象化：定义抽象类，并包含一个对实现化对象的引用。</li><li>扩展抽象化：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法</li><li>实现化：定义实现化角色的接口，供扩展抽象化角色调用。</li><li>具体实现化：给出实现化角色接口的具体实现。</li><li>用户类：直接跟抽象化角色打交道。</li></ol><pre class="mermaid"></pre><h4 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h4><ol><li>由于抽象与实现分离，所以扩展能力强。</li><li>其实现细节对客户透明。</li></ol><p>缺点是：由于聚合关系建立在抽象层，要求开发者针对抽象化进行设计与编程，这增加了系统的理解与设计难度。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>使用桥接式模拟女士皮包的选购。</p><p>分析：女士皮包有很多种，可以按用途分、按皮质分、按品牌分、按颜色分、按大小分等，存在多个维度的变化，所以采用桥接模式来实现女士皮包的选购比较合适。</p><p>本实例按用途分可选钱包和挎包，按颜色分可选黄色和红色。可以按两个维度定义为颜色类和包类。</p><p>颜色类是一个维度，定义为实现化角色，它有两个具体实现化角色：黄色和红色，通过 <code>getColor()</code> 方法可以选择颜色；包类是另一个维度，定义为抽象化角色，它有两个扩展抽象化角色：挎包和钱包，它包含了颜色类对象，通过 <code>getName()</code> 方法可以选择相关颜色的挎包和钱包。</p><pre class="mermaid">classDiagramclass 用途 {    <<abstract>>    颜色    价值    getName(): String}class 颜色 {    <<interface>>    getColor(): String}class 价值 {    <<interface>>    getPrice(): String}用途 <-- 钱包用途 <-- 挎包颜色 <.. 红色颜色 <.. 黄色价值 <.. 廉价的价值 <.. 昂贵的</pre><h4 id="用户角色"><a href="#用户角色" class="headerlink" title="用户角色"></a>用户角色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 红色的钱包</span></span><br><span class="line">        Bag wallet = <span class="keyword">new</span> Wallet(<span class="keyword">new</span> Red());</span><br><span class="line">        System.out.println(wallet.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 黄色的挎包</span></span><br><span class="line">        Bag handBag = <span class="keyword">new</span> HandBag(<span class="keyword">new</span> Yellow());</span><br><span class="line">        System.out.println(handBag.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">红色钱包</span><br><span class="line">黄色挎包</span><br></pre></td></tr></table></figure><h4 id="抽象化角色"><a href="#抽象化角色" class="headerlink" title="抽象化角色"></a>抽象化角色</h4><p>皮包是抽象化角色，下面有2个具体化角色：挎包和钱包。</p><p>皮包持有一个扩展抽象化角色：颜色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Bag</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展抽象化角色：颜色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Color color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bag</span><span class="params">(Color color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体化角色：钱包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wallet</span> <span class="keyword">extends</span> <span class="title">Bag</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wallet</span><span class="params">(Color color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color.getColor() + <span class="string">"钱包"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体化角色：挎包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandBag</span> <span class="keyword">extends</span> <span class="title">Bag</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandBag</span><span class="params">(Color color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color.getColor() + <span class="string">"挎包"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩展抽象化角色"><a href="#扩展抽象化角色" class="headerlink" title="扩展抽象化角色"></a>扩展抽象化角色</h4><p>颜色作为扩展抽象化角色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是红色和黄色等扩展具体化角色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"红色"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yellow</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"黄色"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h4><p>现在新增一个维度：价格，有贵的，有便宜的。</p><p>扩展抽象角色：价格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Price</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">price</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展具体化角色：廉价的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cheap</span> <span class="keyword">implements</span> <span class="title">Price</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"廉价的"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展具体化角色：昂贵的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Costly</span> <span class="keyword">implements</span> <span class="title">Price</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"昂贵的"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象化角色：钱包，持有颜色和价格两个维度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Bag</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展抽象化角色：颜色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Color color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展抽象化角色：价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Price price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bag</span><span class="params">(Color color, Price price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户角色：直接调用钱包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 廉价的红色钱包</span></span><br><span class="line">        Bag wallet = <span class="keyword">new</span> Wallet(<span class="keyword">new</span> Red(), <span class="keyword">new</span> Cheap());</span><br><span class="line">        System.out.println(wallet.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 昂贵的黄色挎包</span></span><br><span class="line">        Bag handBag = <span class="keyword">new</span> HandBag(<span class="keyword">new</span> Yellow(), <span class="keyword">new</span> Costly());</span><br><span class="line">        System.out.println(handBag.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">廉价的红色钱包</span><br><span class="line">昂贵的黄色挎包</span><br></pre></td></tr></table></figure><h2 id="JDK-中的桥接模式"><a href="#JDK-中的桥接模式" class="headerlink" title="JDK 中的桥接模式"></a>JDK 中的桥接模式</h2><h2 id="Spring-中的桥接模式"><a href="#Spring-中的桥接模式" class="headerlink" title="Spring 中的桥接模式"></a>Spring 中的桥接模式</h2>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 结构型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>过滤器模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%BF%87%E6%BB%A4%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%BF%87%E6%BB%A4%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>过滤器模式或标准模式是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。</p><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h2 id="JDK-中的过滤器"><a href="#JDK-中的过滤器" class="headerlink" title="JDK 中的过滤器"></a>JDK 中的过滤器</h2><h2 id="Spring-中的过滤器"><a href="#Spring-中的过滤器" class="headerlink" title="Spring 中的过滤器"></a>Spring 中的过滤器</h2>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 结构型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>组合模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>组合模式又叫整体部分模式，它创建了对象组的树形结构，将对象组合成树状结构以表示“整体-部分”的层次关系。</p><p>组合模式依据树形结构来组合对象，用来表示部分以及整体层次。组合模式使得用户对单个对象的访问具有一致性，即：组合能让客户以一致的方式处理个别对象以及组合对象。</p><p>这种模式属于结构型模式。</p><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><ol><li><p>举例说明<br>展现学校、学院、系的结构层次。</p></li><li><p>意图目的<br>依据树形结构来组合对象，用来表示部分及整体层次。</p></li><li><p>主要解决<br>它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</p></li><li><p>模式原理<br>在组合模式中分为树、树枝和叶子 3 种角色。树枝和叶子实现统一接口（树），树枝内部组合该接口。</p><p>树是组合对象声明接口，在适当的情况下，实现所有类共有的接口默认行为，用于访问和管理子部件（树枝/叶子）。树可以是抽象类者接口，例如：<code>Map</code>，<code>Organization</code>。</p><p>树枝用于存储子部件，在树的接口中实现子部件的相关操作，比如新增，删除。树枝有 <code>HashMap</code>、<code>University</code>、<code>College</code>。</p><p>叶子节点没有子节点。例如 <code>HashMap</code> 中的 <code>Node</code>，<code>Department</code>等。</p></li><li><p>何时使用<br>需要遍历组织机构，或者处理的对象具有树形结构时，非常适合使用组合模式。</p></li><li><p>优点<br>简化客户端操作。客户端只需要面对一致的对象而不用考虑整体部分或者叶子的问题。</p><p>具有较强的扩展性。当我们要改变组合对象时，我们只需要调整内部的层次关系，客户端不用做出任何改动。</p><p>方便创建出复杂的层次结构。客户端不用理会组合里面的组成细节，容易添加节点或者叶子从而创建出复杂的树形结构。</p></li><li><p>缺点<br>要求较高的抽象性，如果节点和叶子有很多差异性的话，比如很多方法和属性都不一样，不适合使用组合模式。</p></li><li><p>使用场景<br>Java 中的 <code>Map</code>。</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>编写一个程序展示一个学校院系结构，需求是这样：要在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。</p><p>在传统的设计中，学校包含了学院，学院包含了系，这是从组织大学来进行分层次，不能很好的实现管理操作。</p><p>我们把学校、学院、系都看作是组织结构，他们之间没有继承关系，而是一个组合关系（树形结构），可以更好的实现管理操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先看看用户端使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Organization computerCollege = <span class="keyword">new</span> College(<span class="string">"计算机学院"</span>, <span class="string">"这是旧的学科"</span>);</span><br><span class="line">        computerCollege.add(<span class="keyword">new</span> Department(<span class="string">"软件工程"</span>, <span class="string">"软件工程不错"</span>));</span><br><span class="line">        computerCollege.add(<span class="keyword">new</span> Department(<span class="string">"网络工程"</span>, <span class="string">"网络工程有错"</span>));</span><br><span class="line">        computerCollege.add(<span class="keyword">new</span> Department(<span class="string">"计算机与技术"</span>, <span class="string">"这门学科不赚钱"</span>));</span><br><span class="line"></span><br><span class="line">        Organization infoEngineerCollege = <span class="keyword">new</span> College(<span class="string">"信息工程学院"</span>, <span class="string">"这是新的计算学科"</span>);</span><br><span class="line">        infoEngineerCollege.add(<span class="keyword">new</span> Department(<span class="string">"通信工程"</span>, <span class="string">"通信工程不好学"</span>));</span><br><span class="line">        infoEngineerCollege.add(<span class="keyword">new</span> Department(<span class="string">"信息工程"</span>, <span class="string">"信息工程很好学"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        University university = <span class="keyword">new</span> University(<span class="string">"清华大学"</span>, <span class="string">"中国顶尖的大学"</span>);</span><br><span class="line">        university.add(computerCollege);</span><br><span class="line">        university.add(infoEngineerCollege);</span><br><span class="line"></span><br><span class="line">        university.print(<span class="string">"----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">清华大学</span><br><span class="line">----计算机学院</span><br><span class="line">--------软件工程</span><br><span class="line">--------网络工程</span><br><span class="line">--------计算机与技术</span><br><span class="line">----信息工程学院</span><br><span class="line">--------通信工程</span><br><span class="line">--------信息工程</span><br></pre></td></tr></table></figure><p>1、创建一个结构层次的抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Organization</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Organization</span><span class="params">(String name, String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Organization organization)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Organization organization)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String prefix)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、创建学校类，继承自结构层次，带有多个学院。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">University</span> <span class="keyword">extends</span> <span class="title">Organization</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Organization&gt; colleges;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">University</span><span class="params">(String name, String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, desc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Organization organization)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (colleges == <span class="keyword">null</span>) colleges = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        colleges.add(organization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Organization organization)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (colleges == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        colleges.remove(organization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">if</span> (colleges == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        colleges.forEach(c -&gt; c.print(prefix));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、创建学院类，继承自结构层次类，带有多个专业。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">College</span> <span class="keyword">extends</span> <span class="title">Organization</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Organization&gt; departments;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">College</span><span class="params">(String name, String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, desc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Organization organization)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (departments == <span class="keyword">null</span>) departments = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        departments.add(organization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Organization organization)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (departments == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        departments.remove(organization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        System.out.println(prefix + name);</span><br><span class="line">        <span class="keyword">if</span> (departments == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        departments.forEach(c -&gt; c.print(prefix + prefix));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、最后是学科类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> <span class="keyword">extends</span> <span class="title">Organization</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">(String name, String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, desc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        System.out.println(prefix + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK-中的组合模式"><a href="#JDK-中的组合模式" class="headerlink" title="JDK 中的组合模式"></a>JDK 中的组合模式</h2><p><code>Map</code> 使用了组合模式。</p><ol><li><code>Map</code> 是一个抽象的构建（类似上面的 <code>Organization</code>）</li><li><code>HashMap</code> 是一个中间的构建（类似上面的学校，学院），实现/继承了相关方法（<code>put</code>、<code>putAll</code>）</li><li><code>Node</code> 是<code>HashMap</code> 的内存静态类，类似叶子节点（上面的学科），没有<code>put</code>、<code>putAll</code>等方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">0</span>, <span class="string">"西游记"</span>);</span><br><span class="line">    map.put(<span class="number">1</span>, <span class="string">"东游记"</span>);</span><br><span class="line"></span><br><span class="line">    map.putAll(<span class="keyword">new</span> HashMap&lt;Integer, String&gt;());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">V <span class="title">put</span><span class="params">(K key, V value)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 结构型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>装饰者模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在现实生活中，常常需要对现有的产品增加新的功能或美化外观，例如房子装修，相片加相框。在软件开发中，有时想用一些现存的组件，这些组件可能只完成了一些核心功能。但是在不改变起结构的情况下，可以动态地扩展其功能。所有这些都可以采用装饰者模式来实现。</p><p>装饰者模式属于结构型模式，它通过类和接口直接的继承和引用实现创建复杂结构对象的功能。</p><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><ol><li><p>举例说明<br> 咖啡加糖、加牛奶。</p><p> 买陶瓷，先用塑料泡沫包扎，再用纸箱包装。</p></li><li><p>意图目的<br> 在不改变现有对象结构的情况下，动态地给该对象增加一些额外功能。</p></li><li><p>主要解决<br> 扩展一个类的功能时，采用继承的方式会产生大量的子类。</p></li><li><p>如何解决<br> 在修饰者模式里面分为产品和装饰者 2 个角色。</p><p> 陶瓷是产品，塑料泡沫和纸箱是装饰者。</p><p> 装饰者继承子产品，然后持有一个产品。就是塑料泡沫里面包含者一个陶瓷。</p><p> 用户得到的产品，不管这个产品是否附加了装饰。</p><p> 装饰者的本质是使用组合关系来代替继承关系实现扩展类的功能。</p></li><li><p>关键代码<br> 装饰者继承子产品。</p><p> 装饰者里面引用一个产品。</p><p> 一个产品，多个修饰者。</p></li><li><p>何时使用<br> 当对象的功能要求可以动态地添加，也可以再动态地撤销时。</p><p> 当需要通过对现有的一组基本功能进行排序组合生成非常多的功能，采用继承关系很难实现，而采用装饰者模式却很好实现。</p><p> 当需要给一个现有类增加新的功能，而又不能采用生成子类的方法进行扩展时。例如：该类被隐藏或者采用继承会生成大量的子类。</p></li><li><p>优点缺点<br> 开闭原则。</p><p> 可以动态的给类添加新的功能。</p><p> 装饰模式会添加许多子类，如果过度使用会使得程序变得复杂。</p></li><li><p>注意事项</p></li><li><p>使用场景<br> Java IO 体系。</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>用户端使用效果。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 购买长黑咖啡</span></span><br><span class="line">        Drink drink = <span class="keyword">new</span> LongBlack();</span><br><span class="line">        <span class="comment">// 添加牛奶调料</span></span><br><span class="line">        drink = <span class="keyword">new</span> Milk(drink);</span><br><span class="line">        <span class="comment">// 添加巧克力调料</span></span><br><span class="line">        drink = <span class="keyword">new</span> Chocolate(drink);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印账单</span></span><br><span class="line">        System.out.println(drink.bill());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">巧克力：<span class="number">2.0</span> &amp;&amp; 牛奶：<span class="number">3.0</span> &amp;&amp; 长黑咖啡：<span class="number">20.0</span></span><br></pre></td></tr></table></figure></p><p>1、创建主体角色及其子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Float price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Drink</span><span class="params">(String name, Float price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 打印订单信息，由子类实现</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">bill</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主体实现，这里多一层封装。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>(callSuper = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Coffee</span><span class="params">(String name, Float price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">bill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getName() + <span class="string">"："</span> + <span class="keyword">super</span>.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongBlack</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LongBlack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"长黑咖啡"</span>, <span class="number">20f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"浓缩咖啡"</span>, <span class="number">30f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、创建修饰者角色及其实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调料抽象类，作为修饰者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>(callSuper = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Spices</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Drink obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Spices</span><span class="params">(String name, Float price, Drink obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, price);</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">bill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getName() + <span class="string">"："</span> + <span class="keyword">super</span>.getPrice() + <span class="string">" &amp;&amp; "</span> + obj.bill();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">Spices</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Milk</span><span class="params">(Drink obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"牛奶"</span>, <span class="number">3f</span>, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chocolate</span> <span class="keyword">extends</span> <span class="title">Spices</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chocolate</span><span class="params">(Drink obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"巧克力"</span>, <span class="number">2f</span>, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、模拟新增一个无因咖啡。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decaf</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decaf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"无因咖啡"</span>, <span class="number">15f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 购买无因咖啡</span></span><br><span class="line">        Drink drink = <span class="keyword">new</span> Decaf();</span><br><span class="line">        <span class="comment">// 添加牛奶调料</span></span><br><span class="line">        drink = <span class="keyword">new</span> Milk(drink);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加巧克力调料</span></span><br><span class="line">        drink = <span class="keyword">new</span> Chocolate(drink);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印账单</span></span><br><span class="line">        System.out.println(drink.bill());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">巧克力：<span class="number">2.0</span> &amp;&amp; 牛奶：<span class="number">3.0</span> &amp;&amp; 无因咖啡：<span class="number">15.0</span></span><br></pre></td></tr></table></figure><h2 id="JDK-中的装饰者模式"><a href="#JDK-中的装饰者模式" class="headerlink" title="JDK 中的装饰者模式"></a>JDK 中的装饰者模式</h2><p>JDK 中的 IO 结构就使用了装饰者模式。</p><ol><li><code>InputStream</code> 是抽象产品。</li><li><code>FileInputStream</code> 是具体产品。</li><li><code>FilterInputStream</code> 是抽象装饰。</li><li><code>DataInputStream</code>、<code>BufferInputStream</code> 是具体装饰。</li></ol><pre class="mermaid">classDiagramclass InputStream {    <<抽象产品>>    +read() int}class FileInputStream {    <<具体产品>>}class ByteArrayInputStream {    <<具体产品>>}class FilterInputStream {    <<抽象修饰>>>}class DataInputStream {    <<具体修饰>>}class BufferedInputStream {    <<具体修饰>>}InputStream <|-- FileInputStreamInputStream <|-- ByteArrayInputStreamInputStream <|-- FilterInputStreamFilterInputStream <|-- DataInputStreamFilterInputStream <|-- BufferedInputStream</pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1. 获取产品</span></span><br><span class="line"><span class="comment"> * 2. 修饰产品</span></span><br><span class="line"><span class="comment"> * 3. 得到最终产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">InputStream ios = <span class="keyword">new</span> FileInputStream(<span class="string">"/user/test.txt"</span>);</span><br><span class="line">ios = <span class="keyword">new</span> DataInputStream(ios);</span><br><span class="line">System.out.println(ios.read());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStream</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象修饰</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">volatile</span> InputStream in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体修饰</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> <span class="keyword">extends</span> <span class="title">FilterInputStream</span> <span class="keyword">implements</span> <span class="title">DataInput</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataInputStream</span><span class="params">(InputStream in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 结构型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>外观模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在现实生活中，常常存在办事较复杂的例子，如办房产证或注册一家公司，有时要同多个部门联系，这时要是有一个综合部门能解决一切手续问题就好了。</p><p>软件设计也是这样，当一个系统的功能越来越强，子系统会越来越多，客户对系统的访问也变得越来越复杂。这时如果系统内部发生改变，客户端也要跟着改变，这违背了“开闭原则”，也违背了“迪米特法则”，所以有必要为多个子系统提供一个统一的接口，从而降低系统的耦合度，这就是外观模式的目标。</p><pre class="mermaid">graph LR    客户端 --> 外观类    外观类 --> 订单系统    外观类 --> 商品系统    subgraph 子系统        日志系统         订单系统        商品系统    end    订单系统 --> 日志系统</pre><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><ol><li><p>举例说明<br> 买房需要办理一系列手续，这时通过中介代办。</p><p> 安装软件常常有一键安装选项，省去选择安装目录、安装组件等操作。</p></li><li><p>意图目的<br> 外观模式也叫门面模式，通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关系这个子系统的内部细节。</p></li><li><p>主要解决<br> 解决多个复杂接口带来的使用困难，起到简化用户操作的作用。</p></li><li><p>如何解决<br> 调用者：外观接口的调用者。</p><p> 外观类：为调用端提供统一的接口。外观类知道哪些子系统负责处理请求，从而将调用端的请求代理给适当的子系统对象。</p><p> 子系统：一个或多个系统，处理外观类指派的任务，它是功能的提供者。</p><p> 买房的例子中，中介就是外观类，每个手续都是一个子系统。</p></li><li><p>何时使用<br> 当客户端与多个子系统之间存在很大的联系时，引入外观模式可将它们分离，从而提高子系统的独立性和可移植性。</p><p> 维护老系统时，如果这个系统已经变得非常难以维护和扩展，可以考虑为新系统开发一个外观类，来提供老系统的比较清晰简单的接口。让新系统与外观类交互，提供复用性。</p></li><li><p>优点缺点<br> 通过合理的使用外观模式，可以帮我们更好的划分访问层次。</p><p> 对外屏蔽了子系统的细节，降低客户端对子系统使用的复杂性。</p><p> 外观模式降低了客户端对子系统的耦合关系，让子系统内部的模块更容易维护和扩展。</p><p> 不能很好地限制客户使用子系统类。</p><p> 增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</p></li><li><p>注意事项<br> 不能滥用外观模式，只有当系统过于复杂时，才考虑使用。</p></li><li><p>应用场景</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>代码没有找到。。。</p><h2 id="JDK-中的外观模式"><a href="#JDK-中的外观模式" class="headerlink" title="JDK 中的外观模式"></a>JDK 中的外观模式</h2><h2 id="Spring-中的外观模式"><a href="#Spring-中的外观模式" class="headerlink" title="Spring 中的外观模式"></a>Spring 中的外观模式</h2>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 结构型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>享元模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在面向对象程序设计过程中，有时会面临要创建大量相同或相似对象实例的问题。创建那么多的对象将会耗费很多的系统资源，它是系统性能提高的一个瓶颈。例如，围棋和五子棋中的黑白棋子，图像中的坐标点或颜色，局域网中的路由器、交换机和集线器，教室里的桌子和凳子等。这些对象有很多相似的地方，如果能把它们相同的部分提取出来共享，则能节省大量的系统资源，这就是享元模式的产生背景。</p><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><h4 id="意图目的"><a href="#意图目的" class="headerlink" title="意图目的"></a>意图目的</h4><p>享元模式就是运用共享技术来有效地支持大量细粒度对象的复用。它通过共享已经存在的对象来大幅度减少需要创建的对象数量、避免大量相似类的开销，从而提高系统资源的利用率。</p><h4 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h4><p>创建大量相同或相似对象实例的问题。</p><h4 id="模式原理"><a href="#模式原理" class="headerlink" title="模式原理"></a>模式原理</h4><pre class="mermaid">flowchart BT玩家 --> 落子白棋 -.-> 棋子黑棋 -.-> 棋子</pre><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><h4 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h4><p>享元模式的主要优点是：相同对象只要保存一份，这降低了系统中对象的数量，从而降低了系统中细粒度对象给内存带来的压力。</p><p>其主要缺点是：为了使对象可以共享，需要将一些不能共享的状态外部化，这将增加程序的复杂性。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 结构型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 结构型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在现实生活中，常常会出现这样的事例：一个请求有多个对象可以处理，但每个对象的处理条件或权限不同。例如，公司员工请假，可批假的领导有部门负责人、副总经理、总经理等，但每个领导能批准的天数不同，员工必须根据自己要请假的天数去找不同的领导签名，也就是说员工必须记住每个领导的姓名、电话和地址等信息，这增加了难度。这样的例子还有很多，如找领导出差报销、生活中的“击鼓传花”游戏等。</p><p>在计算机软硬件中也有相关例子，如总线网中数据报传送，每台计算机根据目标地址是否同自己的地址相同来决定是否接收；还有异常处理中，处理程序根据异常的类型决定自己是否处理该异常；还有 Struts2 的拦截器、JSP 和 Servlet 的 Filter 等，所有这些，如果用责任链模式都能很好解决。</p><pre class="mermaid">graph LR学生 -->|请假10天| 班主任班主任 --> |请示上头| 系主任系主任 -.-> |请示上头| 校长系主任 --> |批准| 学生</pre><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><ol><li><p>举例说明<br> 规定学生请假小于或等于 2 天，班主任可以批准；小于或等于 7 天，系主任可以批准；小于或等于 10 天，院长可以批准；其他情况不予批准。</p></li><li><p>意图目的<br> 为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。</p></li><li><p>主要解决<br>  一个请求有多个对象可以处理，但每个对象的处理条件或权限不同。</p></li><li><p>如何解决<br> 抽象处理者：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。<br> 具体处理者：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后继者。例如上图中的班主任、系主任、校长。<br> 客户类：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。例如上图中的学生。</p></li><li><p>关键代码<br> 具体处理者持有下一个处理者。</p></li><li><p>何时使用<br> 有多个对象可以处理一个请求，哪个对象处理该请求由运行时刻自动确定。</p><p> 可动态指定一组对象处理请求，或添加新的处理者。</p><p> 在不明确指定请求处理者的情况下，向多个处理者中的一个提交请求。</p></li><li><p>优点缺点<br> 增强了系统的可扩展性。可以根据需要增加新的请求处理类，满足开闭原则。</p><p> 责任分担。每个类只需要处理自己该处理的工作，不该处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则。</p><p> 降低了对象之间的耦合度。该模式使得一个对象无须知道到底是哪一个对象处理其请求以及链的结构，发送者和接收者也无须拥有对方的明确信息。</p><p> 责任链简化了对象之间的连接。每个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，这避免了使用众多的 if 或者 if···else 语句。</p><p> 不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。</p><p> 对比较长的职责链，请求的处理可能涉及多个处理对象，系统性能将受到一定影响。</p></li><li><p>注意事项<br> 通常情况下，可以通过数据链表来实现职责链模式的数据结构。</p></li><li><p>模式扩展<br> 纯的职责链模式：一个请求必须被某一个处理者对象所接收，且一个具体处理者对某个请求的处理只能采用以下两种行为之一：自己处理（承担责任）；把责任推给下家处理。</p><p> 不纯的职责链模式：允许出现某一个具体处理者对象在承担了请求的一部分责任后又将剩余的责任传给下家的情况，且一个请求可以最终不被任何接收端对象所接收。</p></li><li><p>应用场景</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>用责任链模式设计一个请假条审批模块。</p><p>假如规定学生请假小于或等于 2 天，班主任可以批准；小于或等于 7 天，系主任可以批准；小于或等于 10 天，院长可以批准；其他情况不予批准；这个实例适合使用职责链模式实现。</p><p>1、客户类。模拟学生向班主任请假10天。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用。学生向班主任请假10天。</span></span><br><span class="line">        Leader leader = <span class="keyword">new</span> ClassAdviser();</span><br><span class="line">        leader.handlerRequest(<span class="number">11</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">请假时间过长，班主任无法处理请求！</span><br><span class="line">请假时间过长，系主任无法处理请求！</span><br><span class="line">院长处理了请求！</span><br></pre></td></tr></table></figure><p>2、抽象处理者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 持有下一个处理者</span></span><br><span class="line">    <span class="keyword">protected</span> Leader nextLeader;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leader</span><span class="params">(Leader nextLeader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextLeader = nextLeader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理请求</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(<span class="keyword">int</span> leaveDays)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、具体处理者，继承了抽象处理者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassAdviser</span> <span class="keyword">extends</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassAdviser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> DepartmentHead());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(<span class="keyword">int</span> leaveDays)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (leaveDays &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"请假时间过长，班主任无法处理请求！"</span>);</span><br><span class="line">            <span class="keyword">if</span> (nextLeader == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"没有找到合适的处理者！！！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            nextLeader.handlerRequest(leaveDays);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"班主任处理了请求"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系主任</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentHead</span> <span class="keyword">extends</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DepartmentHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> Dean());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(<span class="keyword">int</span> leaveDays)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (leaveDays &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"请假时间过长，系主任无法处理请求！"</span>);</span><br><span class="line">            <span class="keyword">if</span> (nextLeader == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"没有找到合适的处理者！！！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            nextLeader.handlerRequest(leaveDays);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"系主任处理了请求"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 院长</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dean</span> <span class="keyword">extends</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(<span class="keyword">int</span> leaveDays)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"院长处理了请求！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK-中的责任链模式"><a href="#JDK-中的责任链模式" class="headerlink" title="JDK 中的责任链模式"></a>JDK 中的责任链模式</h2><h2 id="Spring-中的责任链模式"><a href="#Spring-中的责任链模式" class="headerlink" title="Spring 中的责任链模式"></a>Spring 中的责任链模式</h2>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 行为型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>命令模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在软件开发系统中，常常出现“方法的请求者”与“方法的实现者”之间存在紧密的耦合关系。这不利于软件功能的扩展与维护。例如，想对行为进行“撤销、重做、记录”等处理都很不方便，因此“如何将方法的请求者与方法的实现者解耦？”变得很重要，命令模式能很好地解决这个问题。</p><p>在现实生活中，这样的例子也很多，例如，电视机遥控器（命令发送者）通过按钮（具体命令）来遥控电视机（命令接收者），还有计算机键盘上的“功能键”等。</p><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>命令模式是将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。这样两者之间通过命令对象进行沟通，这样方便将命令对象进行储存、传递、调用、增加与管理。</p><h4 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h4><p>客户去餐馆可选择的早餐有肠粉、河粉和馄饨等，客户可向服务员选择以上早餐中的若干种，服务员将客户的请求交给相关的厨师去做。这里的点早餐相当于“命令”，服务员相当于“调用者”，厨师相当于“接收者”，所以用命令模式实现比较合适。</p><h4 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h4><h4 id="模式原理"><a href="#模式原理" class="headerlink" title="模式原理"></a>模式原理</h4><p>命令模式包含以下主要角色：</p><ol><li>抽象命令：声明执行命令的接口，拥有执行命令的抽象方法 execute()。</li><li>具体命令：是抽象命令类的具体实现类，它拥有接收者对象，并通过调用接收者的功能来完成命令要执行的操作。</li><li>实现者/接收者：执行命令功能的相关操作，是具体命令对象业务的真正实现者。</li><li>调用者/请求者：是请求的发送者，它通常拥有很多的命令对象，并通过访问命令对象来执行相关请求，它不直接访问接收者。</li></ol><p>在餐馆的例子中，服务区相当于调用者，点早餐相当于“命令”，厨师相当于“接收者”。</p><pre class="mermaid">classDiagramclass 服务员 {    <<调用者>>}class 点云吞 {    <<命令>>}class 点河粉 {    <<命令>>}class 厨师A {    <<实现者>>}class 厨师B {    <<实现者>>}服务员 --> 点云吞: 点早餐点云吞 --> 厨师A: 通知服务员 --> 点河粉: 点早餐点河粉 --> 厨师B: 通知</pre><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Waiter是调用者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waiter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Command是抽象命令，Hefen是具体命令</span></span><br><span class="line">        Command hefen = <span class="keyword">new</span> Hefen();</span><br><span class="line">        <span class="comment">// 调用命令类中的命令</span></span><br><span class="line">        hefen.cooking();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hefen</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 命令类里面持有一个实现类。</span></span><br><span class="line">    <span class="keyword">private</span> HefenChelf chelf = <span class="keyword">new</span> HefenChelf();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cooking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        chelf.cookingHefen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>命令模式通常适用于以下场景：</p><ol><li>当系统需要将请求调用者与请求接收者解耦时，命令模式使得调用者和接收者不直接交互。</li><li>当系统需要随机请求命令或经常增加或删除命令时，命令模式比较方便实现这些功能。</li><li>当系统需要执行一组操作时，命令模式可以定义宏命令来实现该功能。</li><li>当系统需要支持命令的撤销（Undo）操作和恢复（Redo）操作时，可以将命令对象存储起来，采用备忘录模式来实现。</li></ol><h4 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h4><p>命令模式的主要优点如下：</p><ol><li>降低系统的耦合度。命令模式能将调用操作的对象与实现该操作的对象解耦。</li><li>增加或删除命令非常方便。采用命令模式增加与删除命令不会影响其他类，它满足“开闭原则”，对扩展比较灵活。</li><li>可以实现宏命令。命令模式可以与组合模式结合，将多个命令装配成一个组合命令，即宏命令。</li><li>方便实现 Undo 和 Redo 操作。命令模式可以与后面介绍的备忘录模式结合，实现命令的撤销与恢复。</li></ol><p>其缺点是：可能产生大量具体命令类。因为计对每一个具体操作都需要设计一个具体命令类，这将增加系统的复杂性。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><h4 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h4><p>在软件开发中，有时将命令模式与前面学的组合模式联合使用，这就构成了宏命令模式，也叫组合命令模式。宏命令包含了一组命令，它充当了具体命令与调用者的双重角色，执行它时将递归调用它所包含的所有命令。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>用命令模式实现客户去餐馆吃早餐的实例。</p><p>分析：客户去餐馆可选择的早餐有肠粉、河粉和馄饨等，客户可向服务员选择以上早餐中的若干种，服务员将客户的请求交给相关的厨师去做。这里的点早餐相当于“命令”，服务员相当于“调用者”，厨师相当于“接收者”，所以用命令模式实现比较合适。</p><p>首先，定义一个早餐类（Breakfast），它是抽象命令类，有抽象方法 cooking()，说明要做什么；再定义其子类肠粉类（ChangFen）、馄饨类（HunTun）和河粉类（HeFen），它们是具体命令类，实现早餐类的 cooking() 方法，但它们不会具体做，而是交给具体的厨师去做；具体厨师类有肠粉厨师（ChangFenChef）、馄蚀厨师（HunTunChef）和河粉厨师（HeFenChef），他们是命令的接收者。最后，定义服务员类（Waiter），它接收客户的做菜请求，并发出做菜的命令。客户类是通过服务员类来点菜的。</p><h4 id="调用者"><a href="#调用者" class="headerlink" title="调用者"></a>调用者</h4><p>服务员作为调用者角色，接收客户的做菜请求，并发出做菜的命令。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waiter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 早餐：河粉</span></span><br><span class="line">        Breakfast hefen = <span class="keyword">new</span> Hefen();</span><br><span class="line">        hefen.cooking();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 早餐：肠粉</span></span><br><span class="line">        Breakfast changfen = <span class="keyword">new</span> Changfen();</span><br><span class="line">        changfen.cooking();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="命令类"><a href="#命令类" class="headerlink" title="命令类"></a>命令类</h4><p>早餐类作为抽象命令类，有个抽象方法 <code>cooking()</code>。具体命令类有肠粉类，馄饨类和河粉类，实现了 <code>cooking()</code> 方法，但它们不会具体做，而是交给厨房（实现类）去做。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Breakfast</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cooking</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hefen</span> <span class="keyword">implements</span> <span class="title">Breakfast</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HefenChef = <span class="keyword">new</span> HefenChef();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cooking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        chef.cookingHefen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Changfen</span> <span class="keyword">implements</span> <span class="title">Breakfast</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ChangFenChef chef = <span class="keyword">new</span> ChangFenChef();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cooking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        chef.cookingChangefen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h4><p>实现类是负责命令的最终实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HefenChef</span> </span>&#123;</span><br><span class="line">    <span class="function">pbulic <span class="keyword">void</span> <span class="title">cookingHefen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"厨师正在做河粉。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangFenChef</span> </span>&#123;</span><br><span class="line">    <span class="function">pbulic <span class="keyword">void</span> <span class="title">cookingChangefen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"厨师正在做肠粉。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK-中的命令模式"><a href="#JDK-中的命令模式" class="headerlink" title="JDK 中的命令模式"></a>JDK 中的命令模式</h2><h2 id="Spring-中的命令模式"><a href="#Spring-中的命令模式" class="headerlink" title="Spring 中的命令模式"></a>Spring 中的命令模式</h2>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 行为型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解释器模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在编译原理中，一个算术表达式通过词法分析器形成词法单元，而后这些词法单元再通过语法分析器构建语法分析树，最终形成一颗抽象的语法分析树。这里的词法分析器和语法分析器都可以看做是解析器。</p><p>虽然使用解释器模式的实例不是很多，但对于满足以上特点，且对运行效率要求不是很高的应用实例，如果用解释器模式来实现，其效果是非常好的，本文将介绍其工作原理与使用方法。</p><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><ol><li><p>举例说明<br> 编译器。<br> 运算表达式。<br> 正则表达式。<br> 机器人。</p></li><li><p>意图目的<br> 给定一个语言表达式，定义它的文法的一种表示，并定义一个解析器，使用该解释器来解释语言中的句子（表达式）。</p><p> 这里提到的文法和句子的概念同编译原理中的描述相同，“文法”指语言的语法规则，而“句子”是语言集中的元素。例如，汉语中的句子有很多，“我是中国人”是其中的一个句子，可以用一棵语法树来直观地描述语言中的句子。</p></li><li><p>主要解决</p></li><li><p>如何解决<br> 环境类：含有解释器之外的全局信息。<br> 客户端：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法。<br> 抽象表达式：声明抽象的解释操作，这个方法为抽象语法树中的所有节点所共享。<br> 终结符表达式：实现与文法中的终结符相关的解释操作。<br> 非终结表达式：为文法中的非终结符实现解释操作。</p></li><li><p>关键代码</p></li><li><p>何时使用<br> 将一个需要解析执行的语言中的句子表示为一颗抽象语法树。</p><p> 一些重复出现的问题可以用一种简单的语言来表达。</p><p> 一个简单语法需要解释的场景。</p></li><li><p>优点缺点<br> 扩展性好。由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法。</p><p> 容易实现。在语法树中的每个表达式节点类都是相似的，所以实现其文法较为容易。</p><p> 执行效率较低。解释器模式中通常使用大量的循环和递归调用，当要解释的句子较复杂时，其运行速度很慢，且代码的调试过程也比较麻烦。</p><p> 会引起类膨胀。解释器模式中的每条规则至少需要定义一个类，当包含的文法规则很多时，类的个数将急剧增加，导致系统难以管理与维护。</p><p> 可应用的场景比较少。在软件开发中，需要定义语言文法的应用实例非常少，所以这种模式很少被使用到。</p></li><li><p>注意事项<br> 解释器模式在实际的软件开发中使用比较少，因为它会引起效率、性能以及维护等问题。如果碰到对表达式的解释，在 Java 中可以用 <code>Expression4J</code> 或 <code>Jep</code> 等来设计。</p></li><li><p>应用场景<br> 自定义 JSON、XML 解释器。</p><p> Spring 中的 <code>SpelExpressionParser</code>。</p></li><li><p>模式扩展<br> 在项目开发中，如果要对数据表达式进行分析与计算，无须再用解释器模式进行设计了，Java 提供了以下强大的数学公式解析器：<code>Expression4J</code>、<code>MESP</code>(Math Expression String Parser) 和 <code>Jep</code> 等，它们可以解释一些复杂的文法，功能强大，使用简单。</p></li></ol><h2 id="模式的结构与实现"><a href="#模式的结构与实现" class="headerlink" title="模式的结构与实现"></a>模式的结构与实现</h2><p>解释器模式常用于对简单语言的编译或分析实例中，为了掌握好它的结构与实现，必须先了解编译原理中的“文法、句子、语法树”等相关概念。</p><h4 id="文法"><a href="#文法" class="headerlink" title="文法"></a>文法</h4><p>文法是用于描述语言的语法结构的形式规则。没有规矩不成方圆，例如，有些人认为完美爱情的准则是“相互吸引、感情专一、任何一方都没有恋爱经历”，虽然最后一条准则较苛刻，但任何事情都要有规则，语言也一样，不管它是机器语言还是自然语言，都有它自己的文法规则。例如，中文中的“句子”的文法如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">〈句子〉::=〈主语〉〈谓语〉〈宾语〉</span><br><span class="line">〈主语〉::=〈代词〉|〈名词〉</span><br><span class="line">〈谓语〉::=〈动词〉</span><br><span class="line">〈宾语〉::=〈代词〉|〈名词〉</span><br><span class="line">〈代词〉你|我|他</span><br><span class="line">〈名词〉7大学生I筱霞I英语</span><br><span class="line">〈动词〉::=是|学习</span><br></pre></td></tr></table></figure><blockquote><p>注：这里的符号 ::= 表示“定义为”的意思，用“〈”和“〉”括住的是非终结符，没有括住的是终结符。</p></blockquote><h4 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h4><p>句子是语言的基本单位，是语言集中的一个元素，它由终结符构成，能由“文法”推导出。例如，上述文法可以推出“我是大学生”，所以它是句子。</p><h4 id="语法树"><a href="#语法树" class="headerlink" title="语法树"></a>语法树</h4><p>语法树是句子结构的一种树型表示，它代表了句子的推导结果，它有利于理解句子语法结构的层次。图 1 所示是“我是大学生”的语法树。</p><p><img src="http://c.biancheng.net/uploads/allimg/181119/3-1Q119150550114.gif" alt=""></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>四则运算问题：</p><ol><li>先输入表达式的形式，比如 a + b + c - d + e，要求表达式的字母不能重复。</li><li>再分别输入 a、b、c、d、e 的值。</li><li>最后得出结果。</li></ol><p>传统方法：编写一个方法，接收表达式的形式，然后根据用户输入的数值进行解析，得到结果。</p><p>问题分析：如果加入新的运算符，比如 * / 等等，不利于扩展，另外让一个方法来解析会造成程序结构混乱，不够清晰。</p><p>解决方案：可以考虑使用解析器模式，即 表达式 -&gt; 解析器 -&gt; 结果。</p><h2 id="Spring-中的解析器模式"><a href="#Spring-中的解析器模式" class="headerlink" title="Spring 中的解析器模式"></a>Spring 中的解析器模式</h2><p>Spring 框架中的 <code>SpelExpressionParser</code> 就使用到了解释器模式。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 行为型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>迭代器模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在现实生活以及程序设计中，经常要访问一个聚合对象中的各个元素，如“数据结构”中的链表遍历，通常的做法是将链表的创建和遍历都放在同一个类中，但这种方式不利于程序的扩展，如果要更换遍历方法就必须修改程序源代码，这违背了 “开闭原则”。</p><p>既然将遍历方法封装在聚合类中不可取，那么聚合类中不提供遍历方法，将遍历方法由用户自己实现是否可行呢？答案是同样不可取，因为这种方式会存在两个缺点：</p><ol><li>暴露了聚合类的内部表示，使其数据不安全。</li><li>增加了客户的负担。</li></ol><p><strong>迭代器模式</strong>能较好地克服以上缺点，它在客户访问类与聚合类之间插入一个迭代器，这分离了聚合对象与其遍历行为，对客户也隐藏了其内部细节，且满足<strong>单一职责原则</strong>和<strong>开闭原则</strong>，如 Java 中的 <code>Collection</code>、<code>List</code>、<code>Set</code>、<code>Map</code> 等都包含了迭代器。</p><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>迭代器模式提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。迭代器模式属于对象行为型模式，通过类之间不同的通信方式实现不同的行为方式。</p><h4 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h4><h4 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h4><h4 id="模式原理"><a href="#模式原理" class="headerlink" title="模式原理"></a>模式原理</h4><p>迭代器模式主要包含以下角色：</p><ol><li>抽象聚合：定义存储、添加、删除聚合对象以及创建迭代器对象的接口。</li><li>具体聚合：实现抽象聚合类，返回一个具体迭代器的实例。</li><li>抽象迭代器：定义访问和遍历聚合元素的接口，通常包含 hasNext()、first()、next() 等方法。</li><li>具体迭代器：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。</li></ol><pre class="mermaid">classDiagram用户 o-- 迭代器迭代器 --o 个体对象class 迭代器{    聚合对象}</pre><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>迭代器模式通常在以下几种情况使用：</p><ol><li>当需要为聚合对象提供多种遍历方式时。</li><li>当需要为遍历不同的聚合结构提供一个统一的接口时。</li><li>当访问一个聚合对象的内容而无须暴露其内部细节的表示时。</li></ol><h4 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h4><p>迭代器的主要优点如下：</p><ol><li>访问一个聚合对象的内容而无须暴露它的内部表示。</li><li>遍历任务交由迭代器完成，这简化了聚合类。</li><li>它支持以不同方式遍历一个聚合，甚至可以自定义迭代器的子类以支持新的遍历。</li><li>增加新的聚合类和迭代器类都很方便，无须修改原有代码。</li><li>封装性良好，为遍历不同的聚合结构提供一个统一的接口。</li></ol><p>其主要缺点是：增加了类的个数，这在一定程度上增加了系统的复杂性。</p><h4 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h4><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>由于聚合与迭代器的关系非常密切，所以大多数语言在实现聚合类时都提供了迭代器类，因此大数情况下使用语言中已有的聚合类的迭代器就已经够了。</p><h4 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h4><p>迭代器模式常常与组合模式结合起来使用，在对组合模式中的容器构件进行访问时，经常将迭代器潜藏在组合模式的容器构成类中。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>用迭代器模式编写一个浏览婺源旅游风景图的程序。</p><p>分析：婺源的名胜古迹较多，要设计一个查看相关景点简介的程序，用“迭代器模式”设计比较合适。</p><p>首先，设计一个婺源景点（WyViewSpot）类来保存每张图片的名称与简介；再设计一个景点集（ViewSpotSet）接口，它是抽象聚合类，提供了增加和删除婺源景点的方法，以及获取迭代器的方法。</p><p>然后，定义一个婺源景点集（WyViewSpotSet）类，它是具体聚合类，用 ArrayList 来保存所有景点信息，并实现父类中的抽象方法；再定义婺源景点的抽象迭代器（ViewSpotltemtor）接口，其中包含了查看景点信息的相关方法。</p><p>最后，定义婺源景点的具体迭代器（WyViewSpotlterator）类，它实现了父类的抽象方法；客户端程序设计成窗口程序，它初始化婺源景点集（ViewSpotSet）中的数据，并实现 ActionListener 接口，它通过婺源景点迭代器（ViewSpotlterator）来査看婺源景点（WyViewSpot）的信息。图 2 所示是其结构图。</p><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;ViewSpot&gt; viewSpots = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        viewSpots.add(<span class="keyword">new</span> ViewSpot(<span class="string">"江湾"</span>, <span class="string">"江湾景区是婺源的一个国家5A级旅游景区"</span>));</span><br><span class="line">        viewSpots.add(<span class="keyword">new</span> ViewSpot(<span class="string">"李坑"</span>, <span class="string">"李坑村是一个以李姓聚居为主的古村落"</span>));</span><br><span class="line">        viewSpots.add(<span class="keyword">new</span> ViewSpot(<span class="string">"晓起村"</span>, <span class="string">"晓起有“中国茶文化第一村”与“国家级生态示范村”之美誉"</span>));</span><br><span class="line">        viewSpots.add(<span class="keyword">new</span> ViewSpot(<span class="string">"菊径村"</span>, <span class="string">"菊径村形状为山环水绕型，小河成大半圆型，绕村庄将近一周"</span>));</span><br><span class="line"></span><br><span class="line">        Iterator&lt;ViewSpot&gt; iterator = viewSpots.iteraotr();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            ViewSpot viewSpot = iterator.next();</span><br><span class="line">            System.out.println(viewSpot.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewSpot</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String introduce;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">江湾</span><br><span class="line">李坑</span><br><span class="line">晓起村</span><br><span class="line">菊径村</span><br></pre></td></tr></table></figure><h4 id="聚合角色"><a href="#聚合角色" class="headerlink" title="聚合角色"></a>聚合角色</h4><p>迭代器定义访问和遍历聚合元素的接口，通常包含 <code>hasNext()</code>、<code>first()</code>、<code>next()</code> 等方法。我们将具体迭代器放在聚合类中，方便使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象聚合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Set</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">iteraotr</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体聚合，具体迭代器作为内部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; objs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (objs == <span class="keyword">null</span>)</span><br><span class="line">            objs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        objs.add(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (objs == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> objs.get(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (objs == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> objs.remove(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iteraotr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义的迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> currentIndex;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Boolean <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> objs.size() &gt; currentIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> objs.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">prev</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            currentIndex--;</span><br><span class="line">            <span class="keyword">return</span> objs.get(currentIndex + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            currentIndex++;</span><br><span class="line">            <span class="keyword">return</span> objs.get(currentIndex - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">last</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> objs.get(objs.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象迭代器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Boolean <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">first</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">prev</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最后的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">last</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK-中的迭代器模式"><a href="#JDK-中的迭代器模式" class="headerlink" title="JDK 中的迭代器模式"></a>JDK 中的迭代器模式</h2><h2 id="Spring-中的迭代器模式"><a href="#Spring-中的迭代器模式" class="headerlink" title="Spring 中的迭代器模式"></a>Spring 中的迭代器模式</h2>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 行为型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>中介者模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在现实生活中，常常会出现好多对象之间存在复杂的交互关系，这种交互关系常常是“网状结构”，它要求每个对象都必须知道它需要交互的对象。例如，每个人必须记住他（她）所有朋友的电话；而且，朋友中如果有人的电话修改了，他（她）必须告诉其他所有的朋友修改，这叫作“牵一发而动全身”，非常复杂。</p><p>如果把这种“网状结构”改为“星形结构”的话，将大大降低它们之间的“耦合性”，这时只要找一个“中介者”就可以了。如前面所说的“每个人必须记住所有朋友电话”的问题，只要在网上建立一个每个朋友都可以访问的“通信录”就解决了。这样的例子还有很多，例如，你刚刚参力口工作想租房，可以找“房屋中介”；或者，自己刚刚到一个陌生城市找工作，可以找“人才交流中心”帮忙。</p><p>在软件的开发过程中，这样的例子也很多，例如，在 MVC 框架中，控制器（C）就是模型（M）和视图（V）的中介者；还有大家常用的 QQ 聊天程序的“中介者”是 QQ 服务器。所有这些，都可以采用“中介者模式”来实现，它将大大降低对象之间的耦合性，提高系统的灵活性。</p><pre class="mermaid">graph LR    客户端 --> 中介者    中介者 --> 订单系统    中介者 --> 商品系统    中介者 --> 日志系统    subgraph 子系统        日志系统         订单系统        商品系统    end</pre><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><h4 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h4><h4 id="意图目的"><a href="#意图目的" class="headerlink" title="意图目的"></a>意图目的</h4><p>定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式，它是迪米特法则的典型应用。</p><h4 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h4><h4 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h4><p>中介者模式包含以下主要角色：</p><ol><li>抽象中介者（Mediator）：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法。</li><li>具体中介者（ConcreteMediator）：实现中介者接口，定义一个 List 来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。</li><li>抽象同事类（Colleague）角色：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。</li><li>具体同事类（Concrete Colleague）角色：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。</li></ol><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>中介者模式主要应用场景有：</p><ol><li>当对象之间存在复杂的网状结构关系而导致依赖关系混乱且难以复用时。</li><li>当想创建一个运行于多个类之间的对象，又不想生成新的子类时。</li></ol><h4 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h4><p>优点：</p><ol><li>降低了对象之间的耦合性，使得对象易于独立地被复用。</li><li>将对象间的一对多关联转变为一对一的关联，提高系统的灵活性，使得系统易于维护和扩展。</li></ol><p>缺点：</p><ol><li>当同事类太多时，中介者的职责将很大，它会变得复杂而庞大，以至于系统难以维护。</li></ol><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><p>在实际开发中，通常采用以下两种方法来简化中介者模式，使开发变得更简单：</p><ol><li>不定义中介者接口，把具体中介者对象实现成为单例。</li><li>同事对象不持有中介者，而是在需要的时f矣直接获取中介者对象并调用。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 行为型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>备忘录模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>每个人都有犯错误的时候，都希望有种“后悔药”能弥补自己的过失，让自己重新开始，但现实是残酷的。在计算机应用中，客户同样会常常犯错误，能否提供“后悔药”给他们呢？当然是可以的，而且是有必要的。这个功能由“备忘录模式”来实现。</p><p>其实很多应用软件都提供了这项功能，如 Word、记事本、Photoshop、Eclipse 等软件在编辑时按 Ctrl+Z 组合键时能撤销当前操作，使文档恢复到之前的状态；还有在 IE 中的后退键、数据库事务管理中的回滚操作、玩游戏时的中间结果存档功能、数据库与操作系统的备份操作、棋类游戏中的悔棋功能等都属于这类。</p><p>备忘录模式能记录一个对象的内部状态，当用户后悔时能撤销当前操作，使数据恢复到它原先的状态。</p><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><ol><li><p>举例说明<br> 如 Word、记事本、Photoshop、Eclipse 等软件在编辑时按 Ctrl+Z 组合键时能撤销当前操作，使文档恢复到之前的状态。</p><p> 在 IE 中的后退键、数据库事务管理中的回滚操作、玩游戏时的中间结果存档功能、数据库与操作系统的备份操作、棋类游戏中的悔棋功能。</p></li><li><p>意图目的<br> 不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便以后当需要时能将该对象恢复到原先保存的状态。该模式又叫快照模式。</p></li><li><p>主要解决</p></li><li><p>如何解决<br> 发起人：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据的功能，实现其他业务功能，它可以访问备忘录里的所有信息。</p><p> 备忘录：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起人。</p><p> 管理者：对备忘录进行管理，提供保存与获取备忘录的功能，但其不能对备忘录的内容进行访问与修改。</p></li><li><p>关键代码</p></li><li><p>何时使用<br> 需要保存与恢复数据的场景，如玩游戏时的中间结果的存档功能。</p><p> 需要提供一个可回滚操作的场景，如 Word、记事本、Photoshop，Eclipse 等软件在编辑时按 Ctrl+Z 组合键，还有数据库中事务操作。</p></li><li><p>优点缺点<br> 提供了一种可以恢复状态的机制。当用户需要时能够比较方便地将数据恢复到某个历史的状态。</p><p> 实现了内部状态的封装。除了创建它的发起人之外，其他对象都不能够访问这些状态信息。</p><p> 简化了发起人类。发起人不需要管理和保存其内部状态的各个备份，所有状态信息都保存在备忘录中，并由管理者进行管理，这符合单一职责原则。</p><p> 资源消耗大。如果要保存的内部状态信息过多或者特别频繁，将会占用比较大的内存资源。</p></li><li><p>注意事项</p></li><li><p>应用场景</p></li><li><p>模式扩展</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 行为型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 行为型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>状态模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><ol><li><p>举例说明<br> 抽奖活动，多种状态。</p></li><li><p>意图目的<br> 主要用来解决对象在多种状态转换时，需要对外输出不同的行为和问题。状态和行为一一对应，状态之间可以相互转换。</p><p> 当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类。</p></li><li><p>主要解决</p></li></ol><ol><li><p>如何解决<br> 环境类：用于维护状态实例，这个实例定义了当前状态。<br> 抽象状态：抽象的状态角色，定义了一个接口封装与环境类的一个特定接口相关行为。<br> 具体状态：每个状态子类试了一个与环境类的一个状态相关行为。<br> 客户类：使用环境类的。</p></li><li><p>何时使用<br> 当一个事件或者对象有很多状态，状态之间相互转换，对不同的状态要求不同的行为的时候，可以考虑使用状态模式。</p></li><li><p>优点缺点</p><p> 代码具有很强的可读性。状态模式将每个状态的行为封装到对应的一个类中。</p><p> 方便维护，将容易产生问题的 if/else 语句删除了。如果把每个状态的行为都放到一个类中，每次调用方法时都要判断当前是什么状态，不但会产生很多 if/else 语句，而且容易出错。</p><p> 符合“开闭原则”，容易增删状态。</p><p> 会产生很多类，每个状态都要对应一个类，加大维护难度。</p></li><li><p>注意事项</p></li><li><p>应用场景<br> 订单状态。</p></li><li><p>模式扩展</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>请编写程序完成 APP 抽奖活动，具体要求如下：</p><ol><li>假如没参加一次这个活动要扣除用户 50 积分，中奖概率为 10%。</li><li>奖品数量固定，抽完就不能抽奖。</li><li>活动有四个状态：可以抽奖、不能抽奖、发放奖品和奖品领完。</li><li>活动的四个状态转换关系如下图。</li></ol><pre class="mermaid">graph LR可以抽奖 -->|抽奖-90%没中 | 不能抽奖不能抽奖 -->|重玩-扣除50积分| 可以抽奖可以抽奖 -->|抽奖-10%中奖| 发放奖品发放奖品 -->|领奖-还有奖品| 不能抽奖发放奖品 -->|领奖-没有奖品| 奖品领完</pre><p>1、客户类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个活动，投放2个奖品</span></span><br><span class="line">        Activity activity = <span class="keyword">new</span> Activity(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"第 "</span> + i + <span class="string">" 次玩。。。"</span>);</span><br><span class="line">            activity.deduce();</span><br><span class="line">            Boolean flag = activity.raffle();</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                activity.dispense();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">第 <span class="number">1</span> 次玩。。。</span><br><span class="line">扣除积分成功，您可以抽奖了！</span><br><span class="line">正在抽奖，请稍等！</span><br><span class="line">很遗憾您没有中奖！</span><br><span class="line">第 <span class="number">2</span> 次玩。。。</span><br><span class="line">扣除积分成功，您可以抽奖了！</span><br><span class="line">正在抽奖，请稍等！</span><br><span class="line">很遗憾您没有中奖！</span><br><span class="line">第 <span class="number">3</span> 次玩。。。</span><br><span class="line">扣除积分成功，您可以抽奖了！</span><br><span class="line">正在抽奖，请稍等！</span><br><span class="line">恭喜您中奖了，请领取奖品！</span><br><span class="line">领取奖品成功，剩余奖品数为：<span class="number">1</span></span><br><span class="line">第 <span class="number">4</span> 次玩。。。</span><br><span class="line">扣除积分成功，您可以抽奖了！</span><br><span class="line">正在抽奖，请稍等！</span><br><span class="line">恭喜您中奖了，请领取奖品！</span><br><span class="line">领取奖品成功，剩余奖品数为：<span class="number">0</span></span><br><span class="line">第 <span class="number">5</span> 次玩。。。</span><br><span class="line">奖品已经发完，游戏结束。</span><br><span class="line">奖品已经发完，游戏结束。</span><br></pre></td></tr></table></figure></p><p>2、环境类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 环境类，含有所有的状态类。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 各个状态子类也含有环境类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 奖品数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer prizes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> State currentState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OverState overState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NoRaffleState noRaffleState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CanRaffleState canRaffleState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DispenseState dispenseState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Activity</span><span class="params">(Integer prizes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prizes = prizes;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.overState = <span class="keyword">new</span> OverState(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.dispenseState = <span class="keyword">new</span> DispenseState(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.noRaffleState = <span class="keyword">new</span> NoRaffleState(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.canRaffleState = <span class="keyword">new</span> CanRaffleState(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.currentState = <span class="keyword">this</span>.noRaffleState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽奖-10%概率中奖，90%概率没中奖</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentState.raffle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重玩-扣除积分</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        currentState.deduce();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 领奖-奖品数量减少</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        currentState.dispense();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、抽象状态和具体状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象状态-定义所有行为</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 抽奖-10%概率中奖，90%概率没中奖</span></span><br><span class="line">    <span class="function">Boolean <span class="title">raffle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重玩-扣除积分</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deduce</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 领奖-奖品数量减少</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体状态-不能抽奖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoRaffleState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Activity activity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoRaffleState</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前状态不能抽奖</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"扣了积分才能抽奖哦！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前状态可以扣积分，扣除后，将状态设置为可以抽奖状态。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"扣除积分成功，您可以抽奖了！"</span>);</span><br><span class="line">        activity.setCurrentState(activity.getCanRaffleState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前状态不能发奖品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"不能发放奖品！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体状态-可以抽奖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanRaffleState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Activity activity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CanRaffleState</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以抽奖状态，用户可以进行抽奖行为。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在抽奖，请稍等！"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 抽奖结果</span></span><br><span class="line">        Boolean flag = <span class="keyword">new</span> Random().nextBoolean();</span><br><span class="line">        System.out.println(flag ? <span class="string">"恭喜您中奖了，请领取奖品！"</span> : <span class="string">"很遗憾您没有中奖！"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 状态转移，如果已经中奖了则转为领取奖品状态，没中奖则为不能抽奖状态。</span></span><br><span class="line">        activity.setCurrentState(flag ? activity.getDispenseState() : activity.getNoRaffleState());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以抽奖状态，用户不能进行扣除积分行为。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"已经扣取过积分了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以抽奖状态，用户不能进行领奖行为。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"没有中奖，不能发放奖品！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体状态-发放奖品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispenseState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Activity activity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DispenseState</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发放奖品状态，不能进行抽奖行为</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请先领取奖品！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发放奖品状态，不能进行扣除积分行为</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请先领取奖品！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发放奖品状态，可以领取奖品，并进入下一状态。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        activity.setPrizes(activity.getPrizes() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"领取奖品成功，剩余奖品数为："</span> + activity.getPrizes());</span><br><span class="line"></span><br><span class="line">        activity.setCurrentState(activity.getPrizes() &gt; <span class="number">0</span> ? activity.getNoRaffleState() : activity.getOverState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体状态-奖品领完</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Activity activity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OverState</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奖品已经发完，游戏结束。"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奖品已经发完，游戏结束。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奖品已经发完，游戏结束。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="借贷平台源码解析"><a href="#借贷平台源码解析" class="headerlink" title="借贷平台源码解析"></a>借贷平台源码解析</h2><p>某贷平台的订单，有审核-发布-抢单等步骤，随着操作的不同，会改变订单的状态。项目中的这个模块实现使用到了状态模式。</p><div class="table-container"><table><thead><tr><th style="text-align:left">状态/事件</th><th>电审审核</th><th>电审失败</th><th>定价发布</th><th>接单</th><th>接单失效</th><th>付款</th><th>支付失败</th><th>反馈</th></tr></thead><tbody><tr><td style="text-align:left">订单生成</td><td>已审核</td><td>已完结</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left">已审核</td><td></td><td></td><td>已发布</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left">已发布</td><td></td><td></td><td></td><td>待付款</td><td>已完结</td><td></td><td></td><td></td></tr><tr><td style="text-align:left">待付款</td><td></td><td></td><td></td><td></td><td></td><td>已付款</td><td>已完结</td><td></td></tr><tr><td style="text-align:left">已完结</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>已完结</td></tr></tbody></table></div><p>1、通过 if/else 判断订单状态，从而实现不同的逻辑，伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (审核) &#123;</span><br><span class="line">    // 审核逻辑</span><br><span class="line">&#125; else if (发布) &#123;</span><br><span class="line">    // 发布逻辑</span><br><span class="line">&#125; else if (接单) &#123;</span><br><span class="line">    // 接单逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题分析：这类代码难以应对变化，在添加一种状态时，我们需要手动添加 if/else，在添加一种功能时，要对所有的状态进行判断。因此代码会变得越来越臃肿，并且一旦没有处理某个状态，便会发生极其严重的 Bug，难以维护。</p><p>2、使用状态模式完成借贷平台项目的审核模块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户类，使用过程。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.1 创建上下文对象，该对象会记录当前处于什么状态。</span></span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.1 将当前状态设置为发布状态</span></span><br><span class="line">        context.setState(<span class="keyword">new</span> PublishState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.1 审核通过</span></span><br><span class="line">        context.acceptOrderEvent(context);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.1 用客户愿意支付订单</span></span><br><span class="line">        context.payOrderEvent(context);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.1 检测到失败时，抛出异常。</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            context.checkFailEvent(context);</span><br><span class="line">            System.out.println(<span class="string">"流程正常。。。"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当前状态</span></span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkEvent</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        state.checkEvent(<span class="keyword">this</span>);</span><br><span class="line">        getCurrentState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象状态-定义所有行为</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">checkEvent</span><span class="params">(Context context)</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"流程不允许"</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">checkFailEvent</span><span class="params">(Context context)</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"流程不允许"</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">MakePriceEvent</span><span class="params">(Context context)</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"流程不允许"</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">acceptOrderEvent</span><span class="params">(Context context)</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"流程不允许"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体状态-发布状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PulishState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体状态-未支付状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotPayState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体状态-反馈状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeedBack</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 行为型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>空对象模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/%E7%A9%BA%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/%E7%A9%BA%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> J2EE模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在现实生活中常常遇到实现某种目标存在多种策略可供选择的情况，例如，出行旅游可以乘坐飞机、乘坐火车、骑自行车或自己开私家车等，超市促销可以釆用打折、送商品、送积分等方法。</p><p>在软件开发中也常常遇到类似的情况，当实现某一个功能存在多种算法或者策略，我们可以根据环境或者条件的不同选择不同的算法或者策略来完成该功能，如数据排序策略有冒泡排序、选择排序、插入排序、二叉树排序等。</p><p>如果使用多重条件转移语句实现（即硬编码），不但使条件语句变得很复杂，而且增加、删除或更换算法要修改原代码，不易维护，违背开闭原则。如果采用策略模式就能很好解决该问题。</p><pre class="mermaid">classDiagramclass Duck {    <<环境类>>    Fly fly;    Quck quck;    show(): void}Duck <|-- ToyDuckDuck <|-- WildDuckDuck <|-- PackingDuckFly <|..  NoFlyFly <|..  BadFlyFly <|..  GoodFlyQuck <|..  NoQuckQuck <|..  GaGaQuckClient -- ToyDuck : BadFly,NoQuckclass Client {    <<客户类>>}class Fly {    <<抽象策略>>}class Quck {    <<抽象策略>>}</pre><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><ol><li><p>举例说明<br> 数据排序策略有冒泡排序、选择排序、插入排序、二叉树排序等。</p></li><li><p>意图目的<br> 该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。</p></li><li><p>主要解决<br> 实现某一个功能存在多种算法或者策略。</p></li><li><p>如何解决<br> 抽象策略：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</p><p> 具体策略：实现了抽象策略定义的接口，提供具体的算法实现。</p><p> 环境类：持有一个策略类的引用，最终给客户端调用。</p><p> 客户类：客户可以指定环境类使用哪些策略。</p></li><li><p>关键代码<br> 环境类持有抽象策略，实现的时候设置上具体策略。</p></li><li><p>何时使用</p></li><li><p>优点缺点<br> 多重条件语句不易维护，而使用策略模式可以避免使用多重条件语句。</p><p> 策略模式提供了一系列的可供重用的算法族，恰当使用继承可以把算法族的公共代码转移到父类里面，从而避免重复的代码。</p><p> 策略模式可以提供相同行为的不同实现，客户可以根据不同时间或空间要求选择不同的。</p><p> 策略模式提供了对开闭原则的完美支持，可以在不修改原代码的情况下，灵活增加新算法。</p><p> 策略模式把算法的使用放到环境类中，而算法的实现移到具体策略类中，实现了二者的分离。</p><p> 策略模式造成很多的策略类。</p><p> 客户端必须理解所有策略算法的区别，以便适时选择恰当的算法类。</p></li><li><p>注意事项<br> 多用组合/聚合，少用继承；用行为类组合，而不是行为的继承。更有弹性。</p></li><li><p>应用场景</p></li><li><p>模式扩展</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>编写鸭子项目，要求如下：</p><ol><li>有各种鸭子，比如野鸭、北京鸭、玩具鸭等。</li><li>鸭子有各种行为如叫、飞行、游戏等。</li><li>显示鸭子的信息。</li></ol><p>1、使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 野鸭</span></span><br><span class="line">        Duck wildDuck = <span class="keyword">new</span> WildDuck();</span><br><span class="line">        wildDuck.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 玩具鸭</span></span><br><span class="line">        Duck toyDuck = <span class="keyword">new</span> ToyDuckDuck();</span><br><span class="line">        toyDuck.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义鸭子</span></span><br><span class="line">        Duck personalDuck = <span class="keyword">new</span> Duck(<span class="string">"烤鸭仔"</span>, <span class="keyword">new</span> NoFlyBehavior(), <span class="keyword">new</span> GuoGuoQuackBehavior());</span><br><span class="line">        personalDuck.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">野鸭子 飞的很好 嘎嘎叫</span><br><span class="line">玩具鸭 不会飞的 嘎嘎叫</span><br><span class="line">烤鸭仔 不会飞的 蝈蝈叫</span><br></pre></td></tr></table></figure></p><p>2、环境类，持有策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象鸭子，有名字，有飞行技巧，叫声等属性。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 策略接口-飞行</span></span><br><span class="line">    <span class="keyword">private</span> FlyBehavior flyBehavior;</span><br><span class="line">    <span class="comment">// 策略接口-叫声</span></span><br><span class="line">    <span class="keyword">private</span> QuackBehavior quackBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck</span><span class="params">(String name, FlyBehavior flyBehavior, QuackBehavior quackBehavior)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.flyBehavior = flyBehavior;</span><br><span class="line">        <span class="keyword">this</span>.quackBehavior = quackBehavior;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" "</span> + flyBehavior.fly() + <span class="string">" "</span> + quackBehavior.quck());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 野鸭</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WildDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"野鸭子"</span>, <span class="keyword">new</span> GoodFlyBehavior(), <span class="keyword">new</span> GaGaQuackBehavior());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 玩具鸭</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToyDuckDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ToyDuckDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"玩具鸭"</span>, <span class="keyword">new</span> NoFlyBehavior(), <span class="keyword">new</span> GaGaQuackBehavior());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、抽象策略和具体策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象策略-飞行技巧</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoFlyBehavior</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"不会飞的"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadFlyBehavior</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"勉强能飞"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodFlyBehavior</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"飞的很好"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象策略-叫声</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">quck</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="JDK-中的策略模式"><a href="#JDK-中的策略模式" class="headerlink" title="JDK 中的策略模式"></a>JDK 中的策略模式</h2><p>JDK 中的 <code>Arrays</code> 的 <code>Comparator</code> 使用了策略模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户类，给环境类指定一个策略。</span></span><br><span class="line">Arrays.sort(<span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, intCompartor);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Comparator是抽象策略，intCompartor是具体策略。</span></span><br><span class="line">Comparator&lt;Integer&gt; intCompartor = <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="comment">// 匿名内部类，具体策略</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1 &gt; o2 ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a, Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">        sort(a);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (LegacyMergeSort.userRequested)</span><br><span class="line">            legacyMergeSort(a, c);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            TimSort.sort(a, <span class="number">0</span>, a.length, c, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-中的策略模式"><a href="#Spring-中的策略模式" class="headerlink" title="Spring 中的策略模式"></a>Spring 中的策略模式</h2>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 行为型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模版模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E7%89%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E7%89%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 行为型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>访问者模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 行为型模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MVC 模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/MVC%20%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/MVC%20%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> J2EE模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>业务代表模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/%E4%B8%9A%E5%8A%A1%E4%BB%A3%E8%A1%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/%E4%B8%9A%E5%8A%A1%E4%BB%A3%E8%A1%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> J2EE模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>组合实体模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E5%AE%9E%E4%BD%93%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E5%AE%9E%E4%BD%93%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> J2EE模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据访问对象模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> J2EE模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端控制器模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/%E5%89%8D%E7%AB%AF%E6%8E%A7%E5%88%B6%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/%E5%89%8D%E7%AB%AF%E6%8E%A7%E5%88%B6%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> J2EE模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>拦截过滤器模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/%E6%8B%A6%E6%88%AA%E8%BF%87%E6%BB%A4%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/%E6%8B%A6%E6%88%AA%E8%BF%87%E6%BB%A4%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> J2EE模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>服务定位器模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/%E6%9C%8D%E5%8A%A1%E5%AE%9A%E4%BD%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/%E6%9C%8D%E5%8A%A1%E5%AE%9A%E4%BD%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> J2EE模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>传输对象模式</title>
      <link href="/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/%E4%BC%A0%E8%BE%93%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/J2EE%20%E6%A8%A1%E5%BC%8F/%E4%BC%A0%E8%BE%93%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> J2EE模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>几种XML解析器对比</title>
      <link href="/2020/08/17/%E5%85%B6%E5%AE%83/%E5%87%A0%E7%A7%8DXML%E8%A7%A3%E6%9E%90%E5%99%A8%E5%AF%B9%E6%AF%94/"/>
      <url>/2020/08/17/%E5%85%B6%E5%AE%83/%E5%87%A0%E7%A7%8DXML%E8%A7%A3%E6%9E%90%E5%99%A8%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>DOM 是用与平台和语言无关的方式表示 XML 文档的官方 W3C 标准。DOM 是以层次结构组织的节点或信息片断的集合。这个层次结构允许开发人员在树中寻找特定信息。分析该结构通常需要加载整个文档和构造层次结构，然后才能做任何工作。由于它是基于信息层次的，因而 DOM 被认为是基于树或基于对象的。DOM 以及广义的基于树的处理具有几个优点。首先，由于树在内存中是持久的，因此可以修改它以便应用程序能对数据和结构作出更改。它还可以在任何时候在树中上下导航，而不是像 SAX 那样是一次性的处理。DOM 使用起来也要简单得多。 </p><h4 id="SAX"><a href="#SAX" class="headerlink" title="SAX"></a>SAX</h4><p>SAX 处理的优点非常类似于流媒体的优点。分析能够立即开始，而不是等待所有的数据被处理。而且，由于应用程序只是在读取数据时检查数据，因此不需要将数据存储在内存中。这对于大型文档来说是个巨大的优点。事实上，应用程序甚至不必解析整个文档；它可以在某个条件得到满足时停止解析。一般来说，SAX 还比它的替代者 DOM 快许多。 </p><h4 id="JDOM"><a href="#JDOM" class="headerlink" title="JDOM"></a>JDOM</h4><p>JDOM 的目的是成为 Java 特定文档模型，它简化与 XML 的交互并且比使用 DOM 实现更快。由于是第一个 Java 特定模型，JDOM 一直得到大力推广和促进。正在考虑通过“Java 规范请求 JSR-102 ”将它最终用作“ Java 标准扩展”。从 2000年 初就已经开始了 JDOM 开发。 </p><p>JDOM 与 DOM 主要有两方面不同。首先，JDOM 仅使用具体类而不使用接口。这在某些方面简化了 API，但是也限制了灵活性。第二，API 大量使用了 <code>Collections</code> 类，简化了那些已经熟悉这些类的 Java 开发者的使用。 </p><p>JDOM 文档声明其目的是“使用 20%（或更少）的精力解决 80%（或更多）Java/XML 问题”（根据学习曲线假定为 20%）。JDOM 对于大多数 Java/XML 应用程序来说当然是有用的，并且大多数开发者发现 API 比 DOM 容易理解得多。JDOM 还包括对程序行为的相当广泛检查以防止用户做任何在 XML 中无意义的事。然而，它仍需要您充分理解 XML 以便做一些超出基本的工作（或者甚至理解某些情况下的错误）。这也许是比学习 DOM 或 JDOM 接口都更有意义的工作。 </p><p>JDOM 自身不包含解析器。它通常使用 SAX2 解析器来解析和验证输入 XML 文档（尽管它还可以将以前构造的 DOM 表示作为输入）。它包含一些转换器以将 JDOM 表示输出成 SAX2 事件流、DOM 模型或 XML 文本文档。JDOM 是在 Apache 许可证变体下发布的开放源码。 </p><h4 id="DOM4J"><a href="#DOM4J" class="headerlink" title="DOM4J"></a>DOM4J</h4><p>虽然 DOM4J 代表了完全独立的开发结果，但最初，它是 JDOM 的一种智能分支。它合并了许多超出基本 XML 文档表示的功能，包括集成的 XPath 支持、XML Schema 支持以及用于大文档或流化文档的基于事件的处理。它还提供了构建文档表示的选项，它通过 DOM4J API 和标准 DOM 接口具有并行访问功能。从 2000 下半年开始，它就一直处于开发之中。 </p><p>为支持所有这些功能，DOM4J 使用接口和抽象基本类方法。DOM4J 大量使用了 API 中的 <code>Collections</code> 类，但是在许多情况下，它还提供一些替代方法以允许更好的性能或更直接的编码方法。直接好处是，虽然 DOM4J 付出了更复杂的 API 的代价，但是它提供了比 JDOM 大得多的灵活性。 </p><p>在添加灵活性、XPath 集成和对大文档处理的目标时，DOM4J 的目标与 JDOM 是一样的：针对 Java 开发者的易用性和直观操作。它还致力于成为比 JDOM 更完整的解决方案，实现在本质上处理所有 Java/XML 问题的目标。在完成该目标时，它比 JDOM 更少强调防止不正确的应用程序行为。 </p><p>DOM4J 是一个非常非常优秀的 Java XML API，具有性能优异、功能强大和极端易用使用的特点，同时它也是一个开放源代码的软件。如今你可以看到越来越多的 Java 软件都在使用 DOM4J 来读写 XML，特别值得一提的是连 Sun 的 JAXM 也在用 DOM4J。</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>DOM 是 Java 自带的 XML 解析器，无需引入。</p><p>引入 SAX 依赖，大小约 30KB：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>sax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sax<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入 JDOM 依赖，大小约 160KB：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jdom<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jdom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入 dom4j 依赖，大小约 946KB：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h4 id="生成-XML"><a href="#生成-XML" class="headerlink" title="生成 XML"></a>生成 XML</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">product</span> <span class="attr">name</span>=<span class="string">"QQ"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">account</span> <span class="attr">id</span>=<span class="string">"123456789"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nickname</span>&gt;</span>qq-account-1<span class="tag">&lt;/<span class="name">nickname</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>qwe123qwe123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>56<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">account</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">account</span> <span class="attr">id</span>=<span class="string">"987654321"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nickname</span>&gt;</span>qq-account-2<span class="tag">&lt;/<span class="name">nickname</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>ios9ios9ios9<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>12<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">account</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">product</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">product</span> <span class="attr">name</span>=<span class="string">"Netease"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">account</span> <span class="attr">id</span>=<span class="string">"tom"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>pwdOfTom<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">capacity</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">capacity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">account</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">account</span> <span class="attr">name</span>=<span class="string">"Jim"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>pwdOfJim<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">capacity</span>&gt;</span>2560<span class="tag">&lt;/<span class="name">capacity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">account</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">product</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们分别使用 4 种解析器对上面 XML 文本内容进行生成，查看它们之间的效率。</p><p>这是 DOM 的生成代码，较为复杂：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建立DocumentBuilderFactor，用于获得DocumentBuilder对象：</span></span><br><span class="line">DocumentBuilderFactory bbf = DocumentBuilderFactory.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取构建对象</span></span><br><span class="line">DocumentBuilder builder = bbf.newDocumentBuilder();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析路径得到文档对象</span></span><br><span class="line">Document doc = builder.parse(<span class="keyword">new</span> File(filePath));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取根元素</span></span><br><span class="line">Element resources = doc.getDocumentElement();</span><br><span class="line"></span><br><span class="line">Element product1 = doc.createElement(<span class="string">"product"</span>);</span><br><span class="line">product1.setAttribute(<span class="string">"name"</span>, <span class="string">"QQ"</span>);</span><br><span class="line">resources.appendChild(product1);</span><br><span class="line"></span><br><span class="line">Element account1 = doc.createElement(<span class="string">"account"</span>);</span><br><span class="line">account1.setAttribute(<span class="string">"id"</span>, <span class="string">"123456789"</span>);</span><br><span class="line">product1.appendChild(account1);</span><br><span class="line"></span><br><span class="line">Element nickname1 = doc.createElement(<span class="string">"nickname"</span>);</span><br><span class="line">nickname1.setTextContent(<span class="string">"qq-account-1"</span>);</span><br><span class="line">Element password1 = doc.createElement(<span class="string">"password"</span>);</span><br><span class="line">password1.setTextContent(<span class="string">"qwe123qwe123"</span>);</span><br><span class="line">Element level1 = doc.createElement(<span class="string">"level"</span>);</span><br><span class="line">level1.setTextContent(<span class="string">"56"</span>);</span><br><span class="line">account1.appendChild(nickname1);</span><br><span class="line">account1.appendChild(password1);</span><br><span class="line">account1.appendChild(level1);</span><br><span class="line"></span><br><span class="line">Element account2 = doc.createElement(<span class="string">"account"</span>);</span><br><span class="line">account2.setAttribute(<span class="string">"id"</span>, <span class="string">"123456789"</span>);</span><br><span class="line">product1.appendChild(account2);</span><br><span class="line"></span><br><span class="line">Element nickname2 = doc.createElement(<span class="string">"nickname"</span>);</span><br><span class="line">nickname2.setTextContent(<span class="string">"qq-account-1"</span>);</span><br><span class="line">Element password2 = doc.createElement(<span class="string">"password"</span>);</span><br><span class="line">password2.setTextContent(<span class="string">"qwe123qwe123"</span>);</span><br><span class="line">Element level2 = doc.createElement(<span class="string">"level"</span>);</span><br><span class="line">level2.setTextContent(<span class="string">"56"</span>);</span><br><span class="line">account2.appendChild(nickname2);</span><br><span class="line">account2.appendChild(password2);</span><br><span class="line">account2.appendChild(level2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Element product2 = doc.createElement(<span class="string">"product"</span>);</span><br><span class="line">product2.setAttribute(<span class="string">"name"</span>, <span class="string">"Netease"</span>);</span><br><span class="line">resources.appendChild(product2);</span><br><span class="line"></span><br><span class="line">Element account3 = doc.createElement(<span class="string">"account"</span>);</span><br><span class="line">account3.setAttribute(<span class="string">"id"</span>, <span class="string">"tom"</span>);</span><br><span class="line">product2.appendChild(account3);</span><br><span class="line"></span><br><span class="line">Element password3 = doc.createElement(<span class="string">"password"</span>);</span><br><span class="line">password3.setTextContent(<span class="string">"pwdOfTom"</span>);</span><br><span class="line">Element capacity3 = doc.createElement(<span class="string">"capacity"</span>);</span><br><span class="line">capacity3.setTextContent(<span class="string">"1024"</span>);</span><br><span class="line">account3.appendChild(password3);</span><br><span class="line">account3.appendChild(capacity3);</span><br><span class="line"></span><br><span class="line">Element account4 = doc.createElement(<span class="string">"account"</span>);</span><br><span class="line">account4.setAttribute(<span class="string">"id"</span>, <span class="string">"tom"</span>);</span><br><span class="line">product2.appendChild(account4);</span><br><span class="line"></span><br><span class="line">Element password4 = doc.createElement(<span class="string">"password"</span>);</span><br><span class="line">password4.setTextContent(<span class="string">"pwdOfTom"</span>);</span><br><span class="line">Element capacity4 = doc.createElement(<span class="string">"capacity"</span>);</span><br><span class="line">capacity4.setTextContent(<span class="string">"1024"</span>);</span><br><span class="line">account4.appendChild(password4);</span><br><span class="line">account4.appendChild(capacity4);</span><br></pre></td></tr></table></figure></p><p>这是 SAX 的生成代码，也较为复杂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个SAX转换工厂</span></span><br><span class="line">SAXTransformerFactory factory = (SAXTransformerFactory) SAXTransformerFactory.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个TransformerHandler实例</span></span><br><span class="line">TransformerHandler handler = factory.newTransformerHandler();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个handler转换器</span></span><br><span class="line">Transformer transformer = handler.getTransformer();</span><br><span class="line">transformer.setOutputProperty(OutputKeys.INDENT, <span class="string">"yes"</span>);</span><br><span class="line">transformer.setOutputProperty(OutputKeys.ENCODING, <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Result实例连接到XML文件</span></span><br><span class="line">Result result = <span class="keyword">new</span> StreamResult(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(filePath)));</span><br><span class="line">handler.setResult(result);</span><br><span class="line"></span><br><span class="line">AttributesImpl attr = <span class="keyword">new</span> AttributesImpl();</span><br><span class="line">handler.startDocument();</span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"resources"</span>, attr);</span><br><span class="line">attr.clear();</span><br><span class="line"></span><br><span class="line">attr.addAttribute(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"name"</span>, <span class="string">""</span>, <span class="string">"QQ"</span>);</span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"product"</span>, attr);</span><br><span class="line">attr.clear();</span><br><span class="line"></span><br><span class="line">attr.addAttribute(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"id"</span>, <span class="string">""</span>, <span class="string">"123456789"</span>);</span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"account"</span>, attr);</span><br><span class="line">attr.clear();</span><br><span class="line"></span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"nickname"</span>, attr);</span><br><span class="line">handler.characters(<span class="string">"qq-account-1"</span>.toCharArray(), <span class="number">0</span>, <span class="string">"qq-account-1"</span>.length());</span><br><span class="line">attr.clear();</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"nickname"</span>);</span><br><span class="line"></span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"password"</span>, attr);</span><br><span class="line">handler.characters(<span class="string">"qwe123qwe123"</span>.toCharArray(), <span class="number">0</span>, <span class="string">"qwe123qwe123"</span>.length());</span><br><span class="line">attr.clear();</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"level"</span>, attr);</span><br><span class="line">handler.characters(<span class="string">"56"</span>.toCharArray(), <span class="number">0</span>, <span class="string">"56"</span>.length());</span><br><span class="line">attr.clear();</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"level"</span>);</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"account"</span>);</span><br><span class="line"></span><br><span class="line">attr.addAttribute(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"id"</span>, <span class="string">""</span>, <span class="string">"987654321"</span>);</span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"account"</span>, attr);</span><br><span class="line">attr.clear();</span><br><span class="line"></span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"nickname"</span>, attr);</span><br><span class="line">handler.characters(<span class="string">"qq-account-1"</span>.toCharArray(), <span class="number">0</span>, <span class="string">"qq-account-2"</span>.length());</span><br><span class="line">attr.clear();</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"nickname"</span>);</span><br><span class="line"></span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"password"</span>, attr);</span><br><span class="line">handler.characters(<span class="string">"qwe123qwe123"</span>.toCharArray(), <span class="number">0</span>, <span class="string">"ios9ios9ios9"</span>.length());</span><br><span class="line">attr.clear();</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"level"</span>, attr);</span><br><span class="line">handler.characters(<span class="string">"56"</span>.toCharArray(), <span class="number">0</span>, <span class="string">"12"</span>.length());</span><br><span class="line">attr.clear();</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"level"</span>);</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"account"</span>);</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"product"</span>);</span><br><span class="line"></span><br><span class="line">attr.addAttribute(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"name"</span>, <span class="string">""</span>, <span class="string">"Netease"</span>);</span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"product"</span>, attr);</span><br><span class="line">attr.clear();</span><br><span class="line"></span><br><span class="line">attr.addAttribute(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"id"</span>, <span class="string">""</span>, <span class="string">"tom"</span>);</span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"account"</span>, attr);</span><br><span class="line">attr.clear();</span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"password"</span>, attr);</span><br><span class="line">handler.characters(<span class="string">"pwdOfTom"</span>.toCharArray(), <span class="number">0</span>, <span class="string">"pwdOfTom"</span>.length());</span><br><span class="line">attr.clear();</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"password"</span>);</span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"capacity"</span>, attr);</span><br><span class="line">handler.characters(<span class="string">"1024"</span>.toCharArray(), <span class="number">0</span>, <span class="string">"1024"</span>.length());</span><br><span class="line">attr.clear();</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"capacity"</span>);</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"account"</span>);</span><br><span class="line"></span><br><span class="line">attr.addAttribute(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"id"</span>, <span class="string">""</span>, <span class="string">"Jim"</span>);</span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"account"</span>, attr);</span><br><span class="line">attr.clear();</span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"password"</span>, attr);</span><br><span class="line">handler.characters(<span class="string">"pwdOfJim"</span>.toCharArray(), <span class="number">0</span>, <span class="string">"pwdOfJim"</span>.length());</span><br><span class="line">attr.clear();</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"password"</span>);</span><br><span class="line">handler.startElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"capacity"</span>, attr);</span><br><span class="line">handler.characters(<span class="string">"2560"</span>.toCharArray(), <span class="number">0</span>, <span class="string">"2560"</span>.length());</span><br><span class="line">attr.clear();</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"capacity"</span>);</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"account"</span>);</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"product"</span>);</span><br><span class="line">handler.endElement(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"resources"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭doc对象</span></span><br><span class="line">handler.endDocument();</span><br></pre></td></tr></table></figure><p>这是 JDOM 的生成代码，较上面抽象了许多复杂的过程，看起来精简了很多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">Document document = <span class="keyword">new</span> Document();</span><br><span class="line"></span><br><span class="line">Element resources = <span class="keyword">new</span> Element(<span class="string">"resources"</span>);</span><br><span class="line">document.addContent(resources);</span><br><span class="line"></span><br><span class="line">Element product1 = <span class="keyword">new</span> Element(<span class="string">"product"</span>);</span><br><span class="line">resources.addContent(product1);</span><br><span class="line">product1.setAttribute(<span class="string">"name"</span>, <span class="string">"QQ"</span>);</span><br><span class="line"></span><br><span class="line">Element account1 = <span class="keyword">new</span> Element(<span class="string">"account"</span>);</span><br><span class="line">account1.setAttribute(<span class="string">"id"</span>, <span class="string">"123456789"</span>);</span><br><span class="line"></span><br><span class="line">Element nickname1 = <span class="keyword">new</span> Element(<span class="string">"nickname"</span>);</span><br><span class="line">nickname1.setText(<span class="string">"qq-account-1"</span>);</span><br><span class="line">Element password1 = <span class="keyword">new</span> Element(<span class="string">"password"</span>);</span><br><span class="line">password1.setText(<span class="string">"qwe123qwe123"</span>);</span><br><span class="line">Element level1 = <span class="keyword">new</span> Element(<span class="string">"level"</span>);</span><br><span class="line">level1.setText(<span class="string">"56"</span>);</span><br><span class="line">account1.addContent(nickname1);</span><br><span class="line">account1.addContent(password1);</span><br><span class="line">account1.addContent(level1);</span><br><span class="line">product1.addContent(account1);</span><br><span class="line"></span><br><span class="line">Element account2 = <span class="keyword">new</span> Element(<span class="string">"account"</span>);</span><br><span class="line">account2.setAttribute(<span class="string">"id"</span>, <span class="string">"987654321"</span>);</span><br><span class="line"></span><br><span class="line">Element nickname2 = <span class="keyword">new</span> Element(<span class="string">"nickname"</span>);</span><br><span class="line">nickname2.setText(<span class="string">"qq-account-2"</span>);</span><br><span class="line">Element password2 = <span class="keyword">new</span> Element(<span class="string">"password"</span>);</span><br><span class="line">password2.setText(<span class="string">"ios9ios9ios9"</span>);</span><br><span class="line">Element level2 = <span class="keyword">new</span> Element(<span class="string">"level"</span>);</span><br><span class="line">level2.setText(<span class="string">"12"</span>);</span><br><span class="line">account2.addContent(nickname2);</span><br><span class="line">account2.addContent(password2);</span><br><span class="line">account2.addContent(level2);</span><br><span class="line">product1.addContent(account2);</span><br><span class="line"></span><br><span class="line">Element product2 = <span class="keyword">new</span> Element(<span class="string">"product"</span>);</span><br><span class="line">product2.setAttribute(<span class="string">"name"</span>, <span class="string">"QQ"</span>);</span><br><span class="line">resources.addContent(product2);</span><br><span class="line"></span><br><span class="line">Element account3 = <span class="keyword">new</span> Element(<span class="string">"account"</span>);</span><br><span class="line">account3.setAttribute(<span class="string">"id"</span>, <span class="string">"tom"</span>);</span><br><span class="line"></span><br><span class="line">Element password3 = <span class="keyword">new</span> Element(<span class="string">"password"</span>);</span><br><span class="line">password3.setText(<span class="string">"pwdOfTom"</span>);</span><br><span class="line">Element capacity3 = <span class="keyword">new</span> Element(<span class="string">"capacity"</span>);</span><br><span class="line">capacity3.setText(<span class="string">"1024"</span>);</span><br><span class="line">account3.addContent(password3);</span><br><span class="line">account3.addContent(capacity3);</span><br><span class="line"></span><br><span class="line">Element account4 = <span class="keyword">new</span> Element(<span class="string">"account"</span>);</span><br><span class="line">account4.setAttribute(<span class="string">"id"</span>, <span class="string">"Jim"</span>);</span><br><span class="line"></span><br><span class="line">Element password4 = <span class="keyword">new</span> Element(<span class="string">"password"</span>);</span><br><span class="line">password4.setText(<span class="string">"qwe123qwe123"</span>);</span><br><span class="line">Element capacity4 = <span class="keyword">new</span> Element(<span class="string">"capacity"</span>);</span><br><span class="line">capacity4.setText(<span class="string">"1024"</span>);</span><br><span class="line">account4.addContent(password4);</span><br><span class="line">account4.addContent(capacity4);</span><br><span class="line"></span><br><span class="line">product2.addContent(account3);</span><br><span class="line">product2.addContent(account4);</span><br></pre></td></tr></table></figure><p>这是 DOM4J 的生成代码，无论是易读性还是简洁性都比上面的好很多：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Document document = DocumentHelper.createDocument();</span><br><span class="line">Element resources = document.addElement(<span class="string">"resources"</span>);</span><br><span class="line">Element product1 = resources.addElement(<span class="string">"product"</span>);</span><br><span class="line">product1.addAttribute(<span class="string">"name"</span>, <span class="string">"QQ"</span>);</span><br><span class="line">Element account1 = product1.addElement(<span class="string">"account"</span>);</span><br><span class="line">account1.addAttribute(<span class="string">"id"</span>, <span class="string">"123456789"</span>);</span><br><span class="line">account1.addElement(<span class="string">"nickname"</span>, <span class="string">"qq-account-1"</span>);</span><br><span class="line">account1.addElement(<span class="string">"password"</span>, <span class="string">"qwe123qwe123"</span>);</span><br><span class="line">account1.addElement(<span class="string">"level"</span>, <span class="string">"56"</span>);</span><br><span class="line"></span><br><span class="line">Element account2 = product1.addElement(<span class="string">"account"</span>);</span><br><span class="line">account2.addAttribute(<span class="string">"id"</span>, <span class="string">"987654321"</span>);</span><br><span class="line">account2.addElement(<span class="string">"nickname"</span>, <span class="string">"qq-account-2"</span>);</span><br><span class="line">account2.addElement(<span class="string">"password"</span>, <span class="string">"ios9ios9ios9"</span>);</span><br><span class="line">account2.addElement(<span class="string">"level"</span>, <span class="string">"12"</span>);</span><br><span class="line"></span><br><span class="line">Element product2 = resources.addElement(<span class="string">"product"</span>);</span><br><span class="line">product2.addAttribute(<span class="string">"name"</span>, <span class="string">"Netease"</span>);</span><br><span class="line">Element account3 = product2.addElement(<span class="string">"account"</span>);</span><br><span class="line">account3.addAttribute(<span class="string">"id"</span>, <span class="string">"tom"</span>);</span><br><span class="line">account3.addElement(<span class="string">"password"</span>, <span class="string">"qwe123qwe123"</span>);</span><br><span class="line">account3.addElement(<span class="string">"capacity"</span>, <span class="string">"1024"</span>);</span><br><span class="line"></span><br><span class="line">Element account4 = product2.addElement(<span class="string">"account"</span>);</span><br><span class="line">account4.addAttribute(<span class="string">"id"</span>, <span class="string">"Jim"</span>);</span><br><span class="line">account4.addElement(<span class="string">"password"</span>, <span class="string">"ios9ios9ios9"</span>);</span><br><span class="line">account4.addElement(<span class="string">"capacity"</span>, <span class="string">"2048"</span>);</span><br></pre></td></tr></table></figure><h4 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h4><p>这里对比的是不同的解析器对读取元素属性的表达能力。</p><p>DOM 代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NodeList products = resources.getElementsByTagName(<span class="string">"product"</span>);</span><br><span class="line">NodeList accounts = products.item(<span class="number">0</span>).getChildNodes();</span><br><span class="line">Node account = accounts.item(<span class="number">0</span>);</span><br><span class="line">Node id = account.getAttributes().getNamedItem(<span class="string">"id"</span>);</span><br><span class="line">id.getNodeValue();</span><br></pre></td></tr></table></figure></p><p>SAX 代码，SAX 需要实行解析逻辑才能使用，极其不友好：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Handler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 0未进入 1进入 2离开</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> product1status;</span><br><span class="line">    <span class="comment">// 0未进入 1进入 2离开</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> account1status;</span><br><span class="line">    <span class="comment">// 是否结束</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isfinish;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.startElement(uri, localName, qName, attributes);</span><br><span class="line">        <span class="keyword">if</span> (isfinish) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (qName.equals(<span class="string">"product"</span>) &amp;&amp; product1status == <span class="number">0</span>) &#123;</span><br><span class="line">            product1status = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (qName.equals(<span class="string">"account"</span>) &amp;&amp; product1status == <span class="number">1</span> &amp;&amp; account1status == <span class="number">0</span>) &#123;</span><br><span class="line">            account1status = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"------------------------------------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"id: "</span> + attributes.getValue(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"------------------------------------"</span>);</span><br><span class="line">            id = attributes.getValue(<span class="string">"id"</span>);</span><br><span class="line"></span><br><span class="line">            isfinish = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.characters(ch, start, length);</span><br><span class="line">        <span class="keyword">if</span> (isfinish) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (product1status == <span class="number">1</span> &amp;&amp; account1status == <span class="number">1</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.endElement(uri, localName, qName);</span><br><span class="line">        <span class="keyword">if</span> (isfinish) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (qName.equals(<span class="string">"product"</span>) &amp;&amp; product1status == <span class="number">1</span>) &#123;</span><br><span class="line">            product1status = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (qName.equals(<span class="string">"account"</span>) &amp;&amp; product1status == <span class="number">1</span>) &#123;</span><br><span class="line">            account1status = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">result</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"id is : "</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 得到SAX解析工厂</span></span><br><span class="line">        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 让工厂生产一个sax解析器</span></span><br><span class="line">        SAXParser newSAXParser = saxParserFactory.newSAXParser();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 传入输入流和handler，解析</span></span><br><span class="line">        Test1Handler handler = <span class="keyword">new</span> Test1Handler();</span><br><span class="line">        newSAXParser.parse(is, handler);</span><br><span class="line">        is.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 得到结果</span></span><br><span class="line">        handler.result();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JDOM 代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List products = resource.getChildren();</span><br><span class="line">List accounts = ((Element) products.get(<span class="number">0</span>)).getChildren();</span><br><span class="line">Element account = (Element) accounts.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Attribute id = account.getAttribute(<span class="string">"id"</span>);</span><br><span class="line">id.getValue();</span><br></pre></td></tr></table></figure></p><p>DOM4J 代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List products = resources.elements(<span class="string">"product"</span>);</span><br><span class="line">List accounts = ((Element) products.get(<span class="number">0</span>)).elements(<span class="string">"account"</span>);</span><br><span class="line">Element account = (Element) accounts.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Attribute id = account.attribute(<span class="string">"id"</span>);</span><br><span class="line">id.getValue();</span><br></pre></td></tr></table></figure></p><h4 id="设置属性值"><a href="#设置属性值" class="headerlink" title="设置属性值"></a>设置属性值</h4><p>这里比较不同解析器设置属性值写法。</p><p>JAX 过于复杂，排除在外。</p><p>DOM 写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NodeList products = resources.getElementsByTagName(<span class="string">"product"</span>);</span><br><span class="line">NodeList accounts = products.item(<span class="number">0</span>).getChildNodes();</span><br><span class="line">Node account = accounts.item(<span class="number">0</span>);</span><br><span class="line">Node id = account.getAttributes().getNamedItem(<span class="string">"id"</span>);</span><br><span class="line">id.setNodeValue(<span class="string">"123"</span>);</span><br></pre></td></tr></table></figure><p>JDOM 写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List products = resource.getChildren();</span><br><span class="line">List accounts = ((Element) products.get(<span class="number">0</span>)).getChildren();</span><br><span class="line">Element account = (Element) accounts.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Attribute id = account.getAttribute(<span class="string">"id"</span>);</span><br><span class="line">id.setValue(<span class="string">"123"</span>);</span><br></pre></td></tr></table></figure><p>DOM4J 写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List products = resources.elements(<span class="string">"product"</span>);</span><br><span class="line">List accounts = ((Element) products.get(<span class="number">0</span>)).elements(<span class="string">"account"</span>);</span><br><span class="line">Element account = (Element) accounts.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Attribute id = account.attribute(<span class="string">"id"</span>);</span><br><span class="line">id.setValue(<span class="string">"123"</span>);</span><br></pre></td></tr></table></figure><p>可以看出，DOM、JDOM、DOM4J 的差别不大，DOM4J 相对而言更符合人的逻辑。</p><h4 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h4><p>这里测试的不同的解析器如何删除元素。</p><p>同样的，JAX 排除掉。</p><p>DOM 写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NodeList products = resources.getElementsByTagName(<span class="string">"product"</span>);</span><br><span class="line">NodeList accounts = products.item(<span class="number">0</span>).getChildNodes();</span><br><span class="line">Node account = accounts.item(<span class="number">0</span>);</span><br><span class="line">account.getAttributes().removeNamedItem(<span class="string">"id"</span>);</span><br></pre></td></tr></table></figure><p>JDOM 写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List products = resource.getChildren();</span><br><span class="line">List accounts = ((Element) products.get(<span class="number">0</span>)).getChildren();</span><br><span class="line">Element account = (Element) accounts.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">account.removeAttribute(<span class="string">"id"</span>);</span><br></pre></td></tr></table></figure><p>DOM4J 写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List products = resources.elements(<span class="string">"product"</span>);</span><br><span class="line">List accounts = ((Element) products.get(<span class="number">0</span>)).elements(<span class="string">"account"</span>);</span><br><span class="line">Element account = (Element) accounts.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Attribute id = account.attribute(<span class="string">"id"</span>);</span><br><span class="line">account.remove(id);</span><br></pre></td></tr></table></figure><h4 id="获取节点值"><a href="#获取节点值" class="headerlink" title="获取节点值"></a>获取节点值</h4><p>这里测试不同解析器如何获取元素节点的值。</p><p>同样的，JAX 排除在外。</p><p>DOM 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NodeList products = resources.getElementsByTagName(<span class="string">"product"</span>);</span><br><span class="line">NodeList accounts = products.item(<span class="number">0</span>).getChildNodes();</span><br><span class="line">Node account = accounts.item(<span class="number">0</span>);</span><br><span class="line">Node nickname = account.getChildNodes().item(<span class="number">0</span>);</span><br><span class="line">nickname.getTextContent();</span><br></pre></td></tr></table></figure><p>JDOM 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List products = resource.getChildren();</span><br><span class="line">List accounts = ((Element) products.get(<span class="number">0</span>)).getChildren();</span><br><span class="line">Element account = (Element) accounts.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Element nickname = account.getChild(<span class="string">"nickname"</span>);</span><br><span class="line">nickname.getText();</span><br></pre></td></tr></table></figure><p>DOM4J 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List products = resources.elements(<span class="string">"product"</span>);</span><br><span class="line">List accounts = ((Element) products.get(<span class="number">0</span>)).elements(<span class="string">"account"</span>);</span><br><span class="line"></span><br><span class="line">Element account = (Element) accounts.get(<span class="number">0</span>);</span><br><span class="line">Element nickname = account.element(<span class="string">"nickname"</span>);</span><br><span class="line">nickname.getText();</span><br></pre></td></tr></table></figure><h4 id="设置节点值"><a href="#设置节点值" class="headerlink" title="设置节点值"></a>设置节点值</h4><p>这里测试的是不同解析器如果设置元素节点的值。</p><p>JAX 排除在外。</p><p>DOM 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NodeList products = resources.getElementsByTagName(<span class="string">"product"</span>);</span><br><span class="line">NodeList accounts = products.item(<span class="number">0</span>).getChildNodes();</span><br><span class="line">Node account = accounts.item(<span class="number">0</span>);</span><br><span class="line">Node nickname = account.getChildNodes().item(<span class="number">0</span>);</span><br><span class="line">nickname.setTextContent(<span class="string">"123"</span>);</span><br></pre></td></tr></table></figure><p>JDOM 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List products = resource.getChildren();</span><br><span class="line">List accounts = ((Element) products.get(<span class="number">0</span>)).getChildren();</span><br><span class="line">Element account = (Element) accounts.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Element nickname = account.getChild(<span class="string">"nickname"</span>);</span><br><span class="line">nickname.setText(<span class="string">"123"</span>);</span><br></pre></td></tr></table></figure><p>DOM4J 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List products = resources.elements(<span class="string">"product"</span>);</span><br><span class="line">List accounts = ((Element) products.get(<span class="number">0</span>)).elements(<span class="string">"account"</span>);</span><br><span class="line">Element account = (Element) accounts.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Element nickname = account.element(<span class="string">"nickname"</span>);</span><br><span class="line">nickname.setText(<span class="string">"123"</span>);</span><br></pre></td></tr></table></figure><h4 id="删除节点值"><a href="#删除节点值" class="headerlink" title="删除节点值"></a>删除节点值</h4><p>这里测试不同解析器如何删除元素节点的值。</p><p>同样的，JAX 排除在外。</p><p>DOM 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NodeList products = resources.getElementsByTagName(<span class="string">"product"</span>);</span><br><span class="line">NodeList accounts = products.item(<span class="number">0</span>).getChildNodes();</span><br><span class="line">Node account = accounts.item(<span class="number">0</span>);</span><br><span class="line">Node nickname = account.getChildNodes().item(<span class="number">0</span>);</span><br><span class="line">account.removeChild(nickname);</span><br></pre></td></tr></table></figure><p>JDOM 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List products = resource.getChildren();</span><br><span class="line">List accounts = ((Element) products.get(<span class="number">0</span>)).getChildren();</span><br><span class="line">Element account = (Element) accounts.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">account.removeChild(<span class="string">"nickname"</span>);</span><br></pre></td></tr></table></figure><p>DOM4J 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List products = resources.elements(<span class="string">"product"</span>);</span><br><span class="line">List accounts = ((Element) products.get(<span class="number">0</span>)).elements(<span class="string">"account"</span>);</span><br><span class="line">Element account = (Element) accounts.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Element nickname = account.element(<span class="string">"nickname"</span>);</span><br><span class="line">account.remove(nickname);</span><br></pre></td></tr></table></figure><h2 id="综合对比"><a href="#综合对比" class="headerlink" title="综合对比"></a>综合对比</h2><div class="table-container"><table><thead><tr><th style="text-align:left">解析器</th><th>体积</th><th>开发效率</th><th>创建性能</th><th>查询性能</th><th>修改性能</th></tr></thead><tbody><tr><td style="text-align:left">SAX</td><td>30KB</td><td>极低</td><td>6238/s</td><td>4526/s</td><td>-</td></tr><tr><td style="text-align:left">DOM</td><td>0KB</td><td>较低</td><td>2928/s</td><td>8928571/s</td><td>6578947/s</td></tr><tr><td style="text-align:left">JDOM</td><td>160KB</td><td>低</td><td>491642/s</td><td>17241379/s</td><td>8064516/s</td></tr><tr><td style="text-align:left">DOM4J</td><td>946KB</td><td>中等</td><td>674308/s</td><td>6896551/s</td><td>6060606/s</td></tr></tbody></table></div><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ol><li>DOM4J 性能最好，连 Sun 的 JAXM 也在用 DOM4J。目前许多开源项目中大量采用 DOM4J，例如大名鼎鼎的 Hibernate 也用 DOM4J 来读取 XML 配置文件。如果不考虑可移植性，那就采用DOM4J。</li><li>JDOM 和 DOM 在性能测试时表现不佳，在测试 10M 文档时内存溢出。在小文档情况下还值得考虑使用 DOM 和 JDOM。虽然 JDOM 的开发者已经说明他们期望在正式发行版前专注性能问题，但是从性能观点来看，它确实没有值得推荐之处。另外，DOM 仍是一个非常好的选择。DOM 实现广泛应用于多种编程语言。它还是许多其它与XML相关的标准的基础，因为它正式获得 W3C 推荐（与基于非标准的 Java 模型相对），所以在某些类型的项目中可能也需要它（如在 JavaScript 中使用 DOM）。 </li><li>SAX 表现较好，这要依赖于它特定的解析方式－事件驱动。一个 SAX 检测即将到来的XML流，但并没有载入到内存（当然当 XML 流被读入时，会有部分文档暂时隐藏在内存中）。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>被挖矿</title>
      <link href="/2020/07/23/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%95%99%E7%A8%8B/%E8%A2%AB%E6%8C%96%E7%9F%BF/"/>
      <url>/2020/07/23/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%95%99%E7%A8%8B/%E8%A2%AB%E6%8C%96%E7%9F%BF/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/starry-skys/p/13332666.html">https://www.cnblogs.com/starry-skys/p/13332666.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信开发</title>
      <link href="/2020/07/15/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
      <url>/2020/07/15/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h2 id="分享到微信"><a href="#分享到微信" class="headerlink" title="分享到微信"></a>分享到微信</h2><h4 id="APP-分享"><a href="#APP-分享" class="headerlink" title="APP 分享"></a>APP 分享</h4><h4 id="小程序分享"><a href="#小程序分享" class="headerlink" title="小程序分享"></a>小程序分享</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取小程序码</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> page 路径，如 pages/index/index</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> scene 参数 userId=123</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">miniQr</span><span class="params">(String page, String scene)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 发送请求参数 参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html#HTTPS%20%E8%B0%83%E7%94%A8</span></span><br><span class="line">        JSONObject params = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        <span class="comment">// params.put("page", page);</span></span><br><span class="line">        <span class="comment">// 最大32个可见字符，只支持数字，大小写英文以及部分特殊字符：!#$&amp;'()*+,/:;=?@-._~，其它字符请自行编码为合法字符（因不支持%，中文无法使用 urlencode 处理，请使用其他编码方式）</span></span><br><span class="line">        params.put(<span class="string">"scene"</span>, scene);</span><br><span class="line">        params.put(<span class="string">"width"</span>, <span class="number">60</span>);</span><br><span class="line">        params.put(<span class="string">"auto_color"</span>, <span class="keyword">false</span>);</span><br><span class="line">        params.put(<span class="string">"line_color"</span>, <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">        params.put(<span class="string">"is_hyaline"</span>, <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line"></span><br><span class="line">        String accessToken = accessToken(weixinMiniProperties.getAppId(), weixinMiniProperties.getAppSecret());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取小程序码，适用于需要的码数量极多的业务场景。通过该接口生成的小程序码，永久有效，数量暂无限制。 更多用法详见 获取二维码。</span></span><br><span class="line">        String requestURL = <span class="string">"https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token="</span> + accessToken;</span><br><span class="line">        <span class="comment">// 正常返回：返回的图片 Buffer 异常返回：&#123;"errcode":41001,"errmsg":"access_token missing hints: [JeKcwwPfe-F5RY5!]"&#125;</span></span><br><span class="line">        Content content = Request.Post(requestURL).bodyString(params.toJSONString(), ContentType.APPLICATION_JSON).execute().returnContent();</span><br><span class="line">        <span class="keyword">if</span> (content.toString().startsWith(<span class="string">"&#123;\"errcode\""</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(<span class="string">"生成带参小程序二维码异常："</span> + JSONObject.parseObject(content.toString()).get(<span class="string">"errmsg"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> content.asStream();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(BaseResultEnum.INTERFACE_OUTER_INVOKE_ERROR, <span class="string">"生成带参小程序二维码异常："</span> + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p>微信退款提示签名错误<br>退款原因未填写。</p></li><li><p>小程序二维码生成错误码：invalid page hint<br>接口所传page页面不存在，或者小程序没有发布，记住需要发布才能用。</p></li></ol><p>如果在本地测试，只能添加编译模式模拟二维码功能。</p><p>调用了小程序生成二维码的接口却报41030: invalid page hint: [tFIkAa07161511]，查了一下原因发现了微信的限制：<br>1.传入page,生成指定页面的二维码必须要先把代码上传，提交审核并发布，然后在发布好的小程序里生成二维码的接口才能调用成功，(体验版也不行，必须是发布上去的小程序，域名不能带端口号，真的好坑……)<br>2.传入的页面路径,pages前面不能加”/“<br>例如：<br>正确的写法：”pages/login/loign”<br>错误的写法：”/pages/login/login”<br>3.小程序的参数不能超过32个字符</p>]]></content>
      
      
      <categories>
          
          <category> 业务开发 </category>
          
          <category> 商城系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题</title>
      <link href="/2020/07/14/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2020/07/14/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot-解决"><a href="#SpringBoot-解决" class="headerlink" title="SpringBoot 解决"></a>SpringBoot 解决</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebApplicationConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">"/**"</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">"*"</span>)</span><br><span class="line">                .allowedMethods(<span class="string">"*"</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx-解决"><a href="#Nginx-解决" class="headerlink" title="Nginx 解决"></a>Nginx 解决</h2><p>在Nginx.conf 配上以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /api &#123;</span><br><span class="line">    if ($request_method = &apos;OPTIONS&apos;) &#123;</span><br><span class="line">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</span><br><span class="line">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;*&apos;;</span><br><span class="line">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;*&apos;;</span><br><span class="line">        add_header &apos;Access-Control-Expose-Headers&apos; &apos;*&apos;;</span><br><span class="line">        return 204;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    proxy_pass http://localhost:8085;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">    proxy_set_header X-nginx-real-ip $remote_addr;</span><br><span class="line">    proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;</span><br><span class="line">    client_max_body_size 1024m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>路径不对，比如少了一个 <code>/</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at &apos;https://xxx&apos; from origin &apos;null&apos; has been blocked by CORS policy: No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource.</span><br></pre></td></tr></table></figure><ol><li>文件上传时，小文件成功，大文件跨域</li></ol><p>这种情况可能是nginx限制了文件大小，修改配置即可。</p>]]></content>
      
      
      <categories>
          
          <category> 业务汇总 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>限流</title>
      <link href="/2020/07/10/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%99%90%E6%B5%81/"/>
      <url>/2020/07/10/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%99%90%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<ol><li>接口限流</li><li>重复下订单，误触碰。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>思路：</p><ol><li>设置同一IP，一个时间段内允许访问的最大次数</li><li>记录所有IP单位时间内访问的次数</li><li>将所有被限制IP存到存储器</li><li>通过IP过滤访问请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户连续访问最高阀值，超过该值则认定为恶意操作的IP，进行限制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LIMIT_NUMBER = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户访问最小安全时间，在该时间内如果访问次数大于阀值，则记录为恶意IP，否则视为正常访问（单位：ms）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_SAFE_TIME = <span class="number">500</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认限制时间（单位：ms）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> LIMITED_TIME_MILLIS = <span class="number">10000</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * IP存储器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Long[]&gt; visitIP = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 限制IP存储器：存储被限制的IP信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Long&gt; limitIP = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">limiIp</span><span class="params">(HttpServletRequest request, BaseController baseController)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取用户IP</span></span><br><span class="line">    String ip = baseController.getRemoteIP();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除过期的IP</span></span><br><span class="line">    removeExpireIP();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否是被限制的IP，如果是则跳到异常页面</span></span><br><span class="line">    <span class="keyword">if</span> (isLimitedIP(ip)) &#123;</span><br><span class="line">        <span class="keyword">long</span> limitedTime = limitIP.get(ip) - System.currentTimeMillis();</span><br><span class="line">        System.err.println(<span class="string">"ip访问过于频繁："</span> + ip);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化或者重置此IP</span></span><br><span class="line">    updateIP(ip);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.err.println(<span class="string">"ip: "</span> + ip);</span><br><span class="line">    System.err.println(<span class="string">"ipMap: "</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key : visitIP.keySet()) &#123;</span><br><span class="line">        System.err.println(<span class="string">"\t"</span> + key + <span class="string">" count: "</span> + visitIP.get(key)[<span class="number">0</span>] + <span class="string">" time: "</span> + visitIP.get(key)[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.err.println(<span class="string">"limitedIpMap: "</span> + limitIP);</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断IP访问是否过于频繁</span></span><br><span class="line">    <span class="keyword">if</span> (visitIP.containsKey(ip)) &#123;</span><br><span class="line">        Long[] ipInfo = visitIP.get(ip);</span><br><span class="line">        System.out.println(<span class="string">"当前第["</span> + (ipInfo[<span class="number">0</span>]) + <span class="string">"]次访问"</span>);</span><br><span class="line">        <span class="keyword">if</span> (ipInfo[<span class="number">0</span>] &gt; LIMIT_NUMBER) &#123;</span><br><span class="line">            System.err.println(<span class="string">"ip访问过于频繁："</span> + ip);</span><br><span class="line">            limitIP.put(ip, System.currentTimeMillis() + LIMITED_TIME_MILLIS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化或者更新此IP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateIP</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Long[] ipInfo = visitIP.computeIfAbsent(ip, k -&gt; <span class="keyword">new</span> Long[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">if</span> (ipInfo[<span class="number">0</span>] == <span class="keyword">null</span>)</span><br><span class="line">        ipInfo[<span class="number">0</span>] = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问次数</span></span><br><span class="line">    ipInfo[<span class="number">0</span>] += <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 访问时间</span></span><br><span class="line">    ipInfo[<span class="number">1</span>] = System.currentTimeMillis();</span><br><span class="line">    visitIP.put(ip, ipInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否是被限制的IP</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true : 被限制 | false : 正常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLimitedIP</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ip == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> limitIP.containsKey(ip);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 剔除已经到期的IP</span></span><br><span class="line"><span class="comment"> * 2. 剔除已经到期的限制IP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeExpireIP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> currentTimeMillis = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"currentTimeMillis: "</span> + currentTimeMillis);</span><br><span class="line">    <span class="keyword">for</span> (String key : visitIP.keySet()) &#123;</span><br><span class="line">        <span class="keyword">long</span> lastVisitTimeMillis = visitIP.get(key)[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (currentTimeMillis - lastVisitTimeMillis &gt; MIN_SAFE_TIME) &#123;</span><br><span class="line">            visitIP.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String key : limitIP.keySet()) &#123;</span><br><span class="line">        <span class="keyword">long</span> expireTimeMillis = limitIP.get(key);</span><br><span class="line">        <span class="keyword">if</span> (expireTimeMillis &lt;= currentTimeMillis) &#123;</span><br><span class="line">            limitIP.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/binghe001/p/13401557.html">https://www.cnblogs.com/binghe001/p/13401557.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 业务汇总 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos 软件安装</title>
      <link href="/2020/07/09/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%95%99%E7%A8%8B/Centos%20%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
      <url>/2020/07/09/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%95%99%E7%A8%8B/Centos%20%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h2><p>包管理器是在电脑中自动安装、配制、卸载和升级软件包的工具组合，使用包管理器可以大大简化在 Linux 发行版中安装软件的过程。</p><p>在 Linux 发行版中，几乎每一个发行版都有自己的包管理器。常见的有：</p><ol><li>管理 deb 软件包的 dpkg 以及它的前端 apt（使用于Debian、Ubuntu）。</li><li>rpm 包管理器以及它的前端 dnf（使用于 Fedora）、前端 yum（使用于 Red Hat Enterprise Linux）、前端 ZYpp（使用于 openSUSE）、前端 urpmi（使用于 Mandriva Linux、Mageia）等。</li></ol><h2 id="rpm-命令"><a href="#rpm-命令" class="headerlink" title="rpm 命令"></a>rpm 命令</h2><p>rpm 可以用来安装、卸载、升级、查询、校验软件。</p><h4 id="查询软件"><a href="#查询软件" class="headerlink" title="查询软件"></a>查询软件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询软件是否安装</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># rpm -q nginx</span></span><br><span class="line">package nginx is not installed</span><br><span class="line"></span><br><span class="line">[root@vultrguest ~]<span class="comment"># rpm -q openssh</span></span><br><span class="line">openssh-8.0p1-4.el8_1.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询软件是否安装（名称模糊查询）</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># rpm -qa | grep -i openssh</span></span><br><span class="line">openssh-server-8.0p1-4.el8_1.x86_64</span><br><span class="line">openssh-clients-8.0p1-4.el8_1.x86_64</span><br><span class="line">openssh-8.0p1-4.el8_1.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有安装过的软件</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># rpm -qa</span></span><br><span class="line">authselect-compat-1.1-2.el8.x86_64</span><br><span class="line">kmod-25-16.el8.x86_64</span><br><span class="line">geolite2-country-20180605-1.el8.noarch</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出软件的安装位置</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># rpm -ql yum</span></span><br><span class="line">/etc/dnf/protected.d/yum.conf</span><br><span class="line">/etc/yum.conf</span><br><span class="line">/etc/yum/pluginconf.d</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装指定软件 i: install v: verbose 显示步骤 h: 带进度条</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># rpm -ivh your-package.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略报错，强制安装</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># rpm --force -ivh your-package.rpm</span></span><br></pre></td></tr></table></figure><h4 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载指定软件。</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># rpm -e tree  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载指定软件。如果软件有依赖关系，需要加上 --nodeps 不检查依赖强制删除</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># rpm --nodeps -e tree      </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载指定软件。（名称模糊匹配）</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># rpm -qa | grep httpd</span></span><br><span class="line">httpd-2.2.3-31.el5.centos.4</span><br><span class="line">httpd-manual-2.2.3-31.el5.centos.4</span><br></pre></td></tr></table></figure><h2 id="yum-命令"><a href="#yum-命令" class="headerlink" title="yum 命令"></a>yum 命令</h2><p>yum 全称 Yellowdog update Modifier，是 rpm 的前端程序，可解决软件包相关依赖性，可在多个库之间定位软件包。yum repo 存储了众多 rpm 包和它们的相关元数据文件。</p><h4 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h4><p>如果使用安装软件时提示 <code>No match for argument: screen</code> 找不到此软件，则可能是没有配置软件包仓库，可以通过安装 EPEL 源解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># yum install epel-release</span></span><br></pre></td></tr></table></figure><h4 id="查询软件-1"><a href="#查询软件-1" class="headerlink" title="查询软件"></a>查询软件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示安装包信息</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># yum info mysql</span></span><br><span class="line">Last metadata expiration check: 0:30:40 ago on Thu 09 Jul 2020 03:21:40 PM UTC.</span><br><span class="line">Available Packages</span><br><span class="line">Name         : mysql</span><br><span class="line">Version      : 8.0.17</span><br><span class="line">Release      : 3.module_el8.0.0+181+899d6349</span><br><span class="line">Architecture : x86_64</span><br><span class="line">Size         : 11 M</span><br><span class="line">Source       : mysql-8.0.17-3.module_el8.0.0+181+899d6349.src.rpm</span><br><span class="line">Repository   : AppStream</span><br><span class="line">Summary      : MySQL client programs and shared libraries</span><br><span class="line">URL          : http://www.mysql.com</span><br><span class="line">License      : GPLv2 with exceptions and LGPLv2 and BSD</span><br><span class="line">Description  : MySQL is a multi-user, multi-threaded SQL database server. MySQL is a</span><br><span class="line">             : client/server implementation consisting of a server daemon (mysqld)</span><br><span class="line">             : and many different client programs and libraries. The base package</span><br><span class="line">             : contains the standard MySQL client programs and generic MySQL files.</span><br><span class="line"></span><br><span class="line"><span class="comment"># （未安装）模糊查询软件 或者 yum list | grep mysql 模糊匹配名字</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># yum list mysql*</span></span><br><span class="line">Last metadata expiration check: 0:31:46 ago on Thu 09 Jul 2020 03:21:40 PM UTC.</span><br><span class="line">Available Packages</span><br><span class="line">MySQL-zrm.noarch                                                                       3.0-23.el8                                                                                              epel     </span><br><span class="line">mysql.x86_64                                                                           8.0.17-3.module_el8.0.0+181+899d6349                                                                    AppStream</span><br><span class="line">mysql-common.x86_64                                                                    8.0.17-3.module_el8.0.0+181+899d6349                                                                    AppStream</span><br><span class="line">mysql-devel.x86_64                                                                     8.0.17-3.module_el8.0.0+181+899d6349                                                                    AppStream</span><br><span class="line">mysql-errmsg.x86_64                                                                    8.0.17-3.module_el8.0.0+181+899d6349                                                                    AppStream</span><br><span class="line">mysql-libs.x86_64                                                                      8.0.17-3.module_el8.0.0+181+899d6349                                                                    AppStream</span><br><span class="line">mysql-server.x86_64                                                                    8.0.17-3.module_el8.0.0+181+899d6349                                                                    AppStream</span><br><span class="line">mysql-test.x86_64                                                                      8.0.17-3.module_el8.0.0+181+899d6349                                                                    AppStream</span><br><span class="line">mysqltuner.noarch                                                                      1.7.17-2.git.f18a3ef.el8                                                                                epel     </span><br><span class="line"></span><br><span class="line"><span class="comment"># （已安装）模糊查询软件</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># yum list installed mysql*</span></span><br><span class="line">Installed Packages</span><br><span class="line">mysql.x86_64                                                                          8.0.17-3.module_el8.0.0+181+899d6349                                                                    @AppStream</span><br><span class="line">mysql-common.x86_64                                                                   8.0.17-3.module_el8.0.0+181+899d6349                                                                    @AppStream</span><br><span class="line"></span><br><span class="line"><span class="comment"># （已安装）模糊查询软件，模糊匹配名字</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># yum list installed | grep ssh</span></span><br><span class="line">libssh.x86_64                                 0.9.0-4.el8                                    @anaconda    </span><br><span class="line">libssh-config.noarch                          0.9.0-4.el8                                    @anaconda    </span><br><span class="line">openssh.x86_64                                8.0p1-4.el8_1                                  @anaconda    </span><br><span class="line">openssh-clients.x86_64                        8.0p1-4.el8_1                                  @anaconda    </span><br><span class="line">openssh-server.x86_64                         8.0p1-4.el8_1                                  @anaconda</span><br></pre></td></tr></table></figure><h4 id="安装软件-1"><a href="#安装软件-1" class="headerlink" title="安装软件"></a>安装软件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装指定软件</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># yum install mysql</span></span><br><span class="line">Last metadata expiration check: 0:41:26 ago on Thu 09 Jul 2020 03:21:40 PM UTC.</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定软件和相关依赖</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># yum install -y mysql</span></span><br><span class="line">Last metadata expiration check: 0:41:26 ago on Thu 09 Jul 2020 03:21:40 PM UTC.</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="升级软件"><a href="#升级软件" class="headerlink" title="升级软件"></a>升级软件</h4><h4 id="卸载软件-1"><a href="#卸载软件-1" class="headerlink" title="卸载软件"></a>卸载软件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载所有相关的软件</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># yum rm mysql*</span></span><br><span class="line">Dependencies resolved.</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Removed:</span><br><span class="line">  mariadb-connector-c-config-3.0.7-1.el8.noarch                     mecab-0.996-1.module_el8.0.0+41+ca30bab6.9.x86_64                 mysql-8.0.17-3.module_el8.0.0+181+899d6349.x86_64                </span><br><span class="line">  mysql-common-8.0.17-3.module_el8.0.0+181+899d6349.x86_64          mysql-errmsg-8.0.17-3.module_el8.0.0+181+899d6349.x86_64          mysql-server-8.0.17-3.module_el8.0.0+181+899d6349.x86_64         </span><br><span class="line">  protobuf-lite-3.5.0-7.el8.x86_64                                 </span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装</title>
      <link href="/2020/07/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Docker%20%E6%95%99%E7%A8%8B/Docker%20%E5%AE%89%E8%A3%85/"/>
      <url>/2020/07/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Docker%20%E6%95%99%E7%A8%8B/Docker%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>Docker 运行需要占据 50MB 的内存。</p><h2 id="Centos-人工安装"><a href="#Centos-人工安装" class="headerlink" title="Centos 人工安装"></a>Centos 人工安装</h2><h4 id="卸载旧版本（如果安装过旧版本的话）"><a href="#卸载旧版本（如果安装过旧版本的话）" class="headerlink" title="卸载旧版本（如果安装过旧版本的话）"></a>卸载旧版本（如果安装过旧版本的话）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># sudo yum remove docker  docker-common docker-selinux docker-engine</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C</span><br><span class="line">No match <span class="keyword">for</span> argument: docker</span><br><span class="line">No match <span class="keyword">for</span> argument: docker-common</span><br><span class="line">No match <span class="keyword">for</span> argument: docker-selinux</span><br><span class="line">No match <span class="keyword">for</span> argument: docker-engine</span><br><span class="line">No packages marked <span class="keyword">for</span> removal.</span><br><span class="line">Dependencies resolved.</span><br><span class="line">Nothing to <span class="keyword">do</span>.</span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure><h4 id="安装需要的软件包"><a href="#安装需要的软件包" class="headerlink" title="安装需要的软件包"></a>安装需要的软件包</h4><p>yum-util 提供 yum-config-manage r功能，另外两个是 devicemapper 驱动依赖的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C</span><br><span class="line">Last metadata expiration check: 0:04:08 ago on Tue Oct 22 13:46:56 2019.</span><br><span class="line">Package dnf-utils-4.0.2.2-3.el8.noarch is already installed.</span><br><span class="line">Package device-mapper-persistent-data-0.7.6-1.el8.x86_64 is already installed.</span><br><span class="line">Package lvm2-8:2.03.02-6.el8.x86_64 is already installed.</span><br><span class="line">Dependencies resolved.</span><br><span class="line">Nothing to <span class="keyword">do</span>.</span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure><h4 id="设置yum源"><a href="#设置yum源" class="headerlink" title="设置yum源"></a>设置yum源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="查看仓库中所有的-Docker-版本"><a href="#查看仓库中所有的-Docker-版本" class="headerlink" title="查看仓库中所有的 Docker 版本"></a>查看仓库中所有的 Docker 版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># yum list docker-ce --showduplicates | sort -r</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C</span><br><span class="line">docker-ce.x86_64            3:19.03.4-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.3-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.2-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.9-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.8-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.7-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.6-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.5-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.4-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.3-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.2-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.3.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.2.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.0.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.2.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.3.ce-1.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.2.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">Last metadata expiration check: 0:05:32 ago on Tue Oct 22 13:46:56 2019.</span><br><span class="line">Available Packages</span><br></pre></td></tr></table></figure><h4 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># sudo yum install -y docker-ce-18.03.1.ce-1.el7.centos</span></span><br></pre></td></tr></table></figure><h4 id="启动-Docker-并加入开机启动"><a href="#启动-Docker-并加入开机启动" class="headerlink" title="启动 Docker 并加入开机启动"></a>启动 Docker 并加入开机启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># sudo systemctl start docker</span></span><br><span class="line">[root@vultr ~]<span class="comment"># sudo systemctl enable docker</span></span><br></pre></td></tr></table></figure><h4 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h4><p>有 client 和 service 两部分表示 docker 安装启动都成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># docker version</span></span><br><span class="line">Client:</span><br><span class="line"> Version:17.12.1-ce</span><br><span class="line"> API version:1.35</span><br><span class="line"> Go version:go1.9.4</span><br><span class="line"> Git commit:7390fc6</span><br><span class="line"> Built:Tue Feb 27 22:15:20 2018</span><br><span class="line"> OS/Arch:linux/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:17.12.1-ce</span><br><span class="line">  API version:1.35 (minimum version 1.12)</span><br><span class="line">  Go version:go1.9.4</span><br><span class="line">  Git commit:7390fc6</span><br><span class="line">  Built:Tue Feb 27 22:17:54 2018</span><br><span class="line">  OS/Arch:linux/amd64</span><br><span class="line">  Experimental:<span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="Centos-一键安装"><a href="#Centos-一键安装" class="headerlink" title="Centos 一键安装"></a>Centos 一键安装</h2><p>Docker 官方为了简化安装流程，提供了一套安装脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># sudo curl -fsSL get.docker.com | bash</span></span><br><span class="line"><span class="comment"># Executing docker install script, commit: 26ff363bcf3b3f5a00498ac43694bf1c7d9ce16c</span></span><br><span class="line">+ sh -c <span class="string">'yum install -y -q yum-utils'</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C.UTF-8</span><br><span class="line">+ sh -c <span class="string">'yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo'</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C.UTF-8</span><br><span class="line">Adding repo from: https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">+ <span class="string">'['</span> stable <span class="string">'!='</span> stable <span class="string">']'</span></span><br><span class="line">+ sh -c <span class="string">'yum makecache'</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C.UTF-8</span><br><span class="line">CentOS-8 - AppStream                                                                                                           16 kB/s | 4.3 kB     00:00    </span><br><span class="line">CentOS-8 - Base                                                                                                                14 kB/s | 3.9 kB     00:00    </span><br><span class="line">CentOS-8 - Extras                                                                                                             6.9 kB/s | 1.5 kB     00:00    </span><br><span class="line">Docker CE Stable - x86_64                                                                                                     8.1 kB/s | 3.5 kB     00:00    </span><br><span class="line">Metadata cache created.</span><br><span class="line">+ <span class="string">'['</span> -n <span class="string">''</span> <span class="string">']'</span></span><br><span class="line">+ sh -c <span class="string">'yum install -y -q docker-ce'</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C.UTF-8</span><br><span class="line">warning: /var/cache/dnf/docker-ce-stable-3e5647bf4960c796/packages/docker-ce-19.03.12-3.el7.x86_64.rpm: Header V4 RSA/SHA512 Signature, key ID 621e9f35: NOKEY</span><br><span class="line">Importing GPG key 0x621E9F35:</span><br><span class="line"> Userid     : <span class="string">"Docker Release (CE rpm) &lt;docker@docker.com&gt;"</span></span><br><span class="line"> Fingerprint: 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</span><br><span class="line"> From       : https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line">If you would like to use Docker as a non-root user, you should now consider</span><br><span class="line">adding your user to the <span class="string">"docker"</span> group with something like:</span><br><span class="line"></span><br><span class="line">  sudo usermod -aG docker your-user</span><br><span class="line"></span><br><span class="line">Remember that you will have to <span class="built_in">log</span> out and back <span class="keyword">in</span> <span class="keyword">for</span> this to take effect!</span><br><span class="line"></span><br><span class="line">WARNING: Adding a user to the <span class="string">"docker"</span> group will grant the ability to run</span><br><span class="line">         containers <span class="built_in">which</span> can be used to obtain root privileges on the</span><br><span class="line">         docker host.</span><br><span class="line">         Refer to https://docs.docker.com/engine/security/security/<span class="comment">#docker-daemon-attack-surface</span></span><br><span class="line">         <span class="keyword">for</span> more information.</span><br></pre></td></tr></table></figure><p>国内用户还可以使用阿里云或 daocloud 提供的脚本安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># sudo curl -sSL https://get.daocloud.io/docker | sh</span></span><br><span class="line"></span><br><span class="line">[root@vultrguest ~]<span class="comment"># sudo curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span></span><br></pre></td></tr></table></figure></p><h2 id="MacOS-安装"><a href="#MacOS-安装" class="headerlink" title="MacOS 安装"></a>MacOS 安装</h2><p>Mac 用户可以使用 brew cask 安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install docker</span><br></pre></td></tr></table></figure></p><h2 id="国内镜像加速器"><a href="#国内镜像加速器" class="headerlink" title="国内镜像加速器"></a>国内镜像加速器</h2><p>国内访问 Docker Hub 有时会遇到困难，此时可以配置镜像加速器。国内很多云服务商都提供了加速器服务。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">        <span class="string">"https://mirror.ccs.tencentyun.com"</span>, </span><br><span class="line">        <span class="string">"http://registry.docker-cn.com"</span>, </span><br><span class="line">        <span class="string">"http://docker.mirrors.ustc.edu.cn"</span>, </span><br><span class="line">        <span class="string">"http://hub-mirror.c.163.com"</span></span><br><span class="line">    ], </span><br><span class="line">    <span class="attr">"insecure-registries"</span>: [</span><br><span class="line">        <span class="string">"registry.docker-cn.com"</span>, </span><br><span class="line">        <span class="string">"docker.mirrors.ustc.edu.cn"</span></span><br><span class="line">    ], </span><br><span class="line">    <span class="attr">"debug"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="attr">"experimental"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>针对 Docker 客户端版本大于 1.10.0 的用户 您可以通过修改 daemon 配置文件 /etc/docker/daemon.json（没有时新建该文件）来使用加速器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://y0qd3iq.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;                      </span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://registry.docker-cn.com"</span>, <span class="string">"https://y0qd3iq.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是 Deocker Desktop 版本，则需要如此配置：</p><ol><li>任务栏 Docker 图标上右键 –&gt; Setting -&gt; Docker Engine；</li><li>修改配置文件 “registry-mirrors” 的值，然后应用重启就好了；</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>requires containerd.io &gt;= 1.2.2-3</strong><br>CentOS 8.0 安装 docker 报错：Problem: package docker-ce-3:19.03.8-3.el7.x86_64 requires containerd.io &gt;= 1.2.2-3。</p><p>这是因为 containerd.io 版本过低，需要更新。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum install -y wget</span></span><br><span class="line">[root@localhost ~]<span class="comment"># wget https://download.docker.com/linux/centos/7/x86_64/edge/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y  containerd.io-1.2.6-3.3.el7.x86_64.rpm</span></span><br></pre></td></tr></table></figure><p><strong>ERROR: Unsupported distribution ‘amzn’</strong><br>问题：亚马逊云安装Docker提示这个异常。。。<br>原因：软件库太老。<br>解决：<code>sudo yum update -y &amp;&amp; sudo yum install docker -y</code></p><p><strong>one of the sub-processes failed: com.docker.driver.amd64-linux -addr fd:3 -debug (pid: 3464)</strong><br>场景：黑苹果 MacOS 15.7 启动 Docker 失败。<br>原因：版本太新？<br>解决：直接从官网下载 2.3.0.3 版本即可。</p><p><strong>The data couldn’t be read because it is missing.</strong><br>场景：黑苹果 MacOS 15.7 启动 Docker 失败。<br>原因：没有开启因特尔虚拟技术。<br>解决：开启主板的英特尔虚拟化技术。<br>参考：<a href="https://blog.csdn.net/qq1784855023/article/details/106911545">https://blog.csdn.net/qq1784855023/article/details/106911545</a></p><p><strong>Environment error: FAIL: Hypervisor framework fails</strong></p><ol><li>场景：MacOS14.5 安装 Docker Desktop 启动失败。</li><li>原因：没有开启因特尔虚拟化技术。</li><li>解决：进入 BIOS -&gt; Advanced -&gt; Processor Configuration -&gt; IntelVirtualization Technolog -&gt; enable。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Docker 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 镜像</title>
      <link href="/2020/07/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Docker%20%E6%95%99%E7%A8%8B/Docker%20%E9%95%9C%E5%83%8F/"/>
      <url>/2020/07/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Docker%20%E6%95%99%E7%A8%8B/Docker%20%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Docker 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>安装 MySQL</title>
      <link href="/2020/07/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Docker%20%E6%95%99%E7%A8%8B/%E5%AE%89%E8%A3%85%20MySQL/"/>
      <url>/2020/07/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Docker%20%E6%95%99%E7%A8%8B/%E5%AE%89%E8%A3%85%20MySQL/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># docker pull mysql</span></span><br><span class="line">...</span><br><span class="line">[root@vultrguest ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mysql               latest              be0dbf01a0f3        4 weeks ago         541MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里顺便设置了密码</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># docker run --name mysql01 -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入MySQL容器</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># docker exec -it mysql01 bash</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果要挂载 MySQL 配置文件的话，我们必须在物理机上存在着该配置文件。</span></span><br><span class="line">docker run --name mysql01\</span><br><span class="line">-p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-v /data/docker/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /data/docker/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /data/docker/mysql/files:/var/lib/mysql-files \</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p>Docker 启动 MySQL 闪退<br>通常是内存不足。MySQL 最低需要 500MB 的内存启动。</p></li><li><p>MySQL8.0 启动失败<br>报错：Error on realpath() on ‘/var/lib/mysql-files’ No such file or directory。</p></li></ol><p>这是因为当指定了外部配置文件与外部存储路径时，也需要指定 /var/lib/mysql-files的外部目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql01 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /data/docker/mysql/conf/mysql/conf:/etc/mysql -v /data/docker/mysql/data/mysql/files:/var/lib/mysql-files  mysql</span><br></pre></td></tr></table></figure><ol><li>无法挂载配置文件<br>宿主机没有配置文件，然后容器也没有自动生成配置文件。</li></ol><p>根据官网说明：如果要挂载 MySQL 配置文件的话，我们必须在物理机上存在着该配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">pid-file        = /var/run/mysqld/mysqld.pid</span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock</span><br><span class="line">datadir         = /var/lib/mysql</span><br><span class="line">secure-file-priv= NULL</span><br><span class="line">symbolic-links=0</span><br><span class="line">!includedir /etc/mysql/conf.d/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Docker 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>yum 源</title>
      <link href="/2020/07/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%95%99%E7%A8%8B/yum%E6%BA%90/"/>
      <url>/2020/07/08/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%95%99%E7%A8%8B/yum%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="修改源"><a href="#修改源" class="headerlink" title="修改源"></a>修改源</h2><p>CentOS 安装后默认官方源，速度可能不是很快，这个时候就需要更改为国内的源了，这里以阿里源 为例，进行脚本展示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># by liuxg</span></span><br><span class="line"><span class="comment"># 2019.05.15</span></span><br><span class="line"><span class="comment"># aliyun_repo.sh</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得当前 CentOS 系统发行版本号</span></span><br><span class="line"><span class="comment"># 第一个 awk 后边必须换行, 目前未查到原因</span></span><br><span class="line">releasetmp=`cat /etc/redhat-release | awk <span class="string">'&#123;match($0,"release ")</span></span><br><span class="line"><span class="string"> print substr($0,RSTART+RLENGTH)&#125;'</span> | awk -F <span class="string">'.'</span> <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$releasetmp</span></span><br><span class="line">sleep 5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yum install wget -y</span><br><span class="line"><span class="comment"># 备份原文件  应该添加检测是否原来有备份文件, 有的话应该备份为别名文件  此处省略</span></span><br><span class="line">cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak </span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-<span class="variable">$releasetmp</span>.repo</span><br><span class="line"><span class="keyword">if</span> [[ $? -eq 0 ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[32m# yum 源已成功更新为 aliyun_repo #\033[0m"</span>; </span><br><span class="line">    sleep 3; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[31m# yum 源未成功更新为 aliyun_repo #\n3s 后退出...\033[0m"</span>;</span><br><span class="line">    <span class="built_in">exit</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加EPEL源</span></span><br><span class="line">wget -P /etc/yum.repos.d/ http://mirrors.aliyun.com/repo/epel-<span class="variable">$releasetmp</span>.repo </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重建缓存</span></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动更新包列表，可选择注释该行</span></span><br><span class="line">yum update -y;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 概述</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>MySQL 概述<br>MySQL 安装<br>MySQL 数据类型<br>MySQL 数据索引<br>MySQL 常用函数<br>MySQL 操作语句<br>MySQL 查询语句<br>MySQL 存储引擎<br>MySQL 锁定机制<br>MySQL 事务机制<br>MySQL 备份恢复<br>MySQL 读写分离<br>MySQL 性能调优</p><h2 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h2><p>为了建立冗余较小、结构合理的数据库，设计数据库时必须遵循一定的规则。在关系型数据库中这种规则就称为范式。范式是符合某一种设计要求的总结。要想设计一个结构合理的关系型数据库，必须满足一定的范式。</p><ol><li><p>第一范式：确保每列保持原子性<br>第一范式是最基本的范式。如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。</p><p>第一范式的合理遵循需要根据系统的实际需求来定。比如某些数据库系统中需要用到“地址”这个属性，本来直接将“地址”属性设计成一个数据库表的字段就行。但是如果系统经常会访问“地址”属性中的“城市”部分，那么就非要将“地址”这个属性重新拆分为省份、城市、详细地址等多个部分进行存储，这样在对地址中某一部分操作的时候将非常方便。这样设计才算满足了数据库的第一范式。</p></li><li><p>第二范式：确保一个表中只能保存一种数据<br>在数据库中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。</p><p>比如要设计一个订单信息表，因为订单中可能会有多种商品，所以要将订单编号和商品编号作为数据库表的联合主键。这样就产生一个问题：这个表中是以订单编号和商品编号作为联合主键。这样在该表中商品名称、单位、商品价格等信息不与该表的主键相关，而仅仅是与商品编号相关。所以在这里违反了第二范式的设计原则。而如果把这个订单信息表进行拆分，把商品信息分离到另一个表中，把订单项目表也分离到另一个表中，就非常完美了。、</p></li><li><p>第三范式：确保每列都和主键列直接相关，而不是间接相关<br>比如在设计一个订单数据表的时候，可以将客户编号作为一个外键和订单表建立相应的关系。而不可以在订单表中添加关于客户其它信息（比如姓名、所属公司等）的字段。</p></li></ol><h2 id="E-R-图"><a href="#E-R-图" class="headerlink" title="E-R 图"></a>E-R 图</h2><p>全称为实体联系模型、实体关系模型或实体联系模式图，由美籍华裔计算机科学家陈品山发明，是概念数据模型的高层描述所使用的数据模型或模式图。也就是说，我们可以通过 E-R 图，对信息世界进行建模，对现实世界进行第一层抽象。说白了就是用图的方式描述事物的属性和事物之间的关系！</p><h4 id="信息世界的基本概念"><a href="#信息世界的基本概念" class="headerlink" title="信息世界的基本概念"></a>信息世界的基本概念</h4><ol><li>实体<br>客观存在并可相互区别的事物。实体可以是具体的人、事、物，也可以是抽象的概念或联系。比如一个学生、一门课、老师与学院的工作关系等都属于实体。</li><li>属性<br>实体所具有的某一特性。一个实体可以由多个属性来刻画。这个应该很好理解，就像人的实体有名字，身高，体重，出生年月等等。这些属性组合起来表征一个人。</li><li>码<br>唯一标识实体的属性集称为码。例如学生的学号就唯一标识了学生实体，还有我们的身份证唯一标识了我们。</li><li>域<br>域是一组具有相同数据类型的值和集合。属性的取值范围来自某个域。比如，姓名的域是字符串集合，年龄的域是整数，性别的域为（男，女）。</li><li>实体型<br>具有相同属性的实体必然具有共同的特征和性质。用实体名以及其属性名集合来抽象和刻画同类实体，称为实体型。举个栗子：学生（学号、姓名、性别、出生年月、所在院系、入学时间）就是一个实体型。</li><li>实体集<br>同一类实体的集合就是实体集。比如：全体学生就是一个实体集。</li><li>联系<br>现实世界中，事物内部及事物之间的关系，反映在信息世界中即是实体（型）内部的联系和实体（型）之间的联系。实体内部的联系通常指实体各属性之间的联系；实体间的联系通常指不同实体集之间的联系。</li></ol><h4 id="事物之间的关系"><a href="#事物之间的关系" class="headerlink" title="事物之间的关系"></a>事物之间的关系</h4><p>首先是两个实体型之间的联系，几乎所有复杂的联系，都可以简化为好几个两个实体集之间的联系，所以我们先讨论两个实体型之间的联系。</p><p>两个实体型之间的联系可以分为三类：</p><ol><li><p>一对一联系<br>对于实体集A中每一个实体，实体集B中最多有一个（也可以没有）实体与之联系，反之亦然，则称实体集A和实体集B具有一对一联系。</p><p>举个梨子：一般来说，一个班级只有一个正班长，且一个班长只在一个班中任职，所以我们说班长和班级之间具有一对一联系。</p></li><li><p>一对多联系<br>实体集A中每一个实体，实体集B中有n个实体（n‎ ≥ 0）与之联系，反之，B中的每一个实体，实体集A中至多只有一个与之联系，则称实体集A与实体集B具有一对多联系。</p><p>举个苹果：一般来说，一个班级中有若干个学生，而每个学生只在一个班级中学习，则班级与学生之间具有一对多的联系。</p></li><li><p>多对多联系<br>因该不难推测，多对多就是实体集A中每一个实体，在实体集B中有n（n ‎≥ 0）个与之联系，反正实体集B中每一个实体，A中也有m（m ‎≥ 0）个实体与之联系。我们则称A与B具有多对多联系。</p><p>举个香蕉：一门课程同时有若干个学生选修，一个学生一次可以选择若干门课程，所以课程与学生之间的联系属于多对多的联系。</p></li></ol><p>单个实体型内的联系：</p><ol><li>我们首先要知道，单个实体型之间也是存在一对一，一对多和多对多的联系的。例如职工实体型就有领导和被领导的联系，一般来说这是一种一对多的联系，一名领导领导多名员工，多名员工被一个领导领导。</li><li>在我们实际生活中，更多的是多个实体集之间的联系，由于可以存在多个实体集之间有着共同的关系，所以当我们要描述的问题比较大的时候，很难用语言来描述其中的关系，我们需要一种能够简化这种关系，让我们简单清楚的发现其中的关系的一种方法，所以才有了E-R图。</li></ol><h4 id="E-R-图的组成"><a href="#E-R-图的组成" class="headerlink" title="E-R 图的组成"></a>E-R 图的组成</h4><ol><li>矩形框<br>表示实体，在框中记入实体名。</li><li>菱形框<br>表示联系，在框中记入联系名。</li><li>椭圆形框<br>表示实体或联系的属性，将属性名记入框中。对于主属性名，则在其名称下划一下划线。</li><li>连线<br>实体与属性之间；实体与联系之间；联系与属性之间用直线相连，并在直线上标注联系的类型。（对于一对一联系，要在两个实体连线方向各写1； 对于一对多联系，要在一的一方写1，多的一方写N；对于多对多关系，则要在两个实体连线方向各写N, M)。</li></ol><p>两个实体，一对一联系：</p><pre class="mermaid">graph LR   A[班长]   B{任职}   C[班级]   A -->|1| B   B -->|1| C</pre><p>两个实体，一对多联系：</p><pre class="mermaid">graph LR   A[学生]   B{上课}   C[班级]   A -->|n| B   B -->|1| C</pre><p>两个实体，多对多联系：</p><pre class="mermaid">graph LR   A[学生]   B{选择}   C[课程]   A -->|n| B   B -->|m| C</pre><p>单个实体之间一对多实例：</p><pre class="mermaid">graph TB   A[职工]   B{领导}   A -->|1| B   B -->|m| A</pre><p>三个实体之间：</p><pre class="mermaid">graph TB   A[课程]   B{选择}   C[教室]   D[书本]   A -->|1| B   B -->|n| C   B -->|m| D</pre><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><ol><li>怎样才能找出最后一次插入时分配了哪个自动增量</li><li><p>MySQL 有关权限的表都有哪几个</p></li><li><p>如何通俗地理解三个范式</p></li><li>数据库三范式及判断、E-R 图</li><li>MySQL范式和反范式的区别以及彼此的优缺点</li><li>数据库的范式</li></ol><h2 id="表与视图"><a href="#表与视图" class="headerlink" title="表与视图"></a>表与视图</h2><ol><li>什么是基本表</li><li>什么是视图</li><li>什么是游标</li><li>试述视图的优点</li><li>什么叫视图，游标是什么</li><li>完整性约束包括哪些</li><li>drop、truncate、delete 区别</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>抛出异常 java.sql.SQLException: Incorrect string value: ‘\xF0\x9F\x92\x94’ for column ‘name’ at row 1</li></ol><p>数据库字段、表、数据库、MySQL 的编码需要设置成utf8mb4、数据库连接设置编码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">"%char%"</span>;</span><br></pre></td></tr></table></figure><p>我的问题是，阿里云数据的chareacer_set_server=utf8，修改即可。</p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 安装</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E5%AE%89%E8%A3%85/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="Centos-本地安装"><a href="#Centos-本地安装" class="headerlink" title="Centos 本地安装"></a>Centos 本地安装</h2><p>安装后，配置文件位于 <code>/etc/my.cnf</code>，数据文件位于 <code>/var/lib/mysql</code>。</p><h4 id="卸载旧-MySQL"><a href="#卸载旧-MySQL" class="headerlink" title="卸载旧 MySQL"></a>卸载旧 MySQL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># yum list installed mysql*</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C.UTF-8</span><br><span class="line">Installed Packages</span><br><span class="line">mysql.x86_64                                         8.0.17-3.module_el8.0.0+181+899d6349                                  @AppStream</span><br><span class="line">mysql-common.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349                                  @AppStream</span><br><span class="line">[root@vultrguest ~]<span class="comment"># yum remove mysql-common.x86_64</span></span><br><span class="line">...</span><br><span class="line">[root@vultrguest ~]<span class="comment"># yum list installed mysql*</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C.UTF-8</span><br><span class="line">Error: No matching Packages to list</span><br></pre></td></tr></table></figure><h4 id="下载-rpm-源文件"><a href="#下载-rpm-源文件" class="headerlink" title="下载 rpm 源文件"></a>下载 rpm 源文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># sudo mkdir /home/downloads</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># sudo cd  /home/downloads</span></span><br><span class="line"><span class="comment"># 这里是MySQL 5.7的源文件</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># sudo wget 'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'</span></span><br><span class="line"><span class="comment"># 这里是MySQL 8.0的源文件</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># sudo wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span></span><br></pre></td></tr></table></figure><h4 id="添加-rpm-到仓库"><a href="#添加-rpm-到仓库" class="headerlink" title="添加 rpm 到仓库"></a>添加 rpm 到仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># sudo rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># sudo yum update</span></span><br></pre></td></tr></table></figure><h4 id="使用-yum-安装"><a href="#使用-yum-安装" class="headerlink" title="使用 yum 安装"></a>使用 yum 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># sudo yum install mysql-community-server</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="启动-MySQL-服务"><a href="#启动-MySQL-服务" class="headerlink" title="启动 MySQL 服务"></a>启动 MySQL 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># sudo systemctl start mysqld</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="查看初始密码"><a href="#查看初始密码" class="headerlink" title="查看初始密码"></a>查看初始密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># sudo grep 'temporary password' /var/log/mysqld.log</span></span><br><span class="line">0sIbtR0(Wkge</span><br></pre></td></tr></table></figure><h4 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h4><p>使用到初始密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># mysql -uroot -p  # 输入查看到的密码</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Centos-在线安装"><a href="#Centos-在线安装" class="headerlink" title="Centos 在线安装"></a>Centos 在线安装</h2><p>安装后，配置文件位于 <code>/etc/my.cnf</code>，数据文件位于 <code>/var/lib/mysql</code>。</p><h4 id="搜索-MySQL"><a href="#搜索-MySQL" class="headerlink" title="搜索 MySQL"></a>搜索 MySQL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># yum list | grep mysql</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C.UTF-8</span><br><span class="line">apr-util-mysql.x86_64                                1.6.1-6.el8                                       AppStream </span><br><span class="line">dovecot-mysql.x86_64                                 1:2.2.36-10.el8                                   AppStream </span><br><span class="line">freeradius-mysql.x86_64                              3.0.17-6.module_el8.1.0+198+858eb655              AppStream</span><br></pre></td></tr></table></figure><h4 id="安装MySQL客户端"><a href="#安装MySQL客户端" class="headerlink" title="安装MySQL客户端"></a>安装MySQL客户端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># yum install -y mysql</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="安装-MySQL-服务端"><a href="#安装-MySQL-服务端" class="headerlink" title="安装 MySQL 服务端"></a>安装 MySQL 服务端</h4><p>没有指定版本默认 8.0。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># yum install -y mysql-server</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="启动-MySQL-服务-1"><a href="#启动-MySQL-服务-1" class="headerlink" title="启动 MySQL 服务"></a>启动 MySQL 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># systemctl start mysqld</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># systemctl status mysqld</span></span><br><span class="line">● mysqld.service - MySQL 8.0 database server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sun 2020-03-08 17:58:00 UTC; 15s ago</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="登录-MySQL"><a href="#登录-MySQL" class="headerlink" title="登录 MySQL"></a>登录 MySQL</h4><p>刚安装密码为空。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># mysql -uroot -p</span></span><br><span class="line">Enter password:    </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 8</span><br><span class="line">Server version: 8.0.17 Source distribution</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><p>安装后，配置文件位于容器 <code>/etc/my.cnf</code>，数据文件位于 <code>/var/lib/mysql</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># docker pull mysql</span></span><br><span class="line">...</span><br><span class="line">[root@vultrguest ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mysql               latest              be0dbf01a0f3        4 weeks ago         541MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里顺便设置了密码</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># docker run --name mysql01 -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入MySQL容器</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># docker exec -it mysql01 bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录 MySQL</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h4 id="MySQL-启用失败"><a href="#MySQL-启用失败" class="headerlink" title="MySQL 启用失败"></a>MySQL 启用失败</h4><p>如果启动失败，可以查看 MySQL 日志文件 <code>/var/log/mysql/mysqld.log</code>。</p><ol><li>一般是内存不足。MySQL 刚启动就占用了接近 500MB 的内存，所以机器配置最低也需要 1G。</li><li>os_file_get_status() failed on ‘./ibdata1’. Can’t determine file permissions 则关闭SELINUX：setenforce 0 <a href="http://www.yanzuoguang.com/article/847.html">http://www.yanzuoguang.com/article/847.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 基本操作</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h2><h4 id="MySQL-5-7-修改用户密码"><a href="#MySQL-5-7-修改用户密码" class="headerlink" title="MySQL 5.7 修改用户密码"></a>MySQL 5.7 修改用户密码</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 调整MySQL密码验证规则</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">global</span> sql_mode = <span class="string">''</span>;</span><br><span class="line"><span class="comment">-- 修改用户密码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'bg360123456'</span>;</span><br></pre></td></tr></table></figure><h4 id="MySQL-8-0-修改用户密码"><a href="#MySQL-8-0-修改用户密码" class="headerlink" title="MySQL 8.0 修改用户密码"></a>MySQL 8.0 修改用户密码</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 调整MySQL密码验证规则</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.length=<span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 修改用户密码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><h2 id="创建数据库和用户"><a href="#创建数据库和用户" class="headerlink" title="创建数据库和用户"></a>创建数据库和用户</h2><p>5.7 和 8.0 均适用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> aonitask <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'username'</span>@<span class="string">'host'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span>;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> aonitask.* <span class="keyword">to</span> <span class="string">'aonitask'</span>@<span class="string">'%'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>登录报错 <code>error 2059: Authentication plugin &#39;caching_sha2_password&#39; cannot be loaded</code><br>这是因为 MySQL8.0 版本默认的认证方式是 caching_sha2_password。若想 在MySQL8.0 版本中继续使用旧版本中的认证方式需要在 my.cnf 文件中配置并重启，因为此参数不可动态修改。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global default_authentication_plugin=&apos;mysql_native_password&apos;;</span><br><span class="line">ERROR 1238 (HY000): Variable &apos;default_authentication_plugin&apos; is a read only variable</span><br></pre></td></tr></table></figure><p>写入my.cnf文件后重启MySQL（测试无效？？？）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br></pre></td></tr></table></figure></p><p>另一种解决方法：兼容新老版本的认证方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &apos;sptest&apos;@&apos;%&apos; IDENTIFIED WITH mysql_native_password BY &apos;sptest&apos;;</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 数据类型</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>MySQL中定义数据字段的类型对你数据库的优化是非常重要的。</p><p>MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串（字符）类型。</p><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p>MySQL支持所有标准SQL数值数据类型。</p><p>这些类型包括严格数值数据类型（INTEGER、SMALLINT、DECIMAL和NUMERIC），以及近似数值数据类型（FLOAT、REAL和DOUBLE PRECISION）。</p><p>关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。</p><p>BIT数据类型保存位字段值，并且支持MyISAM、MEMORY、InnoDB和BDB表。</p><p>作为SQL标准的扩展，MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。下面的表显示了需要的每个整数类型的存储和范围。</p><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th>大小</th><th>范围</th><th>用途</th></tr></thead><tbody><tr><td style="text-align:left">TINYINT</td><td>1 byte</td><td>-128，127</td><td>小整数值</td></tr><tr><td style="text-align:left">SMALLINT</td><td>2 bytes</td><td>±3万</td><td>大整数值</td></tr><tr><td style="text-align:left">MEDIUMINT</td><td>3 bytes</td><td>±800万，7位数</td><td>大整数值</td></tr><tr><td style="text-align:left">INT</td><td>4 bytes</td><td>±20亿，10位数</td><td>大整数值</td></tr><tr><td style="text-align:left">BIGINT</td><td>8 bytes</td><td>±19位数</td><td>极大整数值</td></tr><tr><td style="text-align:left">FLOAT</td><td>4 bytes</td><td>8精度</td><td>单精度浮点数值</td></tr><tr><td style="text-align:left">DOUBLE</td><td>8 bytes</td><td>18精度</td><td>双精度浮点数值</td></tr><tr><td style="text-align:left">DECIMAL</td><td>DECIMAL(M, D) M + 2 或 D + 2</td><td>依赖于M和D的值</td><td>小数值</td></tr></tbody></table></div><h2 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h2><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。</p><p>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。</p><p>TIMESTAMP类型有专有的自动更新特性，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在创建新记录的时候把这个字段设置为给定值，以后修改时不刷新</span></span><br><span class="line">TIMESTAMP DEFAULT CURRENT_TIMESTAMP  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在创建新记录的时候把这个字段设置为给定值，以后修改时刷新它</span></span><br><span class="line">TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在创建新记录的时候把这个字段设置为给定值，以后修改时刷新它</span></span><br><span class="line"><span class="keyword">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="string">'yyyy-mm-dd hh:mm:ss'</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在创建新记录的时候把这个字段设置为0，以后修改时刷新它 </span></span><br><span class="line"><span class="keyword">TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th>大小</th><th>范围</th><th>格式</th><th>用途</th></tr></thead><tbody><tr><td style="text-align:left">YEAR</td><td>1 bytes</td><td>1901, 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td style="text-align:left">DATE</td><td>3 bytes</td><td>1000-01-01, 9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td style="text-align:left">TIME</td><td>3 bytes</td><td>-838:59:59, 838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td style="text-align:left">DATETIME</td><td>8 bytes</td><td>1000-01-01 00:00:00, 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td style="text-align:left">TIMESTAMP</td><td>4 bytes</td><td>1970-01-01 00:00:00, 2038</td><td>YYYYMMDD HHMMSS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table></div><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>字符串类型指 <code>CHAR</code>、<code>VARCHAR</code>、<code>BINARY</code>、<code>VARBINARY</code>、<code>BLOB</code>、<code>TEXT</code>、<code>ENUM</code> 和 <code>SET</code>。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p><p>字符串类型可以分为存储文本的和存储二进制数据的类型，其中二进制数据可以是图片，视频等，很少用到。</p><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td style="text-align:left">SET</td><td>0-255 bytes</td><td>多选字符串数据类型</td></tr><tr><td style="text-align:left">ENUM</td><td>0-255 bytes</td><td>定长字符串</td></tr><tr><td style="text-align:left">CHAR</td><td>0-255 bytes</td><td>定长字符串</td></tr><tr><td style="text-align:left">VARCHAR</td><td>0-65535 bytes</td><td>变长字符串</td></tr><tr><td style="text-align:left">TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td style="text-align:left">TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td style="text-align:left">MEDIUMTEXT</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td style="text-align:left">LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr><tr><td style="text-align:left">TINYBLOB</td><td>0-255 bytes</td><td>不超过255个字符的二进制字符串</td></tr><tr><td style="text-align:left">BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td style="text-align:left">LONGBLOB</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td style="text-align:left">MEDIUMBLOB</td><td>0-16 777 215 bytes</td><td>极大文本数据</td></tr></tbody></table></div><p><code>CHAR(n)</code> 和 <code>VARCHAR(n)</code> 中括号中 n 代表字符的个数，并不代表字节个数，比如 <code>CHAR(30)</code> 就可以存储 30 个字符。</p><p><code>CHAR</code> 和 <code>VARCHAR</code> 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p><p><code>BINARY</code> 和 <code>VARBINARY</code> 类似于 <code>CHAR</code> 和 <code>VARCHAR</code>，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p><p><code>BLOB</code> 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 <code>BLOB</code> 类型：<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code> 和 <code>LONGBLOB</code>。它们区别在于可容纳存储范围不同。</p><p>有 4 种 <code>TEXT</code> 类型：<code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code> 和 <code>LONGTEXT</code>。对应的这 4 种 <code>BLOB</code> 类型，可存储的最大长度不同，可根据实际情况选择。</p><blockquote><p><code>BLOB</code> 和 <code>TEXT</code> 类型之间的唯一区别在于对 <code>BLOB</code> 值进行排序和比较时区分大小写，对 <code>TEXT</code> 值不区分大小写。</p></blockquote><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>字符集是用来定义存储字符串的方式。MySQL 支持 30 多种字符集。</p><p>常见字符集：</p><div class="table-container"><table><thead><tr><th style="text-align:left">字符集</th><th>使用场景</th><th>最大长度</th><th>字符长度</th></tr></thead><tbody><tr><td style="text-align:left">ascii</td><td>英文</td><td>1字节</td><td>英文1字节</td></tr><tr><td style="text-align:left">utf8</td><td>各种语言</td><td>3字节</td><td>英文1字节、汉字3字节</td></tr><tr><td style="text-align:left">utf8mb4</td><td>各种语言，表情</td><td>4字节</td><td>英文1字节、汉字4字节</td></tr></tbody></table></div><h4 id="查看默认字符集"><a href="#查看默认字符集" class="headerlink" title="查看默认字符集"></a>查看默认字符集</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE 'character_set_server';</span><br><span class="line">+<span class="comment">----------------------+--------+</span></span><br><span class="line">| Variable_name        | Value  |</span><br><span class="line">+<span class="comment">----------------------+--------+</span></span><br><span class="line">| character_set_server | gbk    |</span><br><span class="line">+<span class="comment">----------------------+--------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'collation_server'</span>;</span><br><span class="line">+<span class="comment">------------------+-------------------+</span></span><br><span class="line">| Variable_name    | Value             |</span><br><span class="line">+<span class="comment">------------------+-------------------+</span></span><br><span class="line">| collation_server | gbk_chinese_ci    |</span><br><span class="line">+<span class="comment">------------------+-------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h4 id="配置默认字符集"><a href="#配置默认字符集" class="headerlink" title="配置默认字符集"></a>配置默认字符集</h4><p>如果没有指定服务器字符集，MySQL 会默认使用 latin1 作为服务器字符集。</p><p>在配置文件配置默认字符集：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=字符集名称</span><br></pre></td></tr></table></figure><p>连接 MySQL 服务器时指定字符集：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123 --default-character-set=utf8mb4</span><br></pre></td></tr></table></figure><p>使用命令修改字符集：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- use到当前的数据库中,修改字符集</span></span><br><span class="line">mysql&gt; use mydb</span><br><span class="line"></span><br><span class="line">mysql&gt; alter database mydb character set utf-8;</span><br></pre></td></tr></table></figure></p><p>创建数据库时指定字符集：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`tb_students_info`</span> <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure><p>修改数据库时指定字符集：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> <span class="string">`tb_students_info`</span> <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure><p>新增表时指定字符集：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_students_info`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`height`</span> <span class="built_in">float</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`course_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">12</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure><p>修改表时指定字符集：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`tb_students_info`</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</span><br></pre></td></tr></table></figure></p><h2 id="校对规则"><a href="#校对规则" class="headerlink" title="校对规则"></a>校对规则</h2><p>校对规则定义了比较字符串的方式。字符集和校对规则是一对多的关系, MySQL 支持 70 多种校对规则。</p><p>如果只指定了字符集，没有指定校对规则，MySQL 会使用该字符集对应的默认校对规则。如果要使用字符集的非默认校对规则，需要在指定字符集的同时指定校对规则。</p><h4 id="配置校对规则"><a href="#配置校对规则" class="headerlink" title="配置校对规则"></a>配置校对规则</h4><p>创建数据库时指定字符集：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`sptest`</span> <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure><p>修改数据库时指定字符集：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> <span class="string">`sptest`</span> <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure><h2 id="字段、类型及其长度"><a href="#字段、类型及其长度" class="headerlink" title="字段、类型及其长度"></a>字段、类型及其长度</h2><div class="table-container"><table><thead><tr><th style="text-align:left">字段CN</th><th>字段EN</th><th>类型</th><th>长度</th></tr></thead><tbody><tr><td style="text-align:left"><strong>用户信息 userInfo</strong></td></tr><tr><td style="text-align:left">昵称</td><td>nickname</td><td>varchar</td><td>20</td></tr><tr><td style="text-align:left">姓名</td><td>username</td><td>varchar</td><td>20</td></tr><tr><td style="text-align:left">性别</td><td>sex</td><td>char</td><td>1</td></tr><tr><td style="text-align:left">生日</td><td>birthday</td><td>date</td><td></td></tr><tr><td style="text-align:left"><strong>钱包 wallet</strong></td></tr><tr><td style="text-align:left">用户Id</td><td>userId</td><td>bigint</td><td>20</td></tr><tr><td style="text-align:left">余额</td><td>balance</td><td>decimal</td><td>10,2</td></tr><tr><td style="text-align:left"><strong>钱包流水</strong></td></tr><tr><td style="text-align:left">操作类型</td><td>optype</td><td>int</td><td>1</td></tr><tr><td style="text-align:left">操作数额</td><td>opAmount</td><td>decimal</td><td>10,2</td></tr><tr><td style="text-align:left">之前数额</td><td>bfAmount</td><td>decimal</td><td>10,2</td></tr><tr><td style="text-align:left">之后数额</td><td>afAmount</td><td>decimal</td><td>10,2</td></tr><tr><td style="text-align:left">业务Key</td><td>busKey</td><td>varchar</td><td>256</td></tr><tr><td style="text-align:left">业务类型</td><td>busType</td><td>int</td><td>1</td></tr></tbody></table></div><ol><li>把IP地址存成 UNSIGNED INT</li><li></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h4 id="MySQL-8-0-19-中在-navicat-客户端中-int、bigint-等类型设置长度保存后为-0"><a href="#MySQL-8-0-19-中在-navicat-客户端中-int、bigint-等类型设置长度保存后为-0" class="headerlink" title="MySQL 8.0.19 中在 navicat 客户端中 int、bigint 等类型设置长度保存后为 0"></a>MySQL 8.0.19 中在 navicat 客户端中 int、bigint 等类型设置长度保存后为 0</h4><p><a href="https://blog.csdn.net/shunshengli/article/details/106473613">https://blog.csdn.net/shunshengli/article/details/106473613</a></p><p>根据官网资料可知：从8.0.17版本开始，TINYINT, SMALLINT, MEDIUMINT, INT, and BIGINT类型的显示宽度将失效。</p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 字段索引</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E5%AD%97%E6%AE%B5%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E5%AD%97%E6%AE%B5%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>索引的建立对于 MySQL 的高效运行是很重要的，索引可以大大提高 MySQL 的检索速度。打个比方，如果合理的设计且使用索引的 MySQL 是一辆兰博基尼的话，那么没有设计和使用索引的 MySQL 就是一个人力三轮车。</p><h2 id="索引种类"><a href="#索引种类" class="headerlink" title="索引种类"></a>索引种类</h2><p>从原理上，索引分为聚集索引和非聚集索：</p><ol><li><p>聚集索引<br>索引中键值的逻辑顺序决定了表中相应行的物理顺序（索引中的数据物理存放地址和索引的顺序是一致的），可以这么理解：只要是索引是连续的，那么数据在存储介质上的存储位置也是连续的。</p><p>InnoDB 引擎会为每张表都加一个聚集索引，而聚集索引指向的的数据又是以物理磁盘顺序来存储的，自增的主键会把数据自动向后插入，避免了插入过程中的聚集索引排序问题。如果对聚集索引进行排序，这会带来磁盘IO性能损耗是非常大的。</p><p>如果一个主键被定义了，那么这个主键就是作为聚集索引。</p><p>如果没有主键被定义，那么该表的第一个唯一非空索引被作为聚集索引。</p><p>如果没有主键也没有合适的唯一索引，那么 InnoDB 内部会生成一个隐藏的主键作为聚集索引，这个隐藏的主键是一个 6 个字节的列，改列的值会随着数据的插入自增。</p></li><li><p>非聚集索引<br>索引的逻辑顺序与磁盘上的物理存储顺序不同。非聚集索引的键值在逻辑上也是连续的，但是表中的数据在存储介质上的物理顺序是不一致的，即记录的逻辑顺序和实际存储的物理顺序没有任何联系。索引的记录节点有一个数据指针指向真正的数据存储位置。</p></li></ol><p>从功能上，索引可以分成以下 6 种：</p><ol><li>普通索引<br>最基本的索引，它没有任何限制。</li><li>唯一索引<br>它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</li><li>主键索引<br>是一种特殊的唯一索引，一个表只能有一个主键，不允许有空值。一般是在建表的时候同时创建主键索引。</li><li>组合索引<br>指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用组合索引时遵循最左前缀集合。</li><li>全文索引<br>主要用来查找文本中的关键字，而不是直接与索引中的值相比较。全文索引跟其它索引大不相同，它更像是一个搜索引擎，而不是简单的 <code>WHERE</code> 语句的参数匹配。</li></ol><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>优点：</p><ol><li>索引可以大大提高MySQL的检索速度。</li></ol><p>缺点：</p><ol><li>建立索引会占用磁盘空间的索引文件。</li><li>降低更新表的速度，如对表进行 <code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code>。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件。</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>使用短索引<br>对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个 <code>CHAR(255)</code> 的列，如果在前 10 个或 20 个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和 I/O 操作。</li><li>谨慎使用 <code>LIKE</code> 查询<br>一般情况下不推荐使用 <code>LIKE</code> 操作，如果非使用不可，如何使用也是一个问题。<code>LIKE &quot;%aaa%&quot;</code> 不会使用索引而 <code>LIKE &quot;aaa%&quot;</code> 可以使用索引。</li><li>列不能包含 <code>null</code> 值<br>只要列中包含有 <code>null</code> 值都将不会被包含在索引中，复合索引中只要有一列含有 <code>null</code> 值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为 <code>null</code>。</li><li>不要在列上进行运算<br>这将导致索引失效而进行全表扫描，例如：<code>SELECT * FROM table_name WHERE YEAR(column_name)&lt;2017</code>。</li><li>多索引查询只有一个生效<br>查询只使用一个索引，因此如果 <code>WHERE</code> 子句中已经使用了索引的话，那么 <code>OEDER BY</code> 中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。参考：<a href="https://www.jianshu.com/p/34194ea5a4a3">数据库中查询记录时是否每次只能使用一个索引</a>。</li></ol><h2 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h2><p>查看索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用 SHOW KEYS 查看索引</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">KEYS</span> <span class="keyword">FROM</span> biz_user;</span><br><span class="line"><span class="comment">-- 使用 SHOW INDEX 语句查看索引</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> biz_user;</span><br><span class="line"></span><br><span class="line">Table      Non_uniqueKey_nameSeq_in_indexColumn_name       ...</span><br><span class="line">biz_goods     0                PRIMARY        1        id                ...</span><br><span class="line">biz_goods     1                cate_id_key1        cate_id           ...</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 SHOW CREATE TABLE 语句查看索引</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> biz_goods;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`biz_goods`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cate_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'分类Id'</span>,</span><br><span class="line">  <span class="string">`detail`</span> mediumtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品详情'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`cate_id_key`</span> (<span class="string">`cate_id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_0900_ai_ci <span class="keyword">COMMENT</span>=<span class="string">'商品表'</span>;</span><br></pre></td></tr></table></figure><p>创建索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 普通索引：直接创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> cate_id_key <span class="keyword">ON</span> <span class="string">`biz_goods`</span>(cate_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 普通索引：创建表的时候同时创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`biz_goods`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cate_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'分类Id'</span>,</span><br><span class="line">  <span class="string">`detail`</span> mediumtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品详情'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`cate_id_key`</span> (<span class="string">`cate_id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_0900_ai_ci <span class="keyword">COMMENT</span>=<span class="string">'商品表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 唯一索引：直接创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> cate_id_key <span class="keyword">ON</span> <span class="string">`biz_goods`</span>(cate_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 唯一索引：创建表的时候同时创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`biz_goods`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cate_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'分类Id'</span>,</span><br><span class="line">  <span class="string">`detail`</span> mediumtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品详情'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="string">`cate_id_key`</span> (<span class="string">`cate_id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_0900_ai_ci <span class="keyword">COMMENT</span>=<span class="string">'商品表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键索引：一般是在建表的时候同时创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`biz_goods`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_0900_ai_ci <span class="keyword">COMMENT</span>=<span class="string">'商品表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 全文索引：直接创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> FULLTEXT <span class="keyword">INDEX</span> detail_key <span class="keyword">ON</span> <span class="string">`biz_goods`</span>(detail);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 全文索引：创建表的时候同时创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`biz_goods`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`detail`</span> mediumtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品详情'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  FULLTEXT (detail)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_0900_ai_ci <span class="keyword">COMMENT</span>=<span class="string">'商品表'</span>;</span><br></pre></td></tr></table></figure><p>修改索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 普通索引：修改表结构的方式添加索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`biz_goods`</span> <span class="keyword">ADD</span> <span class="keyword">INDEX</span> cate_id_key <span class="keyword">ON</span> (cate_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 组合索引：直接创建索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`biz_goods`</span> <span class="keyword">ADD</span> <span class="keyword">INDEX</span> cate_id_name_key (cate_id, <span class="keyword">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 唯一索引：修改表结构的方式添加索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`biz_goods`</span> <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> cate_id_key <span class="keyword">ON</span> (cate_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 全文索引：修改表结构的方式添加索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`biz_goods`</span> <span class="keyword">ADD</span> FULLTEXT detail_key(detail);</span><br></pre></td></tr></table></figure><p>删除索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用 DROP INDEX 命令删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> cate_id_key <span class="keyword">on</span> <span class="string">`biz_goods`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 ALTER TABLE 命令删除索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`biz_goods`</span> <span class="keyword">DROP</span> <span class="keyword">INDEX</span> cate_id_key;</span><br></pre></td></tr></table></figure><h2 id="最左前缀"><a href="#最左前缀" class="headerlink" title="最左前缀"></a>最左前缀</h2><p>在 MySQL 建立联合索引时会遵守最左前缀匹配原则，即最左优先，在检索数据时从联合索引的最左边开始匹配。</p><h2 id="索引原理"><a href="#索引原理" class="headerlink" title="索引原理"></a>索引原理</h2><p>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。</p><ol><li>B+Tree 建树过程</li><li>B+Tree 和 B-Tree 的区别</li><li>B+Tree 的优点</li><li></li></ol><p><img src="http://data.biancheng.net/uploads/allimg/171024/2-1G0241402324A.png" alt=""></p><h2 id="附：超键、主键、外键、候选键"><a href="#附：超键、主键、外键、候选键" class="headerlink" title="附：超键、主键、外键、候选键"></a>附：超键、主键、外键、候选键</h2><p><strong>超键</strong>是指在关系中能唯一标识元组的属性集。在下面的数据中，「学号」、「学号，性别」、「学号，年龄」等可以组成一个超键。</p><p><strong>候选键</strong>是不含多余属性的超键为候选键。在下面的数据中，「学号」是一个候选键，而「学号，性别」不是候选键，因为它的性别属性是多余的。</p><p><strong>主键</strong>是用户选择的候选键作为该元组的唯一标识。</p><p><strong>外键</strong>是在一张表里持有另一张表的主键。</p><div class="table-container"><table><thead><tr><th style="text-align:left">学号</th><th>姓名</th><th>性别</th><th>年龄</th><th>系别</th><th>专业</th></tr></thead><tbody><tr><td style="text-align:left">20020612</td><td>李辉</td><td>男</td><td>20</td><td>计算机</td><td>软件开发</td></tr><tr><td style="text-align:left">20060613</td><td>张明</td><td>男</td><td>18</td><td>计算机</td><td>软件开发 </td></tr><tr><td style="text-align:left">20060614</td><td>王小玉</td><td>女</td><td>19</td><td>物理</td><td>力学</td></tr><tr><td style="text-align:left">20060615</td><td>李淑华</td><td>女</td><td>17</td><td>生物</td><td>动物学</td></tr><tr><td style="text-align:left">20060616</td><td>赵静</td><td>男</td><td>21</td><td>化学</td><td>食品化学</td></tr><tr><td style="text-align:left">20060617</td><td>赵静</td><td>女</td><td>20</td><td>生物</td><td>植物学</td></tr></tbody></table></div><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>主键、超键和候选键有什么区别</li><li>你怎么看到为表格定义的所有索引</li><li>可以使用多少列创建索引</li><li>索引的底层实现原理和优化</li><li>简单描述MySQL中，索引，主键，唯一索引，联合索引的区别，对数据库的性能有什么影响（从读写两方面）</li><li>索引的目的是什么</li><li>索引对数据库系统的负面影响是什么</li><li>为数据表建立索引的原则有哪些</li><li>什么情况下不宜建立索引</li><li>主键、外键和索引的区别？</li><li>索引分类，最左前缀原则，哪些条件无法使用索引</li><li>B 树、B+ 树区别，索引为何使用 B+ 树</li><li>聚集索引与非聚集索引（使用非聚集索引的查询过程）</li><li>SQL优化，常用的索引？</li><li>查询中哪些情况不会使用索引？</li><li>数据库索引，底层是怎样实现的，为什么要用B树索引？</li><li>MySQL 是怎么用B+树？</li><li>MySQL 索引类别有哪些，什么是覆盖索引</li><li>数据库索引有哪些？底层怎么实现的？数据库怎么优化？</li><li>聚簇索引&amp;非聚簇索引</li><li>索引什么时候会失效变成全表扫描</li><li>索引的类型，索引的底层实现原理</li><li>MySQL索引设计，联合索引，SQL 语句优化，abc 索引，搜索b，会使用索引吗（走索引要回表）</li><li>MySQL索引实现，如何解决慢查询</li><li>用过MySQL吗？为啥加索引会变快？聚簇型索引和非聚簇型索引的区别？</li><li>说一聚簇索引和非聚簇索引的有什么不同</li><li>数据库（最多的还是MySQL，Nosql有redis）索引（包括分类及优化方式，失效条件，底层结构）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 常用函数</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="数值型函数"><a href="#数值型函数" class="headerlink" title="数值型函数"></a>数值型函数</h2><h4 id="求绝对值"><a href="#求绝对值" class="headerlink" title="求绝对值"></a>求绝对值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ABS</span>(<span class="number">5</span>),<span class="keyword">ABS</span>(<span class="number">-2.4</span>),<span class="keyword">ABS</span>(<span class="number">-24</span>),<span class="keyword">ABS</span>(<span class="number">0</span>);</span><br><span class="line">+<span class="comment">--------+-----------+----------+--------+</span></span><br><span class="line">| ABS(5) | ABS(-2.4) | ABS(-24) | ABS(0) |</span><br><span class="line">+<span class="comment">--------+-----------+----------+--------+</span></span><br><span class="line">|      5 |       2.4 |       24 |      0 |</span><br><span class="line">+<span class="comment">--------+-----------+----------+--------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.10</span> sec)</span><br></pre></td></tr></table></figure><h4 id="求二次方根"><a href="#求二次方根" class="headerlink" title="求二次方根"></a>求二次方根</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SQRT</span>(<span class="number">25</span>),<span class="keyword">SQRT</span>(<span class="number">120</span>),<span class="keyword">SQRT</span>(<span class="number">-9</span>);</span><br><span class="line">+<span class="comment">----------+--------------------+----------+</span></span><br><span class="line">| SQRT(25) | SQRT(120)          | SQRT(-9) |</span><br><span class="line">+<span class="comment">----------+--------------------+----------+</span></span><br><span class="line">|        5 | 10.954451150103322 |     NULL |</span><br><span class="line">+<span class="comment">----------+--------------------+----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.06</span> sec)</span><br></pre></td></tr></table></figure><h4 id="求余数"><a href="#求余数" class="headerlink" title="求余数"></a>求余数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MOD</span>(<span class="number">63</span>,<span class="number">8</span>),<span class="keyword">MOD</span>(<span class="number">120</span>,<span class="number">10</span>),<span class="keyword">MOD</span>(<span class="number">15.5</span>,<span class="number">3</span>);</span><br><span class="line">+<span class="comment">-----------+-------------+-------------+</span></span><br><span class="line">| MOD(63,8) | MOD(120,10) | MOD(15.5,3) |</span><br><span class="line">+<span class="comment">-----------+-------------+-------------+</span></span><br><span class="line">|         7 |           0 |         0.5 |</span><br><span class="line">+<span class="comment">-----------+-------------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><h4 id="向上取整"><a href="#向上取整" class="headerlink" title="向上取整"></a>向上取整</h4><p><code>CEIL(x)</code> 和 <code>CEILING(x)</code> 的意义相同，返回不小于 x 的最小整数值，返回值转化为一个 BIGINT。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CEIL</span>(<span class="number">-2.5</span>),<span class="keyword">CEILING</span>(<span class="number">2.5</span>);</span><br><span class="line">+<span class="comment">------------+--------------+</span></span><br><span class="line">| CEIL(-2.5) | CEILING(2.5) |</span><br><span class="line">+<span class="comment">------------+--------------+</span></span><br><span class="line">|         -2 |            3 |</span><br><span class="line">+<span class="comment">------------+--------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="向下取整"><a href="#向下取整" class="headerlink" title="向下取整"></a>向下取整</h4><p><code>FLOOR(x)</code> 函数返回小于 x 的最大整数值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FLOOR</span>(<span class="number">5</span>),<span class="keyword">FLOOR</span>(<span class="number">5.66</span>),<span class="keyword">FLOOR</span>(<span class="number">-4</span>),<span class="keyword">FLOOR</span>(<span class="number">-4.66</span>);</span><br><span class="line">+<span class="comment">----------+-------------+-----------+--------------+</span></span><br><span class="line">| FLOOR(5) | FLOOR(5.66) | FLOOR(-4) | FLOOR(-4.66) |</span><br><span class="line">+<span class="comment">----------+-------------+-----------+--------------+</span></span><br><span class="line">|        5 |           5 |        -4 |           -5 |</span><br><span class="line">+<span class="comment">----------+-------------+-----------+--------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h4><p><code>RAND()</code> 函数被调用时，可以产生一个在 0 和 1 之间的随机数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RAND</span>(), <span class="keyword">RAND</span>(), <span class="keyword">RAND</span>();</span><br><span class="line">+<span class="comment">------------------+-----------------+------------------+</span></span><br><span class="line">| RAND()           | RAND()          | RAND()           |</span><br><span class="line">+<span class="comment">------------------+-----------------+------------------+</span></span><br><span class="line">| 0.45464584925645 | 0.1824410643265 | 0.54826780459682 |</span><br><span class="line">+<span class="comment">------------------+-----------------+------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>当使用整数作为参数调用时，<code>RAND()</code> 使用该值作为随机数的种子发生器。每次种子使用给定值生成，<code>RAND()</code> 将产生一个可重复的系列数字。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RAND</span>(<span class="number">1</span>),<span class="keyword">RAND</span>(),<span class="keyword">RAND</span>(<span class="number">1</span>);</span><br><span class="line">+<span class="comment">---------------------+--------------------+---------------------+</span></span><br><span class="line">| RAND(1)             | RAND()             | RAND(1)             |</span><br><span class="line">+<span class="comment">---------------------+--------------------+---------------------+</span></span><br><span class="line">| 0.40540353712197724 | 0.7901452330780637 | 0.40540353712197724 |</span><br><span class="line">+<span class="comment">---------------------+--------------------+---------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h4><p><code>ROUND(x)</code> 函数返回最接近于参数 x 的整数；<code>ROUND(x,y)</code> 函数对参数 x 进行四舍五入的操作，返回值保留小数点后面指定的 y 位。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT ROUND(-6.6),ROUND(-8.44),ROUND(3.44);</span><br><span class="line">+<span class="comment">-------------+--------------+-------------+</span></span><br><span class="line">| ROUND(-6.6) | ROUND(-8.44) | ROUND(3.44) |</span><br><span class="line">+<span class="comment">-------------+--------------+-------------+</span></span><br><span class="line">|          -7 |           -8 |           3 |</span><br><span class="line">+<span class="comment">-------------+--------------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="number">-6.66</span>,<span class="number">1</span>),<span class="keyword">ROUND</span>(<span class="number">3.33</span>,<span class="number">3</span>),<span class="keyword">ROUND</span>(<span class="number">88.66</span>,<span class="number">-1</span>),<span class="keyword">ROUND</span>(<span class="number">88.46</span>,<span class="number">-2</span>);</span><br><span class="line">+<span class="comment">----------------+---------------+-----------------+-----------------+</span></span><br><span class="line">| ROUND(-6.66,1) | ROUND(3.33,3) | ROUND(88.66,-1) | ROUND(88.46,-2) |</span><br><span class="line">+<span class="comment">----------------+---------------+-----------------+-----------------+</span></span><br><span class="line">|           -6.7 |         3.330 |              90 |             100 |</span><br><span class="line">+<span class="comment">----------------+---------------+-----------------+-----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="返回参数的符号"><a href="#返回参数的符号" class="headerlink" title="返回参数的符号"></a>返回参数的符号</h4><p>符号函数 <code>SIGN(x)</code> 返回参数的符号，x 的值为负、零和正时返回结果依次为 -1、0 和 1。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SIGN</span>(<span class="number">-6</span>),<span class="keyword">SIGN</span>(<span class="number">0</span>),<span class="keyword">SIGN</span>(<span class="number">34</span>);</span><br><span class="line">+<span class="comment">----------+---------+----------+</span></span><br><span class="line">| SIGN(-6) | SIGN(0) | SIGN(34) |</span><br><span class="line">+<span class="comment">----------+---------+----------+</span></span><br><span class="line">|       -1 |       0 |        1 |</span><br><span class="line">+<span class="comment">----------+---------+----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="求次方"><a href="#求次方" class="headerlink" title="求次方"></a>求次方</h4><p><code>POW(x,y)</code> 函数和 <code>POWER(x,y)</code> 函数用于计算 x 的 y 次方。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">POW</span>(<span class="number">5</span>,<span class="number">-2</span>),<span class="keyword">POW</span>(<span class="number">10</span>,<span class="number">3</span>),<span class="keyword">POW</span>(<span class="number">100</span>,<span class="number">0</span>),<span class="keyword">POWER</span>(<span class="number">4</span>,<span class="number">3</span>),<span class="keyword">POWER</span>(<span class="number">6</span>,<span class="number">-3</span>);</span><br><span class="line">+<span class="comment">-----------+-----------+------------+------------+----------------------+</span></span><br><span class="line">| POW(5,-2) | POW(10,3) | POW(100,0) | POWER(4,3) | POWER(6,-3)          |</span><br><span class="line">+<span class="comment">-----------+-----------+------------+------------+----------------------+</span></span><br><span class="line">|      0.04 |      1000 |          1 |         64 | 0.004629629629629629 |</span><br><span class="line">+<span class="comment">-----------+-----------+------------+------------+----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="求正弦值"><a href="#求正弦值" class="headerlink" title="求正弦值"></a>求正弦值</h4><p>中正弦函数 <code>SIN(x)</code> 返回 x 的正弦值，其中 x 为弧度值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SIN</span>(<span class="number">1</span>),<span class="keyword">SIN</span>(<span class="number">0.5</span>*<span class="keyword">PI</span>());</span><br><span class="line">+<span class="comment">--------------------+---------------+</span></span><br><span class="line">| SIN(1)             | SIN(0.5*PI()) |</span><br><span class="line">+<span class="comment">--------------------+---------------+</span></span><br><span class="line">| 0.8414709848078965 |             1 |</span><br><span class="line">+<span class="comment">--------------------+---------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.15</span> sec)</span><br></pre></td></tr></table></figure><h4 id="求反正弦值"><a href="#求反正弦值" class="headerlink" title="求反正弦值"></a>求反正弦值</h4><p>反正弦函数 <code>ASIN(x)</code> 返回 x 的反正弦值，若 x 不在 -1 到 1 的范围之内，则返回 NULL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ASIN</span>(<span class="number">0.8414709848078965</span>),<span class="keyword">ASIN</span>(<span class="number">2</span>);</span><br><span class="line">+<span class="comment">--------------------------+---------+</span></span><br><span class="line">| ASIN(0.8414709848078965) | ASIN(2) |</span><br><span class="line">+<span class="comment">--------------------------+---------+</span></span><br><span class="line">|                        1 |    NULL |</span><br><span class="line">+<span class="comment">--------------------------+---------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><h4 id="求余弦值"><a href="#求余弦值" class="headerlink" title="求余弦值"></a>求余弦值</h4><p>余弦函数 <code>COS(x)</code> 返回 x 的余弦值，x 为弧度值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COS</span>(<span class="number">1</span>),<span class="keyword">COS</span>(<span class="number">0</span>),<span class="keyword">COS</span>(<span class="keyword">PI</span>());</span><br><span class="line">+<span class="comment">--------------------+--------+-----------+</span></span><br><span class="line">| COS(1)             | COS(0) | COS(PI()) |</span><br><span class="line">+<span class="comment">--------------------+--------+-----------+</span></span><br><span class="line">| 0.5403023058681398 |      1 |        -1 |</span><br><span class="line">+<span class="comment">--------------------+--------+-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><h4 id="求反余弦值"><a href="#求反余弦值" class="headerlink" title="求反余弦值"></a>求反余弦值</h4><p>反余弦函数 <code>ACOS(x)</code> 。x 值的范围必须在 -1 和 1 之间，否则返回 NULL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ACOS</span>(<span class="number">2</span>),<span class="keyword">ACOS</span>(<span class="number">1</span>),<span class="keyword">ACOS</span>(<span class="number">-1</span>);</span><br><span class="line">+<span class="comment">---------+---------+-------------------+</span></span><br><span class="line">| ACOS(2) | ACOS(1) | ACOS(-1)          |</span><br><span class="line">+<span class="comment">---------+---------+-------------------+</span></span><br><span class="line">|    NULL |       0 | 3.141592653589793 |</span><br><span class="line">+<span class="comment">---------+---------+-------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h4 id="求正切值"><a href="#求正切值" class="headerlink" title="求正切值"></a>求正切值</h4><p>正切函数 <code>TAN(x)</code> 返回 x 的正切值，x 为给定的弧度值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TAN</span>(<span class="number">1</span>),<span class="keyword">TAN</span>(<span class="number">0</span>);</span><br><span class="line">+<span class="comment">--------------------+--------+</span></span><br><span class="line">| TAN(1)             | TAN(0) |</span><br><span class="line">+<span class="comment">--------------------+--------+</span></span><br><span class="line">| 1.5574077246549023 |      0 |</span><br><span class="line">+<span class="comment">--------------------+--------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><h4 id="求反正切值"><a href="#求反正切值" class="headerlink" title="求反正切值"></a>求反正切值</h4><p>反正切 <code>ATAN(x)</code> 返回 x 的反正切值，正切为 x 的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ATAN</span>(<span class="number">1.5574077246549023</span>),<span class="keyword">ATAN</span>(<span class="number">0</span>);</span><br><span class="line">+<span class="comment">--------------------------+---------+</span></span><br><span class="line">| ATAN(1.5574077246549023) | ATAN(0) |</span><br><span class="line">+<span class="comment">--------------------------+---------+</span></span><br><span class="line">|                        1 |       0 |</span><br><span class="line">+<span class="comment">--------------------------+---------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br></pre></td></tr></table></figure><h4 id="求余切值"><a href="#求余切值" class="headerlink" title="求余切值"></a>求余切值</h4><p>余切函数 <code>COT(x)</code> 返回 x 的余切值，x 是给定的弧度值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> COT(<span class="number">1</span>);</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| COT(1)             |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| 0.6420926159343306 |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><h4 id="计算字符串长度"><a href="#计算字符串长度" class="headerlink" title="计算字符串长度"></a>计算字符串长度</h4><p><code>LENGTH(str)</code> 函数的返回值为字符串的字节长度，使用 uft8（UNICODE 的一种变长字符编码，又称万国码）编码字符集时，一个汉字是 3 个字节，一个数字或字母是一个字节。<code>CHAR_LENGTH(str)</code> 返回字符串的长度。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(<span class="string">'name'</span>),<span class="keyword">LENGTH</span>(<span class="string">'数据库'</span>), <span class="keyword">CHAR_LENGTH</span>(<span class="string">'name'</span>), <span class="keyword">CHAR_LENGTH</span>(<span class="string">'数据库'</span>);</span><br><span class="line">+<span class="comment">----------------+---------------------+----------------+---------------------+</span></span><br><span class="line">|LENGTH('name')  | LENGTH('数据库')    |LENGTH('name')  | LENGTH('数据库')    |</span><br><span class="line">+<span class="comment">----------------+---------------------+----------------+---------------------+</span></span><br><span class="line">|              4 |                   9 |              4 |                   3 |</span><br><span class="line">+<span class="comment">----------------+---------------------+----------------+---------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><p>中的 <code>CONCAT(sl，s2，...)</code> 函数返回结果为连接参数产生的字符串，或许有一个或多个参数。</p><p>若有任何一个参数为 <code>NULL</code>，则返回值为 <code>NULL</code>。若所有参数均为非二进制字符串，则结果为非二进制字符串。若自变量中含有任一二进制字符串，则结果为一个二进制字符串。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">'MySQL'</span>,<span class="string">'5.7'</span>),<span class="keyword">CONCAT</span>(<span class="string">'MySQL'</span>,<span class="literal">NULL</span>);</span><br><span class="line">+<span class="comment">-----------------------+----------------------+</span></span><br><span class="line">| CONCAT('MySQL','5.7') | CONCAT('MySQL',NULL) |</span><br><span class="line">+<span class="comment">-----------------------+----------------------+</span></span><br><span class="line">| MySQL5.7              | NULL                 |</span><br><span class="line">+<span class="comment">-----------------------+----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><h4 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h4><p>MySQL 中替换字符串函数 <code>INSERT(s1，x，len，s2)</code> 返回字符串 s1，子字符串起始于 x 位置，并且用 len 个字符长的字符串代替 s2。</p><p>若 x 超过字符串长度，则返回值为原始字符串。假如 len 的长度大于其他字符串的长度，则从位置 x 开始替换。若任何一个参数为 NULL，则返回值为 NULL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">'Football'</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="string">'Play'</span>) <span class="keyword">AS</span> col1,</span><br><span class="line">       <span class="keyword">INSERT</span>(<span class="string">'Football'</span>,<span class="number">-1</span>,<span class="number">4</span>,<span class="string">'Play'</span>) <span class="keyword">AS</span> col2,</span><br><span class="line">       <span class="keyword">INSERT</span>(<span class="string">'Football'</span>,<span class="number">3</span>,<span class="number">20</span>,<span class="string">'Play'</span>) <span class="keyword">AS</span> col3;</span><br><span class="line">+<span class="comment">----------+----------+--------+</span></span><br><span class="line">| col1     | col2     | col3   |</span><br><span class="line">+<span class="comment">----------+----------+--------+</span></span><br><span class="line">| FPlayall | Football | FoPlay |</span><br><span class="line">+<span class="comment">----------+----------+--------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure><h4 id="将字母转换成小写"><a href="#将字母转换成小写" class="headerlink" title="将字母转换成小写"></a>将字母转换成小写</h4><p>MySQL 中字母小写转换函数 <code>LOWER(str)</code> 可以将字符串 str 中的字母字符全部转换成小写。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOWER</span>(<span class="string">'BLUE'</span>),<span class="keyword">LOWER</span>(<span class="string">'Blue'</span>);</span><br><span class="line">+<span class="comment">---------------+---------------+</span></span><br><span class="line">| LOWER('BLUE') | LOWER('Blue') |</span><br><span class="line">+<span class="comment">---------------+---------------+</span></span><br><span class="line">| blue          | blue          |</span><br><span class="line">+<span class="comment">---------------+---------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><h4 id="将字母转换成大写"><a href="#将字母转换成大写" class="headerlink" title="将字母转换成大写"></a>将字母转换成大写</h4><p>MySQL 中字母大写转换函数 <code>UPPER(str)</code> 可以将字符串 str 中的字母字符全部转换成大写。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UPPER</span>(<span class="string">'green'</span>),<span class="keyword">UPPER</span>(<span class="string">'Green'</span>);</span><br><span class="line">+<span class="comment">----------------+----------------+</span></span><br><span class="line">| UPPER('green') | UPPER('Green') |</span><br><span class="line">+<span class="comment">----------------+----------------+</span></span><br><span class="line">| GREEN          | GREEN          |</span><br><span class="line">+<span class="comment">----------------+----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><h4 id="从左侧截取字符串"><a href="#从左侧截取字符串" class="headerlink" title="从左侧截取字符串"></a>从左侧截取字符串</h4><p>MySQL 中的 <code>LEFT(s，n)</code> 函数返回字符串 s 最左边的 n 个字符。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">'MySQL'</span>,<span class="number">2</span>);</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| LEFT('MySQL',2) |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| My              |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure><h4 id="从右侧截取字符串"><a href="#从右侧截取字符串" class="headerlink" title="从右侧截取字符串"></a>从右侧截取字符串</h4><p>MySQL 中的 <code>RIGHT(s，n)</code> 函数返回字符串 s 最右边的 n 个字符。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">'MySQL'</span>,<span class="number">3</span>);</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| RIGHT('MySQL',3) |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| SQL              |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="删除空格"><a href="#删除空格" class="headerlink" title="删除空格"></a>删除空格</h4><p>MySQL 中删除空格函数 <code>TRIM(s)</code> 删除字符串 s 两侧的空格。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'[   mobile   ]'</span>,<span class="keyword">CONCAT</span>(<span class="string">'['</span>,<span class="keyword">TRIM</span>(<span class="string">'   mobile   '</span>),<span class="string">']'</span>);</span><br><span class="line">+<span class="comment">----------------+--------------------------------------+</span></span><br><span class="line">| [   mobile   ] | CONCAT('[',TRIM('   mobile   '),']') |</span><br><span class="line">+<span class="comment">----------------+--------------------------------------+</span></span><br><span class="line">| [   mobile   ] | [mobile]                             |</span><br><span class="line">+<span class="comment">----------------+--------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.07</span> sec)</span><br></pre></td></tr></table></figure><h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><p>MySQL 中替换函数 <code>REPLACE(s，s1，s2)</code> 使用字符串 s2 替换字符串 s 中所有的字符串 s1。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(<span class="string">'aaa.mysql.com'</span>,<span class="string">'a'</span>,<span class="string">'w'</span>);</span><br><span class="line">+<span class="comment">----------------------------------+</span></span><br><span class="line">| <span class="keyword">REPLACE</span>(<span class="string">'aaa.mysql.com'</span>,<span class="string">'a'</span>,<span class="string">'w'</span>) |</span><br><span class="line">+<span class="comment">----------------------------------+</span></span><br><span class="line">| www.mysql.com                    |</span><br><span class="line">+<span class="comment">----------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h4><p>MySQL 中获取子串函数<code>SUBSTRING(s，n，len)</code> 带有 len 参数的格式，从字符串 s 返回一个长度同 len 字符相同的子字符串，起始于位置 n。</p><p>也可能对 n 使用一个负值。假若这样，则子字符串的位置起始于字符串结尾的第 n 个字符，即倒数第 n 个字符，而不是字符串的开头位置。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTRING</span>(<span class="string">'computer'</span>,<span class="number">3</span>) <span class="keyword">AS</span> col1,</span><br><span class="line">    -&gt; <span class="keyword">SUBSTRING</span>(<span class="string">'computer'</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="keyword">AS</span> col2,</span><br><span class="line">    -&gt; <span class="keyword">SUBSTRING</span>(<span class="string">'computer'</span>,<span class="number">-3</span>) <span class="keyword">AS</span> col3,</span><br><span class="line">    -&gt; <span class="keyword">SUBSTRING</span>(<span class="string">'computer'</span>,<span class="number">-5</span>,<span class="number">3</span>) <span class="keyword">AS</span> col4;</span><br><span class="line">+<span class="comment">--------+------+------+------+</span></span><br><span class="line">| col1   | col2 | col3 | col4 |</span><br><span class="line">+<span class="comment">--------+------+------+------+</span></span><br><span class="line">| mputer | mput | ter  | put  |</span><br><span class="line">+<span class="comment">--------+------+------+------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h4><p>MySQL 中字符串逆序函数 <code>REVERSE(s)</code> 可以将字符串 s 反转，返回的字符串的顺序和 s 字符串的顺序相反。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REVERSE</span>(<span class="string">'hello'</span>);</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| REVERSE('hello') |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| olleh            |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h2><h4 id="获取系统当前日期"><a href="#获取系统当前日期" class="headerlink" title="获取系统当前日期"></a>获取系统当前日期</h4><p>MySQL 中 <code>CURDATE()</code>和 <code>CURRENT_DATE()</code> 函数的作用相同，将当前日期按照“YYYY-MM-DD”或“YYYYMMDD”格式的值返回，具体格式根据函数用在字符串或数字语境中而定。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>(),<span class="keyword">CURRENT_DATE</span>(),<span class="keyword">CURRENT_DATE</span>()+<span class="number">0</span>;</span><br><span class="line">+<span class="comment">------------+----------------+------------------+</span></span><br><span class="line">| CURDATE()  | CURRENT_DATE() | CURRENT_DATE()+0 |</span><br><span class="line">+<span class="comment">------------+----------------+------------------+</span></span><br><span class="line">| 2017-04-01 | 2017-04-01     |         20170401 |</span><br><span class="line">+<span class="comment">------------+----------------+------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><p>由运行结果可以看到，两个函数的作用相同，返回了相同的系统当前日期，“CURDATE()+0”将当前日期值转换为数值型的。</p><h4 id="获取系统当前时间"><a href="#获取系统当前时间" class="headerlink" title="获取系统当前时间"></a>获取系统当前时间</h4><p>MySQL 中 <code>CURTIME()</code> 和<code>CURRENT_TIME()</code> 函数的作用相同，将当前时间以“HH：MM：SS”或“HHMMSS”格式返回，具体格式根据函数用在字符串或数字语境中而定。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURTIME</span>(),<span class="keyword">CURRENT_TIME</span>(),<span class="keyword">CURRENT_TIME</span>()+<span class="number">0</span>;</span><br><span class="line">+<span class="comment">-----------+----------------+------------------+</span></span><br><span class="line">| CURTIME() | CURRENT_TIME() | CURRENT_TIME()+0 |</span><br><span class="line">+<span class="comment">-----------+----------------+------------------+</span></span><br><span class="line">| 19:39:51  | 19:39:51       |           193951 |</span><br><span class="line">+<span class="comment">-----------+----------------+------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure><p>由运行结果可以看出，两个函数返回的结果相同，都返回了当前的系统时间。CURRENT_TIME()+0 是将当前日期值转换为数值型的。</p><h4 id="获取当前时间日期"><a href="#获取当前时间日期" class="headerlink" title="获取当前时间日期"></a>获取当前时间日期</h4><p>MySQL中 <code>NOW()</code> 和 <code>SYSDATE()</code> 函数的作用相同，都是返回当前日期和时间值，格式为“YYYY-MM-DD HH：MM：SS”或“YYYYMMDDHHMMSS”，具体格式根据函数用在字符串或数字语境中而定。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>(),<span class="keyword">SYSDATE</span>();</span><br><span class="line">+<span class="comment">---------------------+---------------------+</span></span><br><span class="line">| NOW()               | SYSDATE()           |</span><br><span class="line">+<span class="comment">---------------------+---------------------+</span></span><br><span class="line">| 2017-04-01 19:36:52 | 2017-04-01 19:36:52 |</span><br><span class="line">+<span class="comment">---------------------+---------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure><p>虽然在 MySQL 中 <code>NOW()</code> 和 <code>SYSDATE()</code> 都表示当前时间，但是 <code>NOW()</code> 取的是语句开始执行的时间，而 <code>SYSDATE()</code> 取的是语句执行过程中动态的实时时间。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>(),<span class="keyword">sysdate</span>(),<span class="keyword">sleep</span>(<span class="number">3</span>),<span class="keyword">now</span>(),<span class="keyword">sysdate</span>();</span><br><span class="line">+<span class="comment">-----------------------+------------------------+-------------+-----------------------+---------------------+</span></span><br><span class="line">| now()                 | sysdate()              | sleep(3)    | now()                 | sysdate()           |</span><br><span class="line">+<span class="comment">-----------------------+------------------------+-------------+------------------- ---+---------------------+</span></span><br><span class="line">| 2019-02-27 10:59:39   | 2019-02-27 10:59:39    |        0    | 2019-02-27 10:59:39   | 2019-02-27 10:59:42 |</span><br><span class="line">+<span class="comment">-----------------------+------------------------+-------------+-----------------------+---------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">3.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="获取-UNIX-时间戳"><a href="#获取-UNIX-时间戳" class="headerlink" title="获取 UNIX 时间戳"></a>获取 UNIX 时间戳</h4><p>MySQL <code>UNIX_TIMESTAMP(date)</code> 若无参数调用，返回一个无符号整数类型的 UNIX 时间戳（’1970-01-01 00:00:00’GMT之后的秒数）。若用 date 来调用 <code>UNIX_TIMESTAMP()</code>，它会将参数值以’1970-01-01 00:00:00’GMT后的秒数的形式返回。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UNIX_TIMESTAMP</span>(),<span class="keyword">UNIX_TIMESTAMP</span>(<span class="keyword">NOW</span>()),<span class="keyword">NOW</span>();</span><br><span class="line">+<span class="comment">------------------+-----------------------+---------------------+</span></span><br><span class="line">| UNIX_TIMESTAMP() | UNIX_TIMESTAMP(NOW()) | NOW()               |</span><br><span class="line">+<span class="comment">------------------+-----------------------+---------------------+</span></span><br><span class="line">|       1551251270 |            1551251270 | 2019-02-27 15:07:50 |</span><br><span class="line">+<span class="comment">------------------+-----------------------+---------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="时间戳转日期"><a href="#时间戳转日期" class="headerlink" title="时间戳转日期"></a>时间戳转日期</h4><p>MySQL <code>FROM_UNIXTIME(date)</code> 函数把 UNIX 时间戳转换为普通格式的日期时间值，与 <code>UNIX_TIMESTAMP ()</code> 函数互为反函数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FROM_UNIXTIME(<span class="number">1150051270</span>);</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">| FROM_UNIXTIME(1150051270) |</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">| 2006-06-12 02:41:10       |</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="获取指定日期的月份"><a href="#获取指定日期的月份" class="headerlink" title="获取指定日期的月份"></a>获取指定日期的月份</h4><p>MySQL 中 <code>MONTH(date)</code> 函数返回指定 date 对应的月份，范围为 1～12。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="string">'2017-12-15'</span>);</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| MONTH('2017-12-15') |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">|                  12 |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="获取指定日期月份的英文名称"><a href="#获取指定日期月份的英文名称" class="headerlink" title="获取指定日期月份的英文名称"></a>获取指定日期月份的英文名称</h4><p>MySQL 中 <code>MONTHNAME(date)</code> 函数返回日期 date 对应月份的英文全名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> MONTHNAME(<span class="string">'2017-12-15'</span>);</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| MONTHNAME('2017-12-15') |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| December                |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="获取指定日期的星期名称"><a href="#获取指定日期的星期名称" class="headerlink" title="获取指定日期的星期名称"></a>获取指定日期的星期名称</h4><p>MySQL <code>DAYNAME(date)</code> 函数返回 date 对应的工作日英文名称，例如 Sunday、Monday 等。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAYNAME</span>(<span class="string">'2006-06-12'</span>);</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">| DAYNAME('2006-06-12') |</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">| Monday                |</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="获取日期对应的周索引"><a href="#获取日期对应的周索引" class="headerlink" title="获取日期对应的周索引"></a>获取日期对应的周索引</h4><p>MySQL 中 <code>DAYOFWEEK(d)</code> 函数返回 d 对应的一周中的索引（位置）。1 表示周日，2 表示周一，……，7 表示周六。这些索引值对应于ODBC标准。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAYOFWEEK</span>(<span class="string">'2017-12-15'</span>);</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| DAYOFWEEK('2017-12-15') |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">|                       6 |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure><h4 id="获取指定日期是一年中的第几周"><a href="#获取指定日期是一年中的第几周" class="headerlink" title="获取指定日期是一年中的第几周"></a>获取指定日期是一年中的第几周</h4><p>MySQL <code>WEEK()</code> 函数计算日期 date 是一年中的第几周。WEEK(date,mode) 函数允许指定星期是否起始于周日或周一，以及返回值的范围是否为 0～52 或 1～53。</p><p>WEEK函数接受两个参数：</p><ol><li>date是要获取周数的日期。</li><li>mode是一个可选参数，用于确定周数计算的逻辑。</li></ol><p>如果忽略 mode 参数，默认情况下 WEEK 函数将使用 default_week_format 系统变量的值。要获取 default_week_format 变量的当前值，请使用 SHOW VARIABLES 语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'default_week_format'</span>;</span><br><span class="line">+<span class="comment">---------------------+-------+</span></span><br><span class="line">| Variable_name       | Value |</span><br><span class="line">+<span class="comment">---------------------+-------+</span></span><br><span class="line">| default_week_format | 0     |</span><br><span class="line">+<span class="comment">---------------------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span></span><br></pre></td></tr></table></figure><p>使用 <code>WEEK(date)</code> 函数查询指定日期是一年中的第几周。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">WEEK</span>(<span class="string">'2018-10-25'</span>,<span class="number">1</span>);</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line">| WEEK('2018-10-25',1) |</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line">|                   43 |</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="获取指定日期在一年中的位置"><a href="#获取指定日期在一年中的位置" class="headerlink" title="获取指定日期在一年中的位置"></a>获取指定日期在一年中的位置</h4><p>MySQL 中 <code>DAYOFYEAR(d)</code> 函数返回 d 是一年中的第几天，范围为 1～366。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAYOFYEAR</span>(<span class="string">'2017-12-15'</span>);</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| DAYOFYEAR('2017-12-15') |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">|                     349 |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>由运行结果可以看出，1、3、5、7、8、10月份各31天，2月份各28天，4、6、9、11月份各30天，再加上12月份15天，因此返回结果为349。</p><h4 id="获取指定日期在一个月的位置"><a href="#获取指定日期在一个月的位置" class="headerlink" title="获取指定日期在一个月的位置"></a>获取指定日期在一个月的位置</h4><p>MySQL 中 <code>DAYOFMONTH(d)</code> 函数返回 d 是一个月中的第几天，范围为 1～31。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAYOFMONTH</span>(<span class="string">'2017-12-15'</span>);</span><br><span class="line">+<span class="comment">--------------------------+</span></span><br><span class="line">| DAYOFMONTH('2017-12-15') |</span><br><span class="line">+<span class="comment">--------------------------+</span></span><br><span class="line">|                       15 |</span><br><span class="line">+<span class="comment">--------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h4 id="获取年份"><a href="#获取年份" class="headerlink" title="获取年份"></a>获取年份</h4><p>MySQL <code>YEAR()</code> 函数可以从指定日期值中来获取年份值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="keyword">NOW</span>());</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">| YEAR(NOW()) |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">|        2019 |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="将时间转换为秒值"><a href="#将时间转换为秒值" class="headerlink" title="将时间转换为秒值"></a>将时间转换为秒值</h4><p>MySQL TIME_TO_SEC(time) 函数返回将参数 time 转换为秒数的时间值，转换公式为“小时 ×3600+ 分钟 ×60+ 秒”。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TIME_TO_SEC(<span class="string">'15:15:15'</span>);</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| TIME_TO_SEC('15:15:15') |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">|                   54915 |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="将秒值转换为时间格式"><a href="#将秒值转换为时间格式" class="headerlink" title="将秒值转换为时间格式"></a>将秒值转换为时间格式</h4><p>MySQL <code>SEC_TO_TIME(seconds)</code> 函数返回将参数 seconds 转换为小时、分钟和秒数的时间值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SEC_TO_TIME</span>(<span class="string">'54925'</span>);</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line">| SEC_TO_TIME('54925') |</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line">| 15:15:25             |</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="向日期添加指定时间间隔"><a href="#向日期添加指定时间间隔" class="headerlink" title="向日期添加指定时间间隔"></a>向日期添加指定时间间隔</h4><p>MySQL <code>DATE_ADD(date,INTERVAL expr type)</code> 和 <code>ADDDATE(date,INTERVAL expr type)</code> 两个函数的作用相同，都是用于执行日期的加运算。</p><p>DATE_ADD() 和 ADDDATE() 函数有两个参数：</p><ol><li>date 是 DATE 或 DATETIME 的起始值。</li><li>INTERVAL expr type是要添加到起始日期值的间隔值。</li></ol><p>使用 DATE_ADD(date,INTERVAL expr type) 函数执行日期的加运算。输入 SQL 语句和执行结果如下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_ADD</span>(<span class="string">'2018-10-31 23:59:59'</span>,<span class="built_in">INTERVAL</span> <span class="number">1</span> <span class="keyword">SECOND</span>) <span class="keyword">AS</span> C1,</span><br><span class="line">       <span class="keyword">DATE_ADD</span>(<span class="string">'2018-10-31 23:59:59'</span>,<span class="built_in">INTERVAL</span> <span class="string">'1:1'</span> MINUTE_SECOND) <span class="keyword">AS</span> C2,</span><br><span class="line">       ADDDATE(<span class="string">'2018-10-31 23:59:59'</span>,<span class="built_in">INTERVAL</span> <span class="number">1</span> <span class="keyword">SECOND</span>) <span class="keyword">AS</span> C3;</span><br><span class="line">+<span class="comment">---------------------+---------------------+---------------------+</span></span><br><span class="line">| C1                  | C2                  | C3                  |</span><br><span class="line">+<span class="comment">---------------------+---------------------+---------------------+</span></span><br><span class="line">| 2018-11-01 00:00:00 | 2018-11-01 00:01:00 | 2018-11-01 00:00:00 |</span><br><span class="line">+<span class="comment">---------------------+---------------------+---------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>由执行结果可以看出，<code>DATE_ADD(date,INTERVAL expr type)</code> 和 <code>ADDDATE(date,INTERVAL expr type)</code> 函数的功能完全相同，在原始时间 ‘2018-10-31 23:59:59’ 上加 1 秒之后结果都是 ‘2018-11-01 00:00:00’ ；在原始时间上加 1 分钟 1 秒的写法是表达式 ‘1:1’，最终可得结果 ‘2018-11-01 00:01:00’。</p><p>使用 <code>ADDDATE()</code> 函数执行日期的加操作，输入的 SQL 语句和执行结果如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ADDDATE(<span class="string">'2017-11-30 23:59:59'</span>, <span class="built_in">INTERVAL</span> <span class="number">1</span> <span class="keyword">SECOND</span>) <span class="keyword">AS</span> col1,</span><br><span class="line">       ADDDATE(<span class="string">'2017-11-30 23:59:59'</span> ,<span class="built_in">INTERVAL</span> <span class="string">'1:1'</span> MINUTE_SECOND) <span class="keyword">AS</span> col2;</span><br><span class="line">+<span class="comment">---------------------+---------------------+</span></span><br><span class="line">| col1                | col2                |</span><br><span class="line">+<span class="comment">---------------------+---------------------+</span></span><br><span class="line">| 2017-12-01 00:00:00 | 2017-12-01 00:01:00 |</span><br><span class="line">+<span class="comment">---------------------+---------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>由运行结果可以看到，<code>ADDDATE(&#39;2017-11-30 23：59：59&#39;，INTERVAL 1 SECOND)</code> 函数执行的结果将时间增加 1 秒后返回，结果为“2017-12-01 00：00：00”；<code>ADDDATE(&#39;2017-11-30 23：59：59&#39;，INTERVAL&#39;1：1&#39;MINUTE_SECOND)</code> 函数的日期运算类型是 MINUTE_SECOND，将指定时间增加 1 分 1 秒后返回，结果为“2017-12-01 00：01：00”。</p><h4 id="日期减法运算"><a href="#日期减法运算" class="headerlink" title="日期减法运算"></a>日期减法运算</h4><p>MySQL <code>DATE_SUB(date,INTERVAL expr type)</code> 和 <code>SUBDATE(date,INTERVAL expr type)</code> 两个函数作用相同，都是执行日期的减法运算。</p><p><code>DATE_SUB()</code> 和 <code>SUBDATE()</code> 函数接受两个参数：</p><ol><li>date 是 DATE 或 DATETIME 的起始值。</li><li>expr 是一个字符串，用于确定从起始日期减去的间隔值。type 是 expr 可解析的间隔单位，例如 DAY，HOUR 等</li></ol><p>使用 <code>DATE_SUB(date,INTERVAL expr type)</code> 和 <code>SUBDATE(date,INTERVAL expr type)</code> 函数执行日期的减运算，输入 SQL 语句与执行结果如下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_SUB</span>(<span class="string">'2018-01-02'</span>,<span class="built_in">INTERVAL</span> <span class="number">31</span> <span class="keyword">DAY</span>) <span class="keyword">AS</span> C1,</span><br><span class="line">       <span class="keyword">SUBDATE</span>(<span class="string">'2018-01-02'</span>,<span class="built_in">INTERVAL</span> <span class="number">31</span> <span class="keyword">DAY</span>) <span class="keyword">AS</span> C2,</span><br><span class="line">       <span class="keyword">DATE_SUB</span>(<span class="string">'2018-01-01 00:01:00'</span>,<span class="built_in">INTERVAL</span> <span class="string">'0 0:1:1'</span> DAY_SECOND) <span class="keyword">AS</span> C3;</span><br><span class="line">+<span class="comment">------------+------------+---------------------+</span></span><br><span class="line">| C1         | C2         | C3                  |</span><br><span class="line">+<span class="comment">------------+------------+---------------------+</span></span><br><span class="line">| 2017-12-02 | 2017-12-02 | 2017-12-31 23:59:59 |</span><br><span class="line">+<span class="comment">------------+------------+---------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>由执行结果可以看出，DATE_SUB(date,INTERVAL expr type) 和SUBDATE (date,INTERVAL expr type) 函数的功能完全相同。</p><p><code>DATE_ADD(date,INTERVAL expr type)</code> 和 <code>DATE_SUB(date,INTERVAL expr type)</code> 函数在指定加减的时间段时也可以指定负值，加法的负值即返回原始时间之前的日期和时间，减法的负值即返回原始时间之后的日期和时间。</p><h4 id="时间加法运算"><a href="#时间加法运算" class="headerlink" title="时间加法运算"></a>时间加法运算</h4><p>MySQL <code>ADDTIME(time,expr)</code> 函数用于执行时间的加法运算。添加 expr 到 time 并返回结果。其中：time 是一个时间或日期时间表达式，expr 是一个时间表达式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ADDTIME</span>(<span class="string">'2018-10-31 23:59:59'</span>,<span class="string">'0:1:1'</span>),</span><br><span class="line">       <span class="keyword">ADDTIME</span>(<span class="string">'10:30:59'</span>,<span class="string">'5:10:37'</span>);</span><br><span class="line">+<span class="comment">----------------------------------------+-------------------------------+</span></span><br><span class="line">| ADDTIME('2018-10-31 23:59:59','0:1:1') | ADDTIME('10:30:59','5:10:37') |</span><br><span class="line">+<span class="comment">----------------------------------------+-------------------------------+</span></span><br><span class="line">| 2018-11-01 00:01:00                    | 15:41:36                      |</span><br><span class="line">+<span class="comment">----------------------------------------+-------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="时间减法运算"><a href="#时间减法运算" class="headerlink" title="时间减法运算"></a>时间减法运算</h4><p>MySQL <code>SUBTIME(time,expr)</code> 函数用于执行时间的减法运算。其中：函数返回 time。expr 表示的值和格式 time 相同。time 是一个时间或日期时间表达式， expr 是一个</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBTIME</span>(<span class="string">'2018-10-31 23:59:59'</span>,<span class="string">'0:1:1'</span>),<span class="keyword">SUBTIME</span>(<span class="string">'10:30:59'</span>,<span class="string">'5:12:37'</span>);</span><br><span class="line">+<span class="comment">----------------------------------------+-------------------------------+</span></span><br><span class="line">| SUBTIME('2018-10-31 23:59:59','0:1:1') | SUBTIME('10:30:59','5:12:37') |</span><br><span class="line">+<span class="comment">----------------------------------------+-------------------------------+</span></span><br><span class="line">| 2018-10-31 23:58:58                    | 05:18:22                      |</span><br><span class="line">+<span class="comment">----------------------------------------+-------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="获取两个日期的时间间隔"><a href="#获取两个日期的时间间隔" class="headerlink" title="获取两个日期的时间间隔"></a>获取两个日期的时间间隔</h4><p>MySQL 中 <code>DATEDIFF(date1，date2)</code> 返回起始时间 date1 和结束时间 date2 之间的天数。date1 和 date2 为日期或 date-and-time 表达式。计算时只用到这些值的日期部分。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATEDIFF</span>(<span class="string">'2017-11-30'</span>,<span class="string">'2017-11-29'</span>) <span class="keyword">AS</span> COL1,</span><br><span class="line">       <span class="keyword">DATEDIFF</span>(<span class="string">'2017-11-30'</span>,<span class="string">'2017-12-15'</span>) <span class="keyword">AS</span> col2;</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">| COL1 | col2 |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">|    1 |  -15 |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="格式化指定的日期"><a href="#格式化指定的日期" class="headerlink" title="格式化指定的日期"></a>格式化指定的日期</h4><p>MySQL 中 <code>DATE_FORMAT(date，format)</code> 函数是根据 format 指定的格式显示 date 值。</p><p>DATE_FORMAT() 函数接受两个参数：</p><ol><li>date：是要格式化的有效日期值</li><li>format：是由预定义的说明符组成的格式字符串，每个说明符前面都有一个百分比字符(%)。</li></ol><p>主要的 format 格式如下表所示。</p><div class="table-container"><table><thead><tr><th style="text-align:left">说明符</th><th>说明</th><th>说明符</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">%a</td><td>工作日的缩写名称（Sun~Sat)</td><td>%b</td><td>月份的缩写名称（Jan…Dec)</td></tr><tr><td style="text-align:left">%c</td><td>月份，数字形式（0~12)</td><td>%D</td><td>带有英语后缀的该月日期(0th, 2st, 3nd,…）</td></tr><tr><td style="text-align:left">%d</td><td>该月日期，数字形式（00~31)</td><td>%e</td><td>该月日期，数字形式（(0~31)</td></tr><tr><td style="text-align:left">%f</td><td>微秒（000000 …999999)</td><td>%H</td><td>以 2 位数表示 24 小时（00~23)</td></tr><tr><td style="text-align:left">%h, %I</td><td>以 2 位数表示 12 小时（01~12)</td><td>%i</td><td>分钟，数字形式(00~59)</td></tr><tr><td style="text-align:left">%j</td><td>—年中的天数（001~366)</td><td>%k</td><td>以 24 小时（0~23)表示</td></tr><tr><td style="text-align:left">%l</td><td>以12小时（1~12)表示</td><td>%M</td><td>月份名称（January~December)</td></tr><tr><td style="text-align:left">%m</td><td>月份，数字形式（00~12)</td><td>%p</td><td>上午（AM) 或下午（PM)</td></tr><tr><td style="text-align:left">%r</td><td>时间，12小时制（hh:mm:ss 后加 AM 或 PM)</td><td>%S, %s</td><td>以 2 位数形式表示秒（00~59)</td></tr><tr><td style="text-align:left">%T</td><td>时间，24 小时制（小时 (hh): 分钟 (mm): 秒数 (ss))</td><td>%U</td><td>周（00~53)，其中周日为每周的第一天</td></tr><tr><td style="text-align:left">%u</td><td>周（00~53)，其中周一为每周的第一天</td><td>%V</td><td>周（01~53)，其中周日为每周的第一天，和％X同时使用</td></tr><tr><td style="text-align:left">%v</td><td>周（01~53)，其中周一为每周的第一天，和%x同时使用</td><td>%W</td><td>星期标识（周日、周一、周二…周六）</td></tr><tr><td style="text-align:left">%w</td><td>—周中的每日（0= 周日…6= 周六）</td><td>%X</td><td>该周的年份，以周日第一天，数字形式，4 位数，和％V同时使用</td></tr><tr><td style="text-align:left">%x</td><td>该周的年份，以周一为第一天，数字形式，4位数，和%v同时使用</td><td>%Y</td><td>4 位数形式表示年份</td></tr><tr><td style="text-align:left">%y</td><td>2 位数形式表示年份</td><td>%%</td><td>%一个文字字符</td></tr></tbody></table></div><p>使用 DATE_FORMAT() 函数格式化输出日期和时间值，输入的 SQL 语句和执行结果如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(<span class="string">'2017-11-15 21:45:00'</span>,<span class="string">'%W %M %D %Y'</span>) <span class="keyword">AS</span> col1,</span><br><span class="line">       <span class="keyword">DATE_FORMAT</span>(<span class="string">'2017-11-15 21:45:00'</span>,<span class="string">'%h:i% %p %M %D %Y'</span>) <span class="keyword">AS</span> col2;</span><br><span class="line">+<span class="comment">------------------------------+----------------------------+</span></span><br><span class="line">| col1                         | col2                       |</span><br><span class="line">+<span class="comment">------------------------------+----------------------------+</span></span><br><span class="line">| Wednesday November 15th 2017 | 09:i PM November 15th 2017 |</span><br><span class="line">+<span class="comment">------------------------------+----------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><h4 id="获取指定日期在一周内的索引位置"><a href="#获取指定日期在一周内的索引位置" class="headerlink" title="获取指定日期在一周内的索引位置"></a>获取指定日期在一周内的索引位置</h4><p>MySQL 中 <code>WEEKDAY(d)</code> 返回 d 对应的工作日索引。0 表示周一，1 表示周二，……，6 表示周日。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">WEEKDAY</span>(<span class="string">'2017-12-15'</span>);</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">| WEEKDAY('2017-12-15') |</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">|                     4 |</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>聚合函数对一组值进行计算并返回单一的值，通常聚合函数会与 <code>SELECT</code> 语句的 <code>GROUP BY</code> 子句一同使用，在与 <code>GROUP BY</code> 子句使用时，聚合函数会为每一个组产生一个单一值，而不会为整个表产生一个单一值。</p><h4 id="查询指定列的最大值"><a href="#查询指定列的最大值" class="headerlink" title="查询指定列的最大值"></a>查询指定列的最大值</h4><p>MySQL <code>MAX()</code> 函数是用来返回指定列中的最大值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_students_score;</span><br><span class="line">+<span class="comment">--------------+---------------+</span></span><br><span class="line">| student_name | student_score |</span><br><span class="line">+<span class="comment">--------------+---------------+</span></span><br><span class="line">| Dany         |            90 |</span><br><span class="line">| Green        |            99 |</span><br><span class="line">| Henry        |            95 |</span><br><span class="line">| Jane         |            98 |</span><br><span class="line">| Jim          |            88 |</span><br><span class="line">| John         |            94 |</span><br><span class="line">| Lily         |           100 |</span><br><span class="line">| Susan        |            96 |</span><br><span class="line">| Thomas       |            93 |</span><br><span class="line">| Tom          |            89 |</span><br><span class="line">+<span class="comment">--------------+---------------+</span></span><br><span class="line">10 rows in <span class="keyword">set</span> (<span class="number">0.13</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(student_score) <span class="keyword">AS</span> max_score <span class="keyword">FROM</span> tb_students_score;</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| max_score |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">|       100 |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.06</span> sec)</span><br></pre></td></tr></table></figure><p><code>MAX()</code> 函数不仅适用于查找数值类型，也可应用于字符类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(student_name) <span class="keyword">AS</span> max_name <span class="keyword">FROM</span> tb_students_score;</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| max_name |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| Tom      |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><p>由运行结果可以看到，MAX() 函数可以对字母进行大小判断，并返回最大的字符或者字符串值。</p><p>注意：MAX() 函数还可以返回任意列中的最大值，包括返回字符类型的最大值。在对字符类型的数据进行比较时，按照字符的 ASCII 码值大小进行比较，从 a～z，a 的 ASCII 码最小，z 的最大。在比较时，先比较第一个字符，如果相等，继续比较下一个字符，一直到两个字符不相等或者字符结束为止。例如，b 与 t 比较时，t 为最大值；bcd 与 bca 比较时，bcd 为最大值。</p><h4 id="查询指定列的最小值"><a href="#查询指定列的最小值" class="headerlink" title="查询指定列的最小值"></a>查询指定列的最小值</h4><p>MySQL <code>MIN()</code> 函数是用来返回查询列中的最小值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(student_score) <span class="keyword">AS</span> min_score <span class="keyword">FROM</span> tb_students_score;</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| min_score |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">|        88 |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="统计查询结果的行数"><a href="#统计查询结果的行数" class="headerlink" title="统计查询结果的行数"></a>统计查询结果的行数</h4><p>MySQL <code>COUNT()</code> 函数统计数据表中包含的记录行的总数，或者根据查询结果返回列中包含的数据行数，使用方法有以下两种：</p><ol><li><code>COUNT(*)</code> 计算表中总的行数，无论某列有数值或者为空值。</li><li><code>COUNT(字段名)</code> 计算指定列下总的行数，计算时将忽略空值的行。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(student_name) AS students_number FROM tb_students_score;</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| students_number |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">|              10 |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><p>由查询结果可以看到，COUNT(*) 返回 tb_students_score 表中记录的总行数，无论值是什么。返回的总数的名称为 students_number。</p><blockquote><p>在计算总数的时候对待 NULL 值的方式是，指定列的值为空的行被 COUNT() 函数忽略，但若不指定列，而在 COUNT() 函数中使用星号“*”，则所有记录都不忽略。</p></blockquote><h4 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h4><p>MySQL <code>SUM()</code> 是一个求总和的函数，返回指定列值的总和。</p><p>SUM() 函数是如何工作的？</p><ol><li>如果在没有返回匹配行 SELECT 语句中使用 SUM 函数，则 SUM 函数返回 NULL，而不是 0。</li><li>DISTINCT 运算符允许计算集合中的不同值。</li><li>SUM 函数忽略计算中的 NULL 值。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(student_score) <span class="keyword">AS</span> score_sum <span class="keyword">FROM</span> tb_students_score;</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| score_sum |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">|       942 |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>由查询结果可以看到，SUM() 函数返回学生的所有成绩之和为 942。</p><blockquote><p><code>SUM()</code> 函数在计算时，忽略列值为 <code>NULL</code> 的行。</p></blockquote><h4 id="求平均值"><a href="#求平均值" class="headerlink" title="求平均值"></a>求平均值</h4><p>MySQL <code>AVG()</code> 函数通过计算返回的行数和每一行数据的和，求得指定列数据的平均值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(student_score) <span class="keyword">AS</span> score_avg <span class="keyword">FROM</span> tb_students_score;</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| score_avg |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">|   94.2000 |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>AVG()</code> 函数时，参数为要计算的列名称，若要得到多个列的平均值，则需要在每一列都使用 <code>AVG()</code> 函数。</p></blockquote><h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><h5 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h5><p>MySQL <code>IF</code> 语句允许您根据表达式的某个条件或值结果来执行一组 SQL 语句。</p><p>要在 MySQL 中形成一个表达式，可以结合文字，变量，运算符，甚至函数来组合。表达式可以返回 <code>TRUE</code>，<code>FALSE</code> 或 <code>NULL</code> 这三个值之一。</p><p>语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF(expr,v1,v2)</span><br></pre></td></tr></table></figure><p>其中：表达式 expr 得到不同的结果，当 expr 为真是返回 v1 的值，否则返回 v2。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="number">1</span>&lt;<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>) c1,<span class="keyword">IF</span>(<span class="number">1</span>&gt;<span class="number">5</span>,<span class="string">'√'</span>,<span class="string">'×'</span>) c2,<span class="keyword">IF</span>(<span class="keyword">STRCMP</span>(<span class="string">'abc'</span>,<span class="string">'ab'</span>),<span class="string">'yes'</span>,<span class="string">'no'</span>) c3;</span><br><span class="line">+<span class="comment">----+----+-----+</span></span><br><span class="line">| c1 | c2 | c3  |</span><br><span class="line">+<span class="comment">----+----+-----+</span></span><br><span class="line">|  1 | × | yes |</span><br><span class="line">+<span class="comment">----+----+-----+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">2</span> <span class="keyword">warnings</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>由执行结果可以看出，在 c1 中，表达式 1<2 所得的结果是 `TRUE`，则返回结果为 v1，即数值 1；在 c2 中，表达式 1>5 所得的结果是 <code>FALSE</code>，则返回结果为 v2，即字符串 ‘×’；在 c3 中，先用 <code>STRCMP(s1,s2)</code> 函数比较两个字符串的大小，字符串 ‘abc’ 和 ‘ab’ 比较结果的返回值为 1，也就是表达式 expr 的返回结果不等于 0 且不等于 <code>NULL</code>，则返回值为 v1，即字符串 ‘yes’。</p><h4 id="判断是否为空"><a href="#判断是否为空" class="headerlink" title="判断是否为空"></a>判断是否为空</h4><p>MySQL <code>IFNULL</code> 函数是 MySQL 控制流函数之一，它接受两个参数，如果不是 NULL，则返回第一个参数。 否则，<code>IFNULL</code> 函数返回第二个参数。两个参数可以是文字值或表达式。</p><p>语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IFNULL(v1,v2);</span><br></pre></td></tr></table></figure><p>其中：如果 v1 不为 <code>NULL</code>，则 <code>IFNULL</code> 函数返回 v1; 否则返回 v2 的结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ELECT IFNULL(5,8),IFNULL(NULL,'OK'),IFNULL(SQRT(-8),'FALSE'),SQRT(-8);</span><br><span class="line">+<span class="comment">-------------+-------------------+--------------------------+----------+</span></span><br><span class="line">| IFNULL(5,8) | IFNULL(NULL,'OK') | IFNULL(SQRT(-8),'FALSE') | SQRT(-8) |</span><br><span class="line">+<span class="comment">-------------+-------------------+--------------------------+----------+</span></span><br><span class="line">|           5 | OK                | FALSE                    |     NULL |</span><br><span class="line">+<span class="comment">-------------+-------------------+--------------------------+----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>由执行结果可以看出，<code>IFNULL(v1,v2)</code> 函数中的参数 v1=5、v2=8，都不为空，即 v1=5 不为空，返回 v1 的值为 5；当 v1=NULL 时，返回 v2 的值，即字符串 ‘OK’；当 v1=SQRT(-8) 时，SQRT(-8) 函数的返回值为NULL，即 v1=NULL，所以返回 v2 为字符串 ‘false’。</p><h4 id="搜索语句"><a href="#搜索语句" class="headerlink" title="搜索语句"></a>搜索语句</h4><p>除了 IF 函数，MySQL 还提供了一个替代的条件语句 CASE。 MySQL CASE 语句使代码更加可读和高效。</p><p>CASE 语句有两种形式：简单的和可搜索 CASE 语句。</p><p>简单的 CASE 语句就是指使用简单 CASE 语句来检查表达式的值与一组唯一值的匹配。</p><p>简单的 CASE 语句的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE  &lt;表达式&gt;</span><br><span class="line">   WHEN &lt;值1&gt; THEN &lt;操作&gt;</span><br><span class="line">   WHEN &lt;值2&gt; THEN &lt;操作&gt;</span><br><span class="line">   ...</span><br><span class="line">   ELSE &lt;操作&gt;</span><br><span class="line">END CASE;</span><br></pre></td></tr></table></figure><p>其中：&lt;表达式&gt; 可以是任何有效的表达式。我们将 &lt;表达式&gt; 的值与每个 WHEN 子句中的值进行比较，例如 &lt;值1&gt;，&lt;值2&gt; 等。如果 &lt;表达式&gt; 和 &lt;值n&gt; 的值相等，则执行相应的 WHEN 分支中的命令 &lt;操作&gt;。如果 WHEN 子句中的 &lt;值n&gt; 没有与 &lt;表达式&gt; 的值匹配，则 ELSE 子句中的命令将被执行。ELSE 子句是可选的。 如果省略 ELSE 子句，并且找不到匹配项，MySQL 将引发错误。</p><p>使用 CASE 函数根据表达式的取值返回相应值，输入SQL 语句和执行结果如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WEEKDAY</span>(<span class="keyword">NOW</span>()) <span class="keyword">WHEN</span> <span class="number">0</span> <span class="keyword">THEN</span> <span class="string">'星期一'</span> </span><br><span class="line">                           <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'星期二'</span> </span><br><span class="line">                           <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">'星期三'</span> </span><br><span class="line">                           <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> <span class="string">'星期四'</span> </span><br><span class="line">                           <span class="keyword">WHEN</span> <span class="number">4</span> <span class="keyword">THEN</span> <span class="string">'星期五'</span> </span><br><span class="line">                           <span class="keyword">WHEN</span> <span class="number">5</span> <span class="keyword">THEN</span> <span class="string">'星期六'</span></span><br><span class="line">                           <span class="keyword">ELSE</span> <span class="string">'星期天'</span> </span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">AS</span> COLUMN1,</span><br><span class="line">        <span class="keyword">NOW</span>(),</span><br><span class="line">        <span class="keyword">WEEKDAY</span>(<span class="keyword">NOW</span>()),</span><br><span class="line">        <span class="keyword">DAYNAME</span>(<span class="keyword">NOW</span>());</span><br><span class="line">+<span class="comment">---------+---------------------+----------------+----------------+</span></span><br><span class="line">| COLUMN1 | NOW()               | WEEKDAY(NOW()) | DAYNAME(NOW()) |</span><br><span class="line">+<span class="comment">---------+---------------------+----------------+----------------+</span></span><br><span class="line">| 星期四  | 2019-02-28 13:45:43 |              3 | Thursday       |</span><br><span class="line">+<span class="comment">---------+---------------------+----------------+----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">7</span> <span class="keyword">warnings</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>由执行结果可以看出，NOW() 函数得到当前系统时间是 2019 年 2 月 28 日，DAYNAME(NOW()) 得到当天是 ‘Thursday ‘，WEEKDAY(NOW()) 函数返回当前时间的工作日索引是 3，即对应的是星期四。</p><p>简单 CASE 语句仅允许将表达式的值与一组不同的值进行匹配。 为了执行更复杂的匹配，如范围，则可以使用可搜索 CASE 语句。 可搜索 CASE 语句等同于 IF 语句，但是它的构造更加可读。</p><p>可搜索CASE语句的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE</span><br><span class="line">    WHEN &lt;条件1&gt; THEN &lt;命令&gt;</span><br><span class="line">    WHEN &lt;条件2&gt; THEN &lt;命令&gt;</span><br><span class="line">    ...</span><br><span class="line">    ELSE commands</span><br><span class="line">END CASE;</span><br></pre></td></tr></table></figure><p>MySQL 分别计算 WHEN 子句中的每个条件，直到找到一个值为 TRUE 的条件，然后执行 THEN 子句中的相应 &lt;命令&gt;。如果没有一个条件为 TRUE，则执行 ELSE 子句中的 &lt;命令&gt;。如果不指定 ELSE 子句，并且没有一个条件为 TRUE，MySQL 将发出错误消息。MySQL 不允许在 THEN 或 ELSE 子句中使用空的命令。 如果您不想处理 ELSE 子句中的逻辑，同时又要防止 MySQL 引发错误，则可以在 ELSE 子句中放置一个空的 BEGIN END 块。</p><p>使用 CASE 函数根据表达式的取值返回相应值，输入SQL 语句和执行结果如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">WEEKDAY</span>(<span class="keyword">NOW</span>())=<span class="number">0</span> <span class="keyword">THEN</span> <span class="string">'星期一'</span> </span><br><span class="line">            <span class="keyword">WHEN</span> <span class="keyword">WEEKDAY</span>(<span class="keyword">NOW</span>())=<span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'星期二'</span>  </span><br><span class="line">            <span class="keyword">WHEN</span> <span class="keyword">WEEKDAY</span>(<span class="keyword">NOW</span>())=<span class="number">2</span> <span class="keyword">THEN</span> <span class="string">'星期三'</span> </span><br><span class="line">            <span class="keyword">WHEN</span> <span class="keyword">WEEKDAY</span>(<span class="keyword">NOW</span>())=<span class="number">3</span> <span class="keyword">THEN</span> <span class="string">'星期四'</span> </span><br><span class="line">            <span class="keyword">WHEN</span> <span class="keyword">WEEKDAY</span>(<span class="keyword">NOW</span>())=<span class="number">4</span> <span class="keyword">THEN</span> <span class="string">'星期五'</span> </span><br><span class="line">            <span class="keyword">WHEN</span> <span class="keyword">WEEKDAY</span>(<span class="keyword">NOW</span>())=<span class="number">5</span> <span class="keyword">THEN</span> <span class="string">'星期六'</span> </span><br><span class="line">            <span class="keyword">WHEN</span> <span class="keyword">WEEKDAY</span>(<span class="keyword">NOW</span>())=<span class="number">6</span> <span class="keyword">THEN</span> <span class="string">'星期天'</span> </span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">AS</span> COLUMN1,</span><br><span class="line">        <span class="keyword">NOW</span>(),</span><br><span class="line">        <span class="keyword">WEEKDAY</span>(<span class="keyword">NOW</span>()),</span><br><span class="line">        <span class="keyword">DAYNAME</span>(<span class="keyword">NOW</span>());</span><br><span class="line">+<span class="comment">---------+---------------------+----------------+----------------+</span></span><br><span class="line">| COLUMN1 | NOW()               | WEEKDAY(NOW()) | DAYNAME(NOW()) |</span><br><span class="line">+<span class="comment">---------+---------------------+----------------+----------------+</span></span><br><span class="line">| 星期四  | 2019-02-28 14:08:00 |              3 | Thursday       |</span><br><span class="line">+<span class="comment">---------+---------------------+----------------+----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">7</span> <span class="keyword">warnings</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>此例跟上例的返回结果一样，只是使用了 CASE 函数的不同写法，WHEN 后面为表达式，当表达式的返回结果为 TRUE 时取 THEN 后面的值，如果都不是，则返回 ELSE 后面的值。</p><h2 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h2><h4 id="最后插入行的生成序列号"><a href="#最后插入行的生成序列号" class="headerlink" title="最后插入行的生成序列号"></a>最后插入行的生成序列号</h4><p><code>LAST_INSERT_ID()</code> 函数来获取最后插入行的生成序列号。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LAST_INSERT_ID</span>() <span class="keyword">as</span> <span class="keyword">id</span>;</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| id        |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| 23        |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>如何在 Unix 和 MySQL 时间戳之间进行转换</li><li>NOW() 和 CURRENT_DATE() 有什么区别</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 语言分类</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E8%AF%AD%E8%A8%80%E5%88%86%E7%B1%BB/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E8%AF%AD%E8%A8%80%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>SQL 语言分为数据控制语言、数据定义语言、数据操纵语言和数据查询语言四大类。</p><h2 id="数据控制语言-DCL"><a href="#数据控制语言-DCL" class="headerlink" title="数据控制语言 DCL"></a>数据控制语言 DCL</h2><p>DCL 用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。</p><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><h4 id="授予用户权限"><a href="#授予用户权限" class="headerlink" title="授予用户权限"></a>授予用户权限</h4><p>对于新建的 MySQL 用户，必须给它授权，可以用 <code>GRANT</code> 语句来实现对新建用户的授权。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 授予数据库db1的所有权限给指定账户</span></span><br><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">ON</span> db1.* <span class="keyword">TO</span> <span class="string">'user1'</span>@<span class="string">'localhost'</span>;</span><br><span class="line"><span class="comment">-- 授予角色给指定的账户</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="string">'role1'</span>, <span class="string">'role2'</span> <span class="keyword">TO</span> <span class="string">'user1'</span>@<span class="string">'localhost'</span>, <span class="string">'user2'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><p>若要权限生效，需要执行以下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><p>关于授予权限的明细请参考<a href="https://www.cnblogs.com/Rohn/p/11722515.html">这里</a></p><h4 id="查看用户权限"><a href="#查看用户权限" class="headerlink" title="查看用户权限"></a>查看用户权限</h4><p>当成功创建用户账户后，还不能执行任何操作，需要为该用户分配适当的访问权限。可以使用 <code>SHOW GRANTS FOR</code> 语句来查询用户的权限。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW GRANTS FOR test;</span><br><span class="line">+<span class="comment">-------------------------------------------+</span></span><br><span class="line">| Grants for test@%                         |</span><br><span class="line">+<span class="comment">-------------------------------------------+</span></span><br><span class="line">| <span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'test'</span>@<span class="string">'%'</span> |</span><br><span class="line">+<span class="comment">-------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="撤销用户权限"><a href="#撤销用户权限" class="headerlink" title="撤销用户权限"></a>撤销用户权限</h4><p><code>REVOKE</code> 语句主要用于撤销权限，语法跟 <code>GRANT</code> 相似，但是效果相反。</p><blockquote><p>若要使用REVOKE语句，必须拥有 MySQL 数据库的全局 CREATE USER 权限或 UPDATE 权限。</p></blockquote><h2 id="数据定义语言-DDL"><a href="#数据定义语言-DDL" class="headerlink" title="数据定义语言 DDL"></a>数据定义语言 DDL</h2><p>数据定义语言有 <code>CREATE</code>、<code>DROP</code>、<code>ALTER</code>等，对逻辑结构等有操作的，其中包括表结构、视图和索引等。</p><p><code>CREATE</code> 语句可以用来创建数据库、表和索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个名为 "my_db" 的数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> my_db;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一个名为 "Persons" 的表，包含五列：PersonID、LastName、FirstName、Address 和 City。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons (</span><br><span class="line">   PersonID <span class="built_in">int</span>,</span><br><span class="line">   LastName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">   FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">   Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">   City <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在 "Persons" 表的 "LastName" 列上创建一个名为 "PIndex" 的索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> PIndex <span class="keyword">ON</span> Persons (LastName)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果索引不止一个列，您可以在括号中列出这些列的名称，用逗号隔开</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> PIndex <span class="keyword">ON</span> Persons (LastName, FirstName)</span><br></pre></td></tr></table></figure><p><code>ALTER</code> 语句用于在已有的表中添加、删除或修改列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在 "Persons" 表中添加一个名为 "DateOfBirth" 的列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons <span class="keyword">ADD</span> DateOfBirth <span class="built_in">date</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 改变 "Persons" 表中 "DateOfBirth" 列的数据类型</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> DateOfBirth <span class="keyword">year</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除 "Person" 表中的 "DateOfBirth" 列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> DateOfBirth</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除 "Persons" 表中 "DateOfBirth" 列的索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons <span class="keyword">DROP</span> <span class="keyword">INDEX</span> DateOfBirthIndex</span><br></pre></td></tr></table></figure><p><code>DROP</code> 语句可以轻松地删除索引、表和数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除数据库</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> database_name</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> column_name</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_name</span><br></pre></td></tr></table></figure><h2 id="数据操纵语言-DML"><a href="#数据操纵语言-DML" class="headerlink" title="数据操纵语言 DML"></a>数据操纵语言 DML</h2><p>如 <code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>TRUNCATE</code> 等，即对数据进行操作。</p><p><code>DELETE</code> 语句用于删除表中的记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除所有数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除指定数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> some_column=some_value;</span><br></pre></td></tr></table></figure><p><code>TRUNCATE</code> 跟没有 <code>WHERE</code> 子句的 <code>DELETE</code> 类似，但是速度更快，系统资源和事务日志资源消耗更少。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除所有数据</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><h2 id="数据查询语言-DQL"><a href="#数据查询语言-DQL" class="headerlink" title="数据查询语言 DQL"></a>数据查询语言 DQL</h2><p>即查询操作，以 <code>SELECT</code> 关键字开头，各种简单查询，连接查询等都属于 DQL。</p><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><p>一般 SQL 执行顺序：</p><ol><li><code>FROM</code> 需要从哪个数据表检索数据。</li><li><code>WHERE</code> 过滤表中数据的条件。</li><li><code>GROUP BY</code> 如何将上面过滤出的数据分组。</li><li><code>HAVING</code> 对上面已经分组的数据进行过滤的条件。</li><li><code>SELECT</code> 查看结果集中的哪个列，或列的计算结果。</li><li><code>ORDER</code> 按照什么样的顺序来查看返回的数据。</li></ol><p>当一个查询语句同时出现了 <code>WHERE</code>、<code>JOIN</code>、<code>LIMIT</code>、<code>GROUP BY</code>、<code>HAVING</code> 的时候，执行顺序和编写顺序是：</p><ol><li>执行 <code>JOIN</code> 连接条件。</li><li>执行 <code>WHERE xxx</code> 对全表数据做筛选，返回第1个结果集。</li><li>针对第 1 个结果集使用 <code>GROUP BY</code> 分组，返回第 2 个结果集。</li><li>针对第 2 个结果集中的每1组数据执行 <code>SELECT xx</code>，有几组就执行几次，返回第 3 个结果集。</li><li>针对第 3 个结集执行 <code>HAVING xxx</code> 进行筛选，返回第 4 个结果集。</li><li>针对第 4 个结果集排序（<code>ORDER BY</code>、<code>LIMIT</code>）。</li></ol><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p><code>DROP</code>、<code>DELETE</code>、<code>TRUNCATE</code> 的区别</p><ol><li>定义：<code>DROP</code> 是 DDL 语句，<code>DELETE</code>、<code>TRUNCATE</code> 是 DML语句。</li><li>区别：<code>TRUNCATE</code> 跟没有 <code>WHERE</code> 子句的 <code>DELETE</code> 类似，但是速度更快，系统资源和事务日志资源消耗更少。</li><li>效率：<code>DROP</code> &gt; <code>TRUNCATE</code> &gt; <code>DELETE</code>。</li><li>用途：不需要表时使用 <code>DROP</code>，保留表不需要数据时使用 <code>TRUNCATE</code>，仅删除部分数据使用 <code>DELETE</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 操作语言</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E6%93%8D%E4%BD%9C%E8%AF%AD%E8%A8%80/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E6%93%8D%E4%BD%9C%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p>select </p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>ERROR 1292 (22007): Truncated incorrect DOUBLE value<br>update 操作时不能用 <code>and</code>， 应该用 <code>,</code>。   </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> biz_warehouse_back <span class="keyword">set</span> a = <span class="number">1</span> <span class="keyword">and</span> b = <span class="number">2</span> <span class="keyword">where</span> is_deleted = <span class="string">'n'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 查询语言</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p>MySQL 查询不区分大小写，下面的查询均有效：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>(), <span class="keyword">CURRENT_DATE</span>;</span><br><span class="line"><span class="keyword">SeLect</span> <span class="keyword">version</span>(), <span class="keyword">current_date</span>;</span><br><span class="line"><span class="keyword">seleCt</span> <span class="keyword">vErSiOn</span>(), <span class="keyword">current_DATE</span>;</span><br></pre></td></tr></table></figure><h2 id="SELECT-语句"><a href="#SELECT-语句" class="headerlink" title="SELECT 语句"></a>SELECT 语句</h2><p><code>SELECT</code> 语句用于从数据库中选取数据。结果被存储在一个结果表中，称为结果集。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>,country <span class="keyword">FROM</span> Websites;</span><br></pre></td></tr></table></figure><p>下面的 SQL 语句从 “Websites” 表中选取所有列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Websites;</span><br></pre></td></tr></table></figure><h2 id="SELECT-DISTINCT-语句"><a href="#SELECT-DISTINCT-语句" class="headerlink" title="SELECT DISTINCT 语句"></a>SELECT DISTINCT 语句</h2><p>在表中，可能会包含重复值。这并不成问题，不过，有时您也许希望仅仅列出不同的值。</p><p>关键词 <code>DISTINCT</code> 用于返回唯一不同的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Company <span class="keyword">FROM</span> Orders</span><br></pre></td></tr></table></figure><p>还可以用于多个字段上。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Company, <span class="keyword">User</span> <span class="keyword">FROM</span> Orders;</span><br></pre></td></tr></table></figure><h2 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h2><p><code>WHERE</code> 子句用于提取那些满足指定条件的记录。</p><h2 id="LIKE-子句"><a href="#LIKE-子句" class="headerlink" title="LIKE 子句"></a>LIKE 子句</h2><p><code>LIKE</code> 操作符通常用于基于模式查询选择数据。以正确的方式使用 <code>LIKE</code> 运算符对于增加/减少查询性能至关重要。</p><p>MySQL 中提供两个通配符，用于与 <code>LIKE</code> 运算符一起使用，它们分别是：百分比符号 <code>%</code> 和下划线 <code>_</code>。其中 <code>%</code> 用于通配符允许匹配任何字符串的零个或多个字符，类似正则表达式中的 <code>*</code>。<code>_</code> 通配符允许匹配任何单个字符。类似正则表达式中的 <code>_</code>。</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 搜索名字以字符a开头的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> firstName <span class="keyword">LIKE</span> <span class="string">'a%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 搜索员工以on字符结尾的姓氏，例如，Patterson，Thompson</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> lastName <span class="keyword">LIKE</span> <span class="string">'%on'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找 lastname 字段值中包含on字符串的所有员工</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> lastname <span class="keyword">LIKE</span> <span class="string">'%on%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找名字以T开头的员工，以m结尾，并且包含例如Tom，Tim之间的任何单个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> firstname <span class="keyword">LIKE</span> <span class="string">'T_m'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 要搜索姓氏(lastname)不以字符B开头的员工。请注意，使用 LIKE 运算符，该模式不区分大小写，因此，b% 和 B% 模式产生相同的结果。</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> lastName <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'B%'</span>;</span><br></pre></td></tr></table></figure><p>有时想要匹配的模式包含通配符，例如10%，_20等这样的字符串时。在这种情况下，您可以使用ESCAPE子句指定转义字符，以便 MySQL 将通配符解释为文字字符。如果未明确指定转义字符，则反斜杠字符 <code>\</code> 是默认转义字符。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询productCode字段中包含_20字符串的值</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> productCode <span class="keyword">LIKE</span> <span class="string">'%\_20%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定一个不同的转义字符</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> productCode <span class="keyword">LIKE</span> <span class="string">'%$_20%'</span> ESCAPE <span class="string">'$'</span>;</span><br></pre></td></tr></table></figure><blockquote><p> LIKE 操作符强制 MySQL 扫描整个表以找到匹配的行记录，因此，它不允许数据库引擎使用索引进行快速搜索。因此，当要从具有大量行的表查询数据时，使用LIKE运算符来查询数据的性能会大幅降低。</p></blockquote><h4 id="REGEXP-子句"><a href="#REGEXP-子句" class="headerlink" title="REGEXP 子句"></a>REGEXP 子句</h4><p>MySQL 中使用 <strong>REGEXP</strong> 操作符来进行正则表达式匹配，跟 <strong>LIKE</strong> 的功能类似。</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查找name字段中以'st'为开头的所有数据 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> <span class="keyword">name</span> REGEXP <span class="string">'^st'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找name字段中以'ok'为结尾的所有数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> <span class="keyword">name</span> REGEXP <span class="string">'ok$'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找name字段中包含'mar'字符串的所有数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> <span class="keyword">name</span> REGEXP <span class="string">'mar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找name字段中以元音字符开头或以'ok'字符串结尾的所有数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> <span class="keyword">name</span> REGEXP <span class="string">'^[aeiou]|ok$'</span>;</span><br></pre></td></tr></table></figure><p>操作符说明：</p><ol><li>位置操作符<br> <code>^</code> 表示开始，<code>$</code> 表示结尾</li><li>字符匹配操作符<br> <code>.</code> 表示除 <code>\n</code> 之外的任何单个字符。<br> <code>*</code> 任意数量的任意字符。<br> <code>+</code> 一个或多个任意字符。</li><li>选择操作符<br> <code>[...]</code> 表示字符集合。匹配所包含的任意一个字符。<br> <code>[^...]</code> 表示负值字符集合。匹配未包含的任意字符。<br> <code>p1|p2|p3</code>  匹配 p1 或 p2 或 p3。 </li><li>数量操作符<br> <code>a{5}</code> 表示 5 个 a，n 是一个非负整数。<br> 在 <code>{n, m}</code>  中，m 和 n 均为非负整数，其中 n &lt;= m。最少匹配 n 次且最多匹配 m 次。</li></ol><h2 id="ORDER-BY-语句"><a href="#ORDER-BY-语句" class="headerlink" title="ORDER BY 语句"></a>ORDER BY 语句</h2><p><code>GROUP BY</code> 的作用是限定分组条件，可以用于结合合计函数，根据一个或多个列对结果集进行分组。</p><p>我们想要使用 <code>GROUP BY</code> 语句对客户进行组合，可以使用下列 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customer,<span class="keyword">SUM</span>(OrderPrice) <span class="keyword">FROM</span> Orders <span class="keyword">GROUP</span> <span class="keyword">BY</span> Customer;</span><br></pre></td></tr></table></figure><p>我们也可以对一个以上的列应用 <code>GROUP BY</code> 语句，就像这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customer,OrderDate,<span class="keyword">SUM</span>(OrderPrice) <span class="keyword">FROM</span> Orders <span class="keyword">GROUP</span> <span class="keyword">BY</span> Customer,OrderDate;</span><br></pre></td></tr></table></figure><h2 id="HAVING-子句"><a href="#HAVING-子句" class="headerlink" title="HAVING 子句"></a>HAVING 子句</h2><p><code>HAVING</code> 用于指定组所对应的的条件，必须和 <code>GROUP BY</code> 一起使用。</p><p><code>HAVING</code> 即可包含聚合函数作用的字段也可包括普通的标量字段，实施上所有的 <code>WHERE</code> 都可以用 <code>HAVING</code> 代替。</p><p>例如：我们希望查找订单总金额少于 2000 的客户。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customer, <span class="keyword">SUM</span>(OrderPrice) </span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Customer</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">SUM</span>(OrderPrice) &lt; <span class="number">2000</span></span><br></pre></td></tr></table></figure><p>现在我们希望查找客户 “Bush” 或 “Adams” 拥有超过 1500 的订单总金额。我们在 SQL 语句中增加了一个普通的 WHERE 子句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customer,<span class="keyword">SUM</span>(OrderPrice) </span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> Customer=<span class="string">'Bush'</span> <span class="keyword">OR</span> Customer=<span class="string">'Adams'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Customer</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">SUM</span>(OrderPrice)&gt;<span class="number">1500</span></span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>SQL 语言包括哪几部分，每部分都有哪些操作关键字</li><li>like 声明中的 ％ 和 _ 是什么意思</li><li>列对比运算符是什么</li><li>如何显示前 50 行</li><li>解释 MySQL 外连接、内连接与自连接的区别</li><li>NULL 是什么意思</li><li>查询语句不同元素（where、jion、limit、group by、having等等）执行先后顺序</li><li>MySQL 有哪几种 join 方式，底层原理是什么</li><li>MySQL limit 分页如何保证可靠性</li><li>sql语法（join，union，子查询，having，group by）</li><li>四个表 记录成绩，每个大约十万条记录，如何找到成绩最好的同学</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 存储引擎</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<p>数据库存储引擎是数据库底层软件组件，数据库管理系统使用数据引擎进行创建、查询、更新和删除数据操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。</p><h2 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h2><p>MyISAM 是基于 ISAM 的存储引擎，并对其进行扩展，是在 Web、数据仓储和其他应用环境下最常使用的存储引擎之一。MyISAM 拥有较高的插入、查询速度，但不支持事务。</p><h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h2><p>InnoDB 事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键。MySQL 5.5.5 之后，InnoDB 作为默认存储引擎。</p><h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p>Memory 存储引擎将表中的数据存储到内存中，为查询和引用其他数据提供快速访问。</p><h2 id="存储引擎的操作"><a href="#存储引擎的操作" class="headerlink" title="存储引擎的操作"></a>存储引擎的操作</h2><p>显示可用的数据库引擎和默认引擎：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">ENGINES</span>;</span><br><span class="line"></span><br><span class="line">Engine      Support  Transactions   XA       Savepoints  <span class="keyword">Comment</span></span><br><span class="line">MyISAM      YES      <span class="keyword">NO</span>             <span class="keyword">NO</span>       <span class="keyword">NO</span>          MyISAM <span class="keyword">storage</span> <span class="keyword">engine</span></span><br><span class="line"><span class="keyword">InnoDB</span>      <span class="keyword">DEFAULT</span>  YES            YES      YES         Supports transactions, <span class="keyword">row</span>-<span class="keyword">level</span> locking, <span class="keyword">and</span> foreign <span class="keyword">keys</span></span><br><span class="line"><span class="keyword">MEMORY</span>      YES      <span class="keyword">NO</span>             <span class="keyword">NO</span>       <span class="keyword">NO</span>          <span class="keyword">Hash</span> based, <span class="keyword">stored</span> <span class="keyword">in</span> <span class="keyword">memory</span>, useful <span class="keyword">for</span> <span class="keyword">temporary</span> <span class="keyword">tables</span></span><br></pre></td></tr></table></figure></p><p>临时修改默认存储引擎：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> default_storage_engine = MyISAM;</span><br></pre></td></tr></table></figure><p>全局修改默认存储引擎：</p><ol><li>打开 MySQL 配置文件：/etc/my.cnf。</li><li>添加或新增行 <code>default-storage-engine=INNODB</code>。</li></ol><p>查看某个存储引擎的具体信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">ENGINE</span> <span class="keyword">InnoDB</span> <span class="keyword">status</span>\G;</span><br></pre></td></tr></table></figure><p><img src="http://img.mp.sohu.com/upload/20170713/e972e47b2c554f789e02e90b26a8b543_th.png" alt=""></p><p>创建表时指定存储引擎的类型：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable (<span class="keyword">id</span> <span class="built_in">int</span>, titlechar(<span class="number">20</span>)) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span></span><br></pre></td></tr></table></figure></p><p>修改表的存储引擎：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> engineTest <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span>；</span><br></pre></td></tr></table></figure><h2 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h2><p>可以根据以下的原则来选择 MySQL 存储引擎：</p><ol><li>如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 是一个很好的选择。</li><li>如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。</li><li>如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 Memory 引擎中，MySQL 中使用该引擎作为临时表，存放查询的中间结果。</li><li>如果只有 <code>INSERT</code> 和 <code>SELECT</code> 操作，可以选择 Archive 引擎，Archive 存储引擎支持高并发的插入操作，但是本身并不是事务安全的。Archive 存储引擎非常适合存储归档数据，如记录日志信息可以使用 Archive 引擎。</li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">功能</th><th>MySIAM</th><th>InnoDB</th><th>Memory</th><th>Archive</th></tr></thead><tbody><tr><td style="text-align:left">存储限制</td><td>256TB</td><td>64TB</td><td>RAM</td><td>None</td></tr><tr><td style="text-align:left">事务支持</td><td>No</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td style="text-align:left">数据缓存</td><td>No</td><td>Yes</td><td>N/A</td><td>No</td></tr><tr><td style="text-align:left">外健支持</td><td>No</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td style="text-align:left">数值索引</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td style="text-align:left">哈希索引</td><td>No</td><td>No</td><td>Yes</td><td>No</td></tr><tr><td style="text-align:left">全文索引</td><td>Yes</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td style="text-align:left">行锁支持</td><td>表锁</td><td>表锁、行锁</td></tr></tbody></table></div><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>有哪些存储引擎</li><li>简述 MyISAM 和 InnoDB 的区别</li><li>MyISAM Static 和 MyISAM Dynamic 有什么区别</li><li>MyISAM 表格将在哪里存储，并且还提供其存储格式</li><li>MySQL 默认存储引擎？MyISAM、InnoDB、MEMORY的区别</li><li>MySQL 数据库默认存储引擎，有什么优点</li><li>MySQL引擎及区别，项目用的哪个，为什么</li><li>MySQL采用了什么存储引擎，为什么？</li><li>MySQL数据库引擎？应用场景？查询优化？NoSQL有用或了解吗？</li><li>MySQL用的什么存储引擎，这个存储引擎用的什么数据结构 ，有哪些优缺点，怎么使用</li><li>引擎对比（InnoDB，MyISAM）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 锁定机制</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E9%94%81%E5%AE%9A%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E9%94%81%E5%AE%9A%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="锁的种类"><a href="#锁的种类" class="headerlink" title="锁的种类"></a>锁的种类</h2><p>从类型上来看，可以分为共享锁、排它锁。从范围来看，可以分为表锁、行锁，间隙锁、页锁等。其中表锁中又有意向锁。以上锁根据存储引擎不同，生效的锁也不同。</p><ol><li><p>共享锁<br>事务拿到某一行记录的共享锁，才可以读取这一行，并阻止别的事物对其添加X锁。<br>共享锁的目的是提高读读并发</p></li><li><p>排他锁<br>事务拿到某一行记录的排它锁，才可以修改或者删除这一行。<br>排他锁的目的是为了保证数据的一致性</p></li><li><p>意向共享锁<br>预示事务有意向对表中的某些行加共享锁。</p></li><li><p>意向排他锁<br>预示着事务有意向对表中的某些行加排他锁。</p></li><li><p>记录锁<br>对单条索引记录进行加锁，锁住的是索引记录而非记录本身，即使表中没有任何索引，MySQL会自动创建一个隐式的 <code>row_id</code> 作为聚集索引来进行加锁。</p></li><li><p>间隙锁<br>封锁记录中的间隔，防止间隔中被其他事务插入。</p><p>间隙锁主要出现在RR隔离级别，避免出现幻读。</p></li></ol><h2 id="锁的支持"><a href="#锁的支持" class="headerlink" title="锁的支持"></a>锁的支持</h2><p>在 MySQL 中，不同的存储引擎支持不同的锁机制。比如，MyISAM 和 MEMORY 存储引擎采用的是表级锁；BDB 存储引擎采用的是页面锁，但也支持表级锁；InnoDB 存储引擎既支持行级锁，也支持表级锁，但默认情况下是采用行级锁。</p><h2 id="锁的对比"><a href="#锁的对比" class="headerlink" title="锁的对比"></a>锁的对比</h2><h2 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h2><p>当我们采用范围条件查询数据时，InnoDB 会对这个范围内的数据进行加锁。比如有 <code>id</code> 为：1、3、5、7 的 4 条数据，我们查找 1-7 范围的数据。那么 1-7 都会被加上锁。2、4、6 也在 1-7 的范围中，但是不存在这些数据记录，这些 2、4、6 就被称为间隙。</p><h4 id="间隙锁的危害"><a href="#间隙锁的危害" class="headerlink" title="间隙锁的危害"></a>间隙锁的危害</h4><p>范围查找时，会把整个范围的数据全部锁定住，即便这个范围内不存在的一些数据，也会被无辜的锁定住，比如我要在 1、3、5、7 中插入 2，这个时候 1-7 都被锁定住了，根本无法插入 2。在某些场景下会对性能产生很大的影响。</p><h4 id="间隙锁的触发"><a href="#间隙锁的触发" class="headerlink" title="间隙锁的触发"></a>间隙锁的触发</h4><ol><li>多个查询条件。</li><li>单个查询条件，单不是唯一索引。</li></ol><p>例如 ：<code>select * from t where id = 10 for update</code>，如果此表只有 id 加索引，则不会产生间隙锁。如果 id 没有加索引或者加了索引，但是还有其它列也有索引，则会产生间隙锁。</p><h4 id="间隙锁的范围"><a href="#间隙锁的范围" class="headerlink" title="间隙锁的范围"></a>间隙锁的范围</h4><p>根据检索条件向下寻找最靠近检索条件的记录值 A 作为左区间，向上寻找最靠近检索条件的记录值B作为右区间，即锁定的间隙为（A，B）。</p><p>假设一张表的 <code>number</code> 字段值有：1、2、3、4、5、6、7、8、9、10、11、12。当执行查询 <code>select * from t where number = 6</code> 时，间隙锁锁定的间隙为（5，11），你再想插入 5 到 11 之间的数就会被阻塞。</p><p>当你再执行 <code>update t set number = 6 where id = 1</code> 也会被阻塞。这是为什么？你想想看，要保证每次查询 number = 6 的数据行数不变，如果你将另外一条数据修改成了 6，岂不会多了一条？所以此时不会允许任何一条数据被修改成 6。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h2 id="死锁判定"><a href="#死锁判定" class="headerlink" title="死锁判定"></a>死锁判定</h2><p>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环。</p><p>产生原因：</p><ol><li>当事务试图以不同的顺序锁定资源时，就可能产生死锁。多个事务同时锁定同一个资源时也可能会产生死锁。</li><li>锁的行为和顺序和存储引擎相关。以同样的顺序执行语句，有些存储引擎会产生死锁有些不会——死锁有双重原因：真正的数据冲突；存储引擎的实现方式。</li></ol><p>死锁影响：</p><ol><li>死锁会影响性能而不是会产生严重错误，因为InnoDB会自动检测死锁状况并回滚其中一个受影响的事务。</li><li>在高并发系统上，当许多线程等待同一个锁时，死锁检测可能导致速度变慢。</li><li>有时当发生死锁时，禁用死锁检测（使用 <code>innodb_deadlock_detect</code> 配置选项）可能会更有效，这时可以依赖 <code>innodb_lock_wait_timeout</code> 设置进行事务回滚。</li></ol><p>死锁检测：</p><ol><li>发生死锁后，InnoDB 一般都能自动检测到，并使一个事务释放锁并回退，另一个事务获得锁，继续完成事务。</li><li>但在涉及外部锁，或涉及表锁的情况下，InnoDB 并不能完全自动检测到死锁，这需要通过设置锁等待超时参数 <code>innodb_lock_wait_timeout</code> 来解决。</li></ol><p>死锁恢复：</p><ol><li>死锁发生以后，只有部分或完全回滚其中一个事务，才能打破死锁。</li><li>InnoDB 目前处理死锁的方法是，将持有最少行级排他锁的事务进行回滚。</li><li>所以事务型应用程序在设计时必须考虑如何处理死锁，多数情况下只需要重新执行因死锁回滚的事务即可。</li></ol><p>MyISAM 避免死锁：</p><ol><li>在自动加锁的情况下，MyISAM 总是一次获得 SQL 语句所需要的全部锁，所以 MyISAM 表不会出现死锁。</li></ol><p>InnoDB 避免死锁：</p><ol><li>为了在单个 InnoDB 表上执行多个并发写入操作时避免死锁，可以在事务开始时通过为预期要修改的每个元祖（行）使用 <code>SELECT ... FOR UPDATE</code> 语句来获取必要的锁，即使这些行的更改语句是在之后才执行的。</li><li>在事务中，如果要更新记录，应该直接申请足够级别的锁，即排他锁，而不应先申请共享锁、更新时再申请排他锁，因为这时候当用户再申请排他锁时，其他事务可能又已经获得了相同记录的共享锁，从而造成锁冲突，甚至死锁。</li><li>如果事务需要修改或锁定多个表，则应在每个事务中以相同的顺序使用加锁语句。在应用中，如果不同的程序会并发存取多个表，应尽量约定以相同的顺序来访问表，这样可以大大降低产生死锁的机会。</li><li>通过 <code>SELECT ... LOCK IN SHARE MODE</code> 获取行的读锁后，如果当前事务再需要对该记录进行更新操作，则很有可能造成死锁。</li><li>改变事务隔离级别。</li></ol><p>如果出现死锁，可以用 <code>SHOW INNODB STATUS</code> 命令来确定最后一个死锁产生的原因。返回结果中包括死锁相关事务的详细信息，如引发死锁的 SQL 语句，事务已经获得的锁，正在等待什么锁，以及被回滚的事务等。据此可以分析死锁产生的原因和改进措施。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h2 id="锁的操作"><a href="#锁的操作" class="headerlink" title="锁的操作"></a>锁的操作</h2><h4 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h4><p><code>LOCK TABLES</code> 用于锁定数据表，避免在备份过程中，表被更新。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加一个读锁</span></span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span> biz_user <span class="keyword">READ</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一个写锁</span></span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span> biz_user WRITE;</span><br></pre></td></tr></table></figure><h4 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h4><ol><li>使用 <code>UNLOCK TABLES</code> 解锁。</li><li>使用 <code>SHOW PROCESSLIST</code> 找出锁进程 <code>KILL</code> 掉。</li></ol><h4 id="行锁分析"><a href="#行锁分析" class="headerlink" title="行锁分析"></a>行锁分析</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">STATUS</span> <span class="keyword">LIKE</span> <span class="string">'innodb_row_lock%'</span>;</span><br><span class="line"></span><br><span class="line">Variable_name                       Value</span><br><span class="line">Innodb_row_lock_current_waits       0</span><br><span class="line">Innodb_row_lock_time                257841</span><br><span class="line">Innodb_row_lock_time_avg            17189</span><br><span class="line">Innodb_row_lock_time_max            31033</span><br><span class="line">Innodb_row_lock_waits               15</span><br></pre></td></tr></table></figure><p><code>Variable_name</code> 说明：</p><ol><li><code>Innodb_row_lock_current_waits</code> 当前正在等待锁定的数量。</li><li><code>Innodb_row_lock_time</code> 从系统启动到现在锁定的时长。</li><li><code>Innodb_row_lock_time_avg</code> 每次等待锁所花平均时间。</li><li><code>Innodb_row_lock_time_max</code> 从系统启动到现在锁等待最长的一次所花的时间。</li><li><code>Innodb_row_lock_waits</code> 系统启动后到现在总共等待锁的次数。</li></ol><p>大家可以根据 <code>Variable_name</code> 这几个参数考虑是否要进行优化，如果锁定时间，锁定次数过大，那就该考虑优化了。优化手段可以参考之前索引优化的文章。</p><h2 id="MVCC-机制"><a href="#MVCC-机制" class="headerlink" title="MVCC 机制"></a>MVCC 机制</h2><ol><li><p>定义<br>MVCC 是一种并发控制机制，在数据库中用来控制并发执行的事务，控制事务隔离进行。</p></li><li><p>核心思想<br>MVCC 是通过保存数据在某个时间点的快照来进行控制的。使用MVCC就是允许同一个数据记录拥有多个不同的版本。然后在查询时通过添加相对应的约束条件，就可以获取用户想要的对应版本的数据。</p></li><li><p>解决什么<br>MVCC 主要是为了提供并发的读写性能，不用加锁就能让多个事务并发读写。在读多写少的场景中，读写不冲突是非常重要的，极大的增加了系统的并发性能。</p></li><li><p>适用条件<br>MVCC 只适用于 MySQL 隔离级别中的读已提交和可重复读。</p></li></ol><h4 id="隐藏列"><a href="#隐藏列" class="headerlink" title="隐藏列"></a>隐藏列</h4><p>在 Innodb 中，每一行记录都有两个隐藏列：DATA_ITR_ID、DATA_ROLL_PTR。</p><ol><li><p>DATA_TRX_ID<br>记录最近更新这条行记录的事务 ID，大小为 6 个字节。</p></li><li><p>DATA_ROLL_PTR<br>表示指向该行回滚段的指针，大小为 7 个字节，InnoDB 便是通过这个指针找到之前版本的数据。该行记录上所有旧版本，在 undo 中都通过链表的形式组织。</p></li><li><p>DB_ROW_ID<br>行标识（隐藏单调自增 ID），大小为 6 字节，如果表没有主键，InnoDB 会自动生成一个隐藏主键，因此会出现这个列。另外，每条记录的头信息里都有一个专门的 bit 来表示当前记录是否已经被删除。</p></li></ol><p><img src="https://pic2.zhimg.com/80/v2-f25ed246387e60fbeb5b7ec9ed9028b1_720w.jpg" alt=""></p><h4 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h4><p>记录数据各版本修改历史即事务链。在多个事务并行操作某行数据的情况下，不同事务对该行数据的修改会产生多个版本，然后通过回滚指针组织成一条 undo Log 链。</p><p><img src="https://pic4.zhimg.com/80/v2-759e2202ee64b45fb4bc8cdea640c813_720w.jpg" alt=""></p><h4 id="readview"><a href="#readview" class="headerlink" title="readview"></a>readview</h4><p>即读视图，用于判断哪些版本对当前事务可见。它由最小事务 Id，未提交事务 Id 数组，最大事务 Id 组成。例如：100|[105, 108, 200]|200。</p><p>对于当前事务来说，这些事务都是可见的：</p><ol><li>事务 Id 等于当前事务 Id。</li><li>事务 Id 不在未提交的事务数组中。</li></ol><p>如果当前事务多次查询记录，而期间记录由事务提交了，则不同行为的 readview 查询的结果也不一样。</p><ol><li>读未提交情况下，记录的事务提交了，readview 重新获取。则当前事务读取到了提交的事务记录。</li><li>读已提交情况下，记录的事务提交了，readview 沿用旧的。则当前事务无法读取到了提交的事务记录。</li></ol><h4 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h4><ol><li>事务 1 插入了数据 {id=101, age = 11, trx_id = 1}。</li><li>事务 2 修改了数据 {id=101, age = 12, trx_id = 2}。事务 A 的数据转移到 undo log 里，事务 B 的数据执向 事务 A 的数据。</li><li>事务 2 提交了数据。</li><li>事务 3 修改了数据 {id=101, age = 13, trx_id = 3}。事务 B 的数据转移到 undo log 里，事务 C 的数据执向 事务 B 的数据。</li><li>事务 4 修改了数据 {id=101, age = 14, trx_id = 4}。事务 C 的数据转移到 undo log 里，事务 D 的数据执向 事务 C 的数据。</li><li>事务 1 查看了数据，根据 readview {1, 3, 4} 规则，在 undo log 里面找到了 {id=101, age = 11, trx_id = 1}。</li><li>事务 5 查看了数据，根据 readview {1, 3, 4} 规则，在 undo log 里面找到了 {id=101, age = 13, trx_id = 2}。</li><li>事务 3 提交了数据。</li><li>事务 5 查看了数据，读未提交隔离级别，review {1, 4} 变化，在 undo log 里面找到了 {id=101, age = 13, trx_id = 3}。</li><li>事务 5 查看了数据，读已提交隔离级别，review {1, 3, 4} 不变，在 undo log 里面找到了 {id=101, age = 13, trx_id = 2}。</li></ol><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><ol><li>什么是锁</li><li>有哪几种锁</li><li>乐观锁和悲观锁、行锁与表锁、共享锁与排他锁</li><li>死锁判定原理和具体场景</li><li>数据库索引，表锁；乐观锁；悲观锁</li><li>乐观锁与悲观锁的使用场景</li><li>谈谈数据库乐观锁与悲观锁?</li><li>MySQL 如何在RR隔离级别下避免幻读问题</li><li>乐观锁和悲观锁、行锁与表锁、共享锁与排他锁（inndob如何手动加共享锁与排他锁）</li><li>死锁判定原理和具体场景</li><li>MySQL存储引擎</li><li>MySQL的表锁&amp;行锁&amp;乐观锁&amp;悲观锁,各自的使用场景</li><li>MySQL数据库对应的行锁、表锁、悲观锁、乐观锁的区别</li><li>数据库锁是怎么实现的</li><li>数据库的锁（行锁，表锁，页级锁，意向锁，读锁，写锁，悲观锁，乐观锁，以及加锁的select sql方式）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 事务机制</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>事务是作为一个单元的一组有序的数据库操作。如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消。</p><h2 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h2><p>如果一个数据库声称支持事务的操作，那么该数据库必须要具备以 ACID 4个特性。</p><ol><li><p>原子性<br>原子性（Atomicity）是指一个事务所包含的操作要么全部成功，要么全部失败回滚。</p></li><li><p>一致性<br>一致性（Consistency）是指一个事务执行之前和执行之后都必须处于一致性状态。</p><p>拿转账来说，假设用户 A 和用户 B 两者的钱加起来一共是 5000，那么不管 A 和 B 之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是 5000，这就是事务的一致性。</p></li><li><p>隔离性<br>隔离型（Isolation）是指当多个用户并发访问数据库时，比如操作同一张表，数据库为每一个用户开启事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p><p>即要达到这么一种效果：对于任意两个并发的事务 T1 和 T2，在事务 T1 看来，T2 要么在 T1 开始之前就已经结束，要么在 T1 结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p></li><li><p>持久性<br>持久性（Durability）是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p></li></ol><h2 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h2><p>MySQL 在并发的情况下，有可能出现以下这几种问题。</p><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据（<strong>针对未提交数据</strong>）。</p><p>当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户 A 向用户 B 转账 100 元，对应 SQL 命令如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money = money + <span class="number">100</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'B'</span>;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money = money - <span class="number">100</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'A'</span>;</span><br></pre></td></tr></table></figure><p>当只执行第一条 SQL 时，A 通知 B 查看账户，B 发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当 B 以后再次查看账户时就会发现钱其实并没有转。</p><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><p>不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了（<strong>针对其他提交前后，读取数据本身的对比</strong>）。</p><p>例如事务 T1 在读取某一数据，而事务 T2 立马修改了这个数据并且提交事务给数据库，事务 T1 再次读取该数据就得到了不同的结果，发送了不可重复读。</p><p>不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。</p><p>在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据 A 和 B 依次查询就可能不同，A 和 B 就可能打起来了……</p><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p>幻读是事务非独立执行时发生的一种现象。例如事务 T1 对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务 T2 又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务 T1 的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务 T2 中添加的，就好像产生幻觉一样，这就是发生了幻读（<strong>针对其他提交前后，读取数据条数的对比</strong>）。</p><p>幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。</p><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>MySQL 数据库为我们提供了 4 种隔离级别。</p><h4 id="Read-uncommitted"><a href="#Read-uncommitted" class="headerlink" title="Read uncommitted"></a>Read uncommitted</h4><p>Read uncommitted (读未提交)，最低级别，任何情况都无法保证。</p><p>它是最低的隔离级别，它最直接的效果就是一个事务可以读取另一个事务并未提交的更新结果。</p><h4 id="Read-committed"><a href="#Read-committed" class="headerlink" title="Read committed"></a>Read committed</h4><p>Read committed (读已提交)，可避免脏读的发生。</p><p>它通常是大部分数据库采用的默认隔离级别，它在 Read Uncommitted 隔离级别基础上所做的限定更进一步，在该隔离级别下，一个事务的更新操作结果只有在该事务提交之后，另一个事务才可能读取到同一笔数据更新后的结果。所以，Read Committed 可以避免 Read Uncommitted 隔离级别下存在的脏读问题，但无法避免不可重复读取和幻读的问题。</p><h4 id="Repeatable-read"><a href="#Repeatable-read" class="headerlink" title="Repeatable read"></a>Repeatable read</h4><p>Repeatable read (可重复读)，可避免脏读、不可重复读的发生。</p><p>此隔离级别可以保证在整个事务的过程中，对同一笔数据的读取结果是相同的，不管其他事务是否同时在对同一笔数据进行更新，也不管其他事务对同一笔数据的更新提交与否。Repeatable Read 隔离级别避免了脏读和不可重复读取的问题，但无法避免幻读。（MySQL 默认隔离级别）</p><h4 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h4><p>Serializable (串行化)，可避免脏读、不可重复读、幻读的发生。</p><p>最为严格的隔离级别，所有的事务操作都必须依次顺序执行，可以避免其他隔离级别遇到的所有问题，是最为安全的隔离级别， 但同时也是性能最差的隔离级别，因为所有的事务在该隔离级别下都需要依次顺序执行，所以，并发度下降，吞吐量上不去，性能自然就下来了。 因为该隔离级别极大的影响系统性能，所以，很少场景会使用它。通常情况下，我们会使用其他隔离级别加上相应的并发锁的机制来控制对数据的访问，这样既保证了系统性能不会损失太大，也能够一定程度上保证数据的一致性。</p><h2 id="隔离级别操作"><a href="#隔离级别操作" class="headerlink" title="隔离级别操作"></a>隔离级别操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当前事务的隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @@tx_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置隔离级别</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> repeatable <span class="keyword">read</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> tx_isolation = <span class="string">'repeatable-read'</span>;</span><br></pre></td></tr></table></figure><h4 id="不同隔离级别性能差异"><a href="#不同隔离级别性能差异" class="headerlink" title="不同隔离级别性能差异"></a>不同隔离级别性能差异</h4><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>事务四大特性</li><li>事务的二段提交机制？</li><li>MySQL 支持事务吗</li><li>事务的ACID（原子性、一致性、隔离性、持久性）</li><li>InnoDB 支持的四种事务隔离级别名称，以及逐级之间的区别</li><li>数据库中的事务是什么</li><li>MySQL 中的事务回滚机制概述</li><li>事务隔离级别和各自存在的问题（脏读、不可重复读、幻读）和解决方式（间隙锁及MVCC）</li><li>数据库事务属性</li><li>MySQL 事务隔离级别以及 MVCC 机制</li><li>MySQL 的事务隔离级别，分别解决什么问题？</li><li>什么是幻读，如何解决</li><li>事务隔离级别有什么？通过什么来实现的？分别解决了什么问题？</li><li>MySQL 的事务隔离级别，分别解决什么问题。</li><li>谈谈事务的ACID</li><li>数据库的事务，四个性质说一下，分别有什么用，怎么实现的？</li><li>事务隔离级别</li><li>不可重复度和幻读，怎么避免，底层怎么实现（行锁表锁）</li><li>ACID CAP BASE理论，以及RPC过程。</li><li>MySQL事务讲一下，事务定义，四个性质，事务并发引起的问题，事务的四个隔离级别</li><li>数据库隔离级别 脏读 幻读 ACID MySQL的隔离级别</li><li>讲一下数据库的隔离等级</li><li>隔离级别，依次解决的问题（脏读、不可重复读、幻读）</li><li>事务的ACID</li><li>Redis 和数据库如何保证数据一致性</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 备份恢复</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<p>数据库备份的主要目的是灾难恢复，备份还可以测试应用、回滚数据修改、查询历史数据、审计等。</p><h2 id="备份类型"><a href="#备份类型" class="headerlink" title="备份类型"></a>备份类型</h2><p>根据是否需要数据库离线有：</p><ol><li>冷备：需要关 MySQL 服务，读写请求均不允许状态下进行。</li><li>温备：服务在线，但仅支持读请求，不允许写请求。</li><li>热备：备份的同时，业务不受影响。</li></ol><blockquote><p>注1：这些类型的备份取决于业务的需求而不是备份工具。<br>注2：MyISAM 不支持热备，InnoDB 支持热备，但是需要专门的工具。</p></blockquote><p>根据要备份的数据集合的范围有：</p><ol><li>全量备份：即备份所有数据。</li><li>增量备份：自上次全量备份以来更改了的数据，不能单独使用，要借助全量备份，备份的频率取决于数据的更新频率。</li></ol><p>根据备份数据或文件有：</p><ol><li>物理备份：即直接备份数据文件</li><li>逻辑备份：即备份表中的数据或代码</li></ol><h2 id="备份频率"><a href="#备份频率" class="headerlink" title="备份频率"></a>备份频率</h2><p>中小公司，全量一般是每天一次，业务流量低谷执行全备，执行前要锁表。</p><p>大公司周备，每周六00点一次全量，下周日-下周六00点前都是增量。</p><p>备份脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件位于：/usr/local/script/backup_database.sh，确保mysqldump命令可用。</span></span><br><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line"><span class="comment">#Shell Command For Backup MySQL Database Everyday Automatically By Crontab  </span></span><br><span class="line"><span class="comment">#time 2015-5-20 </span></span><br><span class="line">    <span class="comment">#name huxianglin </span></span><br><span class="line">USER=root </span><br><span class="line">PASSWORD=1 </span><br><span class="line">DATABASE1=aonitask </span><br><span class="line">BACKUP_DIR=/data/backup/database/                       <span class="comment"># 备份数据库文件的路径 </span></span><br><span class="line">LOGFILE=/data/backup/database/data_backup.log           <span class="comment"># 备份数据库脚本的日志文件 </span></span><br><span class="line">DATE=`date +%Y%m%d-%H%M -d -3minute`                    <span class="comment"># 获取当前系统时间-3分钟 </span></span><br><span class="line">DUMPFILE1=<span class="variable">$DATE</span>-zblog.sql                               <span class="comment"># 需要备份的数据库名称 </span></span><br><span class="line">ARCHIVE1=<span class="variable">$DUMPFILE1</span>-tar.gz                              <span class="comment"># 备份的数据库压缩后的名称 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$BACKUP_DIR</span> ];                                <span class="comment"># 判断备份路径是否存在，若不存在则创建该路径 </span></span><br><span class="line"><span class="keyword">then</span>  </span><br><span class="line">mkdir -p <span class="string">"<span class="variable">$BACKUP_DIR</span>"</span> </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\n"</span> &gt;&gt; <span class="variable">$LOGFILE</span>   </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"------------------------------------"</span> &gt;&gt; <span class="variable">$LOGFILE</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"BACKUP DATE:<span class="variable">$DATE</span>"</span>&gt;&gt; <span class="variable">$LOGFILE</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"------------------------------------"</span> &gt;&gt; <span class="variable">$LOGFILE</span>  </span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$BACKUP_DIR</span>                                          <span class="comment">#跳到备份路径下 </span></span><br><span class="line">mysqldump -u<span class="variable">$USER</span> -p<span class="variable">$PASSWORD</span> <span class="variable">$DATABASE1</span> &gt; <span class="variable">$DUMPFILE1</span>   <span class="comment">#使用mysqldump备份数据库 </span></span><br><span class="line"><span class="keyword">if</span> [[ $? == 0 ]]; <span class="keyword">then</span> </span><br><span class="line">tar czvf <span class="variable">$ARCHIVE1</span> <span class="variable">$DUMPFILE1</span> &gt;&gt; <span class="variable">$LOGFILE</span> 2&gt;&amp;1          <span class="comment">#判断是否备份成功，若备份成功，则压缩备份数据库，否则将错误日志写入日志文件中去。 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$ARCHIVE1</span> BACKUP SUCCESSFUL!"</span> &gt;&gt; <span class="variable">$LOGFILE</span>  </span><br><span class="line">rm -f <span class="variable">$DUMPFILE1</span> </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line"><span class="built_in">echo</span> “<span class="variable">$ARCHIVE1</span> Backup Fail!” &gt;&gt; <span class="variable">$LOGFILE</span>  </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>删除过时备份脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件位于：/usr/local/script/clean_database.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment">#time 2015-05-21 </span></span><br><span class="line"><span class="comment">#name huxianglin </span></span><br><span class="line"></span><br><span class="line">BACKUPDIR=<span class="string">"/data/backup/database/"</span>                                     <span class="comment">#定义备份文件路径 </span></span><br><span class="line">KEEPTIME=7                                                             <span class="comment">#定义需要删除的文件距离当前的天数 </span></span><br><span class="line">DELFILE=`find <span class="variable">$BACKUPDIR</span> -<span class="built_in">type</span> f -mtime +<span class="variable">$KEEPTIME</span> -<span class="built_in">exec</span> ls &#123;&#125; \;`     <span class="comment">#找到天数大于7天的文件 </span></span><br><span class="line"><span class="keyword">for</span> delfile <span class="keyword">in</span> <span class="variable">$&#123;DELFILE&#125;</span>                                              <span class="comment">#循环删除满足天数大于七天的文件 </span></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">rm -f <span class="variable">$delfile</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>定时执行脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件位于：/usr/local/script/crontab.sh</span></span><br><span class="line">SHELL=/bin/bash </span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin </span><br><span class="line">MAILTO=root </span><br><span class="line"><span class="comment"># For details see man 4 crontabs </span></span><br><span class="line"><span class="comment"># Example of job definition: </span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59) </span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23) </span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31) </span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ... </span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat </span></span><br><span class="line"><span class="comment"># |  |  |  |  | </span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name  command to be executed </span></span><br><span class="line">  01 00 * * * root /usr/<span class="built_in">local</span>/script/backup_database.sh              <span class="comment">#定义每天凌晨0点01分执行备份数据库脚本 </span></span><br><span class="line">  02 00 * * 0 root /usr/<span class="built_in">local</span>/script/clean_database.sh               <span class="comment">#定义每周日凌晨0点02分执行删除数据库备份文件</span></span><br></pre></td></tr></table></figure><h2 id="binlog-详解"><a href="#binlog-详解" class="headerlink" title="binlog 详解"></a>binlog 详解</h2><p>binlog 记录了所有的 DDL 和 DML （除了数据查询语句）语句，以事件形式记录，还包含语句所执行的消耗的时间，MySQL 的二进制日志是事务安全型的。</p><h4 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h4><p>查看所有binlog日志列表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">logs</span>;</span><br></pre></td></tr></table></figure><p>查看master状态，即最后(最新)一个binlog日志的编号名称，及其最后一个操作事件pos结束点(Position)值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">status</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">刷新log日志，自此刻开始产生一个新编号的binlog日志文件。</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">flush logs;</span><br></pre></td></tr></table></figure><blockquote><p>注：每当 MySQL 服务重启时，会自动执行此命令，刷新binlog日志；在mysqldump备份数据时加 -F 选项也会刷新binlog日志；</p></blockquote><p>重置(清空)所有binlog日志。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reset</span> <span class="keyword">master</span>;</span><br></pre></td></tr></table></figure><p>查询 binlog 设置：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'log_bin%'</span>;</span><br><span class="line"></span><br><span class="line">log_bin                            ON</span><br><span class="line">log_bin_basename            /var/lib/mysql/binlog</span><br><span class="line">log_bin_index                    /var/lib/mysql/binlog.index</span><br><span class="line">log_bin_trust_function_creators    OFF</span><br><span class="line">log_bin_use_v1_row_events    OFF</span><br></pre></td></tr></table></figure></p><h4 id="开启-binlog"><a href="#开启-binlog" class="headerlink" title="开启 binlog"></a>开启 binlog</h4><p>MySQL8.0 默认开始 binlog。</p><h4 id="关闭-binlog"><a href="#关闭-binlog" class="headerlink" title="关闭 binlog"></a>关闭 binlog</h4><p>MySQL8.0 需要在 my.cnf 配置上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-log-bin</span><br></pre></td></tr></table></figure><p>然后重启。</p><h2 id="cp-备份"><a href="#cp-备份" class="headerlink" title="cp 备份"></a>cp 备份</h2><p>我们可以直接将数据库文件复制到另外一个目录达到备份的目的。</p><h4 id="向数据表施加读锁（只能读不能写）"><a href="#向数据表施加读锁（只能读不能写）" class="headerlink" title="向数据表施加读锁（只能读不能写）"></a>向数据表施加读锁（只能读不能写）</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; flush tables with read lock;</span><br></pre></td></tr></table></figure><h4 id="备份数据文件"><a href="#备份数据文件" class="headerlink" title="备份数据文件"></a>备份数据文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ mkdir /backup                     <span class="comment"># 创建文件夹存放备份数据库文件</span></span><br><span class="line">zhangqinghua$ cp -a /var/lib/mysql/* /backup    <span class="comment"># 保留权限的拷贝源数据文件</span></span><br></pre></td></tr></table></figure><h4 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; unlock tables;</span><br></pre></td></tr></table></figure><h4 id="模拟数据丢失并恢复"><a href="#模拟数据丢失并恢复" class="headerlink" title="模拟数据丢失并恢复"></a>模拟数据丢失并恢复</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随便删除一条数据</span></span><br><span class="line">zhangqinghua$ systemctl stop mysqld             <span class="comment"># 先停止MySQL服务</span></span><br><span class="line">zhangqinghua$ rm -rf /var/lib/mysql/*           <span class="comment"># 清空数据，这一步可以不做</span></span><br><span class="line">zhangqinghua$ cp -a /backup/* /var/lib/mysql/   <span class="comment"># 将备份的数据文件拷贝回去</span></span><br><span class="line">zhangqinghua$ systemctl start mysqld            <span class="comment"># 重启MySQL服务</span></span><br><span class="line"><span class="comment"># 可以看到，数据又回来了</span></span><br></pre></td></tr></table></figure><h2 id="mysqldump-备份"><a href="#mysqldump-备份" class="headerlink" title="mysqldump 备份"></a>mysqldump 备份</h2><p>mysqldump 是 MySQL 自带的逻辑备份工具。它的原理是，通过协议连接到 MySQL 数据库，将需要备份的数据查询出来转化成对应的 <code>insert</code> 语句，当我们需要还原这些数据时，只要执行这些 <code>insert</code> 语句即可。</p><p>mysqldump 是一个客户端工具，所有当它连接数据库时，也会读取 MySQL 数据库的配置文件，加载跟客户端相关的配置。</p><h4 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ mysqldump -uusername -ppassword --all-databases &gt; all.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字符集</span></span><br><span class="line">zhangqinghua$ mysqldump -uusername -ppassword --default-character-set=gb2312 db1 table1 &gt; tb1.sql</span><br></pre></td></tr></table></figure><h4 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ mysql -uusername -ppassword db1 &lt; tb1tb2.sql</span><br></pre></td></tr></table></figure><p>或者 MySQL 命令执行：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; user db1;</span><br><span class="line">mysql&gt; source tb1tb2.sql;</span><br></pre></td></tr></table></figure></p><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><p>在对数据库进行一次全量备份和 N 次增量备份后，删库删表，然后尝试恢复。</p><p>原始数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class="line">+<span class="comment">----+-----------+------------+-------+</span></span><br><span class="line">| id | image_key | image_link | title |</span><br><span class="line">+<span class="comment">----+-----------+------------+-------+</span></span><br><span class="line">|  1 | 1         | 1          | 123   |</span><br><span class="line">|  2 | 111       | 222        | 333   |</span><br><span class="line">+<span class="comment">----+-----------+------------+-------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>全量备份：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest mysql]<span class="comment"># mysqldump -uroot -p --single-transaction --master-data=2 --routines --flush-logs --all-databases &gt; /backup/alldb.sql;</span></span><br></pre></td></tr></table></figure><p>增量备份：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># change id = 1, image_key = 1_change &gt; binlog.000002</span><br><span class="line">[root@vultrguest mysql]# mysqladmin -uroot -p1 flush-logs</span><br><span class="line"></span><br><span class="line"># change id = 1, image_link = 1_change &gt; binlog.000003</span><br><span class="line">[root@vultrguest mysql]# mysqladmin -uroot -p1 flush-logs</span><br><span class="line"></span><br><span class="line"># change id = 1, title = 1_change &gt; binlog.000004</span><br><span class="line">[root@vultrguest mysql]# mysqladmin -uroot -p1 flush-logs</span><br><span class="line"></span><br><span class="line">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class="line">+<span class="comment">----+-----------+------------+----------+</span></span><br><span class="line">| id | image_key | image_link | title    |</span><br><span class="line">+<span class="comment">----+-----------+------------+----------+</span></span><br><span class="line">|  1 | 1_change  | 1_change   | 1_change |</span><br><span class="line">|  2 | 111       | 222        | 333      |</span><br><span class="line">+<span class="comment">----+-----------+------------+----------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>模拟误删数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将日志切换到binlog.000005</span></span><br><span class="line">[root@vultrguest mysql]<span class="comment"># mysqladmin -uroot -p1 flush-logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟误删数据...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据</span></span><br><span class="line">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class="line">+----+-----------+------------+-------+</span><br><span class="line">| id | image_key | image_link | title |</span><br><span class="line">+----+-----------+------------+-------+</span><br><span class="line">|  2 | 111       | 222        | 333   |</span><br><span class="line">+----+-----------+------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>恢复全量数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复数据前先关闭数据写入。</span></span><br><span class="line">[root@vultrguest mysql]<span class="comment"># mysql -uroot -p1 -e 'source /backup/alldb.sql;'</span></span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line"></span><br><span class="line">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class="line">+----+-----------+------------+-------+</span><br><span class="line">| id | image_key | image_link | title |</span><br><span class="line">+----+-----------+------------+-------+</span><br><span class="line">|  1 | 1         | 1          | 123   |</span><br><span class="line">|  2 | 111       | 222        | 333   |</span><br><span class="line">+----+-----------+------------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>恢复增量数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest mysql]<span class="comment"># mysqlbinlog binlog.000002 binlog.000003 binlog.000004 | mysql -uroot -p1</span></span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line"></span><br><span class="line">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class="line">+----+-----------+------------+----------+</span><br><span class="line">| id | image_key | image_link | title    |</span><br><span class="line">+----+-----------+------------+----------+</span><br><span class="line">|  1 | 1_change  | 1_change   | 1_change |</span><br><span class="line">|  2 | 111       | 222        | 333      |</span><br><span class="line">+----+-----------+------------+----------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>主从复制使得数据可以从一个数据库服务器复制到其他服务器上，在复制数据时，一个服务器充当主服务器，其余的服务器充当从服务器。</p><p>MySQL 服务器之间的主从同步是基于二进制日志机制，主服务器使用二进制日志来记录数据库的变动情况，从服务器通过读取和执行该日志文件来保持和主服务器的数据一致。</p><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><p>主从复制可以用于以下场景：</p><ol><li>备份，避免影响业务</li><li>读写分离，提供查询服务</li><li>实时灾备，用于故障切换</li></ol><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>1.主库：开启二进制日志和配置一个独立的ID，重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=1</span><br></pre></td></tr></table></figure><p>2.主库：创建一个用来专门复制主服务器数据的账号，记录二进制文件的位置信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create user 'repl'@'%' IDENTIFIED WITH mysql_native_password BY '123456';</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant replication slave on *.* to 'repl'@'%';</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+<span class="comment">---------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line">| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+<span class="comment">---------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line">| binlog.000003 |      940 |              |                  |                   |</span><br><span class="line">+<span class="comment">---------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>3.主库：暂停写入，备份数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主库加上一把锁，阻止对数据库进行任何的写操作</span></span><br><span class="line">mysql&gt; flush tables with <span class="built_in">read</span> lock;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主库备份数据</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># docker exec mysql01 mysqldump -uroot -p123456 --all-databases &gt; /data/all.sql;</span></span><br><span class="line">mysqldump: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br></pre></td></tr></table></figure><p>4.从库导入数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@b142eb1f220c:/<span class="comment"># mysql -uroot -p123456 &lt; /var/lib/mysql/all.sql</span></span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br></pre></td></tr></table></figure><p>5.从库：配置一个唯一的ID，重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=2</span><br></pre></td></tr></table></figure><p>6.配置复制账号，二进制文件的位置信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; change master to master_host='139.180.197.68', master_port=3306, master_user='repl', master_password='123456', master_log_file='binlog.000003', master_log_pos=940;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.02 sec)</span><br></pre></td></tr></table></figure><p>7.从库：开启同步线程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: </span><br><span class="line">                  Master_Host: 139.180.197.68</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://images2015.cnblogs.com/blog/771870/201603/771870-20160309163148225-1200721404.png" alt=""></p><p>上面的两个进程都显示YES则表示配置成功。</p><p>8.主库：恢复写入操作</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; unlock tables;</span><br></pre></td></tr></table></figure><blockquote><p>对于主库已有数据，只能手工导入从库。</p></blockquote><h2 id="备份方法对比"><a href="#备份方法对比" class="headerlink" title="备份方法对比"></a>备份方法对比</h2><div class="table-container"><table><thead><tr><th style="text-align:left">备份方法</th><th>备份速度</th><th>恢复速度</th><th>便捷性</th><th>功能</th><th>一般用于</th></tr></thead><tbody><tr><td style="text-align:left">cp</td><td>快</td><td>快</td><td>一般、灵活性低</td><td>很弱</td><td>少量数据</td></tr><tr><td style="text-align:left">mysqldump</td><td>慢</td><td>慢</td><td>一般、可无视存储引擎的差异</td><td>一般</td><td>中小型数据量的备份</td></tr><tr><td style="text-align:left">lvm2快照</td><td>快</td><td>快</td><td>一般、支持几乎热备、速度快</td><td>一般</td><td>中小型数据量的备份</td></tr><tr><td style="text-align:left">xtrabackup</td><td>较快</td><td>较快</td><td>实现innodb热备、对存储引擎有要求</td><td>强大</td><td>较大规模的备份</td></tr></tbody></table></div><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p>Last_IO_Error: error connecting to master<br>主从复制，从库提示：Last_IO_Error: error connecting to master。</p><p>原因：防火墙未关闭。</p></li><li><p>Slave failed to initialize relay log info structure from the repository<br>MySQL主从复制，启动slave时出现报错。</p><p>原因：保留之前relay_log的信息，所以导致启动slave报错。</p><p>解决：reset salve; change master …; start slave;</p></li></ol><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ol><li><p>全量备份和增量备份的区别？</p></li><li><p>什么情况下需要增量恢复？</p></li><li><p>只有一个主库是否需要增量恢复？<br>每天全量备份 + 每小时增量备份</p></li><li><p>人为操作数据库SQL破坏主库是否需要增量恢复？</p></li><li><p>主或从库宕机（硬件损坏）是否需要增量恢复？<br>不需要。主库宕机，切换从库。从库宕机，正常修复。</p></li><li><p>mysqldump 备份什么时候能派上用场？<br>跨机房灾备、迁移数据、增加从库</p></li><li><p>什么是主从复制？</p></li><li><p>数据库主从同步数据一致性如何解决？技术方案的优劣势比较？</p></li><li><p>MySQL 主从同步的实现原理？</p></li><li><p>数据库崩溃时事务的恢复机制</p></li><li><p>myisamchk 是用来做什么的</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 读写分离</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库层的几种模式"><a href="#数据库层的几种模式" class="headerlink" title="数据库层的几种模式"></a>数据库层的几种模式</h2><p>在系统架构中，数据库层主要由如下几种模式，分别是单点模式、主备模式、主从模式。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggyyz39wggj313z0u0tjn.jpg" alt=""></p><ol><li>单点模式<br> 单点模式是最简单的模式，只有一台数据库服务器，部署最简单。但是存在单点风险，一旦这台服务器挂掉，整个系统也就挂掉了。</li><li><p>主备模式<br> 为了解决单点模式的风险，主备模式产生。目前，主备模式应该是各个线上服务系统的最低配置了，比如你在各个云平台购买的数据库服务一般都会开启备份功能。一旦主节点出现问题，还可以切换到备份节点，不至于整个系统瘫痪。</p><p> 主备又分为一主一备、一主多备。多个备份是为了保证更高的安全性，万一主节点出现问题的时候，碰巧备份节点也出问题呢。</p><p> 当主节点出现问题的时候要切换到备份节点，切换方式又分为手动切换和自动切换。手动切换具有一定的延时，当主节点出现问题时，只能等运维人员发现或者收到系统通知。</p></li><li><p>主从模式<br> 主从配置一般都是和读写分离相结合，主服务器负责写数据，从服务器负责读数据，并保证主服务器的数据及时同步到从服务器。</p><p> 主从模式又分为一主一从、一主多从和多主多从，越往后部署越复杂，同时，系统稳定性更高。主从模式可以更好的分担数据库压力，将插入更新操作和查询操作分开，提高系统整体性能。</p></li></ol><h2 id="主从原理"><a href="#主从原理" class="headerlink" title="主从原理"></a>主从原理</h2><h4 id="主节点"><a href="#主节点" class="headerlink" title="主节点"></a>主节点</h4><p>1、当主节点上进行 insert、update、delete 操作时，会按照时间先后顺序写入到 binlog 中；<br>2、当从节点连接到主节点时，主节点会创建一个叫做 binlog dump 的线程；</p><p>3、一个主节点有多少个从节点，就会创建多少个 binlog dump 线程；</p><p>4、当主节点的 binlog 发生变化的时候，也就是进行了更改操作，binlog dump 线程就会通知从节点 (Push模式)，并将相应的 binlog 内容发送给从节点；</p><h4 id="从节点"><a href="#从节点" class="headerlink" title="从节点"></a>从节点</h4><p>当开启主从同步的时候，从节点会创建两个线程用来完成数据同步的工作。</p><p>I/O线程： 此线程连接到主节点，主节点上的 binlog dump 线程会将 binlog 的内容发送给此线程。此线程接收到 binlog 内容后，再将内容写入到本地的 relay log。</p><p>SQL线程： 该线程读取 I/O 线程写入的 relay log，并且根据 relay log 的内容对从数据库做对应的操作。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggze112feij31vw0pqgtd.jpg" alt=""></p><p>主从配置一般都是和读写分离相结合，主服务器负责写数据，从服务器负责读数据，并保证主服务器的数据及时同步到从服务器。</p><p><a href="https://www.cnblogs.com/fengzheng/p/13401783.html">https://www.cnblogs.com/fengzheng/p/13401783.html</a></p><h2 id="MyCat"><a href="#MyCat" class="headerlink" title="MyCat"></a>MyCat</h2><ol><li>是什么</li><li>能做什么：读写分离、分库分表、多数据源</li><li>安装</li><li></li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>读写分离、主从复制</li><li>数据库崩溃时事务的恢复机制（REDO 日志和 UNDO 日志）</li><li>MySQL的主从复制怎么做的，具体原理是什么，有什么优缺点。</li><li>数据库主从同步数据一致性如何解决？技术方案的优劣势比较？</li><li>数据库分库分表一般数据量多大才需要？</li><li>MySQL 主从同步的实现原理？</li><li>MySQL 主从同步如何配置，工作原理</li><li>MySQL数据库怎么实现分库分表，以及数据同步？</li><li>MySQL同步机制原理，有哪几种同步方法</li><li>数据库主从同步如何实现，事务如何实现</li><li>分库分表，主从复制，读写分离。</li><li>mycat 分库分表、读写分离的实现</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 基准测试</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>基准测试是指通过设计科学的测试方法、测试工具和测试系统，实现对一类测试对象的某项性能指标进行定量的和可对比的测试。</p><p>性能指标</p><ol><li>RT：响应时间。包括平均响应时间、最小响应时间、最大响应时间、每个响应时间的查询占比。比较需要重点关注的是，前 95-99% 的最大响应时间。因为它决定了大多数情况下的短板。</li><li>TPS：Transactions Per Second ，即数据库每秒执行的事务数，以 commit 成功次数为准。</li><li>QPS：Queries Per Second ，即数据库每秒执行的 SQL 数（含 insert、select、update、delete 等）。</li><li>Concurrency Threads：并发量，每秒可处理的查询请求的数量。</li></ol><p>总结来说，实际就是 2 个维度：</p><ol><li>延迟</li><li>吞吐量</li></ol><h2 id="sysbench-介绍"><a href="#sysbench-介绍" class="headerlink" title="sysbench 介绍"></a>sysbench 介绍</h2><p>sysbench 是一个模块化的、跨平台、多线程基准测试工具，主要用于评估测试各种不同系统参数下的数据库负载情况。</p><p>它主要包括以下几种方式的测试：</p><ol><li>CPU 性能</li><li>磁盘 IO 性能</li><li>调度程序性能</li><li>内存分配及传输速度</li><li>POSIX 线程性能</li><li>数据库性能(OLTP 基准测试)</li></ol><p>目前 sysbench 主要支持 MySQL、PgSQL、Oracle 这 3 种数据库。</p><p>sysbench 也是目前 DBA 最喜欢用来做 MySQL 性能的测试工具。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>centos 安装，需要到 /usr/share/sysbench/ 目录使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y sysbench</span><br></pre></td></tr></table></figure><p>mac 安装，需要到 /usr/local/Cellar/sysbench/1.0.17_1/share/sysbench 目录使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo brew install sysbench</span><br></pre></td></tr></table></figure><h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><p>执行以下命令，sysbench 会自动在数据库常见相应的测试数据。<code>oltp_common.lua</code> 是要执行的测试脚本。这里使用自带的 lua 测试脚本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sysbench oltp_common.lua \</span><br><span class="line">    --mysql-host=216.155.135.22 \</span><br><span class="line">    --mysql-port=3306 \</span><br><span class="line">    --mysql-user=sptest \</span><br><span class="line">    --mysql-password=sptest \</span><br><span class="line">    --mysql-db=sptest \</span><br><span class="line">    --table-size=100000 \</span><br><span class="line">    --tables=9 \</span><br><span class="line">    prepare</span><br></pre></td></tr></table></figure></p><p>MySQL 相关参数：</p><ol><li>mysql-host<br> MySQL server IP  。</li><li>mysql-port<br> MySQL server port 。</li><li>mysql-db<br> MySQL Server 数据库名。</li><li>mysql-user<br> MySQL server 账号。</li><li>mysql-password<br> MySQL server 密码。</li></ol><p>sysbench 相关参数：</p><ol><li>time<br>最大的总执行时间，以秒为单位，默认为 10 秒。</li><li>tables<br> 表数。</li><li>table-size<br> 表记录条数。</li><li>threads<br> 要使用的线程数，默认 1 个。</li><li>report-interval<br> 以秒为单位定期报告具有指定间隔的中间统计信息，默认为 0 ，表示禁用中间报告。</li><li>prepare<br> 执行准备数据</li></ol><h2 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h2><p>执行下面命令开始对数据库进行测试。<code>oltp_read_write.lua</code> 表示混合读写。在一个事务中，默认比例是：select:update_key:update_non_key:delete:insert = 14:1:1:1:1 。这也是为什么，我们测试出来的 TPS 和 QPS 的比例，大概在 1:18~20 左右。相当于说，一个事务中，有 18 个读写操作。<code>run</code> 表示执行测试命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sysbench oltp_read_write.lua \</span><br><span class="line">--mysql-host=216.155.135.22 \</span><br><span class="line">--mysql-port=3306 \</span><br><span class="line">--mysql-user=sptest \</span><br><span class="line">--mysql-password=sptest \</span><br><span class="line">--mysql-db=sptest  \</span><br><span class="line">--threads=32 \</span><br><span class="line">--time=60 \</span><br><span class="line">--report-interval=10  \</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>执行结果说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">sysbench 1.0.14 (using bundled LuaJIT 2.1.0-beta2)</span><br><span class="line"></span><br><span class="line">Running the <span class="built_in">test</span> with following options:</span><br><span class="line">Number of threads: 10</span><br><span class="line">Report intermediate results every 10 second(s)</span><br><span class="line">Initializing random number generator from current time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Initializing worker threads...</span><br><span class="line"></span><br><span class="line">--线程启动</span><br><span class="line">Threads started!</span><br><span class="line"></span><br><span class="line">-- 每10秒钟报告一次测试结果，tps、每秒读、每秒写、95%以上的响应时长统计</span><br><span class="line">[ 10s ] thds: 10 tps: 956.45 qps: 19139.38 (r/w/o: 13399.56/3825.92/1913.91) lat (ms,95%): 29.72 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 20s ] thds: 10 tps: 989.71 qps: 19804.24 (r/w/o: 13862.17/3962.55/1979.52) lat (ms,95%): 28.67 err/s: 0.10 reconn/s: 0.00</span><br><span class="line">[ 30s ] thds: 10 tps: 995.44 qps: 19909.03 (r/w/o: 13936.11/3982.05/1990.87) lat (ms,95%): 27.66 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 40s ] thds: 10 tps: 983.30 qps: 19660.90 (r/w/o: 13764.23/3930.08/1966.59) lat (ms,95%): 27.66 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 50s ] thds: 10 tps: 994.20 qps: 19882.58 (r/w/o: 13918.26/3975.92/1988.41) lat (ms,95%): 29.19 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            1663326 --读总数</span><br><span class="line">        write:                           475233 -- 写总数  </span><br><span class="line">        other:                           237617 -- 其他操作总数(SELECT、INSERT、UPDATE、DELETE之外的操作，例如COMMIT等)  </span><br><span class="line">        total:                           2376176 -- 全部总数</span><br><span class="line">    transactions:                        118808 (989.85 per sec.) -- 总事务数(每秒事务数)</span><br><span class="line">    queries:                             2376176 (19797.13 per sec.)</span><br><span class="line">    ignored errors:                      1      (0.01 per sec.) --总忽略错误总数(每秒忽略错误次数)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.) --重连总数(每秒重连次数)</span><br><span class="line"></span><br><span class="line">General statistics: --常规统计</span><br><span class="line">    total time:                          120.0244s --总耗时</span><br><span class="line">    total number of events:              118808 --共发生多少事务数</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                    6.08 --最小耗时</span><br><span class="line">         avg:                                   10.10 --平均耗时</span><br><span class="line">         max:                                   87.65 --最长耗时</span><br><span class="line">         95th percentile:                       28.16 --超过95%平均耗时</span><br><span class="line">         sum:                              1199522.76</span><br><span class="line"></span><br><span class="line">Threads fairness: --并发统计</span><br><span class="line">    events (avg/stddev):           11880.8000/273.15 --总处理事件数/标准偏差</span><br><span class="line">    execution time (avg/stddev):   119.9523/0.00 --总执行时间/标准偏差</span><br></pre></td></tr></table></figure><h2 id="清理数据"><a href="#清理数据" class="headerlink" title="清理数据"></a>清理数据</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sysbench oltp_read_write.lua \</span><br><span class="line">--mysql-host=216.155.135.22 \</span><br><span class="line">--mysql-port=3306 \</span><br><span class="line">--mysql-user=sptest \</span><br><span class="line">--mysql-password=sptest \</span><br><span class="line">--mysql-db=sptest  \</span><br><span class="line">    --tables=9 \</span><br><span class="line">cleanup</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>下面是针对 MySQL 进行不同维度的测试结果。</p><h4 id="请求延迟"><a href="#请求延迟" class="headerlink" title="请求延迟"></a>请求延迟</h4><p>测试延迟对 MySQL 并发的影响，结论：每 20 ms 的延迟都使得 MySQL 并发降低一半。</p><p>MySQL 数据：</p><ol><li>机器配置：1核 1024MB</li><li>CPU 使用率：0%</li><li>Mem 使用率：50%/360MB</li><li>测试线程数：32</li></ol><p>韩国测试机器：180ms ping、CPU 10% 使用率、Mem 65%/500MB 使用率。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            34678</span><br><span class="line">        write:                           9883</span><br><span class="line">        other:                           4945</span><br><span class="line">        total:                           49506</span><br><span class="line">    transactions:                        2468   (8.11 per sec.)</span><br><span class="line">    queries:                             49506  (162.73 per sec.)</span><br><span class="line">    ignored errors:                      9      (0.03 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          304.2212s</span><br><span class="line">    total number of events:              2468</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                 3646.35</span><br><span class="line">         avg:                                 3917.42</span><br><span class="line">         max:                                 7517.01</span><br><span class="line">         95th percentile:                     4437.27</span><br><span class="line">         sum:                              9668200.40</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           77.1250/1.60</span><br><span class="line">    execution time (avg/stddev):   302.1313/1.22</span><br><span class="line"></span><br><span class="line">tps: 6.30 qps: 156.27 (r/w/o: 115.08/25.29/15.90) lat (ms,95%): 5409.26 err/s: 0.10 reconn/s: 0.00</span><br></pre></td></tr></table></figure></p><p>纽约测试机器：1ms ping、CPU 85% 使用率、Mem 65%/500MB 使用率。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            891128</span><br><span class="line">        write:                           254245</span><br><span class="line">        other:                           127161</span><br><span class="line">        total:                           1272534</span><br><span class="line">    transactions:                        63509  (211.55 per sec.)</span><br><span class="line">    queries:                             1272534 (4238.85 per sec.)</span><br><span class="line">    ignored errors:                      143    (0.48 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          300.2053s</span><br><span class="line">    total number of events:              63509</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   22.98</span><br><span class="line">         avg:                                  151.22</span><br><span class="line">         max:                                  647.85</span><br><span class="line">         95th percentile:                      186.54</span><br><span class="line">         sum:                              9603770.62</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           1984.6562/12.64</span><br><span class="line">    execution time (avg/stddev):   300.1178/0.05</span><br><span class="line"></span><br><span class="line">tps: 197.49 qps: 3996.19 (r/w/o: 2804.28/793.04/398.87) lat (ms,95%): 223.34 err/s: 0.70 reconn/s: 0.00</span><br></pre></td></tr></table></figure><h4 id="线程数量"><a href="#线程数量" class="headerlink" title="线程数量"></a>线程数量</h4><p>测试不同的线程数对 MySQL 并发的影响。结论：线程多的话容易死机。</p><p>MySQL 数据：</p><ol><li>延迟：1ms ping</li><li>机器配置：1核 1024MB</li><li>CPU 使用率：0%</li><li>Mem 使用率：50%/360MB</li></ol><p>纽约测试机器：1 threads、CPU 35% 使用率、Mem 51% 使用率。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            206374</span><br><span class="line">        write:                           58964</span><br><span class="line">        other:                           29482</span><br><span class="line">        total:                           294820</span><br><span class="line">    transactions:                        14741  (49.13 per sec.)</span><br><span class="line">    queries:                             294820 (982.67 per sec.)</span><br><span class="line">    ignored errors:                      0      (0.00 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          300.0153s</span><br><span class="line">    total number of events:              14741</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   12.93</span><br><span class="line">         avg:                                   20.34</span><br><span class="line">         max:                                  142.58</span><br><span class="line">         95th percentile:                       29.19</span><br><span class="line">         sum:                               299784.93</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           14741.0000/0.00</span><br><span class="line">    execution time (avg/stddev):   299.7849/0.00</span><br></pre></td></tr></table></figure><p>纽约测试机器：16 threads、CPU 81% 使用率、Mem 59% 使用率。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            204008</span><br><span class="line">        write:                           58243</span><br><span class="line">        other:                           29126</span><br><span class="line">        total:                           291377</span><br><span class="line">    transactions:                        14554  (145.23 per sec.)</span><br><span class="line">    queries:                             291377 (2907.52 per sec.)</span><br><span class="line">    ignored errors:                      18     (0.18 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          100.2105s</span><br><span class="line">    total number of events:              14554</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   22.33</span><br><span class="line">         avg:                                  110.06</span><br><span class="line">         max:                                  359.90</span><br><span class="line">         95th percentile:                      147.61</span><br><span class="line">         sum:                              1601767.80</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           909.6250/11.37</span><br><span class="line">    execution time (avg/stddev):   100.1105/0.04</span><br><span class="line"></span><br><span class="line">tps: 148.87 qps: 2998.68 (r/w/o: 2103.43/596.00/299.25) lat (ms,95%): 134.90 err/s: 0.00 reconn/s: 0.00</span><br></pre></td></tr></table></figure><p>纽约测试机器：32 threads、CPU 83% 使用率、Mem 62% 使用率。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            216020</span><br><span class="line">        write:                           61610</span><br><span class="line">        other:                           30816</span><br><span class="line">        total:                           308446</span><br><span class="line">    transactions:                        15386  (153.49 per sec.)</span><br><span class="line">    queries:                             308446 (3077.06 per sec.)</span><br><span class="line">    ignored errors:                      44     (0.44 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          100.2361s</span><br><span class="line">    total number of events:              15386</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   28.93</span><br><span class="line">         avg:                                  208.24</span><br><span class="line">         max:                                  692.07</span><br><span class="line">         95th percentile:                      262.64</span><br><span class="line">         sum:                              3204016.01</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           480.8125/3.92</span><br><span class="line">    execution time (avg/stddev):   100.1255/0.06</span><br><span class="line"></span><br><span class="line">tps: 151.34 qps: 3048.14 (r/w/o: 2138.99/606.07/303.08) lat (ms,95%): 267.41 err/s: 0.30 reconn/s: 0.00</span><br></pre></td></tr></table></figure><p>纽约测试机器：64 threads、CPU 85% 使用率、Mem 66% 使用率。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试到一半死机</span></span><br><span class="line">tps: 160.19 qps: 3345.46 (r/w/o: 2363.85/652.14/329.47) lat (ms,95%): 707.07 err/s: 2.70 reconn/s: 0.00</span><br></pre></td></tr></table></figure><h4 id="不同版本"><a href="#不同版本" class="headerlink" title="不同版本"></a>不同版本</h4><h4 id="记录大小"><a href="#记录大小" class="headerlink" title="记录大小"></a>记录大小</h4><p>测试不同的表的数据量对并发的影响。结论：没有发现有影响，可能是因为表结构太简单了。</p><p>MySQL 数据：</p><ol><li>机器配置：1核 1024MB</li><li>CPU 使用率：0%</li><li>Mem 使用率：50%/360MB</li><li>测试线程数：32</li></ol><p>1w 数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            914830</span><br><span class="line">        write:                           260914</span><br><span class="line">        other:                           130505</span><br><span class="line">        total:                           1306249</span><br><span class="line">    transactions:                        65160  (217.05 per sec.)</span><br><span class="line">    queries:                             1306249 (4351.21 per sec.)</span><br><span class="line">    ignored errors:                      185    (0.62 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          300.2017s</span><br><span class="line">    total number of events:              65160</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   20.28</span><br><span class="line">         avg:                                  147.38</span><br><span class="line">         max:                                 2627.49</span><br><span class="line">         95th percentile:                      186.54</span><br><span class="line">         sum:                              9603145.85</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           2036.2500/14.71</span><br><span class="line">    execution time (avg/stddev):   300.0983/0.05</span><br><span class="line"></span><br><span class="line">tps: 207.40 qps: 4156.87 (r/w/o: 2912.25/829.21/415.41) lat (ms,95%): 200.47 err/s: 0.40 reconn/s: 0.00</span><br></pre></td></tr></table></figure><p>10w 条数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            194726</span><br><span class="line">        write:                           55406</span><br><span class="line">        other:                           27728</span><br><span class="line">        total:                           277860</span><br><span class="line">    transactions:                        13819  (229.45 per sec.)</span><br><span class="line">    queries:                             277860 (4613.49 per sec.)</span><br><span class="line">    ignored errors:                      90     (1.49 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          60.2256s</span><br><span class="line">    total number of events:              13819</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   14.97</span><br><span class="line">         avg:                                  139.16</span><br><span class="line">         max:                                 2190.64</span><br><span class="line">         95th percentile:                      179.94</span><br><span class="line">         sum:                              1923116.42</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           431.8438/3.48</span><br><span class="line">    execution time (avg/stddev):   60.0974/0.04</span><br><span class="line"></span><br><span class="line">tps: 235.40 qps: 4748.13 (r/w/o: 3332.62/943.01/472.50) lat (ms,95%): 183.21 err/s: 1.70 reconn/s: 0.00</span><br></pre></td></tr></table></figure></p><p>100w 条数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            210938</span><br><span class="line">        write:                           60047</span><br><span class="line">        other:                           30047</span><br><span class="line">        total:                           301032</span><br><span class="line">    transactions:                        14980  (249.26 per sec.)</span><br><span class="line">    queries:                             301032 (5009.10 per sec.)</span><br><span class="line">    ignored errors:                      87     (1.45 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          60.0949s</span><br><span class="line">    total number of events:              14980</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   13.19</span><br><span class="line">         avg:                                  128.30</span><br><span class="line">         max:                                  444.92</span><br><span class="line">         95th percentile:                      164.45</span><br><span class="line">         sum:                              1921953.92</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           468.1250/3.76</span><br><span class="line">    execution time (avg/stddev):   60.0611/0.02</span><br><span class="line"></span><br><span class="line">tps: 236.21 qps: 4765.82 (r/w/o: 3347.28/944.22/474.31) lat (ms,95%): 170.48 err/s: 1.80 reconn/s: 0.00</span><br></pre></td></tr></table></figure><p>500w 条数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            187712</span><br><span class="line">        write:                           53519</span><br><span class="line">        other:                           26770</span><br><span class="line">        total:                           268001</span><br><span class="line">    transactions:                        13362  (222.05 per sec.)</span><br><span class="line">    queries:                             268001 (4453.65 per sec.)</span><br><span class="line">    ignored errors:                      46     (0.76 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          60.1732s</span><br><span class="line">    total number of events:              13362</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   19.09</span><br><span class="line">         avg:                                  143.94</span><br><span class="line">         max:                                  520.59</span><br><span class="line">         95th percentile:                      186.54</span><br><span class="line">         sum:                              1923285.64</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           417.5625/5.21</span><br><span class="line">    execution time (avg/stddev):   60.1027/0.04</span><br><span class="line"></span><br><span class="line">tps: 229.90 qps: 4597.61 (r/w/o: 3217.74/919.78/460.09) lat (ms,95%): 179.94 err/s: 0.30 reconn/s: 0.00</span><br></pre></td></tr></table></figure><p>1000w 条数据（只测试了一张表，因为准备数据时机器卡死了）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            178374</span><br><span class="line">        write:                           50785</span><br><span class="line">        other:                           25413</span><br><span class="line">        total:                           254572</span><br><span class="line">    transactions:                        12672  (210.55 per sec.)</span><br><span class="line">    queries:                             254572 (4229.71 per sec.)</span><br><span class="line">    ignored errors:                      69     (1.15 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          60.1844s</span><br><span class="line">    total number of events:              12672</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   17.12</span><br><span class="line">         avg:                                  151.73</span><br><span class="line">         max:                                  617.00</span><br><span class="line">         95th percentile:                      196.89</span><br><span class="line">         sum:                              1922761.62</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           396.0000/4.53</span><br><span class="line">    execution time (avg/stddev):   60.0863/0.04</span><br><span class="line"></span><br><span class="line">tps: 207.90 qps: 4184.34 (r/w/o: 2935.26/832.49/416.59) lat (ms,95%): 196.89 err/s: 0.80 reconn/s: 0.00</span><br></pre></td></tr></table></figure><p>5000w 条数据（原来机器放不进去，升级了配置。1核 2GB，只放了2张表各3000万数据）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            982030</span><br><span class="line">        write:                           251411</span><br><span class="line">        other:                           129139</span><br><span class="line">        total:                           1362580</span><br><span class="line">    transactions:                        58994  (196.55 per sec.)</span><br><span class="line">    queries:                             1362580 (4539.77 per sec.)</span><br><span class="line">    ignored errors:                      11151  (37.15 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          300.1406s</span><br><span class="line">    total number of events:              58994</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   12.36</span><br><span class="line">         avg:                                  162.76</span><br><span class="line">         max:                                 1126.37</span><br><span class="line">         95th percentile:                      325.98</span><br><span class="line">         sum:                              9602150.23</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           1843.5625/21.19</span><br><span class="line">    execution time (avg/stddev):   300.0672/0.04</span><br><span class="line"></span><br><span class="line">tps: 178.60 qps: 4189.60 (r/w/o: 3028.60/765.90/395.10) lat (ms,95%): 383.33 err/s: 37.90 reconn/s: 0.00</span><br></pre></td></tr></table></figure><h4 id="机器配置"><a href="#机器配置" class="headerlink" title="机器配置"></a>机器配置</h4><p>测试不同的配置对MySQL性能的影响。结论：CPU对性能影响大，但是达到最多只能利用到5核，再高不生效，可能是线程数未饱和或者达到磁盘的上限。内存占了1.5G后不再占。</p><p>定量参数</p><ol><li>1 毫秒延迟 </li><li>32 并发线程</li><li>100 万数据量</li></ol><p>Vultr 1核 1GB 机器测试数据请参考上面的。</p><p>Vultr 1核 2GB 机器测试数据：</p><ol><li>测试前CPU使用0%，内存使用24%，剩余1.10GB。</li><li>测试中CPU使用85%，内存使用33%，剩余0.95GB。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            184702</span><br><span class="line">        write:                           52769</span><br><span class="line">        other:                           26385</span><br><span class="line">        total:                           263856</span><br><span class="line">    transactions:                        13192  (219.48 per sec.)</span><br><span class="line">    queries:                             263856 (4389.85 per sec.)</span><br><span class="line">    ignored errors:                      1      (0.02 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          60.1039s</span><br><span class="line">    total number of events:              13192</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   19.85</span><br><span class="line">         avg:                                  145.66</span><br><span class="line">         max:                                  888.30</span><br><span class="line">         95th percentile:                      227.40</span><br><span class="line">         sum:                              1921576.18</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           412.2500/4.32</span><br><span class="line">    execution time (avg/stddev):   60.0493/0.03</span><br><span class="line"></span><br><span class="line">tps: 209.37 qps: 4197.11 (r/w/o: 2933.59/844.78/418.74) lat (ms,95%): 204.11 err/s: 0.00 reconn/</span><br></pre></td></tr></table></figure><p>Vultr 2核 4GB 机器测试数据：</p><ol><li>测试前CPU使用0%，内存使用11%，剩余2.90GB。</li><li>测试中CPU使用180%，内存使用16%，剩余2.70GB。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            424830</span><br><span class="line">        write:                           121378</span><br><span class="line">        other:                           60689</span><br><span class="line">        total:                           606897</span><br><span class="line">    transactions:                        30344  (504.89 per sec.)</span><br><span class="line">    queries:                             606897 (10098.06 per sec.)</span><br><span class="line">    ignored errors:                      1      (0.02 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          60.0983s</span><br><span class="line">    total number of events:              30344</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   12.07</span><br><span class="line">         avg:                                   63.32</span><br><span class="line">         max:                                  507.75</span><br><span class="line">         95th percentile:                      132.49</span><br><span class="line">         sum:                              1921309.62</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           948.2500/19.28</span><br><span class="line">    execution time (avg/stddev):   60.0409/0.02</span><br><span class="line"></span><br><span class="line">541.70 qps: 10844.67 (r/w/o: 7594.55/2166.71/1083.41) lat (ms,95%): 121.08 err/s: 0.00 reconn/s: 0.00</span><br></pre></td></tr></table></figure><p>Vultr 4核 8GB 机器测试数据：</p><ol><li>测试前CPU使用0%，内存使用5.7%，剩余6.80GB。</li><li>测试中CPU使用291%，内存使用8.1%，剩余6.60GB。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            706692</span><br><span class="line">        write:                           201904</span><br><span class="line">        other:                           100953</span><br><span class="line">        total:                           1009549</span><br><span class="line">    transactions:                        50475  (839.97 per sec.)</span><br><span class="line">    queries:                             1009549 (16800.20 per sec.)</span><br><span class="line">    ignored errors:                      3      (0.05 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          60.0894s</span><br><span class="line">    total number of events:              50475</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   13.32</span><br><span class="line">         avg:                                   38.06</span><br><span class="line">         max:                                  252.14</span><br><span class="line">         95th percentile:                       53.85</span><br><span class="line">         sum:                              1921237.24</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           1577.3438/20.87</span><br><span class="line">    execution time (avg/stddev):   60.0387/0.03</span><br><span class="line"></span><br><span class="line">tps: 890.41 qps: 17809.03 (r/w/o: 12467.56/3560.35/1781.12) lat (ms,95%): 49.21 err/s: 0.10 reconn/s: 0.00</span><br></pre></td></tr></table></figure><p>Vultr 6核 16GB 机器测试数据：</p><ol><li>测试前CPU使用0%，内存使用2.6%，剩余14.00GB。</li><li>测试中CPU使用400%，内存使用4.0%，剩余14.00GB。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            816844</span><br><span class="line">        write:                           233381</span><br><span class="line">        other:                           116691</span><br><span class="line">        total:                           1166916</span><br><span class="line">    transactions:                        58345  (970.80 per sec.)</span><br><span class="line">    queries:                             1166916 (19416.24 per sec.)</span><br><span class="line">    ignored errors:                      1      (0.02 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          60.0980s</span><br><span class="line">    total number of events:              58345</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   10.44</span><br><span class="line">         avg:                                   32.93</span><br><span class="line">         max:                                  101.59</span><br><span class="line">         95th percentile:                       47.47</span><br><span class="line">         sum:                              1921311.68</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           1823.2812/62.38</span><br><span class="line">    execution time (avg/stddev):   60.0410/0.03</span><br><span class="line"></span><br><span class="line">tps: 1004.72 qps: 20100.10 (r/w/o: 14070.78/4019.78/2009.54) lat (ms,95%): 46.63 err/s: 0.00 reconn/s: 0.00</span><br></pre></td></tr></table></figure><p>Vultr 8核 32GB 机器测试数据：</p><ol><li>测试前CPU使用0%，内存使用1.4%，剩余30.00GB。</li><li>测试中CPU使用430%，内存使用2.0%，剩余30.00GB。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            848246</span><br><span class="line">        write:                           242354</span><br><span class="line">        other:                           121177</span><br><span class="line">        total:                           1211777</span><br><span class="line">    transactions:                        60588  (1008.20 per sec.)</span><br><span class="line">    queries:                             1211777 (20164.37 per sec.)</span><br><span class="line">    ignored errors:                      1      (0.02 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          60.0925s</span><br><span class="line">    total number of events:              60588</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   10.65</span><br><span class="line">         avg:                                   31.71</span><br><span class="line">         max:                                  103.03</span><br><span class="line">         95th percentile:                       47.47</span><br><span class="line">         sum:                              1921241.97</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           1893.3750/62.98</span><br><span class="line">    execution time (avg/stddev):   60.0388/0.03</span><br><span class="line"></span><br><span class="line">tps: 1100.03 qps: 21998.38 (r/w/o: 15399.41/4398.92/2200.06) lat (ms,95%): 44.98 err/s: 0.00 reconn/s: 0.00</span><br></pre></td></tr></table></figure><h4 id="容器测试"><a href="#容器测试" class="headerlink" title="容器测试"></a>容器测试</h4><p>测试 MySQL 安装在容器对性能的影响。结论：没有感觉有耗损或者很小。</p><p>定量参数：</p><ol><li>1 核 2GB 配置</li><li>1 毫秒延迟</li><li>32 并发线程</li><li>100 万数据量</li></ol><p>直接安装在机器上的测试结果参考上面。</p><p>MySQL Docker 测试结果：</p><ol><li>测试前CPU使用00.00%，内存使用20.60%，剩余1.00GB。</li><li>测试中CPU使用75.00%，内存使用25.10%，剩余0.95GB。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        <span class="built_in">read</span>:                            226576</span><br><span class="line">        write:                           64540</span><br><span class="line">        other:                           32292</span><br><span class="line">        total:                           323408</span><br><span class="line">    transactions:                        16108  (268.29 per sec.)</span><br><span class="line">    queries:                             323408 (5386.62 per sec.)</span><br><span class="line">    ignored errors:                      76     (1.27 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          60.0372s</span><br><span class="line">    total number of events:              16108</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   12.44</span><br><span class="line">         avg:                                  119.22</span><br><span class="line">         max:                                  652.27</span><br><span class="line">         95th percentile:                      262.64</span><br><span class="line">         sum:                              1920468.18</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           503.3750/10.23</span><br><span class="line">    execution time (avg/stddev):   60.0146/0.01</span><br><span class="line"></span><br><span class="line">tps: 269.60 qps: 5415.63 (r/w/o: 3793.42/1081.71/540.50) lat (ms,95%): 253.35 err/s: 1.30 reconn/s: 0.00</span><br></pre></td></tr></table></figure><p>在本地 Docker 上测试。</p><p>定量参数：</p><ol><li>4 核 12GB 配置</li><li>0 毫秒延迟</li><li>32 并发线程</li><li>10 万数据量</li></ol><p>MySQL Docker 测试结果：</p><ol><li>测试前CPU使用05.00%，内存使用30.00%，剩余5.70GB。</li><li>测试中CPU使用80.00%，内存使用30.00%，剩余5.70GB。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        read:                            86296</span><br><span class="line">        write:                           23973</span><br><span class="line">        other:                           12101</span><br><span class="line">        total:                           122370</span><br><span class="line">    transactions:                        5937   (98.54 per sec.)</span><br><span class="line">    queries:                             122370 (2031.14 per sec.)</span><br><span class="line">    ignored errors:                      227    (3.77 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          60.2455s</span><br><span class="line">    total number of events:              5937</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   50.91</span><br><span class="line">         avg:                                  324.11</span><br><span class="line">         max:                                 1047.75</span><br><span class="line">         95th percentile:                      493.24</span><br><span class="line">         sum:                              1924255.51</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           185.5312/4.84</span><br><span class="line">    execution time (avg/stddev):   60.1330/0.07</span><br><span class="line"></span><br><span class="line">tps: 98.93 qps: 2048.12 (r/w/o: 1445.11/401.14/201.87) lat (ms,95%): 502.20 err/s: 4.20 reconn/s: 0.00</span><br></pre></td></tr></table></figure><p>定量参数：</p><ol><li>3.7 GHz 六核Intel Core i5 32G</li><li>0 毫秒延迟</li><li>32 并发线程</li><li>10 万数据量</li></ol><p>MySQL Docker 测试结果：</p><ol><li>测试前CPU使用05.00%，内存使用15.00%，剩余27.00GB。</li><li>测试中CPU使用80.00%，内存使用15.00%，剩余27.00GB。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        read:                            138656</span><br><span class="line">        write:                           39571</span><br><span class="line">        other:                           19789</span><br><span class="line">        total:                           198016</span><br><span class="line">    transactions:                        9885   (164.32 per sec.)</span><br><span class="line">    queries:                             198016 (3291.59 per sec.)</span><br><span class="line">    ignored errors:                      19     (0.32 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          60.1572s</span><br><span class="line">    total number of events:              9885</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   34.88</span><br><span class="line">         avg:                                  194.52</span><br><span class="line">         max:                                  581.96</span><br><span class="line">         95th percentile:                      287.38</span><br><span class="line">         sum:                              1922827.27</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           308.9062/4.89</span><br><span class="line">    execution time (avg/stddev):   60.0884/0.04</span><br><span class="line"></span><br><span class="line">tps: 161.76 qps: 3240.17 (r/w/o: 2268.02/648.33/323.82) lat (ms,95%): 277.21 err/s: 0.30 reconn/s: 0.00</span><br></pre></td></tr></table></figure><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><div class="table-container"><table><thead><tr><th style="text-align:left">CPU</th><th>Mem</th><th>Ping</th><th>Binlog</th><th>Threads</th><th>Table Size</th><th>Files Size</th><th>CPU Used</th><th>Mem Used</th><th>TPS</th><th>QPS</th><th>ERR</th><th>Latency</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td>2048MB</td><td>1ms</td><td>on</td><td>32</td><td>100w</td><td>240MB</td><td>78%</td><td>100MB</td><td>259.03</td><td>5201.16</td><td>1.25</td><td>123.52</td></tr><tr><td style="text-align:left">1</td><td>2048MB</td><td>1ms</td><td>off</td><td>32</td><td>100w</td><td>240MB</td><td>78%</td><td>100MB</td><td>279.17</td><td>5590.35</td><td>0.43</td><td>114.61</td></tr><tr><td style="text-align:left">1</td><td>2048MB</td><td>1ms</td><td>off</td><td>32</td><td>1000w</td><td>2328MB</td><td>78%</td><td>140MB</td><td>240.51</td><td>4817.03</td><td>0.41</td><td>133.03</td></tr><tr><td style="text-align:left">1</td><td>2048MB</td><td>1ms</td><td>off</td><td>32</td><td>5000w</td><td>10240MB</td><td>78%</td><td>170MB</td><td>236.42</td><td>4734.64</td><td>0.38</td><td>135.34</td></tr></tbody></table></div><p>注1：Binlog 不影响读性能，影响写、修、删性能。</p><h2 id="附：MySQL-数据库压力测试报告"><a href="#附：MySQL-数据库压力测试报告" class="headerlink" title="附：MySQL 数据库压力测试报告"></a>附：MySQL 数据库压力测试报告</h2><p><a href="http://blog.itpub.net/29734436/viewspace-2140565/">http://blog.itpub.net/29734436/viewspace-2140565/</a></p><h2 id="附：MySQL压测④—压测报告"><a href="#附：MySQL压测④—压测报告" class="headerlink" title="附：MySQL压测④—压测报告"></a>附：MySQL压测④—压测报告</h2><p><a href="https://www.jianshu.com/p/f15d2a35dfd7">https://www.jianshu.com/p/f15d2a35dfd7</a></p><h2 id="附：MySQL-数据量-性能测试报告version1"><a href="#附：MySQL-数据量-性能测试报告version1" class="headerlink" title="附：MySQL 数据量-性能测试报告version1"></a>附：MySQL 数据量-性能测试报告version1</h2><p><a href="http://www.docin.com/p-2023784875.html">http://www.docin.com/p-2023784875.html</a></p><h2 id="附：MySQL-并发测试中，线程数和数据库连接池的实验"><a href="#附：MySQL-并发测试中，线程数和数据库连接池的实验" class="headerlink" title="附：MySQL 并发测试中，线程数和数据库连接池的实验"></a>附：MySQL 并发测试中，线程数和数据库连接池的实验</h2><p><a href="http://www.520mwx.com/view/28965">http://www.520mwx.com/view/28965</a></p><h2 id="附：常见问题"><a href="#附：常见问题" class="headerlink" title="附：常见问题"></a>附：常见问题</h2><p><strong>Error: Unable to find a match: sysbench</strong><br>场景：使用 yum 安装 sysbench 时报错。<br>原因：没有配置 yum 源。<br>解决：安装 EPEL 源 <code>yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm</code>。</p><p><strong>FATAL: unable to connect to MySQL server on host ‘localhost’, port 3306, aborting…</strong><br>场景：执行命令时报错。<br>原因：不能使用 localhsot。<br>解决：使用 127.0.0.1 代替。</p><p><strong>error 2059: Authentication plugin ‘caching_sha2_password’</strong><br>场景：执行命令时报错。<br>原因：MySQL8 的密码方式更改了。<br>解决：修改 MySQL8 的密码加密方式，参考章节「MySQL 安装」。</p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 性能分析</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>MySQL 数据库性能遇到瓶颈，如何快速定位问题的原因，是每个 DBA 或系统运维人员应该思考的问题。正确的借助一些性能分析工具，能够帮助 DBA 或系统运维人员进行问题快速的定位。</p><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><p>下面是 MySQL 数据库，或者说所有数据库的三个关键性能指标：</p><ol><li>QPS 每秒处理的查询数</li><li>TPS 每秒处理的事务数</li><li>IOPS 每秒磁盘进行的I/O操作次数</li></ol><h4 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a>QPS</h4><h4 id="TPS"><a href="#TPS" class="headerlink" title="TPS"></a>TPS</h4><p>Transactions Per Second，即服务器每秒处理的事务数，适用 InnoDB 存储引擎。</p><p>TPS 是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</p><p>一般的，评价系统性能均以每秒钟完成的技术交易的数量来衡量。系统整体处理能力取决于处理能力最低模块的 TPS 值。</p><p>???</p><h2 id="show-status"><a href="#show-status" class="headerlink" title="show status"></a>show status</h2><p><code>show status</code> 命令可以查看 MySQL 服务器的状态信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">- 查询当前MySQL本次启动后的运行统计时间</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'uptime'</span>;</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">| Uptime        | 5667  |</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">- 本次MySQL启动后执行的<span class="keyword">SELECT</span>语句的次数</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'com_select'</span>;</span><br><span class="line">- 本次MySQL启动后执行的<span class="keyword">INSERT</span>语句的次数</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'com_insert'</span>;</span><br><span class="line">- 本次MySQL启动后执行的<span class="keyword">UPDATE</span>语句的次数</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'com_update'</span>;</span><br><span class="line">- 本次MySQL启动后执行的<span class="keyword">DELETE</span>语句的次数</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'com_delete'</span>;</span><br><span class="line"></span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">| Com_select    | 1     |</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">- 查看MySQL服务器的线程信息</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Thread_%'</span>;</span><br><span class="line">+<span class="comment">-------------------+-------+</span></span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+<span class="comment">-------------------+-------+</span></span><br><span class="line">| Threads_cached    | 0     |</span><br><span class="line">| Threads_connected | 1     |</span><br><span class="line">| Threads_created   | 1     |</span><br><span class="line">| Threads_running   | 1     |</span><br><span class="line">+<span class="comment">-------------------+-------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">- 查看试图连接到MySQL(不管是否连接成功)的连接数</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'connections'</span>;</span><br><span class="line"></span><br><span class="line">- 查看当前打开的连接的数量。</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'threads_connected'</span>;</span><br><span class="line"></span><br><span class="line">- 查看当前打开的连接的数量。</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'threads_connected'</span>;</span><br><span class="line"></span><br><span class="line">- 查看创建用来处理连接的线程数。如果Threads_created较大，你可能要增加thread_cache_size值。</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'threads_created'</span>;</span><br><span class="line"></span><br><span class="line">- 查看激活的(非睡眠状态)线程数。</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'threads_running'</span>;</span><br><span class="line"></span><br><span class="line">- 查看立即获得的表的锁的次数。</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'table_locks_immediate'</span>;</span><br><span class="line"></span><br><span class="line">- 查看不能立即获得的表的锁的次数。如果该值较高，并且有性能问题，你应首先优化查询，然后拆分表或使用复制。</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'table_locks_waited'</span>;</span><br><span class="line"></span><br><span class="line">- 查看创建时间超过slow_launch_time秒的线程数。</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'slow_launch_threads'</span>;</span><br><span class="line"></span><br><span class="line">- 查看查询时间超过long_query_time秒的查询的个数。</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'slow_queries'</span>;</span><br></pre></td></tr></table></figure><h2 id="Query-Profiler"><a href="#Query-Profiler" class="headerlink" title="Query Profiler"></a>Query Profiler</h2><p>Query Profiler 是 MySQL 自带的一种查询诊断分析工具，通过它可以分析出一条SQL语句的性能瓶颈在什么地方。</p><p>查询类型包括：</p><ol><li>ALL 显示所有性能信息</li><li>BLOCK IO 显示块IO操作的次数</li><li>CONTEXT SWITCHES 显示上下文切换次数，不管是主动还是被动</li><li>CPU 显示用户CPU时间、系统CPU时间</li><li>IPC 显示发送和接收的消息数量</li><li>MEMORY [暂未实现]</li><li>PAGE FAULTS 显示页错误数量</li><li>SOURCE 显示源码中的函数名称与位置</li><li>SWAPS 显示SWAP的次数</li></ol><p>结果参数说明：</p><ol><li>System lock<br> 确认是由于哪个锁引起的，通常是因为MySQL或InnoDB内核级的锁引起的建议：如果耗时较大再关注即可，一般情况下都还好</li><li>Sending data<br> 从server端发送数据到客户端，也有可能是接收存储引擎层返回的数据，再发送给客户端，数据量很大时尤其经常能看见<br> 备注：Sending Data不是网络发送，是从硬盘读取，发送到网络是Writing to net<br> 建议：通过索引或加上LIMIT，减少需要扫描并且发送给客户端的数据量</li><li>Sorting result<br> 正在对结果进行排序，类似Creating sort index，不过是正常表，而不是在内存表中进行排序<br> 建议：创建适当的索引</li><li>Table lock<br> 表级锁，没什么好说的，要么是因为MyISAM引擎表级锁，要么是其他情况显式锁表</li><li>create sort index<br> 当前的SELECT中需要用到临时表在进行ORDER BY排序<br> 建议：创建适当的索引</li></ol><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 查看是否开启了Profile功能，0未开启 1开启</span><br><span class="line">&gt; select @@profiling;</span><br><span class="line"></span><br><span class="line"># 开启Profile功能</span><br><span class="line">&gt; set profiling=1;</span><br><span class="line"></span><br><span class="line"># 测试查询语句</span><br><span class="line">&gt; select * from biz_sku</span><br><span class="line"></span><br><span class="line"># 查询此语句的queryId</span><br><span class="line">&gt; show profiles;</span><br><span class="line">3510.00053725<span class="keyword">select</span> * <span class="keyword">from</span> biz_sku</span><br><span class="line"></span><br><span class="line"># 查询此queryId的性能消耗</span><br><span class="line">&gt; <span class="keyword">show</span>  profile <span class="keyword">for</span> <span class="keyword">query</span> <span class="number">351</span>;</span><br><span class="line"></span><br><span class="line"># 查询此queryId指定资源类型的性能消耗</span><br><span class="line">&gt; show  profile cpu ,swaps for query 351;</span><br><span class="line"></span><br><span class="line">Status                DurationCPU_userCPU_systemSwaps</span><br><span class="line">starting        0.0000210.0000000.0000000    </span><br><span class="line">checking permissions0.0000070.0000000.0000000</span><br><span class="line">Opening tables        0.0000150.0000000.0000000</span><br><span class="line">init                0.0000260.0000000.0000000</span><br><span class="line">System <span class="keyword">lock</span>        <span class="number">0.000007</span><span class="number">0.000000</span><span class="number">0.000000</span><span class="number">0</span></span><br><span class="line">optimizing        <span class="number">0.000003</span><span class="number">0.000000</span><span class="number">0.000000</span><span class="number">0</span></span><br><span class="line"><span class="keyword">statistics</span>        <span class="number">0.000009</span><span class="number">0.000000</span><span class="number">0.000000</span><span class="number">0</span></span><br><span class="line">preparing        <span class="number">0.000008</span><span class="number">0.000000</span><span class="number">0.000000</span><span class="number">0</span></span><br><span class="line">executing        <span class="number">0.000002</span><span class="number">0.000000</span><span class="number">0.000000</span><span class="number">0</span></span><br><span class="line">Sending <span class="keyword">data</span>        <span class="number">0.000481</span><span class="number">0.000000</span><span class="number">0.000000</span><span class="number">0</span></span><br><span class="line"><span class="keyword">end</span>                <span class="number">0.000005</span><span class="number">0.000000</span><span class="number">0.000000</span><span class="number">0</span></span><br><span class="line"><span class="keyword">query</span> <span class="keyword">end</span>        <span class="number">0.000006</span><span class="number">0.000000</span><span class="number">0.000000</span><span class="number">0</span></span><br><span class="line">closing <span class="keyword">tables</span>        <span class="number">0.000012</span><span class="number">0.000000</span><span class="number">0.000000</span><span class="number">0</span></span><br><span class="line">freeing items        <span class="number">0.000011</span><span class="number">0.000000</span><span class="number">0.000000</span><span class="number">0</span></span><br><span class="line">cleaning up        <span class="number">0.000003</span><span class="number">0.000000</span><span class="number">0.000000</span><span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h2><p>MySQL 提供了一个 explain 命令用来对 select 语句进行分析，并输出执行的详细信息，以供开发人员针对性优化。</p><p>使用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from servers;</span><br><span class="line">+<span class="comment">----+-------------+---------+------+---------------+------+---------+------+------+-------+</span></span><br><span class="line">| id | select_type | table   | type | possible_keys | key  | key_len | ref  | rows | Extra |</span><br><span class="line">+<span class="comment">----+-------------+---------+------+---------------+------+---------+------+------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | servers | ALL  | NULL          | NULL | NULL    | NULL |    1 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+---------+------+---------------+------+---------+------+------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><p>各列的含义如下：</p><ol><li><strong>id</strong><br> SQL执行的顺序的标识，SQL从大到小的执行。如果id相同，则从上到下。</li><li><strong>select_type</strong><br> 表示查询中每个select子句的类型。</li><li><strong>table</strong><br> 显示这一行的数据是关于哪张表的，有时不是真实的表名字，看到的是derivedx（x是个数字，我的理解是第几步执行的结果）</li><li><strong>type</strong><br> 表示MySQL在表中找到所需行的方式，又称“访问类型”。</li><li><strong>possible_keys</strong><br> 指出 MySQL 能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用。</li><li><strong>Key</strong><br> 显示 MySQL 实际决定使用的键（索引）</li><li><strong>key_len</strong><br> 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）</li><li><strong>ref</strong><br> 表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</li><li><strong>rows</strong><br> 表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</li><li><strong>extra</strong><br> 该列包含MySQL解决查询的详细信息</li></ol><p><strong>select_type</strong> 可选值:</p><ol><li>SIMPLE<br> 简单SELECT,不使用UNION或子查询等</li><li>PRIMARY<br> 查询中若包含任何复杂的子部分,最外层的select被标记为PRIMARY</li><li>UNION<br> UNION中的第二个或后面的SELECT语句</li><li>DEPENDENT<br> UNION UNION中的第二个或后面的SELECT语句，取决于外面的查询</li><li>UNION<br> RESULT (UNION的结果</li><li>SUBQUERY<br> 子查询中的第一个SELECT</li><li>DEPENDENT<br> SUBQUERY 子查询中的第一个SELECT，取决于外面的查询</li><li>DERIVED<br> 派生表的SELECT, FROM子句的子查询</li><li>UNCACHEABLE SUBQUERY<br> 一个子查询的结果不能被缓存，必须重新评估外链接的第一行</li></ol><p><strong>type</strong> 可选值：</p><ol><li>all<br> Full Table Scan， MySQL将遍历全表以找到匹配的行</li><li>index<br> Full Index Scan，index与ALL区别为index类型只遍历索引树</li><li>range<br> 只检索给定范围的行，使用一个索引来选择行</li><li>ref<br> 表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</li><li>eq_ref<br> 类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件</li><li>const、system<br> 当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量,system是const类型的特例，当查询的表只有一行的情况下，使用system</li><li>null<br> MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。</li></ol><p><strong>extra</strong> 可选值：</p><ol><li>Using where<br> 列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示mysql服务器将在存储引擎检索行后再进行过滤。</li><li>Using temporary<br> 表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询。</li><li>Using filesort<br> MySQL中无法利用索引完成的排序操作称为“文件排序”。</li><li>Using join buffer<br> 改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。</li><li>Impossible where<br> 这个值强调了where语句会导致没有符合条件的行。</li><li>Select tables optimized away<br> 这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行。</li></ol><p>详细介绍：<a href="https://segmentfault.com/a/1190000008131735">https://segmentfault.com/a/1190000008131735</a></p><h2 id="慢日志查询"><a href="#慢日志查询" class="headerlink" title="慢日志查询"></a>慢日志查询</h2><p>慢查询日志用来记录在 MySQL 中执行时间超过指定时间的查询语句。通过慢查询日志，可以查找出哪些查询语句的执行效率低，以便进行优化。</p><p>通俗的说，MySQL 慢查询日志是排查问题的 SQL 语句，以及检查当前 MySQL 性能的一个重要功能。如果不是调优需要，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。</p><h4 id="查询慢日志配置"><a href="#查询慢日志配置" class="headerlink" title="查询慢日志配置"></a>查询慢日志配置</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看是否开启慢查询日志功能</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">LIKE</span> <span class="string">'slow_query%'</span>;</span><br><span class="line">+<span class="comment">---------------------+---------------------------------------------------------------------+</span></span><br><span class="line">| Variable_name       | Value                                                               |</span><br><span class="line">+<span class="comment">---------------------+---------------------------------------------------------------------+</span></span><br><span class="line">| slow_query_log      | OFF                                                                 |</span><br><span class="line">| slow_query_log_file | C:\ProgramData\MySQL\MySQL Server 5.7\Data\LAPTOP-UHQ6V8KP-slow.log |</span><br><span class="line">+<span class="comment">---------------------+---------------------------------------------------------------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询超过多少秒才记录</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">LIKE</span> <span class="string">'long_query_time'</span>;</span><br><span class="line">+<span class="comment">-----------------+-----------+</span></span><br><span class="line">| Variable_name   | Value     |</span><br><span class="line">+<span class="comment">-----------------+-----------+</span></span><br><span class="line">| long_query_time | 10.000000 |</span><br><span class="line">+<span class="comment">-----------------+-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h4 id="开启慢日志查询"><a href="#开启慢日志查询" class="headerlink" title="开启慢日志查询"></a>开启慢日志查询</h4><p>使用命令开启慢日志查询，只对当前数据库生效，重启MySQL失效。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启慢日志查询</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log = <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 慢查询界定时间（秒）</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> long_query_time = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>如果需要永久生效，修改 MySQL 配置文件后重启。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line"># 开启慢日志查询</span><br><span class="line">slow_query_log = 1</span><br><span class="line"></span><br><span class="line"># 慢日志文件存放位置</span><br><span class="line">log-slow-queries=dir\filename</span><br><span class="line"></span><br><span class="line"># 慢查询界定时间（秒）</span><br><span class="line">long_query_time=n</span><br></pre></td></tr></table></figure><h4 id="关闭慢日志查询"><a href="#关闭慢日志查询" class="headerlink" title="关闭慢日志查询"></a>关闭慢日志查询</h4><p>使用命令关闭慢日志查询，只对当前数据库生效，重启MySQL失效。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 关闭慢日志查询</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>如果需要永久生效，修改 MySQL 配置文件后重启。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line"># 关闭慢日志查询</span><br><span class="line">slow_query_log = 0</span><br></pre></td></tr></table></figure></p><h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><p>执行一条 SQL 语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> <span class="keyword">test</span>;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student;</span><br><span class="line">+<span class="comment">----+--------+</span></span><br><span class="line">| id | name   |</span><br><span class="line">+<span class="comment">----+--------+</span></span><br><span class="line">|  1 | Java   |</span><br><span class="line">|  2 | MySQL  |</span><br><span class="line">|  3 | Python |</span><br><span class="line">+<span class="comment">----+--------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.08</span> sec)</span><br></pre></td></tr></table></figure><p>打开慢日志文件，可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Time: 2020-06-01T01:59:18.368780Z</span><br><span class="line"># User@Host: root[root] @ localhost [::1]  Id:     3</span><br><span class="line"># Query_time: 0.006281  Lock_time: 0.000755 Rows_sent: 2  Rows_examined: 1034</span><br><span class="line">use test;</span><br><span class="line">SET timestamp=1590976758;</span><br><span class="line">SHOW VARIABLES LIKE &apos;slow_query%&apos;;</span><br></pre></td></tr></table></figure><p>清空慢日志记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -uroot -p flush-logs</span><br></pre></td></tr></table></figure><p>执行该命令后，命令行会提示输入密码。输入正确密码后，将执行删除操作。新的慢查询日志会直接覆盖旧的查询日志，不需要再手动删除。</p><p>数据库管理员也可以手工删除慢查询日志，删除之后需要重新启动 MySQL 服务。</p><blockquote><p>注意：通用查询日志和慢查询日志都是使用这个命令，使用时一定要注意，一旦执行这个命令，通用查询日志和慢查询日志都只存在新的日志文件中。如果需要备份旧的慢查询日志文件，必须先将旧的日志改名，然后重启 MySQL 服务或执行 <code>mysqladmin</code> 命令。</p></blockquote><h2 id="explain-优化案例"><a href="#explain-优化案例" class="headerlink" title="explain 优化案例"></a>explain 优化案例</h2><h4 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`a`</span></span><br><span class="line">(</span><br><span class="line">    <span class="string">`id`</span>          <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> NULLAUTO_INCREMENT,</span><br><span class="line">    <span class="string">`seller_id`</span>   <span class="built_in">bigint</span>(<span class="number">20</span>)                                       <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`seller_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`gmt_create`</span>  <span class="built_in">varchar</span>(<span class="number">30</span>)                                      <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`b`</span></span><br><span class="line">(</span><br><span class="line">    <span class="string">`id`</span>          <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> NULLAUTO_INCREMENT,</span><br><span class="line">    <span class="string">`seller_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`user_id`</span>     <span class="built_in">varchar</span>(<span class="number">50</span>)  <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`user_name`</span>   <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`sales`</span>       <span class="built_in">bigint</span>(<span class="number">20</span>)   <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`gmt_create`</span>  <span class="built_in">varchar</span>(<span class="number">30</span>)  <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`c`</span></span><br><span class="line">(</span><br><span class="line">    <span class="string">`id`</span>         <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> NULLAUTO_INCREMENT,</span><br><span class="line">    <span class="string">`user_id`</span>    <span class="built_in">varchar</span>(<span class="number">50</span>)  <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`order_id`</span>   <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`state`</span>      <span class="built_in">bigint</span>(<span class="number">20</span>)   <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`gmt_create`</span> <span class="built_in">varchar</span>(<span class="number">30</span>)  <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="待优化-SQL"><a href="#待优化-SQL" class="headerlink" title="待优化 SQL"></a>待优化 SQL</h4><p>三张表关联，查询当前用户在当前时间前后10个小时的订单情况，并根据订单创建时间升序排列，具体SQL如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.seller_id,</span><br><span class="line">       a.seller_name,</span><br><span class="line">       b.user_name,</span><br><span class="line">       c.state</span><br><span class="line"><span class="keyword">from</span> a,</span><br><span class="line">     b,</span><br><span class="line">     c</span><br><span class="line"><span class="keyword">where</span> a.seller_name = b.seller_name</span><br><span class="line">  <span class="keyword">and</span> b.user_id = c.user_id</span><br><span class="line">  <span class="keyword">and</span> c.user_id = <span class="number">17</span></span><br><span class="line">  <span class="keyword">and</span> a.gmt_create</span><br><span class="line">    <span class="keyword">BETWEEN</span> <span class="keyword">DATE_ADD</span>(<span class="keyword">NOW</span>(), <span class="built_in">INTERVAL</span> – <span class="number">600</span> <span class="keyword">MINUTE</span>)</span><br><span class="line">    <span class="keyword">AND</span> <span class="keyword">DATE_ADD</span>(<span class="keyword">NOW</span>(), <span class="built_in">INTERVAL</span> <span class="number">600</span> <span class="keyword">MINUTE</span>)</span><br></pre></td></tr></table></figure><h4 id="数据量"><a href="#数据量" class="headerlink" title="数据量"></a>数据量</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9FbnpBd3ZwVFFKNzY5TTZaaWNvbjRWVGdpY2FMdTNyN0s2R2lhY21zTjgySE1JZFh5aWJWWjFOZmhmeUxJOGlhWUl4SU54UFdxa1Nsalh5UFlxSHJOMVU2MWljUS82NDA_d3hfZm10PXBuZw?x-oss-process=image/format,png" alt=""></p><h4 id="原执行时间"><a href="#原执行时间" class="headerlink" title="原执行时间"></a>原执行时间</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9FbnpBd3ZwVFFKNzY5TTZaaWNvbjRWVGdpY2FMdTNyN0s2M0pydlYyMlNWbENuRU1HZm1jSXBxaWNOWGliV2I4elBVbjdLMUVURnIzNWNXdmliQWYzQUlDRjV3LzY0MD93eF9mbXQ9cG5n?x-oss-process=image/format,png" alt=""></p><h4 id="原实行计划"><a href="#原实行计划" class="headerlink" title="原实行计划"></a>原实行计划</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9FbnpBd3ZwVFFKNzY5TTZaaWNvbjRWVGdpY2FMdTNyN0s2YnB2ZVlBUGxqaGlhWVpIaWNWeTh1cW1ycWc1T1l1V0FGM2FURDR0Q3hZaWFUQkVpYVpoUGRKcFIxQS82NDA_d3hfZm10PXBuZw?x-oss-process=image/format,png" alt=""></p><h4 id="初步优化思路"><a href="#初步优化思路" class="headerlink" title="初步优化思路"></a>初步优化思路</h4><ol><li>SQL 中 <code>where</code> 条件字段类型要跟表结构一致，表中 <code>user_id</code> 为 <code>varchar(50)</code> 类型，实际 SQL 用的 <code>int</code> 类型，存在隐式转换，也未添加索引。将 b 和 c 表 <code>user_id</code> 字段改成 <code>int</code> 类型。</li><li>因存在 <code>b</code> 表和 <code>c</code> 表关联，将 <code>b</code> 和 <code>c</code> 表 <code>user_id</code> 创建索引</li><li>因存在 <code>a</code> 表和 <code>b</code> 表关联，将 <code>a</code> 和 <code>b</code> 表 <code>seller_name</code> 字段创建索引</li><li>利用复合索引消除临时表和排序</li></ol><h4 id="初步优化SQL"><a href="#初步优化SQL" class="headerlink" title="初步优化SQL"></a>初步优化SQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> b <span class="keyword">modify</span> <span class="string">`user_id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> c <span class="keyword">modify</span> <span class="string">`user_id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> c <span class="keyword">add</span> <span class="keyword">index</span> <span class="string">`idx_user_id`</span>(<span class="string">`user_id`</span>);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> b <span class="keyword">add</span> <span class="keyword">index</span> <span class="string">`idx_user_id_sell_name`</span>(<span class="string">`user_id`</span>,<span class="string">`seller_name`</span>);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> a <span class="keyword">add</span> <span class="keyword">index</span> <span class="string">`idx_sellname_gmt_sellid`</span>(<span class="string">`gmt_create`</span>,<span class="string">`seller_name`</span>,<span class="string">`seller_id`</span>);</span><br></pre></td></tr></table></figure><h4 id="优化后执行时间"><a href="#优化后执行时间" class="headerlink" title="优化后执行时间"></a>优化后执行时间</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9FbnpBd3ZwVFFKNzY5TTZaaWNvbjRWVGdpY2FMdTNyN0s2empYMm04ZG4yUDZvbXNTZkwxSFg2UFZKVlVjQUlsR1ZzSTB5cWw1ZWJNdTZIaGROV292aWJSQS82NDA_d3hfZm10PXBuZw?x-oss-process=image/format,png" alt=""></p><h4 id="优化后执行计划"><a href="#优化后执行计划" class="headerlink" title="优化后执行计划"></a>优化后执行计划</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9FbnpBd3ZwVFFKNzY5TTZaaWNvbjRWVGdpY2FMdTNyN0s2dHRsV3U3cENLQlBmZWtPdXdzbnZPOEZpY3gxRmRFbFRSRU9NWlVzUDY2MmV6eWhudXRiNHltZy82NDA_d3hfZm10PXBuZw?x-oss-process=image/format,png" alt=""></p><h4 id="查看-warnings-信息"><a href="#查看-warnings-信息" class="headerlink" title="查看 warnings 信息"></a>查看 warnings 信息</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9FbnpBd3ZwVFFKNzY5TTZaaWNvbjRWVGdpY2FMdTNyN0s2OUk5V29JM1RKRkdrSzJ5cG1YWDdYc2FpY2NzVjhqVDdCUjU5d0JyeTV3a0htRzJ2ZmhMU2Nrdy82NDA_d3hfZm10PXBuZw?x-oss-process=image/format,png" alt=""></p><h4 id="继续优化-gmt-create"><a href="#继续优化-gmt-create" class="headerlink" title="继续优化 gmt_create"></a>继续优化 gmt_create</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> a <span class="keyword">modify</span> <span class="string">"gmt_create"</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h4 id="查看执行时间"><a href="#查看执行时间" class="headerlink" title="查看执行时间"></a>查看执行时间</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9FbnpBd3ZwVFFKNzY5TTZaaWNvbjRWVGdpY2FMdTNyN0s2UUFNcHh4TzI5R0huOEwxbmhYbmJTc2JBOFRHa2ljY1dpYVBsS3ptNWhLb1k3Q1RpYVRWU1o3U0ZnLzY0MD93eF9mbXQ9cG5n?x-oss-process=image/format,png" alt=""></p><h4 id="查看执行计划"><a href="#查看执行计划" class="headerlink" title="查看执行计划"></a>查看执行计划</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9FbnpBd3ZwVFFKNzY5TTZaaWNvbjRWVGdpY2FMdTNyN0s2enNxUFlXQWlhc0RySThYZXMzT2xGVmV1eXlpY0hmZ0ZhYXVPNlNpYTBCRVhqekhCTjB6RGQzNmliQS82NDA_d3hfZm10PXBuZw?x-oss-process=image/format,png" alt=""></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>查看执行计划 <code>explain</code></li><li>如果有告警信息，查看告警信息 <code>show warnings</code></li><li>查看SQL涉及的表结构和索引信息</li><li>根据执行计划，思考可能的优化点</li><li>按照可能的优化点执行表结构变更、增加索引、SQL 改写等操作</li><li>查看优化后的执行时间和执行计划</li><li>如果优化效果不明显，重复第四步操作</li></ol><h2 id="SHOW-PROCESSLIST"><a href="#SHOW-PROCESSLIST" class="headerlink" title="SHOW PROCESSLIST"></a>SHOW PROCESSLIST</h2><p>显示用户正在运行的线程，需要注意的是，除了 root 用户能看到所有正在运行的线程外，其他用户都只能看到自己正在运行的线程，看不到其它用户正在运行的线程。除非单独个这个用户赋予了 PROCESS 权限。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCESSLIST</span>;</span><br><span class="line"></span><br><span class="line">Id       User        Host                    db                Command  Time  State       Info</span><br><span class="line">30       aurora      100.104.60.243:36747                      Sleep    1</span><br><span class="line">75       aliyun_root 127.0.0.1:40840                           Sleep    1</span><br><span class="line">1270     shelflabel  8.129.214.203:47314     shelflabel_test   Sleep    50</span><br><span class="line">1284     shelflabel  61.141.65.230:53797     shelflabel_test   Query    0     starting    <span class="keyword">SHOW</span> <span class="keyword">PROCESSLIST</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 杀掉 Id = 1284 这个连接</span></span><br><span class="line"><span class="keyword">KILL</span> <span class="number">1284</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ol><li><code>Id</code>：就是这个线程的唯一标识，当我们发现这个线程有问题的时候，可以通过 <code>kill</code> 命令，加上这个 <code>Id</code> 值将这个线程杀掉。</li><li><code>User</code>：就是指启动这个线程的用户。</li><li><code>Host</code>：记录了发送请求的客户端的 IP 和 端口号。通过这些信息在排查问题的时候，我们可以定位到是哪个客户端的哪个进程发送的请求。</li><li><code>DB</code>：当前执行的命令是在哪一个数据库上。如果没有指定数据库，则该值为 <code>NULL</code> 。</li><li><code>Command</code>：是指此刻该线程正在执行的命令。</li><li><code>Time</code>：表示该线程处于当前状态的时间。</li><li><code>State</code>：线程的状态，和 <code>Command</code> 对应。</li><li><code>Info</code>：一般记录的是线程执行的语句。</li></ol><p><code>Command</code> 的值：</p><ol><li>Binlog Dump：主节点正在将二进制日志，同步到从节点。</li><li>Change User：正在执行一个 change-user 的操作。</li><li>Close Stmt：正在关闭一个Prepared Statement 对象</li><li>Connect: 一个从节点连上了主节点</li><li>Connect Out: 一个从节点正在连主节点</li><li>Create DB: 正在执行一个create-database 的操作</li><li>Daemon: 服务器内部线程，而不是来自客户端的链接</li><li>Debug: 线程正在生成调试信息</li><li>Delayed Insert: 该线程是一个延迟插入的处理程序</li><li>Drop DB: 正在执行一个 drop-database 的操作</li><li>Execute: 正在执行一个 Prepared Statement</li><li>Fetch: 正在从Prepared Statement 中获取执行结果</li><li>Field List: 正在获取表的列信息</li><li>Init DB: 该线程正在选取一个默认的数据库</li><li>Kill : 正在执行 kill 语句，杀死指定线程</li><li>Long Data: 正在从Prepared Statement 中检索 long data</li><li>Ping: 正在处理 server-ping 的请求</li><li>Prepare: 该线程正在准备一个 Prepared Statement</li><li>ProcessList: 该线程正在生成服务器线程相关信息</li><li>Query: 该线程正在执行一个语句</li><li>Quit: 该线程正在退出</li><li>Refresh：该线程正在刷表，日志或缓存；或者在重置状态变量，或者在复制服务器信息</li><li>Register Slave： 正在注册从节点</li><li>Reset Stmt: 正在重置 prepared statement</li><li>Set Option: 正在设置或重置客户端的 statement-execution 选项</li><li>Shutdown: 正在关闭服务器</li><li>Sleep: 正在等待客户端向它发送执行语句</li><li>Statistics: 该线程正在生成 server-status 信息</li><li>Table Dump: 正在发送表的内容到从服务器</li><li>Time: Unused</li></ol><h2 id="索引的性能对比"><a href="#索引的性能对比" class="headerlink" title="索引的性能对比"></a>索引的性能对比</h2><div class="table-container"><table><thead><tr><th style="text-align:left">数据（单进程写）</th><th>有索引 MyISAM</th><th>无索引 MyISAM</th><th>有索引 InnoDB</th><th>无索引 InnoDB</th></tr></thead><tbody><tr><td style="text-align:left">1 万</td><td>6.39s</td><td>3.90s</td><td>4.99s</td><td>4.89s</td></tr><tr><td style="text-align:left">5 万</td><td>26.89s</td><td>22.73s</td><td>29.80s</td><td>22.33s</td></tr><tr><td style="text-align:left">10 万</td><td>49.55s</td><td>34.96s</td><td>52.40s</td><td>33.21s</td></tr><tr><td style="text-align:left">50 万</td><td>189.20s</td><td>139.93s</td><td>260.78s</td><td>200.74s</td></tr></tbody></table></div><h2 id="存储引擎的性能对比"><a href="#存储引擎的性能对比" class="headerlink" title="存储引擎的性能对比"></a>存储引擎的性能对比</h2><h4 id="单线程写"><a href="#单线程写" class="headerlink" title="单线程写"></a>单线程写</h4><ol><li>测试单个线程写入指定数量的数据所消耗的时间。</li><li>数据均无索引。</li><li>MyISAM 比 InnoDB 快 57%。</li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">数据量</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td style="text-align:left">1 万</td><td>6.39s</td><td>4.99s</td></tr><tr><td style="text-align:left">5 万</td><td>26.89s</td><td>29.80s</td></tr><tr><td style="text-align:left">10 万</td><td>49.55s</td><td>53.40s</td></tr><tr><td style="text-align:left">50 万</td><td>189.20s</td><td>260.78s</td></tr></tbody></table></div><h4 id="多线程写"><a href="#多线程写" class="headerlink" title="多线程写"></a>多线程写</h4><ol><li>以每个线程写 1 万条数据为例。</li><li>时间为每个线程完成的时间。</li><li>MyISAM 比 InnoDB 慢 170% 左右。</li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">进程数</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td style="text-align:left">20</td><td>90.00s</td><td>29.66s</td></tr><tr><td style="text-align:left">50</td><td>255.89s</td><td>74.52</td></tr><tr><td style="text-align:left">100</td><td>545.38s</td><td>201.94s</td></tr></tbody></table></div><h4 id="单进程读"><a href="#单进程读" class="headerlink" title="单进程读"></a>单进程读</h4><ol><li>MyISAM 比 InnoDB 快 7% 左右。</li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">数据量</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td style="text-align:left">1 万</td><td>67.14</td><td>77.15s</td></tr><tr><td style="text-align:left">5 万</td><td>110.58s</td><td>104.21s</td></tr><tr><td style="text-align:left">10 万</td><td>136.02s</td><td>146.26s</td></tr></tbody></table></div><h4 id="多进程读"><a href="#多进程读" class="headerlink" title="多进程读"></a>多进程读</h4><ol><li>以每个线程读 5 千条数据为例。</li><li>MyISAM 比 InnoDB 慢 10% 左右。</li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">进程数</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td style="text-align:left">20</td><td>140.89s</td><td>140.37s</td></tr><tr><td style="text-align:left">50</td><td>366.32s</td><td>308.76s</td></tr><tr><td style="text-align:left">100</td><td>766.37s</td><td>615.60s</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 常用SQL</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E5%B8%B8%E7%94%A8SQL/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E5%B8%B8%E7%94%A8SQL/</url>
      
        <content type="html"><![CDATA[<p>mysql查询今天、昨天、上周<br>今天<br>select <em> from 表名 where to_days(时间字段名) = to_days(now());<br>昨天<br>SELECT </em> FROM 表名 WHERE TO_DAYS( NOW( ) ) - TO_DAYS( 时间字段名) &lt;= 1<br>7天<br>SELECT <em> FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;= date(时间字段名)<br>近30天<br>SELECT </em> FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(时间字段名)<br>本月<br>SELECT <em> FROM 表名 WHERE DATE_FORMAT( 时间字段名, ‘%Y%m’ ) = DATE_FORMAT( CURDATE( ) , ‘%Y%m’ )<br>上一月<br>SELECT </em> FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , ‘%Y%m’ ) , date_format( 时间字段名, ‘%Y%m’ ) ) =1</p><h1 id="查询本季度数据"><a href="#查询本季度数据" class="headerlink" title="查询本季度数据"></a>查询本季度数据</h1><p>select * from <code>ht_invoice_information</code> where QUARTER(create_date)=QUARTER(now());</p><h1 id="查询上季度数据"><a href="#查询上季度数据" class="headerlink" title="查询上季度数据"></a>查询上季度数据</h1><p>select * from <code>ht_invoice_information</code> where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));</p><h1 id="查询本年数据"><a href="#查询本年数据" class="headerlink" title="查询本年数据"></a>查询本年数据</h1><p>select * from <code>ht_invoice_information</code> where YEAR(create_date)=YEAR(NOW());</p><h1 id="查询上年数据"><a href="#查询上年数据" class="headerlink" title="查询上年数据"></a>查询上年数据</h1><p>select <em> from <code>ht_invoice_information</code> where year(create_date)=year(date_sub(now(),interval 1 year));<br>查询当前这周的数据<br>SELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,’%Y-%m-%d’)) = YEARWEEK(now());<br>查询上周的数据<br>SELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,’%Y-%m-%d’)) = YEARWEEK(now())-1;<br>查询当前月份的数据<br>select name,submittime from enterprise   where date_format(submittime,’%Y-%m’)=date_format(now(),’%Y-%m’)<br>查询距离当前现在6个月的数据<br>select name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();<br>查询上个月的数据<br>select name,submittime from enterprise   where date_format(submittime,’%Y-%m’)=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),’%Y-%m’)<br>select </em> from <code>user</code> where DATE_FORMAT(pudate, ‘ %Y%m ‘ ) = DATE_FORMAT(CURDATE(), ‘ %Y%m ‘ ) ;<br>select <em> from user where WEEKOFYEAR(FROM_UNIXTIME(pudate,’%y-%m-%d’)) = WEEKOFYEAR(now())<br>select </em><br>from user<br>where MONTH (FROM_UNIXTIME(pudate, ‘ %y-%m-%d ‘ )) = MONTH (now())<br>select <em><br>from [ user ]<br>where YEAR (FROM_UNIXTIME(pudate, ‘ %y-%m-%d ‘ )) = YEAR (now())<br>and MONTH (FROM_UNIXTIME(pudate, ‘ %y-%m-%d ‘ )) = MONTH (now())<br>select </em><br>from [ user ]<br>where pudate between 上月最后一天<br>and 下月第一天<br>where date(regdate)   =   curdate();<br>select   *   from   test   where year(regdate)=year(now())   and month(regdate)=month(now())   and day(regdate)=day(now())<br>SELECT date( c_instime ) ,curdate( )<br>FROM <code>t_score</code><br>WHERE 1<br>LIMIT 0 , 30</p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 性能优化</title>
      <link href="/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2020/07/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%89%8B%E5%86%8C/MySQL%20%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="优化的目标"><a href="#优化的目标" class="headerlink" title="优化的目标"></a>优化的目标</h2><ol><li>QPS</li><li>TPS</li><li>吞吐量</li><li>响应时间</li><li>减少 IO 次数<br> IO 永远是数据库最容易瓶颈的地方，大部分数据库操作中超过90%的时间都是 IO 操作所占用的，减少 IO 次数是SQL 优化中需要第一优先考虑，当然，也是收效最明显的优化手段。</li><li>降低 CPU 计算<br> 除了 IO 瓶颈之外，SQL优化中需要考虑的就是 CPU 运算量的优化了。order by, group by,distinct … 都是消耗 CPU 的大户（这些操作基本上都是 CPU 处理内存中的数据比较运算）。当我们的 IO 优化做到一定阶段之后，降低 CPU 计算也就成为了我们 SQL 优化的重要目标</li></ol><h2 id="优化的原则"><a href="#优化的原则" class="headerlink" title="优化的原则"></a>优化的原则</h2><p>数据库优化可以分成 4 个方面来讲：</p><ol><li>SQL 语句和索引的优化</li><li>数据表的优化</li><li>存储引擎的优化</li><li>系统配置的优化</li><li>硬件和架构的优化</li></ol><p>其中，数据结构、SQL、索引是成本最低，且效果最好的优化手段。而硬件的优化则成本比较高。</p><p><img src="https://p1htmlkernalweb.mybluemix.net/image/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg0OTAxNzMvYXJ0aWNsZS9kZXRhaWxzLzEwNDk5NzUwMQ==_aHR0cHM6Ly9pbWctYmxvZy5jc2RuaW1nLmNuLzIwMjAwMzIwMjAwNDM2NjY3LnBuZz94LW9zcy1wcm9jZXNzPWltYWdlL3dhdGVybWFyayx0eXBlX1ptRnVaM3BvWlc1bmFHVnBkR2ssc2hhZG93XzEwLHRleHRfYUhSMGNITTZMeTlpYkc5bkxtTnpaRzR1Ym1WMEwzRnhYek00TkRrd01UY3osc2l6ZV8xNixjb2xvcl9GRkZGRkYsdF83MA==" alt=""></p><p>漏斗法则优化法可以归纳为5个层次：</p><ol><li>减少数据访问（减少磁盘访问）</li><li>返回更少数据（减少网络传输或磁盘访问）</li><li>减少交互次数（减少网络传输）</li><li>减少服务器 CPU 开销（减少 CPU 及内存开销）</li><li>利用更多资源（增加资源）</li></ol><p>由于每一层优化法则都是解决其对应硬件的性能问题，所以带来的性能提升比例也不一样。传统数据库系统设计是也是尽可能对低速设备提供优化方法，因此针对低速设备问题的可优化手段也更多，优化成本也更低。</p><p>我们任何一个SQL的性能优化都应该按这个规则由上到下来诊断问题并提出解决方案，而不应该首先想到的是增加资源解决问题。</p><p>以下是每个优化法则层级对应优化效果及成本经验参考：</p><div class="table-container"><table><thead><tr><th style="text-align:left">优化法则</th><th>性能提升效果</th><th>优化成本</th></tr></thead><tbody><tr><td style="text-align:left">减少数据访问</td><td>1~1000</td><td>低</td></tr><tr><td style="text-align:left">返回更少数据</td><td>1~100</td><td>低</td></tr><tr><td style="text-align:left">减少交互次数</td><td>1~20</td><td>低</td></tr><tr><td style="text-align:left">减少服务器 CPU 开销</td><td>1~5</td><td>低</td></tr><tr><td style="text-align:left">利用更多资源</td><td>@~10</td><td>高</td></tr></tbody></table></div><p><img src="http://img.shangdixinxi.com/up/info/202006/20200607132814970915.png" alt=""></p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/76f2a3150468463ea197396326949fb0.png" alt=""></p><h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><h4 id="优化-SQL-的一般步骤"><a href="#优化-SQL-的一般步骤" class="headerlink" title="优化 SQL 的一般步骤"></a>优化 SQL 的一般步骤</h4><ol><li><p>定位慢 SQL<br> 通过 <code>show status</code> 命令了解各种SQL的执行效率。</p></li><li><p>定位 SQL 瓶颈<br> 通过 <code>explain</code> 或 <code>desc</code> 分析低效SQL的执行计划。</p><p> 通过 <code>show profile</code> 分析 SQL。</p><p> 通过 <code>trace</code> 分析优化器如何选择执行计划。</p></li><li><p>优化 SQL<br> 运用 SQL 优化原则来优化 SQL。</p></li><li><p>优先优化高并发的 SQL，而不是执行频率低的某些大 SQL<br> 对于破坏性来说，高并发的 SQL 总是会比低频率的来得大，因为高并发的 SQL 一旦出现问题，甚至不会给我们任何喘息的机会就会将系统压跨。而对于一些虽然需要消耗大量 IO 而且响应很慢的 SQL，由于频率低，即使遇到，最多就是让整个系统响应慢一点，但至少可能撑一会儿，让我们有缓冲的机会。</p><p> 尽可能对每一条运行在数据库中的 SQL 进行 <code>explain</code>。</p></li></ol><h4 id="SQL-优化原则"><a href="#SQL-优化原则" class="headerlink" title="SQL 优化原则"></a>SQL 优化原则</h4><p>锁优化</p><p>索引优化</p><p>select 优化</p><p>join 优化</p><p>where 优化</p><ol><li><p>避免查询全部字段<br> 只查必要的字段。如果需要全部字段，避免使用 <code>select *</code>，把所有字段名列出来。</p></li><li><p>避免全盘扫描<br> 在 <code>where</code>，<code>group by</code>，<code>order by</code>，<code>on</code> 等从句涉及到的列上建立索引</p><p> 避免在 <code>where</code> 子句中使用 <code>!=</code> 或 <code>&lt;&gt;</code> 操作符，否则将引擎放弃使用索引而进行全表扫描。</p><p> 避免在 <code>where</code> 子句中对字段进行 <code>null</code> 值判断，否则将导致引擎放弃使用索引而进行全表扫描。如有必要可以用 0 代替 <code>null</code>。</p><p> 避免在 <code>where</code> 子句中使用 <code>or</code> 来连接条件。如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描。</p><p> 避免使用前导模糊查询，否则将导致全表扫描。例如 <code>name like &#39;%c%&#39;</code> 改成 <code>name like &#39;%c%&#39;</code>。</p><p> 慎用 <code>not in</code>，否则会导致全表扫描。对于连续的数值，能用 <code>between</code> 就不要用 <code>in</code> 了，尽量使用 <code>exists</code> 代替 <code>in</code>。</p><p> 避免在 <code>where</code> 子句中对字段进行表达式与函数或其他表达式运算操作，这将导致引擎放弃使用索引而进行全表扫描。例如 <code>where num / 2 = 100</code> 改成 <code>where num = 100 * 2</code>。</p><p> 使用 <code>limit</code> 对查询结果的记录进行限定，单条查询最后添加 <code>limit 1</code>，停止全表扫描。</p></li><li><p>锁优化<br> MyISAM：MyISAM 使用表锁，可以考虑转成</p></li><li><p>优化子查询<br> 使用子查询需要在内存中创建临时表来完成这个逻辑上的需要两个步骤的查询工作。</p><p> 用 <code>join</code> 代替子查询。虽然 <code>join</code> 性能并不佳，但是和 MySQL 的子查询比起来还是有非常大的性能优势。</p></li><li><p>优化 <code>join</code> 查询<br> 尽量少使用 <code>join</code>。</p><p> 确认两个表中 <code>join</code> 的字段是被建过索引的。这样，MySQ L内部会启动为你优化 <code>join</code> 的 SQL 语句的机制。</p><p> 确认两个表中 <code>join</code> 的字段是相同类型的。例如：如果你要把 <code>decimal</code> 字段和一个 <code>int</code> 字段 <code>join</code> 在一起，MySQL就无法使用它们的索引。对于那些字符类型的字段，还需要有相同的字符集才行（两个表的字符集有可能不一样）。</p></li><li><p>优化 <code>rand</code> 查询<br> 实现随机选挑一行数据的功能，不建议使用 <code>rand</code> 函数，性能很低。可以先统计总行数，然后计算出一个随机数，再使用 <code>limit</code> 查询。</p><p> 例如 <code>select id from biz_user order by rand() limit 1</code> 可以改成 <code>select id from biz_user limit 100,1</code>。</p></li><li><p>优化 <code>count</code> 查询<br> 注意  <code>count(1)</code> 和 <code>count(name)</code> 的区别。前者统计所有行，后者只统计字段值不为 <code>null</code> 的行。</p></li><li><p>优化 <code>limit</code> 查询<br> 结果只会有一条结果，加上 <code>limit 1</code> 可以增加性能。这样一样，MySQL 数据库引擎会在找到一条数据后停止搜索，而不是继续往后查少下一条符合记录的数据。</p></li><li><p>优化 <code>union</code> 查询<br> <code>union</code> 需要将两个（或者多个）结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的 CPU 运算，加大资源消耗及延迟。</p><p> 所以当我们可以确认不可能出现重复结果集或者不在乎重复结果集的时候，尽量使用 <code>union all</code> 而不是 <code>union</code>。</p></li><li><p>优化 <code>distinct</code> 查询<br> 用途：查询某个字段不重复的记录。</p><p> 原因：对最终结果集完成一次排序，这是成本最昂贵的排序之一。</p><p> 功能优化：因为 <code>distinct</code> 只能返回他的目标字段，而无法返回其他字段。如果我们希望返回其目标字段所在的记录，可以使用 <code>group by</code> 代替，例如：<code>select distinct(name) from biz_user</code> 替换为 <code>select id, name from biz_user group by name</code>。 </p><p> 性能优化：<code>SELECT DISTINCT e.empno, e.lastname FROM emp e, empproject ep WHERE e.empno=ep.empno</code> 可以替换成为 <code>SELECT e.empno, e.lastname from emp e, empproject ep WHERE e.empno=ep.empno GROUP BY e.empno,e.lastname</code>。</p><p> 还可以使用子查询代替：<code>SELECT e.empno, e.lastname from emp e WHERE EXISTS (select 1 from empproject where e.empno=empno)</code>。</p><p> 还可以使用 <code>in</code> 字句查询：<code>SELECT e.empno, e.lastname from emp e where e.empno in (select empno from empproject)</code>。</p><p> 提升效率比：??</p><p> <a href="https://blog.csdn.net/u010745238/article/details/42846897">https://blog.csdn.net/u010745238/article/details/42846897</a> ??</p></li><li><p>优化查询缓存<br> 像 <code>now()</code>、 <code>rand()</code>、<code>curdate()</code> 或是其它的诸如此类的 SQL 函数都不会开启查询缓存，因为这些函数的返回是会不定的易变的。所以，你所需要的就是用一个变量来代替 MySQL 的函数，从而开启缓存。</p><p> 例如 <code>where gmtmodify &gt;= now()</code> 可以改成 <code>where gmtmodify &gt;= &#39;2020-08-10&#39;</code>。</p></li><li><p>尽量少排序<br> 排序操作会消耗较多的 CPU 资源，所以减少排序可以在缓存命中率高等 IO 能力足够的场景下会较大影响 SQL 的响应时间。</p><p> 对于 MySQL 来说，减少排序有多种办法，比如：减少参与排序的记录条数，非必要不对数据进行排序。</p></li><li><p>尽量早过滤<br> 将过滤性更好的字段放得更靠前。在 SQL 编写中同样可以使用这一原则来优化一些 <code>join</code> 的 SQL。比如我们在多个表进行分页数据查询的时候，我们最好是能够在一个表上先过滤好数据分好页，然后再用分好页的结果集与另外的表 <code>join</code>，这样可以尽可能多的减少不必要的 IO 操作，大大节省 IO 操作所消耗的时间。</p></li><li><p>避免类型转换<br> 这里所说的“类型转换”是指 <code>where</code> 子句中出现字段的类型和传入的参数类型不一致的时候发生的类型转换。</p></li><li><p>避免复杂 SQL<br> 提升可阅读性；避免慢查询的概率；可以转换成多个短查询，用业务端处理。</p></li></ol><p>查询分析方法<br>观察，至少跑1天，看看生产的慢SQL情况。</p><p>开启慢查询日志，设置阈值，比如超过5秒钟的就是慢SQL，并将它抓取出来。</p><p>explain+慢SQL分析</p><p>show profile</p><p>运维经理 or DBA，进行SQL数据库服务器的参数调优。</p><p>in 和 exists<br>小表驱动大表，即小的数据集驱动大的数据集。</p><p>当B表的数据集必须小于A表的数据集时，用in优于exists。</p><p>当A表的数据集系小于表的数据集时，用exists优于in。</p><p>提高Order By的速度<br>Order by时select *是一个大忌，只Query需要的字段，这点非常重要。 在这里的影响是:</p><p>1.1 当Query的字段大小总和小于max_length_for_sort_data 而且排序字段不是TEXT|BLOB类型时，会用改进后的算法——单路排序，否则用老算法——多路排序。</p><p>1.2 两种算法的数据都有可能超出sort_buffer的容量， 超出之后，会创建tmp文件进行合并排序，导致多次I/O，但是用单路排序算法的风险会更大一些，所以要提高sort_buffer_size 。</p><p>尝试提高sort_buffer_size<br>不管用哪种算法，提高这个参数都会提高效率，当然，要根据系统的能力去提高，因为这个参数是针对每个进程的</p><p>尝试提高max_length_for_sort_data<br>提高这个参数，会增加用改进算法的概率。但是如果设的太高，数据总容量超出sort_buffer_size的概率就增大，明显症状是高的磁盘I/O活动和低的处理器使用率。</p><p>Group By<br>group by实质是先排序后进行分组，遵照索引建的最佳左前缀</p><p>当无法使用索引列，增大max<em> length</em> for_ sort_data参数的设置+增大sort_buffer_size参数的设置</p><p>where高于having，能写在where限定的条件就不要去having限定了。</p><h2 id=""><a href="#" class="headerlink" title="??"></a>??</h2><ol><li>固定长度的表会更快<br> “static” 或 “fixed-length”</li></ol><h2 id="表结构优化"><a href="#表结构优化" class="headerlink" title="表结构优化"></a>表结构优化</h2><h4 id="选择适当数据类型"><a href="#选择适当数据类型" class="headerlink" title="选择适当数据类型"></a>选择适当数据类型</h4><ol><li><p>数字类型<br> 能确定不会使用负数的字段，建议添加 <code>unsigned</code> 定义。</p><p> 合理使用 <code>tinyint</code>、<code>int</code>、<code>bigint</code>。因为三者所占用的存储空间也有很大的差别。</p><p> 不要使用 <code>double</code>，不仅仅只是存储长度的问题，同时还会存在精确性的问题。</p><p> 固定精度的小数，也不建议使用 <code>decimal</code>，建议乘以固定倍数转换成整数存储，可以大大节省存储空间，且不会带来任何附加维护成本。</p></li><li><p>字符类型<br> 非万不得已不要使用 <code>text</code> 数据类型，其处理方式决定了他的性能要低于 <code>char</code> 或者是 <code>varchar</code> 类型的处理。</p><p> 定长字段，建议使用 <code>char</code> 类型，不定长字段尽量使用 <code>varchar</code>，且仅仅设定适当的最大长度，而不是非常随意的给一个很大的最大长度限定，因为不同的长度范围，MySQL 也会有不一样的存储处理。</p><p> 对于状态字段，以尝试使用 <code>enum</code> 来存放，因为可以极大的降低存储空间。</p><p> 如果是存放可预先定义的属性数据呢？可以尝试使用 <code>set</code> 类型，即使存在多种属性，同样可以游刃有余，同时还可以节省不小的存储空间。</p><p> 尽量避免在数据库中存储二进制数据。可以采用第三方的对象存储服务。</p></li><li><p>时间类型<br> 不建议通过 <code>int</code> 类型类存储一个 Unix 时间戳的值，因为这太不直观，会给维护带来不必要的麻烦，同时还不会带来任何好处。</p><p> 尽量使用 <code>timestamp</code> 类型，因为其存储空间只需要 <code>datetime</code> 类型的一半。</p><p> 对于只需要精确到某一天的数据类型，建议使用 <code>date</code> 类型，因为他的存储空间只需要 3个字节，比 <code>timestamp</code> 还少。</p></li><li><p>字符编码<br> 建议统一使用 utf8mb4 字符编码，兼容绝大多数文字和表情。</p></li></ol><h4 id="精简字段"><a href="#精简字段" class="headerlink" title="精简字段"></a>精简字段</h4><p>对于大多数的数据库引擎来说，硬盘操作可能是最重大的瓶颈。所以，把你的数据变得紧凑会对这种情况非常有帮助，因为这减少了对硬盘的访问。</p><p>如果一个表只会有几列罢了（比如说字典表，配置表），那么，我们就没有理由使用 INT 来做主键，使用 MEDIUMINT, SMALLINT 或是更小的 TINYINT 会更经济一些。如果你不需要记录时间，使用 DATE 要比 DATETIME 好得多。</p><p>当然，你也需要留够足够的扩展空间，不然，你日后来干这个事，你会死的很难看，参看Slashdot的例子（2009年11月06日），一个简单的ALTER TABLE语句花了3个多小时，因为里面有一千六百万条数据。</p><h4 id="适当拆分"><a href="#适当拆分" class="headerlink" title="适当拆分"></a>适当拆分</h4><p>将表中大部分访问都不需要用到的字段，和类似于 <code>text</code> 或者是很大的 <code>varchar</code> 类型的大字段，拆分到另外的独立表中。以减少常用数据所占用的存储空间，每个数据块中可以存储的数据条数可以大大增加，既减少物理 IO 次数，也能大大提高内存中的缓存命中率。</p><h4 id="垂直分割"><a href="#垂直分割" class="headerlink" title="垂直分割"></a>垂直分割</h4><p>“垂直分割”是一种把数据库中的表按列变成几张表的方法，这样可以降低表的复杂度和字段的数目，从而达到优化的目的。（以前，在银行做过项目，见过一张表有100多个字段，很恐怖）</p><p>示例一：在Users表中有一个字段是家庭地址，这个字段是可选字段，相比起，而且你在数据库操作的时候除了个人信息外，你并不需要经常读取或是改写这个字段。那么，为什么不把他放到另外一张表中呢？ 这样会让你的表有更好的性能，大家想想是不是，大量的时候，我对于用户表来说，只有用户ID，用户名，口令，用户角色等会被经常使用。小一点的表总是会有好的性能。</p><p>示例二： 你有一个叫 “last_login” 的字段，它会在每次用户登录时被更新。但是，每次更新时会导致该表的查询缓存被清空。所以，你可以把这个字段放到另一个表中，这样就不会影响你对用户ID，用户名，用户角色的不停地读取了，因为查询缓存会帮你增加很多性能。</p><p>另外，你需要注意的是，这些被分出去的字段所形成的表，你不会经常性地去Join他们，不然的话，这样的性能会比不分割时还要差，而且，会是极数级的下降。</p><h4 id="适度冗余"><a href="#适度冗余" class="headerlink" title="适度冗余"></a>适度冗余</h4><p>适当冗余被频繁引用的字段，避免减少联表查询。</p><h4 id="避免-null-字段"><a href="#避免-null-字段" class="headerlink" title="避免 null 字段"></a>避免 null 字段</h4><p>当字段中存在 <code>null</code> 值时会影响索引查询的效率。可以设置为空字符串或 0 代替。</p><h4 id="分区？？"><a href="#分区？？" class="headerlink" title="分区？？"></a>分区？？</h4><p>这里的分区和上面的适当拆分、垂直分割不同，是对应用层透明的。</p><p>分区是根据一定的规则，数据库把一个表分解成多个更小的、更容易管理的部分，是一种水平划分。对应用来说是完全透明的，不影响应用的业务逻辑，即不用修改代码。因此能存更多的数据，查询，删除也支持按分区来操作，从而达到优化的目的。</p><p>分区可按以下四种类型分区：</p><ol><li>RANGE表分区：范围表分区，按照一定的范围值来确定每个分区包含的数据;</li><li>LIST表分区：列表表分区，按照一个一个确定的值来确定每个分区包含的数据;</li><li>HASH表分区：哈希表分区，按照一个自定义的函数返回值来确定每个分区包含的数据;</li><li>KEY表分区 ：key表分区，与哈希表分区类似，只是用MySQL自己的HASH函数来确定每个分区包含的数据。</li></ol><p>如果有考虑分区，可以提前做准备，避免下列一些限制：</p><ol><li>如果分区字段中有主键或者唯一索引列，那么所有主键列和唯一索引列都必须包含进来，如果表中有主键或唯一索引，那么分区键必须是主键或唯一索引</li><li>分区表中无法使用外键约束</li><li>NULL值会使分区过滤无效</li><li>目前mysql不支持空间类型和临时表类型进行分区。不支持全文索引</li><li>所有分区必须使用相同的存储引擎</li></ol><h4 id="分表？？"><a href="#分表？？" class="headerlink" title="分表？？"></a>分表？？</h4><p>这里的分表和上面的适当拆分、垂直分割不同，是对应用层透明的。</p><p>分表分水平分表和垂直分表。</p><p>水平分表即拆分成数据结构相同的各个小表，如拆分成 table1, table2…，从而缓解数据库读写压力。</p><p>垂直分表即将一些字段分出去形成一个新表，各个表数据结构不相同，可以优化高并发下锁表的情况。</p><p>可想而知，分表的话，程序的逻辑是需要做修改的，所以，一般是在项目初期时，预见到大数据量的情况，才会考虑分表。后期阶段不建议分表，成本很大。</p><h4 id="分库？？"><a href="#分库？？" class="headerlink" title="分库？？"></a>分库？？</h4><p>分库一般是主从模式，一个数据库服务器主节点复制到一个或多个从节点多个数据库，主库负责写操作，从库负责读操作，从而达到主从分离，高可用，数据备份等优化目的。</p><p>分库分表最佳实践：<a href="https://cloud.tencent.com/developer/article/1448626">https://cloud.tencent.com/developer/article/1448626</a></p><h2 id="锁的优化"><a href="#锁的优化" class="headerlink" title="锁的优化"></a>锁的优化</h2><p><a href="http://c.biancheng.net/cpp/html/1481.html">http://c.biancheng.net/cpp/html/1481.html</a></p><p><a href="https://cloud.tencent.com/developer/news/456119">https://cloud.tencent.com/developer/news/456119</a></p><h4 id="获取锁等待情况"><a href="#获取锁等待情况" class="headerlink" title="获取锁等待情况"></a>获取锁等待情况</h4><p>可以通过检查table_locks_waited和table_locks_immediate状态变量来分析系统上的表锁定争夺：<br>mysql&gt; show status like ‘Table%’;<br>+——————————————+—————+<br>| Variable_name       | Value |<br>+——————————————+—————+<br>| Table_locks_immediate   | 105       |<br>| Table_locks_waited  | 3     |<br>+——————————————+—————+<br>2 rows in set (0.00 sec)</p><p>可以通过检查Innodb_row_lock状态变量来分析系统上的行锁的争夺情况：<br>mysql&gt; show status like ‘innodb_row_lock%’;<br>+————————————————————+—————+<br>| Variable_name               | Value |<br>+————————————————————+—————+<br>| Innodb_row_lock_current_waits   | 0     |<br>| Innodb_row_lock_time            | 2001  |<br>| Innodb_row_lock_time_avg        | 667       |<br>| Innodb_row_lock_time_max    | 845       |<br>| Innodb_row_lock_waits       | 3     |<br>+————————————————————+—————+<br>5 rows in set (0.00 sec)</p><p>另外，针对Innodb类型的表，如果需要察看当前的锁等待情况，可以设置InnoDB Monitors，然后通过Show innodb status察看，设置的方式是：<br>    CREATE TABLE innodb_monitor(a INT) ENGINE=INNODB;<br>监视器可以通过发出下列语句来被停止：<br>    DROP TABLE innodb_monitor;<br>设置监视器后，在show innodb status的显示内容中，会有详细的当前锁等待的信息，包括表名、锁类型、锁定记录的情况等等，便于进行进一步的分析和问题的确定。打开监视器以后，默认情况下每15秒会向日志中记录监控的内容，如果长时间打开会导致.err文件变得非常的巨大，所以我们在确认问题原因之后，要记得删除监控表以关闭监视器。或者通过使用—console选项来启动服务器以关闭写日志文件。</p><h4 id="对-MySIAM-类型的表"><a href="#对-MySIAM-类型的表" class="headerlink" title="对 MySIAM 类型的表"></a>对 MySIAM 类型的表</h4><p>1) Myisam类型的表可以考虑通过改成Innodb类型的表来减少锁冲突。</p><p>2) 根据应用的情况，尝试横向拆分成多个表或者改成Myisam分区对减少锁冲突也会有一定的帮助。</p><h4 id="对-Innodb-类型的表"><a href="#对-Innodb-类型的表" class="headerlink" title="对 Innodb 类型的表"></a>对 Innodb 类型的表</h4><p>1) 首先要确认，在对表获取行锁的时候，要尽量的使用索引检索纪录，如果没有使用索引访问，那么即便你只是要更新其中的一行纪录，也是全表锁定的。要确保sql是使用索引来访问纪录的，必要的时候，请使用explain检查sql的执行计划，判断是否按照预期使用了索引。</p><p>2) 由于mysql的行锁是针对索引加的锁，不是针对纪录加的锁，所以虽然是访问不同行的纪录，但是如果是相同的索引键，是会被加锁的。应用设计的时候也要注意，这里和Oracle有比较大的不同。</p><p>3) 当表有多个索引的时候，不同的事务可以使用不同的索引锁定不同的行，当表有主键或者唯一索引的时候，不是必须使用主键或者唯一索引锁定纪录，其他普通索引同样可以用来检索纪录，并只锁定符合条件的行。</p><p>4) 用SHOW INNODB STATUS来确定最后一个死锁的原因。查询的结果中，包括死锁的事务的详细信息，包括执行的SQL语句的内容，每个线程已经获得了什么锁，在等待什么锁，以及最后是哪个线程被回滚。详细的分析死锁产生的原因，可以通过改进程序有效的避免死锁的产生。</p><p>5) 如果应用并不介意死锁的出现，那么可以在应用中对发现的死锁进行处理。</p><p>6) 确定更合理的事务大小，小事务更少地倾向于冲突。</p><p>7) 如果你正使用锁定读，（SELECT … FOR UPDATE或 … LOCK IN SHARE MODE），试着用更低的隔离级别，比如READ COMMITTED。</p><p>8) 以固定的顺序访问你的表和行。则事务形成良好定义的查询并且没有死锁。</p><h2 id="配置优化"><a href="#配置优化" class="headerlink" title="配置优化"></a>配置优化</h2><h4 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h4><p>不同存储引擎性能对比。</p><h4 id="线程数"><a href="#线程数" class="headerlink" title="线程数"></a>线程数</h4><h2 id="硬件层面"><a href="#硬件层面" class="headerlink" title="硬件层面"></a>硬件层面</h2><ol><li><p>CPU<br> 什么地方用到CPU：查询、比较、排序等</p><p> 配置线程数：<code>show variables like &#39;%_io_threads&#39;</code></p><p> 不同CPU对吞吐量的影响：vultr 1cpus = 4000 2cpus = 10098 4cpus = 16800 6cpus = 19416 8cpus = 20164 </p><p> <a href="https://blog.csdn.net/sinat_36246371/article/details/53425183">https://blog.csdn.net/sinat_36246371/article/details/53425183</a></p></li><li><p>内存<br> 什么地方用到内存：索引、缓存</p><p> 不同内存对吞吐量的影响：vultr 500MB = 没能启动 1GB/2GB = 4000 4GB = 10098 8GB = 16800 16GB = 19416 32GB = 20164 </p></li><li><p>硬盘<br> 机械硬盘、固态硬盘、内存硬盘</p></li><li><p>ping值<br> 将ping值控制在1ms以内。</p><p> 使用 IP 而不是域名做数据库路径，避免 DNS 解析。</p><p> 不同ping对TPS的影响：每20ms的延迟，TPS降1倍。</p></li></ol><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><p>一台数据库支持最大连接数是有限的，如果用户的并发访问很多，一台服务器无法满足需求，可以集群处理。MySQL 集群处理技术最常用的就是读写分离。</p><h2 id="外部优化"><a href="#外部优化" class="headerlink" title="外部优化"></a>外部优化</h2><ol><li>代码、业务优化，减少数据查询</li><li>缓存如 Redis 等，将热点数据缓存起来</li><li>搜索引擎如 solr，elasticsearch</li></ol><h2 id="附一：SQL-注入"><a href="#附一：SQL-注入" class="headerlink" title="附一：SQL 注入"></a>附一：SQL 注入</h2><p>SQL 注入产生的原因：程序开发过程中不注意规范书写 SQL 语句和对特殊字符进行过滤，导致客户端可以通过全局变量 POST 和 GET 提交一些 sql 语句正常执行。</p><p>防止 SQL 注入的方式：</p><ol><li>开启配置文件中的 <code>magic_quotes_gpc</code> 和 <code>magic_quotes_runtime</code> 设置</li><li>执行 SQL 语句时使用 addslashes 进行 SQL 语句转换</li><li>SQL 语句书写尽量不要省略双引号和单引号</li><li>过滤掉 SQL 语句中的一些关键词：<code>update</code>、<code>insert</code>、<code>delete</code>、<code>select</code>、 <code>*</code> </li><li>提高数据库表和字段的命名技巧，对一些重要的字段根据程序的特点命名，取不被猜到的</li></ol><h2 id="附二：不同数据库量级解决方案"><a href="#附二：不同数据库量级解决方案" class="headerlink" title="附二：不同数据库量级解决方案"></a>附二：不同数据库量级解决方案</h2><p><a href="https://blog.souche.com/mysql_optimize/">https://blog.souche.com/mysql_optimize/</a></p><h4 id="百万级数据量"><a href="#百万级数据量" class="headerlink" title="百万级数据量"></a>百万级数据量</h4><p>这个数据量基本上大家都经历过，也能感知一些性能问题显露出来了，这个阶段的优化几乎是最重要的，因为到后期千万级，甚至亿级别的阶段，数据库几乎无法动弹，可调整性很低。</p><ol><li>单数据库</li><li>索引优化</li><li>字段优化</li><li>查询优化</li></ol><h4 id="千万级数据量"><a href="#千万级数据量" class="headerlink" title="千万级数据量"></a>千万级数据量</h4><p>到了这个阶段的数据量，数据本身已经有很大的价值了，数据除了满足常规业务需求外，还会有一些数据分析的需求。而这个时候数据可变动性不高，基本上不会考虑修改原有结构，一般会考虑从分区，分表，分库三方面做优化：</p><ol><li><p>分区<br> 分区是根据一定的规则，数据库把一个表分解成多个更小的、更容易管理的部分，是一种水平划分。对应用来说是完全透明的，不影响应用的业务逻辑，即不用修改代码。因此能存更多的数据，查询，删除也支持按分区来操作，从而达到优化的目的。</p></li><li><p>分表<br> 分表分水平分表和垂直分表。</p><p> 水平分表即拆分成数据结构相同的各个小表，如拆分成 table1, table2…，从而缓解数据库读写压力。</p><p> 垂直分表即将一些字段分出去形成一个新表，各个表数据结构不相同，可以优化高并发下锁表的情况。</p><p> 可想而知，分表的话，程序的逻辑是需要做修改的，所以，一般是在项目初期时，预见到大数据量的情况，才会考虑分表。后期阶段不建议分表，成本很大。</p></li><li><p>分库<br> 分库一般是主从模式，一个数据库服务器主节点复制到一个或多个从节点多个数据库，主库负责写操作，从库负责读操作，从而达到主从分离，高可用，数据备份等优化目的。</p><p> 当然，主从模式也会有一些缺陷，主从同步延迟，binlog 文件太大导致的问题等等，这里不细讲（笔者也学不动了）。</p></li></ol><h4 id="亿级数据量"><a href="#亿级数据量" class="headerlink" title="亿级数据量"></a>亿级数据量</h4><p>没碰到过。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程_05 锁</title>
      <link href="/2020/07/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B_05%20%E9%94%81/"/>
      <url>/2020/07/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B_05%20%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h2><p>公平锁： 是指多个线程按照申请的顺序来获取锁，类似排队打饭，先到先得。<br>非公平锁： 是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程优先获取锁。</p><p>区别：</p><ol><li><p>公平锁：就是很公平，在并发环境下，每个线程在获取锁时会先查看此锁的维护队列。如果为空，或者当前线程是等待队列的第一个，就占有锁，否则就会加入到等待队列中，以后按照FIFO的规则从队列中取到自己。</p></li><li><p>非公平锁：比较粗鲁，上来就直接尝试占有锁，如果尝试失败，就再采用类似公平锁那种方式。</p></li></ol><p>在高并发情况下，非公平锁吞吐量较大，但有可能造成线程优先级反转或饥饿现象。</p><p>对 ReentranLock 而言，可以通过构造函数指定该锁是否公平锁，默认是非公平锁。</p><p>对 sychronized 而言，也是一种非公平锁。</p><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>可重入锁又名递归锁，指的是在同一个线程在外层方法获取锁的时候，再进入的内层方法自动获取该锁。</p><p>ReentrantLock/synchronized 就是一个典型的可重入锁。</p><p>可重入锁的最大作用是避免死锁。</p><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少了线程上下文切换的消耗，缺点是循环会消耗CPU。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unsafe 原子新增，循环比较交换。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> atomicInteger AtomicInteger 对象本身</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> valueoffset   内存地址偏移量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> incr          需要新增的数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object atomicInteger, <span class="keyword">long</span> valueoffset, <span class="keyword">int</span> incr)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> var5;                                                                           <span class="comment">// 期望值</span></span><br><span class="line">   <span class="keyword">do</span> &#123;</span><br><span class="line">      var5 = <span class="keyword">this</span>.getIntVolatile(atomicInteger, valueoffset);                          <span class="comment">// 通过主内存找出真实的值</span></span><br><span class="line">   &#125; <span class="keyword">while</span> (!<span class="keyword">this</span>.compareAndSwapInt(atomicInteger, valueoffset, var5, var5 + incr));   <span class="comment">// 期望值一致的，则交换。否则循环刷新期望值</span></span><br><span class="line">   <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="独占锁（写锁）、共享锁（读锁）、互斥锁"><a href="#独占锁（写锁）、共享锁（读锁）、互斥锁" class="headerlink" title="独占锁（写锁）、共享锁（读锁）、互斥锁"></a>独占锁（写锁）、共享锁（读锁）、互斥锁</h2><h2 id="CountdownLatch"><a href="#CountdownLatch" class="headerlink" title="CountdownLatch"></a>CountdownLatch</h2>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程_04 线程通信</title>
      <link href="/2020/07/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B_04%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
      <url>/2020/07/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B_04%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程_03 线程通信</title>
      <link href="/2020/07/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B_03%20%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/"/>
      <url>/2020/07/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B_03%20%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程_01 概述</title>
      <link href="/2020/07/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B_01%20%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/07/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B_01%20%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>并发编程是整个 Java 开发体系中最难以理解，但也是最重要的知识点之一，因此学习起来比较费劲，从而导致很多人望而却步，但是无论是职场面试还是高并发高流量的系统的实现都离不开并发编程，能够真正掌握并发编程的人才在市场上供不应求。</p><h2 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h2><ol><li>定义上<br> 进程是一个在内存中运行的应用程序，线程是进程的一个执行任务（单元）,一个进程可以拥有多个线程。</li><li>内存分配<br> 进程之间的地址空间和资源是相互独立的，同一进程的线程共享本进程的地址空间和资源。</li><li>执行过程<br> 每个独立的进程有程序运行的入口、顺序执行序列和程序出口。但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制，两者均可并发执行。</li><li>影响关系<br> 一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。所以多进程要比多线程健壮。</li></ol><h2 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h2><p>串行是指有 n 个任务由一个线程按顺序执行。由于任务、方法都在一个线程执行所以不存在线程不安全情况，也就不存在临界区的问题。</p><p>并发是指多个任务在同一个 CPU 核上，按细分的时间片轮流（交替）执行，从逻辑上来看那些任务是同时执行。</p><p>并行是指单位时间内，多个处理器或多核处理器同时处理多个任务，是真正意义上的“同时进行”。</p><p>做一个形象的比喻：</p><ol><li>串行：一个队列和一台咖啡机。</li><li>并发：两个队列和一台咖啡机。</li><li>并行：两个队列和两台咖啡机。</li></ol><h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><p>多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。</p><p>概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换回这个任务时，可以再加载这个任务的状态。任务从保存到再加载的过程就是一次上下文切换。</p><p>上下文切换通常是计算密集型的。也就是说，它需要相当可观的处理器时间，在每秒几十上百次的切换中，每次切换都需要纳秒量级的时间。所以，上下文切换对系统来说意味着消耗大量的 CPU 时间，事实上，可能是操作系统中时间消耗最大的操作。</p><p>在 8 核主机上对上下文切换时间的测试：</p><div class="table-container"><table><thead><tr><th style="text-align:left">线程数</th><th>睡眠 500ms 耗时</th><th>复杂任务耗时</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td>501ms</td><td>700ms</td></tr><tr><td style="text-align:left">8</td><td>501ms</td><td>257ms</td></tr><tr><td style="text-align:left">80</td><td>509ms</td><td>180ms</td></tr><tr><td style="text-align:left">800</td><td>554ms</td><td>223ms</td></tr><tr><td style="text-align:left">8000</td><td>2508ms</td><td>675ms</td></tr></tbody></table></div><blockquote><p>每次线程切换开销大约是 3.8us 左右。从上下文切换的耗时上来看，Linux 线程（轻量级进程）其实和进程差别不太大。</p></blockquote><h4 id="Java-内存中哪些数据是线程安全的，哪些是非安全的？"><a href="#Java-内存中哪些数据是线程安全的，哪些是非安全的？" class="headerlink" title="Java 内存中哪些数据是线程安全的，哪些是非安全的？"></a>Java 内存中哪些数据是线程安全的，哪些是非安全的？</h4><ol><li>线程安全：局部变量、方法定义的参数、异常处理器参数是当前线程的虚拟机栈中的数据,并且不会进行线程共享,所以不会存在内存可见性问题；</li><li>非线程安全：所有的实例域、静态域、和数组元素都存放在堆内存中，并且这些数据是线程共享的，所以会存在内存可见性问题；</li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>线程与进程的区别</li><li>串行、并发与并行的区别</li></ol><ol><li><p>什么是线程</p></li><li><p>什么是守护进程</p></li><li><p>什么是用户线程</p></li><li><p>什么是多线程</p></li><li>什么是并发编程</li><li>什么是上下文切换</li><li><p>并行和并发的区别</p></li><li><p>如何查看线程 CPU 使用率</p></li><li><p>并发编程是什么</p></li><li>并发编程有什么优缺点</li></ol><p>什么是线程死锁</p><p>形成死锁的必要条件是什么</p><p>如何避免死锁</p><h2 id="线程基础"><a href="#线程基础" class="headerlink" title="线程基础"></a>线程基础</h2><p>创建线程有哪几种方式</p><p>runnable 和 callable 有什么区别</p><p>run 和 start 有什么区别</p><p>为什么调用 start() 会执行 run()</p><p>为什么不能直接调用 run()。</p><ol><li>如何停止一个正在运行的线程？</li></ol><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><ol><li>说说线程的生命周期</li><li>说说线程有哪些状态</li><li>说说线程的调度算法</li><li>什么是线程调度器</li><li>什么是时间分片</li><li>线程同步的相关方法</li><li><p>线程调度的相关方法</p></li><li><p>sleep() 和 wait() 有什么区别</p></li><li>你是如何调用 wait() 方法的？使用 if 块还是循环？为什么？</li><li>为什么线程通信的方法 wait(), notify()和 notifyAll()被定义在 Object 类里？</li><li>为什么 wait(), notify()和 notifyAll()必须在同步方法或者同步块中被调用？</li><li>Thread 类中的 yield() 有什么作用？</li><li>为什么 Thread 类的 sleep()和 yield ()方法是静态的？</li><li>线程的 sleep()方法和 yield()方法有什么区别？</li><li>Java 中 interrupted 和 isInterrupted 方法的区别？</li><li>什么是阻塞式方法？</li><li>Java 中你怎样唤醒一个阻塞的线程？</li><li>notify() 和 notifyAll() 有什么区别？</li><li>如何在两个线程间共享数据？<br>Java 如何实现多线程之间的通讯和协作？<br>同步方法和同步块，哪个是更好的选择？<br>什么是线程同步和线程互斥，有哪几种实现方式？<br>在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？<br>如果你提交任务时，线程池队列已满，这时会发生什么<br>什么叫线程安全？servlet 是线程安全吗?<br>在 Java 程序中怎么保证多线程的运行安全？<br>你对线程优先级的理解是什么？<br>线程类的构造方法、静态块是被哪个线程调用的<br>Java 中怎么获取一份线程 dump 文件？你如何在 Java 中获取线程堆栈？<br>一个线程运行时发生异常会怎样？<br>Java 线程数过多会造成什么异常？</li></ol><h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><ol><li>Callable 是什么</li><li>Future 是什么</li><li>FutureTask 是什么</li></ol><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p>finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？</p><p>为什么代码会重排序？</p><p>synchronized 的作用？</p><p>说说自己是怎么使用 synchronized 关键字，在项目中用到了吗</p><p>说一下 synchronized 底层实现原理？</p><p>什么是自旋</p><p>多线程中 synchronized 锁升级的原理是什么？</p><p>线程 B 怎么知道线程 A 修改了变量</p><p>当一个线程进入一个对象的 synchronized 方法 A 之后，其它线程是否可进入此对象的 synchronized 方法 B？</p><p>synchronized、volatile、CAS 比较<br>synchronized 和 Lock 有什么区别？<br>synchronized 和 ReentrantLock 区别是什么？</p><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>volatile 关键字的作用<br>Java 中能创建 volatile 数组吗？<br>volatile 变量和 atomic 变量有什么不同？<br>volatile 能使得一个非原子操作变成原子操作吗？<br>volatile 修饰符的有过什么实践？<br>synchronized 和 volatile 的区别是什么？</p><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>什么是不可变对象，它对写并发应用有什么帮助？</p><h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><p>Java Concurrency API 中的 Lock 接口(Lock interface)是什么？对比同步它有什么优势？<br>乐观锁和悲观锁的理解及如何实现，有哪些实现方式？<br>什么是 CAS<br>CAS 的会产生什么问题？<br>什么是死锁？<br>产生死锁的条件是什么？怎么防止死锁？<br>死锁与活锁的区别，死锁与饥饿的区别？<br>多线程锁的升级原理是什么？</p><h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><p><a href="https://blog.csdn.net/ThinkWon/article/details/104863992">https://blog.csdn.net/ThinkWon/article/details/104863992</a></p><h4 id="附：线程安全性获取保证"><a href="#附：线程安全性获取保证" class="headerlink" title="附：线程安全性获取保证"></a>附：线程安全性获取保证</h4><p>工作内存与主内存同步延迟现象导致的可见性问题，可以使用 <code>synchronized</code> 或 <code>volatile</code> 关键字经济，它们都可以使一个线程修改后的变量立即对其它线程可见。</p><p>对于指令重排导致的可见性问题和有序性问题，可以利用 <code>volatile</code> 关键字解决，因为 <code>volatile</code> 的另外一个作用是禁止重排序优化。</p><p>对于原子性问题，可以使用 <code>sychronized</code> 或 <code>AtommicInteger</code> 解决。 </p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>国际化</title>
      <link href="/2020/06/17/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F/%E5%9B%BD%E9%99%85%E5%8C%96/"/>
      <url>/2020/06/17/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F/%E5%9B%BD%E9%99%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 业务开发 </category>
          
          <category> 商城系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>集群定时任务方案</title>
      <link href="/2020/06/16/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%9B%86%E7%BE%A4%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%96%B9%E6%A1%88/"/>
      <url>/2020/06/16/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%9B%86%E7%BE%A4%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>服务器采用了负载均衡，有两台服务器，部署的代码一样，所以里面的定时任务在某一时间会被同时执行，这就导致了很多其他意外的发生，想要解决的问题基本就三个：单点执行，故障转移，服务状态。这里对比一下网上找的几种方案。</p><h2 id="单机运行"><a href="#单机运行" class="headerlink" title="单机运行"></a>单机运行</h2><p>只在一台服务器上部署该定时任务代码。</p><p>优点：解决方法容易理解    </p><p>缺点:部署麻烦，需要多套代码，且当这台服务器出问题时就没定时任务了。</p><h2 id="限制IP运行"><a href="#限制IP运行" class="headerlink" title="限制IP运行"></a>限制IP运行</h2><p>在定时任务代码上加上某个特定的ip限制，仅某个ip的服务器能运行该定时任务。</p><p>优点：解决方法容易理解，部署简单，不需要多套代码。  </p><p>缺点：同上，只能规定一台服务器运行，发送故障时就没办法了。</p><h2 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h2><p>利用数据库的共享锁事务管理机制来运行定时任务。</p><p>原理：在数据库中新建一张表定时任务表，存储了上次执行定时任务的ip地址（ip），任务名称（task_name)，是否正在执行（execute）。原博客用代码的方式解释了自己的思路，这里我用文字来总结一下：</p><ol><li>查找数据库的定时任务表。</li><li>检查是否有机器在运行定时任务。检查方法：update定时任务表的excute字段为1（1为执行中，0为未执行）、ip为自己的ip，如果update失败，则证明有机器在执行该定时任务，该机器的定时任务就不执行了，成功则进行第三步。</li><li>执行定时任务的具体内容。</li><li>还原excute字段为0。</li></ol><p>以上是该方案的流程，利用了mysql的共享锁机制判断，通过是否更新成功来判断是否有机器正在执行定时任务，这种方案可以保证任务只执行一次，且只要集群中有一台服务器是好的，就会执行任务。方案挺好，暂时想不到有啥缺点，可能增加了数据库的负担算一个吧….</p><h2 id="利用redis数据库"><a href="#利用redis数据库" class="headerlink" title="利用redis数据库"></a>利用redis数据库</h2><p>原理：和第三种差不多，只是通过redis的key-value来存储任务名—执行ip。执行定时任务前先查询redis是否有改任务的值，没有就自己 执行，并插入新的key-vale。有的话就查看ip是否是自己，是的话就执行，不是的话就 证明有其他机器在执行，自己就不执行啦。过期时间可以自己设置，方便有机器出故障时候可以转移机器执行任务。</p><p>优点：利用了redis的自动过期机制实现了转移故障机器的问题，比较简单，而且redis的访问速度也很快。</p><p>缺点：这里没有事务管理机制，访问redis的时候，一定会出现高并发的情况，所以得自己实现redis的共享锁机制。</p><p>参考：<a href="https://www.jianshu.com/p/48c5b11b80cd">https://www.jianshu.com/p/48c5b11b80cd</a></p><h2 id="quartz集群分布式（并发）部署解决方案"><a href="#quartz集群分布式（并发）部署解决方案" class="headerlink" title="quartz集群分布式（并发）部署解决方案"></a>quartz集群分布式（并发）部署解决方案</h2><p>quartz有很成熟的分布式并发部署定时任务的解决方案了，但是配置比较复杂，且需要新建恨的数据库表，这里就不详细写了（好吧，我也没认真看….）</p><p>综上所述，我觉得第三种方案适合小型的项目去做，大的项目最好用quartz去做。</p><p>在实现的过程中又发现，同一台服务器上的不同版本之间也会发生cron重复执行的问题，所以不仅考虑不同服务器的问题，还得考虑不同版本之间的问题。</p><p>参考：<a href="https://www.tuicool.com/articles/B3qeUrB">https://www.tuicool.com/articles/B3qeUrB</a></p>]]></content>
      
      
      <categories>
          
          <category> 业务汇总 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发实践</title>
      <link href="/2020/06/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
      <url>/2020/06/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-AQS 机制</title>
      <link href="/2020/06/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-AQS%20%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/06/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-AQS%20%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>从是什么、有什么、为什么、如何用、底层原理等几个维度分析 AQS 机制。</p><h4 id="AQS-简介"><a href="#AQS-简介" class="headerlink" title="AQS 简介"></a>AQS 简介</h4><p>AQS 是 <code>AbstractQueuedSynchronizer</code> 这个抽象类的简称，翻译过来就是抽象队列同步器。AQS 为不同场景提供了实现锁及同步机制的基本框架，为同步状态的原子性管理、线程的阻塞、线程的解除阻塞及排队管理提供了一种通用的机制。</p><p>AQS 将线程封装到一个 Node 里面，并维护一个 CHL Node FIFO 队列，它是一个非阻塞的 FIFO 队列，也就是说在并发条件下往此队列做插入或移除操作不会阻塞，是通过自旋锁和 CAS 保证节点插入和移除的原子性，实现无锁快速插入。</p><p><img src="https://upload-images.jianshu.io/upload_images/53727-ae36db58241c256b.png?imageMogr2/auto-orient/strip|imageView2/2/w/852/format/webp" alt=""></p><h4 id="AQS-基本使用"><a href="#AQS-基本使用" class="headerlink" title="AQS 基本使用"></a>AQS 基本使用</h4><p>当我们谈论 AQS 时，更多的是指那些利用 AQS 实现的同步工具类。比如 <code>Semaphore</code>、<code>CountDownLatch</code>、<code>ReentrantLock</code> 等。</p><h4 id="AQS-横向对比"><a href="#AQS-横向对比" class="headerlink" title="AQS 横向对比"></a>AQS 横向对比</h4><h4 id="AQS-底层原理"><a href="#AQS-底层原理" class="headerlink" title="AQS 底层原理"></a>AQS 底层原理</h4><h4 id="附：CountDownLatch"><a href="#附：CountDownLatch" class="headerlink" title="附：CountDownLatch"></a>附：CountDownLatch</h4><p><code>CountDownLatch</code> 闭锁可以让一些线程阻塞直到另一些线程完成一系列操作后才被唤醒，主要有 <code>await</code> 和 <code>countDown</code> 两个方法：</p><ol><li>当一个或多个线程调用 <code>await</code> 方法时，调用线程会被阻塞；</li><li>其它线程调用 <code>countDown</code> 方法会将计数器减 1（调用 <code>countDown</code> 方法的线程不会被阻塞）。当计数器的值变为 0 时，因调用 <code>await</code> 方法被阻塞的线程会被唤醒，继续执行；</li></ol><p>来看下面一个例子，多个线程没有执行完毕，主线程就结束了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">new</span> Thread(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">"离开了教室"</span>), <span class="string">"同学"</span> + i).start();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"===============班长最后走人"</span>);</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line">同学<span class="number">1</span>离开了教室</span><br><span class="line">===============班长最后走人</span><br><span class="line">同学<span class="number">4</span>离开了教室</span><br><span class="line">同学<span class="number">3</span>离开了教室</span><br><span class="line">同学<span class="number">2</span>离开了教室</span><br><span class="line">同学<span class="number">6</span>离开了教室</span><br><span class="line">同学<span class="number">5</span>离开了教室</span><br></pre></td></tr></table></figure><p>加上了 <code>CountDownLatch</code> 后，主线程会等待其它线程执行完毕才执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">         System.out.println(Thread.currentThread().getName() + <span class="string">"离开了教室"</span>);</span><br><span class="line">         countDownLatch.countDown();</span><br><span class="line">   &#125;, <span class="string">"同学"</span> + i).start();</span><br><span class="line">&#125;</span><br><span class="line">countDownLatch.await();</span><br><span class="line">System.out.println(<span class="string">"===============班长最后走人"</span>);</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line">同学<span class="number">1</span>离开了教室</span><br><span class="line">同学<span class="number">3</span>离开了教室</span><br><span class="line">同学<span class="number">2</span>离开了教室</span><br><span class="line">同学<span class="number">4</span>离开了教室</span><br><span class="line">同学<span class="number">5</span>离开了教室</span><br><span class="line">同学<span class="number">6</span>离开了教室</span><br><span class="line">===============班长最后走人</span><br></pre></td></tr></table></figure><h4 id="附：CyclicBarrier"><a href="#附：CyclicBarrier" class="headerlink" title="附：CyclicBarrier"></a>附：CyclicBarrier</h4><p><code>CyclicBarrier</code> 栅栏类似于闭锁，它能阻塞一组线程直到某个事件的发生。栅栏与闭锁的关键区别在于，所有的线程必须同时到达栅栏位置，才能继续执行。闭锁用于等待事件，而栅栏用于等待其他线程。</p><p>男生版：集齐 7 颗龙珠才能召唤神龙。</p><p>女生版：人到齐了才能开会。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">7</span>, () -&gt; System.out.println(<span class="string">"=========召唤神龙"</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">int</span> tempI = i;</span><br><span class="line">   <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">         System.out.println(<span class="string">"收集到了第"</span> + tempI + <span class="string">"颗龙珠"</span>);</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            barrier.await();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(<span class="string">"第"</span> + tempI + <span class="string">"颗龙珠开始召唤"</span>);</span><br><span class="line">   &#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line">收集到了第<span class="number">1</span>颗龙珠</span><br><span class="line">收集到了第<span class="number">4</span>颗龙珠</span><br><span class="line">收集到了第<span class="number">5</span>颗龙珠</span><br><span class="line">收集到了第<span class="number">3</span>颗龙珠</span><br><span class="line">收集到了第<span class="number">6</span>颗龙珠</span><br><span class="line">收集到了第<span class="number">2</span>颗龙珠</span><br><span class="line">收集到了第<span class="number">7</span>颗龙珠</span><br><span class="line">=========召唤神龙</span><br><span class="line">第<span class="number">4</span>颗龙珠开始召唤</span><br><span class="line">第<span class="number">1</span>颗龙珠开始召唤</span><br><span class="line">第<span class="number">3</span>颗龙珠开始召唤</span><br><span class="line">第<span class="number">5</span>颗龙珠开始召唤</span><br><span class="line">第<span class="number">7</span>颗龙珠开始召唤</span><br><span class="line">第<span class="number">6</span>颗龙珠开始召唤</span><br><span class="line">第<span class="number">2</span>颗龙珠开始召唤</span><br></pre></td></tr></table></figure><h4 id="附：Semaphore"><a href="#附：Semaphore" class="headerlink" title="附：Semaphore"></a>附：Semaphore</h4><p>Semaphore 信号量主要用于两个目的：一个是用于多个共享资源的互诉使用，另一个用于并发线程数的控制。</p><p>来一个争停车位的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 模拟3个停车位</span></span><br><span class="line">Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 模拟6个人抢车位</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> time = <span class="keyword">new</span> Random().nextInt(<span class="number">5</span>) + <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">            semaphore.acquire();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"抢到车位，休息"</span> + time + <span class="string">"秒"</span>);</span><br><span class="line"></span><br><span class="line">            TimeUnit.SECONDS.sleep(time);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"离开了车位"</span>);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            semaphore.release();</span><br><span class="line">         &#125;</span><br><span class="line">   &#125;, <span class="string">"T"</span> + i).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line">T3抢到车位，休息<span class="number">6</span>秒</span><br><span class="line">T2抢到车位，休息<span class="number">4</span>秒</span><br><span class="line">T4抢到车位，休息<span class="number">3</span>秒</span><br><span class="line">T4离开了车位</span><br><span class="line">T6抢到车位，休息<span class="number">5</span>秒</span><br><span class="line">T2离开了车位</span><br><span class="line">T1抢到车位，休息<span class="number">5</span>秒</span><br><span class="line">T3离开了车位</span><br><span class="line">T5抢到车位，休息<span class="number">7</span>秒</span><br><span class="line">T6离开了车位</span><br><span class="line">T1离开了车位</span><br><span class="line">T5离开了车位</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-CAS 机制</title>
      <link href="/2020/06/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-CAS%20%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/06/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-CAS%20%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>从是什么、有什么、为什么、如何用、底层原理等几个维度分析 CAS 机制。</p><h4 id="CAS-简介"><a href="#CAS-简介" class="headerlink" title="CAS 简介"></a>CAS 简介</h4><p>CAS 的全称是 Compare And Swap（比较与交换），是基于硬件原语实现的，能够在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。</p><h4 id="CAS-拥有功能"><a href="#CAS-拥有功能" class="headerlink" title="CAS 拥有功能"></a>CAS 拥有功能</h4><p>CAS 使用了 3 个基本操作数：内存地址 V，旧的预期值 A，要修改的新值 B。更新一个变量的时候，只有当变量的预期值 A 和内存地址 V 当中的实际值相同时，才会将内存地址 V 对应的值修改为 B。</p><p><img src="https://img2018.cnblogs.com/blog/1775037/202001/1775037-20200106164315461-658325570.jpg" alt=""></p><h4 id="CAS-出现背景"><a href="#CAS-出现背景" class="headerlink" title="CAS 出现背景"></a>CAS 出现背景</h4><p>从 Java5 开始引入了对 CAS 机制的底层的支持，在这之前需要开发人员编写相关的代码才可以实现 CAS。</p><h4 id="CAS-基本使用"><a href="#CAS-基本使用" class="headerlink" title="CAS 基本使用"></a>CAS 基本使用</h4><p>JDK1.5 之后的 <code>java.util.concurrent.atomic</code> 包里，多了一批原子处理类。<code>AtomicBoolean</code>、<code>AtomicInteger</code>、<code>AtomicLong</code>、<code>AtomicReference</code>。主要用于在高并发环境下的高效程序处理，来帮助我们简化同步处理。</p><h4 id="CAS-优点缺点"><a href="#CAS-优点缺点" class="headerlink" title="CAS 优点缺点"></a>CAS 优点缺点</h4><p>CAS 的优点：</p><ol><li>可以保证变量操作的原子性；</li><li>并发量不是很高的情况下，使用 CAS 机制比使用锁机制效率更高；</li><li>在线程对共享资源占用时间较短的情况下，使用 CAS 效率也会较高。</li></ol><p>CAS 虽然很高效的解决原子操作，但是 CAS 仍然存在三大问题：</p><ol><li><p>ABA 问题<br>因为 CAS 需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新。但是如果一个值原来是 A，变成了 B，又变成了 A，那么使用 CAS 进行检查时会发现它的值没有发生变化，但是实际上却变化了。</p><p>ABA 问题的一个解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加 1，那么 A-&gt;B-&gt;A 就会变成 1A-&gt;2B-&gt;3A。</p><p>另外从 Java1.5 开始 JDK 提供了 <code>AtomicStampedReference</code> 来解决 ABA 问题。这个类的 <code>compareAndSet</code> 方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p></li><li><p>循环时间长开销大<br>在并发量比较高的情况下，如果许多线程反复尝试更新某一个变量，却又一直更新不成功，循环往复，会给 CPU 带来很大的压力。</p></li><li><p>只能保证一个共享变量的原子操作<br>CAS 机制所保证的只是一个变量的原子性操作，而不能保证整个代码块的原子性。比如需要保证 3 个变量共同进行原子性的更新时，就不得不使用 <code>synchronized</code> 了。</p><p>另外从 Java1.5 开始 JDK 提供了 <code>AtomicReference</code> 类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行 CAS 操作。</p></li></ol><h4 id="CAS-底层原理"><a href="#CAS-底层原理" class="headerlink" title="CAS 底层原理"></a>CAS 底层原理</h4><p>CAS 并发原语体现在 Java 语言中就是 <code>sun.misc.Unsafe</code> 类中的各个方法。调用 <code>Unsafe</code> 类中的 CAS 方法，JVM 会帮我们实现出 CAS 汇编指令。这是一种完全依赖于硬件的功能，通过它实现了原子操作。</p><p>再次强调，由于 CAS 是一种系统原语，属于操作系统用语范凑，是由若干条指令组成的，用于完成某个功能的一个过程。并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说 CAS 是一条 CPU 的原子指令，不会造成所谓的数据不一致问题。</p><p><code>AtomicInteger</code> 的自增方法就使用到了 <code>Unsafe</code> CAS 操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. AtomicInteger 自增操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2. Unsafe 原子新增，循环比较交换。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> atomicInteger AtomicInteger 对象本身</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> valueoffset   内存地址偏移量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> incr          需要新增的数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object atomicInteger, <span class="keyword">long</span> valueoffset, <span class="keyword">int</span> incr)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> var5;                                                                         <span class="comment">// 期望值</span></span><br><span class="line">   <span class="keyword">do</span> &#123;</span><br><span class="line">      var5 = <span class="keyword">this</span>.getIntVolatile(atomicInteger, valueoffset);                        <span class="comment">// 通过主内存找出真实的值</span></span><br><span class="line">   &#125; <span class="keyword">while</span> (!<span class="keyword">this</span>.compareAndSwapInt(atomicInteger, valueoffset, var5, var5 + incr)); <span class="comment">// 期望值一致的，则交换。否则循环刷新</span></span><br><span class="line">   <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 使用到了C++实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4, <span class="keyword">int</span> var5)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="concurrent-包"><a href="#concurrent-包" class="headerlink" title="concurrent 包"></a>concurrent 包</h4><h4 id="附：AtomicInteger"><a href="#附：AtomicInteger" class="headerlink" title="附：AtomicInteger"></a>附：AtomicInteger</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">AtomicInteger i = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 获取并自增（i = 0, 结果 i = 1, 返回 0），类似于 i++</span></span><br><span class="line">System.out.println(i.getAndIncrement());</span><br><span class="line"><span class="comment">// 自增并获取（i = 1, 结果 i = 2, 返回 2），类似于 ++i</span></span><br><span class="line">System.out.println(i.incrementAndGet());</span><br><span class="line"><span class="comment">// 自减并获取（i = 2, 结果 i = 1, 返回 1），类似于 --i</span></span><br><span class="line">System.out.println(i.decrementAndGet());</span><br><span class="line"><span class="comment">// 获取并自减（i = 1, 结果 i = 0, 返回 1），类似于 i--</span></span><br><span class="line">System.out.println(i.getAndDecrement());</span><br><span class="line"><span class="comment">// 获取并加值（i = 0, 结果 i = 5, 返回 0）</span></span><br><span class="line">System.out.println(i.getAndAdd(<span class="number">5</span>));</span><br><span class="line"><span class="comment">// 加值并获取（i = 5, 结果 i = 0, 返回 0）</span></span><br><span class="line">System.out.println(i.addAndGet(-<span class="number">5</span>));</span><br><span class="line"><span class="comment">// 获取并更新（i = 0, p 为 i 的当前值, 结果 i = -2, 返回 0）</span></span><br><span class="line"><span class="comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span></span><br><span class="line">System.out.println(i.getAndUpdate(p -&gt; p - <span class="number">2</span>));</span><br><span class="line"><span class="comment">// 更新并获取（i = -2, p 为 i 的当前值, 结果 i = 0, 返回 0）</span></span><br><span class="line"><span class="comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span></span><br><span class="line">System.out.println(i.updateAndGet(p -&gt; p + <span class="number">2</span>));</span><br><span class="line"><span class="comment">// 获取并计算（i = 0, p 为 i 的当前值, x 为参数1, 结果 i = 10, 返回 0）</span></span><br><span class="line"><span class="comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span></span><br><span class="line"><span class="comment">// getAndUpdate 如果在 lambda 中引用了外部的局部变量，要保证该局部变量是 final 的</span></span><br><span class="line"><span class="comment">// getAndAccumulate 可以通过 参数1 来引用外部的局部变量，但因为其不在 lambda 中因此不必是 final</span></span><br><span class="line">System.out.println(i.getAndAccumulate(<span class="number">10</span>, (p, x) -&gt; p + x));</span><br><span class="line"><span class="comment">// 计算并获取（i = 10, p 为 i 的当前值, x 为参数1, 结果 i = 0, 返回 0）</span></span><br><span class="line"><span class="comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span></span><br><span class="line">System.out.println(i.accumulateAndGet(-<span class="number">10</span>, (p, x) -&gt; p + x));</span><br></pre></td></tr></table></figure><h4 id="附：Unsafe-类"><a href="#附：Unsafe-类" class="headerlink" title="附：Unsafe 类"></a>附：Unsafe 类</h4><p><code>Unsafe</code> 类是 CAS 的核心类，由于 Java 方法无法直接访问底层系统，需要通过本地（<code>native</code>）方法来访问，<code>Unsafe</code> 类相当于一个后门，基于该类可以直接操作特定内存的数据。</p><p><code>Unsafe</code> 类存在于 sum.misc 包中，其内部方法操作可以像 C 的指针一样直接操作内存。Java 中 CAS 操作的执行都依赖于 <code>Unsafe</code> 类方法。</p><blockquote><p>注意 Unsafe 类中的所有方法都是 native 修饰的，也就是说 Unsafe 类中的方法都直接调用操作系统底层资源执行相应任务。</p></blockquote><p><code>Unsafe</code> 类提供了硬件级别的原子操作，主要提供了以下功能：</p><ol><li><p>通过 <code>Unsafe</code> 类可以分配内存，可以释放内存；</p></li><li><p>可以定位对象某字段的内存位置，也可以修改对象的字段值，即使它是私有的；</p></li><li><p>挂起与恢复；</p></li><li><p>CAS 操作；</p></li></ol><h4 id="分配和释放内存"><a href="#分配和释放内存" class="headerlink" title="分配和释放内存"></a>分配和释放内存</h4><p>类中提供的 3 个本地方法 <code>allocateMemory</code>、<code>reallocateMemory</code>、<code>freeMemory</code> 分别用于分配内存，扩充内存和释放内存，与 C 语言中的 3 个方法对应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">allocateMemory</span><span class="params">(<span class="keyword">long</span> l)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">reallocateMemory</span><span class="params">(<span class="keyword">long</span> l, <span class="keyword">long</span> l1)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">freeMemory</span><span class="params">(<span class="keyword">long</span> l)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="定位对象某字段的内存位置、修改对象的字段值"><a href="#定位对象某字段的内存位置、修改对象的字段值" class="headerlink" title="定位对象某字段的内存位置、修改对象的字段值"></a>定位对象某字段的内存位置、修改对象的字段值</h4><ol><li><p>字段的定位<br>Java 中对象的字段的定位可能通过 <code>staticFieldOffset</code> 方法实现，该方法返回给定 field 的内存地址偏移量，这个值对于给定的 filed 是唯一的且是固定不变的。</p><p><code>getLong</code> 方法获取对象中 offset 偏移地址对应的 <code>long</code> 型 field 的值。</p><p><code>getIntVolatile</code> 方法获取对象中 offset 偏移地址对应的整型 field 的值，支持 volatile load 语义。</p></li><li><p>数组元素定位<br><code>Unsafe</code> 类中有很多以 BASE_OFFSET 结尾的常量，比如 ARRAY_INT_BASE_OFFSET，ARRAY_BYTE_BASE_OFFSET 等，这些常量值是通过 <code>arrayBaseOffset</code> 方法得到的。</p><p><code>arrayBaseOffset</code> 方法是一个本地方法，可以获取数组第一个元素的偏移地址。</p><p><code>Unsafe</code> 类中还有很多以 <code>INDEX_SCALE</code> 结尾的常量，比如 ARRAY_INT_INDEX_SCALE ， ARRAY_BYTE_INDEX_SCALE等，这些常量值是通过arrayIndexScale方法得到的。</p><p><code>arrayIndexScale</code> 方法也是一个本地方法，可以获取数组的转换因子，也就是数组中元素的增量地址。</p><p><code>arrayBaseOffset</code> 与 <code>arrayIndexScale</code> 配合使用，可以定位数组中每个元素在内存中的位置。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Unsafe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ARRAY_INT_BASE_OFFSET;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ARRAY_INT_INDEX_SCALE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">getLong</span><span class="params">(Object obj, <span class="keyword">long</span> l)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span>  <span class="title">getIntVolatile</span><span class="params">(Object obj, <span class="keyword">long</span> l)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">staticFieldOffset</span><span class="params">(Field field)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">arrayBaseOffset</span><span class="params">(Class class1)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">arrayIndexScale</span><span class="params">(Class class1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> </span><br><span class="line">    &#123;</span><br><span class="line">        ARRAY_INT_BASE_OFFSET = theUnsafe.arrayBaseOffset([I);</span><br><span class="line">        ARRAY_INT_INDEX_SCALE = theUnsafe.arrayIndexScale([I);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="挂起与恢复"><a href="#挂起与恢复" class="headerlink" title="挂起与恢复"></a>挂起与恢复</h4><p>将一个线程进行挂起是通过 <code>park</code> 方法实现的，调用 <code>park</code> 后，线程将一直阻塞直到超时或者中断等条件出现。<code>unpark</code> 可以终止一个挂起的线程，使其恢复正常。整个并发框架中对线程的挂起操作被封装在 <code>LockSupport</code> 类中，<code>LockSupport</code> 类中有各种版本 <code>pack</code> 方法，但最终都调用了 <code>Unsafe.park()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockSupport</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unpark</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (thread != <span class="keyword">null</span>)</span><br><span class="line">            unsafe.unpark(thread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">park</span><span class="params">(Object blocker)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        setBlocker(t, blocker);</span><br><span class="line">        unsafe.park(<span class="keyword">false</span>, <span class="number">0L</span>);</span><br><span class="line">        setBlocker(t, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkNanos</span><span class="params">(Object blocker, <span class="keyword">long</span> nanos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nanos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Thread t = Thread.currentThread();</span><br><span class="line">            setBlocker(t, blocker);</span><br><span class="line">            unsafe.park(<span class="keyword">false</span>, nanos);</span><br><span class="line">            setBlocker(t, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkUntil</span><span class="params">(Object blocker, <span class="keyword">long</span> deadline)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        setBlocker(t, blocker);</span><br><span class="line">        unsafe.park(<span class="keyword">true</span>, deadline);</span><br><span class="line">        setBlocker(t, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">park</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        unsafe.park(<span class="keyword">false</span>, <span class="number">0L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkNanos</span><span class="params">(<span class="keyword">long</span> nanos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nanos &gt; <span class="number">0</span>)</span><br><span class="line">            unsafe.park(<span class="keyword">false</span>, nanos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkUntil</span><span class="params">(<span class="keyword">long</span> deadline)</span> </span>&#123;</span><br><span class="line">        unsafe.park(<span class="keyword">true</span>, deadline);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CAS-操作"><a href="#CAS-操作" class="headerlink" title="CAS 操作"></a>CAS 操作</h4><p><code>Unsafe</code> 类的 CAS 操作是通过 <code>compareAndSwapXXX</code> 方法实现的。CAS 操作有 3 个操作数，内存值 M，预期值 E，新值 U，如果 M==E，则将内存值修改为 B，否则啥都不做。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较obj的offset处内存位置中的值和期望的值，如果相同则更新。此更新是不可中断的。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   obj 需要更新的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   offset obj中整型field的偏移量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   expect 希望field中存在的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   update 如果期望值expect与field的当前值相同，设置filed的值为这个新值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  如果field的值被更改返回true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object obj, <span class="keyword">long</span> offset, <span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="附：我们知道-ArrayList-是线程不安全的，请编码写一个不安全的案例并给出解决方案。"><a href="#附：我们知道-ArrayList-是线程不安全的，请编码写一个不安全的案例并给出解决方案。" class="headerlink" title="附：我们知道 ArrayList 是线程不安全的，请编码写一个不安全的案例并给出解决方案。"></a>附：我们知道 ArrayList 是线程不安全的，请编码写一个不安全的案例并给出解决方案。</h4><ol><li>故障现象<br>java.util.ConcurrentModificationException。</li><li>导致原因<br>并发修改导致的，一个线程正在写入，另一个线程过来抢夺，导致数据不一致。</li><li>解决方案<br>new Vector()。<br>Collections.synchronizedList(new ArrayList())。<br>new CopyOnWriteArrayList()。</li><li>优化建议</li><li>衍生：SET、MAP。</li></ol><p>直接使用 ArrayList，会导致异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        list.add(temp);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;, i + <span class="string">""</span>).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">Exception in thread <span class="string">"0"</span> java.util.ConcurrentModificationException</span><br><span class="line">at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:<span class="number">911</span>)</span><br><span class="line">at java.util.ArrayList$Itr.next(ArrayList.java:<span class="number">861</span>)</span><br><span class="line">at java.util.AbstractCollection.toString(AbstractCollection.java:<span class="number">461</span>)</span><br><span class="line">at java.lang.String.valueOf(String.java:<span class="number">3450</span>)</span><br><span class="line">at java.io.PrintStream.println(PrintStream.java:<span class="number">821</span>)</span><br><span class="line">at test4.Demo.lambda$main$<span class="number">0</span>(Demo.java:<span class="number">14</span>)</span><br><span class="line">at test4.Demo$$Lambda$<span class="number">1</span>/<span class="number">000000000000000000</span>.run(Unknown Source)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">823</span>)</span><br></pre></td></tr></table></figure><p>使用 Collections.synchronizedList：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">   <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">         list.add(temp);</span><br><span class="line">         System.out.println(list);</span><br><span class="line">   &#125;, i + <span class="string">""</span>).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>使用 Vector，正常，但是效率慢：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">   <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">         list.add(temp);</span><br><span class="line">         System.out.println(list);</span><br><span class="line">   &#125;, i + <span class="string">""</span>).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>CopyOnWrite 即写时复制的容器。往一个容器添加元素的时候，不直接往当前容器 ojbect[] 添加，而是先将当前容器 object[] 进行 copy，复制出一个新的容器 object[] newElemenets，然后往新的容器里添加元素。添加完元素之后，再将原容器的引用指向新的容器。</p><p>这样做的好处是可以对容器进行并发的读而不需要加锁，因为当前容器不会添加任何元素。所以 CopyOnWrite 容器也是一种读写分离的思想，读和写不同的容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">   <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">         list.add(temp);</span><br><span class="line">         System.out.println(list);</span><br><span class="line">   &#125;, i + <span class="string">""</span>).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>CopyOnWriteArraylist 核心源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">   lock.lock();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      Object[] elements = getArray();</span><br><span class="line">      <span class="keyword">int</span> len = elements.length;</span><br><span class="line">      Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">      newElements[len] = e;</span><br><span class="line">      setArray(newElements);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="CPU-并发原语"><a href="#CPU-并发原语" class="headerlink" title="CPU 并发原语"></a>CPU 并发原语</h4><p>不会。</p><h4 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h4><p><code>AtomicInteger</code> 是一个提供原子操作的 <code>Integer</code> 的类。在 Java 语言中，<code>++i</code> 和 <code>i++</code> 操作并不是线程安全的，在使用的时候，不可避免的会用到 <code>synchronized</code> 关键字。而 <code>AtomicInteger</code> 则通过一种线程安全的加减操作接口。</p><p><code>AtomicInteger</code> 提供了下面几个接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>;                      <span class="comment">//获取当前的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> newValue)</span></span>;    <span class="comment">//获取当前的值，并设置新的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">int</span> delta)</span></span>;       <span class="comment">//获取当前的值，并加上预期的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span></span>;          <span class="comment">//获取当前的值，并自增</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndDecrement</span><span class="params">()</span></span>;          <span class="comment">//获取当前的值，并自减</span></span><br></pre></td></tr></table></figure><p>下面通过两个简单的例子来看一下 <code>AtomicInteger</code> 的优势在哪。</p><p>普通线程同步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 若要线程安全执行执行count++，需要加锁</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      count++; </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>AtomicInteger</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      count.incrementAndGet();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 使用AtomicInteger之后，不需要加锁，也可以实现线程安全。</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> count.get();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>AtomicInteger</code> 是非常的安全的.而且因为 <code>AtomicInteger</code> 由硬件提供原子操作指令实现的。在非激烈竞争的情况下，开销更小，速度更快。</p><h4 id="AtomicReference"><a href="#AtomicReference" class="headerlink" title="AtomicReference"></a>AtomicReference</h4><p>跟 <code>AtomicInteger</code> 类似，里面封装的是一个对象。</p><h4 id="AtomicStampedReference"><a href="#AtomicStampedReference" class="headerlink" title="AtomicStampedReference"></a>AtomicStampedReference</h4><p>由于ABA问题带来的隐患，各种乐观锁的实现中通常都会用版本戳version来对记录或对象标记，避免并发操作带来的问题。在Java中，<code>AtomicStampedReference</code> 也实现了这个作用，它通过包装 <code>[E,Integer]</code> 的元组来对对象标记版本戳 stamp，从而避免 ABA 问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> AtomicStampedReference&lt;Integer&gt; atomicStampedRef = <span class="keyword">new</span> AtomicStampedReference&lt;Integer&gt;(<span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      atomicStampedRef.compareAndSet(<span class="number">100</span>, <span class="number">101</span>, atomicStampedRef.getStamp(), atomicStampedRef.getStamp() + <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 使用AtomicInteger之后，不需要加锁，也可以实现线程安全。</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> count.get();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线程</title>
      <link href="/2020/06/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/06/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="/2020/06/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2020/06/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线程通信</title>
      <link href="/2020/06/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/"/>
      <url>/2020/06/13/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/suifeng3051/article/details/51863010?locationNum=2">https://blog.csdn.net/suifeng3051/article/details/51863010?locationNum=2</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>唯一订单号生成</title>
      <link href="/2020/06/11/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%94%AF%E4%B8%80%E8%AE%A2%E5%8D%95%E5%8F%B7%E7%94%9F%E6%88%90/"/>
      <url>/2020/06/11/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%94%AF%E4%B8%80%E8%AE%A2%E5%8D%95%E5%8F%B7%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2>]]></content>
      
      
      <categories>
          
          <category> 业务汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朋友圈点赞</title>
      <link href="/2020/06/11/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F/%E6%9C%8B%E5%8F%8B%E5%9C%88%E7%82%B9%E8%B5%9E/"/>
      <url>/2020/06/11/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F/%E6%9C%8B%E5%8F%8B%E5%9C%88%E7%82%B9%E8%B5%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h2><p>简单来说，单点登录（SSO）就是在多个系统中，用户只需一次登录，各个系统即可感知该用户已经登录。</p><pre class="mermaid">graph LR    subgraph 订单功能        订单系统一         订单系统二    end    subgraph 登录功能        登录系统一         登录系统二    end    subgraph 物流功能        物流系统一         物流系统二    end    用户 --> 登录系统一    登录系统一 --> 物流系统一</pre>]]></content>
      
      
      <categories>
          
          <category> 业务开发 </category>
          
          <category> 商城系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽奖功能</title>
      <link href="/2020/06/11/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F/%E6%8A%BD%E5%A5%96%E5%8A%9F%E8%83%BD/"/>
      <url>/2020/06/11/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F/%E6%8A%BD%E5%A5%96%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h2><p>简单来说，单点登录（SSO）就是在多个系统中，用户只需一次登录，各个系统即可感知该用户已经登录。</p><pre class="mermaid">graph LR    subgraph 订单功能        订单系统一         订单系统二    end    subgraph 登录功能        登录系统一         登录系统二    end    subgraph 物流功能        物流系统一         物流系统二    end    用户 --> 登录系统一    登录系统一 --> 物流系统一</pre>]]></content>
      
      
      <categories>
          
          <category> 业务开发 </category>
          
          <category> 商城系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Dockerfile 解析</title>
      <link href="/2020/05/30/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Docker%20%E6%95%99%E7%A8%8B/Docker%20Dockerfile%20%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/05/30/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Docker%20%E6%95%99%E7%A8%8B/Docker%20Dockerfile%20%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>是什么、有什么、怎么做、案例、小总结。</p><h2 id="Dockerfile-简介"><a href="#Dockerfile-简介" class="headerlink" title="Dockerfile 简介"></a>Dockerfile 简介</h2><p>Dockerfile 是用来构建 Docker 镜像的构建文件，是由一系列命令和参数构成的脚本。</p><h2 id="Dockerfile-构建过程"><a href="#Dockerfile-构建过程" class="headerlink" title="Dockerfile 构建过程"></a>Dockerfile 构建过程</h2><p>Dockerfile 基础内容知识：</p><ol><li><p>每条保留字指令都必须为大写字母且后面要跟随至少一个参数；</p></li><li><p>指令按照从上到下顺序执行；</p></li><li><p>每条指令都会创建一个新的镜像层，并对镜像进行提交；</p></li></ol><p>Docker 制定 Dockerfile 的大致流程：</p><ol><li><p>Docker 从基础镜像运行一个容器；</p></li><li><p>执行一条指令并对容器作出修改；</p></li><li><p>执行类似 <code>docker commit</code> 的操作提交一个新的镜像层；</p></li><li><p>Docker 再基于刚提交的镜像运行一个新容器；</p></li><li><p>执行 Dockerfile 中的下一条指令直到所有指令都执行完毕；</p></li></ol><p>从应用软件的角度来看，Dockerfile、Docker 镜像与 Docker 容器分别代表软件的三个不通阶段：</p><ol><li><p>Dockerfile 是软件的原材料；</p></li><li><p>Docker 镜像是软件的交付品；</p></li><li><p>Docker 容器则可以认为是软件的运行态；</p></li></ol><p>其中，Dockerfile 是的面向开发的，Docker 镜像成为交付标准，Docker 容器则涉及部署与运维。三者缺一不可，合力充当 Docker 体系的基石：</p><ol><li><p>Dockerfile<br>Dockerfile 定义了进程需要的一切东西。</p><p>Dockerfile 涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链库、操作系统的发行版、服务进程的内核进程（当应用进程需要和系统服务和内容进程打交道时需要考虑如何设计 namspace 的权限控制）等等。</p></li><li><p>Docker 镜像<br>在用 Dockerfile 定义一个文件后，<code>docker build</code> 时会产生一个 Docker 镜像。当运行 Docker 镜像时，会真正开始提供服务。</p></li><li><p>Docker 容器<br>Docker 容器是直接提供服务的。</p></li></ol><p><img src="https://graph.baidu.com/thumb/v4/3968054224,2923627959.jpg" alt=""></p><h2 id="Dockerfile-体系结构"><a href="#Dockerfile-体系结构" class="headerlink" title="Dockerfile 体系结构"></a>Dockerfile 体系结构</h2><p>Dockerfile 常用的保留字指令：</p><ol><li><code>FROM</code><br>基础镜像，当前镜像是基于哪个镜像的。</li><li><code>MAINTAINER</code><br>镜像维护者的姓名和邮箱地址。</li><li><code>RUN</code><br>容器构建的时候运行运行的命令。</li><li><code>EXPOSE</code><br>当前容器对外暴露出的端口。</li><li><code>WORKDIR</code><br>指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点。</li><li><code>ENV</code><br>用来在构建镜像过程中设置环境变量。</li><li><code>ADD</code><br>将宿主机目录下的文件拷贝进镜像且自动处理 URL 和解压 tar 压缩包。</li><li><code>COPY</code><br>将宿主机目录下的文件拷贝进镜像。</li><li><code>VOLUME</code><br>容器数据卷，用于数据保存和持久化工作。</li><li><p><code>CMD</code><br>指定一个容器启动时要运行的命令。</p><p>Dockerfile 中可以有多个 <code>CMD</code> 指令，但只有最后一个生效。且 <code>CMD</code> 会被 <code>docker run</code> 之后的参数替换。</p></li><li><p><code>ENTRYPOINT</code><br>和 <code>CMD</code> 类似，唯一的区别是，<code>CMD</code> 会被 <code>docker run</code> 之后的参数替换，而 <code>ENTRYPOINT</code> 则是追加形式。</p></li><li><p><code>ONEBUILD</code><br>当构建一个带继承的 Dockerfile 时，被继承的 <code>Dockerfile</code> 会触发 <code>onbuild</code> 命令。</p></li></ol><h2 id="Dockerfile-总结"><a href="#Dockerfile-总结" class="headerlink" title="Dockerfile 总结"></a>Dockerfile 总结</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># base 镜像。</span></span><br><span class="line"><span class="comment"># Docker Hub 中 99% 的镜像都是通过在 base 镜像中安装和配置需要的软件构建出来的。</span></span><br><span class="line"><span class="keyword">FROM</span> scrath</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> cento-7-docker.tar.xz /</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">LABEL</span></span><br></pre></td></tr></table></figure><h2 id="附：构建自定义-Centos"><a href="#附：构建自定义-Centos" class="headerlink" title="附：构建自定义 Centos"></a>附：构建自定义 Centos</h2><p>为什么需要自定义 Centos 镜像？</p><ol><li>初始 Centos 默认路径是 <code>/</code>。</li><li>初始 Centos 默认不支持 vim。</li><li>初始 Centos 默认不支持 ifconfig；</li></ol><p>自定义 Centos 目的是使得我们自己的镜像具备以下功能：</p><ol><li>默认路径是 <code>/tmp</code>；</li><li>支持 vim。</li><li>支持 ifconfig；</li></ol><p>编写 Dockerfile 文件：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 基于 centos 构建</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 配置作者信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> zhangqinghua&lt;the.patron.saint.of.science@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 定义环境变量：默认工作路径</span></span><br><span class="line"><span class="keyword">ENV</span> path /tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 安装 vim 和 ifconfig</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y vim &amp;&amp; yum install -y net-tools</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 5. 暴露出 80 端口，这里没什么用（没有 Tomcat 或 Nginx 服务）</span></span></span><br><span class="line"><span class="bash">EXPOSE 80</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 6. 设置工作路径</span></span></span><br><span class="line"><span class="bash">WORKDIR <span class="variable">$path</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 7. 进入打开 bash</span></span></span><br><span class="line"><span class="bash">CMD /bin/bash</span></span><br></pre></td></tr></table></figure><p>构建 Dockerfile 生成镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker build -f 文件名 -t 镜像名:TAG .</span></span><br><span class="line">zhangqinghua$ docker build -f centos_dockerfile -t mycentos:1.03 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/8 : FROM daocloud.io/centos:latest</span><br><span class="line">...</span><br><span class="line">Removing intermediate container b823edba81f4</span><br><span class="line"> ---&gt; 6c0da28e0bde</span><br><span class="line">Successfully built 6c0da28e0bde</span><br><span class="line">Successfully tagged mycentos:1.03</span><br><span class="line"></span><br><span class="line">zhangqinghua$ docker images</span><br><span class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mycentos                    1.03                6c0da28e0bde        50 seconds ago      291MB</span><br><span class="line">daocloud.io/library/mysql   latest              c8562eaf9d81        3 weeks ago         546MB</span><br><span class="line">daocloud.io/centos          latest              300e315adb2f        2 months ago        209MB</span><br></pre></td></tr></table></figure><p>运行镜像并进入容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker run -it mycentos:1.03</span><br><span class="line"><span class="comment"># 已经进行容器内部了</span></span><br><span class="line">[root@7a724202b2eb tmp]<span class="comment"># pwd</span></span><br><span class="line">/tmp</span><br><span class="line"><span class="comment"># 退出并停止容器</span></span><br><span class="line">[root@7a724202b2eb tmp]<span class="comment"># exit </span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">zhangqinghua$</span><br></pre></td></tr></table></figure><p>列出镜像的变更历史：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker <span class="built_in">history</span> 3bf3cfd1ea86</span><br><span class="line">IMAGE               CREATED              CREATED BY                                      SIZE                COMMENT</span><br><span class="line">3bf3cfd1ea86        About a minute ago   /bin/sh -c <span class="comment">#(nop)  CMD ["/bin/sh" "-c" "/bin…   0B                  </span></span><br><span class="line">07a9dda7087a        About a minute ago   /bin/sh -c <span class="comment">#(nop) WORKDIR /tmp                  0B                  </span></span><br><span class="line">db9117cd3073        About a minute ago   /bin/sh -c <span class="comment">#(nop)  EXPOSE 80                    0B                  </span></span><br><span class="line">2c87c6827d2b        About a minute ago   /bin/sh -c yum install -y vim &amp;&amp; yum install…   58.9MB              </span><br><span class="line">58fd6b93f93a        2 minutes ago        /bin/sh -c <span class="comment">#(nop)  ENV path=/tmp                0B                  </span></span><br><span class="line">485ed4774bf3        2 minutes ago        /bin/sh -c <span class="comment">#(nop)  MAINTAINER zhangqinghua&lt;t…   0B                  </span></span><br><span class="line">300e315adb2f        2 months ago         /bin/sh -c <span class="comment">#(nop)  CMD ["/bin/bash"]            0B                  </span></span><br><span class="line">&lt;missing&gt;           2 months ago         /bin/sh -c <span class="comment">#(nop)  LABEL org.label-schema.sc…   0B                  </span></span><br><span class="line">&lt;missing&gt;           2 months ago         /bin/sh -c <span class="comment">#(nop) ADD file:bd7a2aed6ede423b7…   209MB</span></span><br></pre></td></tr></table></figure><h2 id="附：构建自定义-Centos，使用-ENTRYPOINT-指令"><a href="#附：构建自定义-Centos，使用-ENTRYPOINT-指令" class="headerlink" title="附：构建自定义 Centos，使用 ENTRYPOINT 指令"></a>附：构建自定义 Centos，使用 ENTRYPOINT 指令</h2><h2 id="腹：构建自定义-Tomcat"><a href="#腹：构建自定义-Tomcat" class="headerlink" title="腹：构建自定义 Tomcat"></a>腹：构建自定义 Tomcat</h2><p>Dockerfile 文件的内容如下： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">FROM ccc7a11d65b1     （这串数字是我已经创建好一个ubuntu镜像的镜像id，在这里作为tomcat的基础镜像</span><br><span class="line">MAINTAINER hmk</span><br><span class="line">ENV REFRESHED_AT 2018-03-10  （这个环境变量用来表名该镜像模板的最后更新时间）</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换镜像目录，进入/usr目录</span></span><br><span class="line">WORKDIR /usr</span><br><span class="line"><span class="comment">#在/usr/下创建jdk目录,用来存放jdk文件</span></span><br><span class="line">RUN mkdir jdk</span><br><span class="line"><span class="comment">#在/usr/下创建tomcat目录，用来存放tomcat</span></span><br><span class="line">RUN mkdir tomcat</span><br><span class="line"></span><br><span class="line"><span class="comment">#将宿主机的jdk目录下的文件拷至镜像的/usr/jdk目录下</span></span><br><span class="line">ADD jdk1.8.0_131 /usr/jdk/</span><br><span class="line"><span class="comment">#将宿主机的tomcat目录下的文件拷至镜像的/usr/tomcat目录下</span></span><br><span class="line">ADD apache-tomcat-7.0.81 /usr/tomcat/</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置环境变量</span></span><br><span class="line">ENV JAVA_HOME=/usr/jdk</span><br><span class="line">ENV JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line">ENV CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line">ENV PATH=/sbin:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#公开端口</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line"><span class="comment">#设置启动命令</span></span><br><span class="line">ENTRYPOINT [<span class="string">"/usr/tomcat/bin/catalina.sh"</span>,<span class="string">"run"</span>]</span><br></pre></td></tr></table></figure><p>构建镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker build -t jamtur01/tomcat .</span><br></pre></td></tr></table></figure><p>通过创建好的镜像，启动一个容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker run -d -p 8080:8080 --name hmk_tomcat jamtur01/tomcat:latest</span><br></pre></td></tr></table></figure><p>使用 <code>-v</code> 参数将 war 包挂载至容器内的 <code>tomcat/webapps</code> 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ docker run -d -p 8080:8080 </span><br><span class="line">                         -v /HMK/helloword/webapps/HelloWorld.war:/usr/tomcat/webapps/HelloWorld.war </span><br><span class="line">                         --name hmk_tomcat jamtur01/tomcat</span><br></pre></td></tr></table></figure><h2 id="附：常见错误"><a href="#附：常见错误" class="headerlink" title="附：常见错误"></a>附：常见错误</h2><p><strong>构建时出现：Error response from daemon: No build stage in current context</strong><br>原因：<code>FROM</code> 指令没有放在最前面。<br>解决：<code>FROM</code> 指令放在最前面。</p>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Docker 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker Dockerfile</title>
      <link href="/2020/05/30/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Docker%20%E6%95%99%E7%A8%8B/Docker%20File/"/>
      <url>/2020/05/30/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Docker%20%E6%95%99%E7%A8%8B/Docker%20File/</url>
      
        <content type="html"><![CDATA[<p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h5 id="使用-Docker-部署-Spring-Boot"><a href="#使用-Docker-部署-Spring-Boot" class="headerlink" title="使用 Docker 部署 Spring Boot"></a>使用 Docker 部署 Spring Boot</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示使用 Jdk8 环境 为基础镜像，如果镜像不是本地的会从 DockerHub 进行下载</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指向了一个/tmp的目录，由于 Spring Boot 使用内置的Tomcat容器，Tomcat 默认使用/tmp作为工作目录。这个命令的效果是：在宿主机的/var/lib/docker目录下创建一个临时文件并把它链接到容器中的/tmp目录</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 拷贝文件并且重命名</span></span></span><br><span class="line"><span class="bash">ADD spring-boot-docker-1.0.jar app.jar</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 为了缩短 Tomcat 的启动时间，添加java.security.egd的系统属性指向/dev/urandom作为 ENTRYPOINT</span></span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Docker 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 命令大全</title>
      <link href="/2020/05/30/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Docker%20%E6%95%99%E7%A8%8B/Docker%20%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2020/05/30/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Docker%20%E6%95%99%E7%A8%8B/Docker%20%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="进入-Docker"><a href="#进入-Docker" class="headerlink" title="进入 Docker"></a>进入 Docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">exec</span> -it 775c7c9ee1e1 /bin/bash</span><br></pre></td></tr></table></figure><h4 id="查看-Docker-挂载目录"><a href="#查看-Docker-挂载目录" class="headerlink" title="查看 Docker 挂载目录"></a>查看 Docker 挂载目录</h4>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Docker 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见问题</title>
      <link href="/2020/05/30/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/30/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ol><li>IP能访问80、443端口，域名无法访问。<br> 用域名+80端口访问，会提示没有备案。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Nginx 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis LRU 算法</title>
      <link href="/2020/05/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/Redis%20%E6%95%99%E7%A8%8B/Redis%20LRU%20%E7%AE%97%E6%B3%95/"/>
      <url>/2020/05/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/Redis%20%E6%95%99%E7%A8%8B/Redis%20LRU%20%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>是什么、有什么、怎么用、为什么。</p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> Redis 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 常用命令</title>
      <link href="/2020/05/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/Redis%20%E6%95%99%E7%A8%8B/Redis%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/05/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/Redis%20%E6%95%99%E7%A8%8B/Redis%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h2 id="数据类型命令"><a href="#数据类型命令" class="headerlink" title="数据类型命令"></a>数据类型命令</h2><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 1. 添加值</span><br><span class="line">set key value</span><br><span class="line"></span><br><span class="line"># 2. 取值</span><br><span class="line">get key</span><br><span class="line"></span><br><span class="line"># 3. 批量操作</span><br><span class="line">mset name zhangsan age 18</span><br><span class="line">mget name age</span><br><span class="line"></span><br><span class="line"># 4. 自增自减一</span><br><span class="line">incr age</span><br><span class="line">decr age</span><br><span class="line"></span><br><span class="line"># 5. 自增自减指定数量</span><br><span class="line">incrby age 2</span><br><span class="line">decrby age 2</span><br><span class="line"></span><br><span class="line"># 6. 设置值的同时，指定生存空间</span><br><span class="line">setex age second 10</span><br><span class="line"></span><br><span class="line"># 7. 设置值，如果当前 key 不存在的话</span><br><span class="line">setnx age 19</span><br><span class="line"></span><br><span class="line"># 8. 在 key 对应的 value 后面追加内存</span><br><span class="line">append name lisi</span><br><span class="line"></span><br><span class="line"># 9. 查看 value 字符串的长度</span><br><span class="line">strlen name</span><br></pre></td></tr></table></figure><h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 1. 存储数据</span><br><span class="line">hset person name zhangsan</span><br><span class="line">hset person age  18</span><br><span class="line"></span><br><span class="line"># 2. 获取数据</span><br><span class="line">hget person name</span><br><span class="line"></span><br><span class="line"># 3. 批量操作</span><br><span class="line">hmset person name zhangsan person age 18</span><br><span class="line">hmget person name person age</span><br><span class="line"></span><br><span class="line"># 4. 自增指定数量</span><br><span class="line">hincrby person age 1</span><br><span class="line"></span><br><span class="line"># 5. 设置值，如果 key field 不存在</span><br><span class="line">hsetnx person age 18</span><br><span class="line"></span><br><span class="line"># 6. 检查 field 是否存在</span><br><span class="line">hexists person age</span><br><span class="line"></span><br><span class="line"># 7. 删除 key 下面的一个或多个 field</span><br><span class="line">hdel pseron name age</span><br><span class="line"></span><br><span class="line"># 8. 获取当前hash结构中的全部field和值</span><br><span class="line">hgetall person</span><br><span class="line"></span><br><span class="line"># 9. 获取当前hash结构中的全部field</span><br><span class="line">hkeys person</span><br><span class="line"></span><br><span class="line"># 10. 获取当前hash结构中的全部值</span><br><span class="line">hvals person</span><br><span class="line"></span><br><span class="line"># 11. 获取当前hash结构中的field数量</span><br><span class="line">hlen person</span><br></pre></td></tr></table></figure><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 1. 存储数据（从左侧插入数据，从右侧插入数据）</span><br><span class="line">lpush names zhangsan lisi wangwu</span><br><span class="line">rpush names zhangsan lisi wangwu</span><br><span class="line"></span><br><span class="line"># 2. 存储数据（如果key不存在，什么事都不做。如果key存在，但是不是lsit结构，什么都不做）</span><br><span class="line">lpushx names zhangsan lisi wangwu</span><br><span class="line">rpsuhx names zhangsan lisi wangwu</span><br><span class="line"></span><br><span class="line"># 3. 修改数据（在存储数据时，指定好你的索引位置，覆盖之前的索引位置的数据，index超过整个列表的长度，也会失败）</span><br><span class="line">lset names 1 lisi2</span><br><span class="line"></span><br><span class="line"># 4. 弹栈方式获取数据（左侧弹出数据，右侧弹出数据）</span><br><span class="line">lpop names</span><br><span class="line">rpop names</span><br><span class="line"></span><br><span class="line"># 5. 获取整个列表的长度</span><br><span class="line">llen names</span><br><span class="line"></span><br><span class="line"># 6. 获取指定索引位置的数据</span><br><span class="line">lindex names 1</span><br><span class="line"></span><br><span class="line"># 7. 获取指定范围的数据（从 0 开始，-1 表示最后一个，-2 表示倒数第二个）</span><br><span class="line">lrange name 0 3</span><br><span class="line"></span><br><span class="line"># 8. 删除列表中的数据（删除指定数量的value，count &gt; 0 从左侧向右删除。count &lt; 0 从右侧向左侧删除。count == 0 删除所有数据）</span><br><span class="line">lrem  names  3 value</span><br><span class="line">lrem  names -3 value</span><br><span class="line">lrem  names  0 value</span><br><span class="line"></span><br><span class="line"># 9. 保留列表中的数据（保留指定索引范围内的数据，超过此范围的数据将被删除）</span><br><span class="line">ltrim names 0 3</span><br><span class="line"></span><br><span class="line"># 10. 将一个列表中最后的一个数据，插入到另外一个列表的头部位置</span><br><span class="line">rpoplpush name1s name2s</span><br></pre></td></tr></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 1. 存储数据</span><br><span class="line">sadd names zhangsan lisi wangwu</span><br><span class="line"></span><br><span class="line"># 2. 获取数据（获取全部数据）</span><br><span class="line">smembers names</span><br><span class="line"></span><br><span class="line"># 3. 获取数据（随机获取 n 个数据的同时，移除数据）</span><br><span class="line">spop names 3</span><br><span class="line"></span><br><span class="line"># 4. 交集（取多个set集合交集）</span><br><span class="line">sinter name1s name2s</span><br><span class="line"></span><br><span class="line"># 5. 并集（获取全部集合中的数据）</span><br><span class="line">sunion name1s name2s</span><br><span class="line"></span><br><span class="line"># 6. 差集（获取多个集合中不一样的数据）</span><br><span class="line">sdiff name1s name2s</span><br><span class="line"></span><br><span class="line"># 7. 删除数据</span><br><span class="line">srem names zhangsan</span><br><span class="line"></span><br><span class="line"># 8. 查看当前set集合中是否包含这个值</span><br><span class="line">sismember names zhangsan</span><br></pre></td></tr></table></figure><h4 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 1. 添加数据（score必须是数值，member不允许重复）</span><br><span class="line">zadd names 10 zhangsan 11 lisi</span><br><span class="line"></span><br><span class="line"># 2. 修改member的分数（如果member是存在于key中的，正常增加分数。如果不存在，这个命令相当于zadd）</span><br><span class="line">zincrby names 5 zhangsan</span><br><span class="line"></span><br><span class="line"># 3. 查看指定的member的分数</span><br><span class="line">zscore names zhangsan</span><br><span class="line"></span><br><span class="line"># 4. 获取zset中的数据的数量</span><br><span class="line">zcard names</span><br><span class="line"></span><br><span class="line"># 5. 根据score的范围查询member数量</span><br><span class="line">zcount names 10 99</span><br><span class="line"></span><br><span class="line"># 6. 删除zset中的成员</span><br><span class="line">zrem names zhangsan lisi</span><br><span class="line"></span><br><span class="line"># 7. 根据分数从小到打排序，获取指定范围内的数据（withscores 如果添加这个参数，那么会返回member对应的分数）</span><br><span class="line">zrange names 0 10</span><br><span class="line">zrange names 0 10 withscores</span><br><span class="line"></span><br><span class="line"># 8. 根据分数从打到小排序，获取指定范围内的数据（withscores 如果添加这个参数，那么会返回member对应的分数）</span><br><span class="line">zrevrage names 0 10 </span><br><span class="line">zrevrage names 0 10 withscores</span><br><span class="line"></span><br><span class="line"># 9. 根据分数的范围取获取member（添加limt，就和MySQL中的limit一样，括号表示 &gt; 0 的意识，不包含0）</span><br><span class="line">zrangebyscore names 0 10 </span><br><span class="line">zrangebyscore names 0 10 withscores</span><br><span class="line">zrangebyscore names 0 10 withscores limit 0 10</span><br><span class="line">zrangebyscore names (0 10 withscores limit 0 10</span><br><span class="line"></span><br><span class="line"># 9. 根据最小的分数、最大的分数取获取member（添加limt，就和MySQL中的limit一样）</span><br><span class="line">zrangebyscore names +inf -inf withscores limit 0 10</span><br></pre></td></tr></table></figure><p><img src="https://www.ofcoder.com/images/middleware/redis_zset_1.png" alt=""></p><h2 id="key-的常用命令"><a href="#key-的常用命令" class="headerlink" title="key 的常用命令"></a>key 的常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 1. 查看 Redis 中的全部 key（pattern：*、xxx*、*xxxx）</span><br><span class="line">key *</span><br><span class="line">key name*</span><br><span class="line">key *name</span><br><span class="line"></span><br><span class="line"># 2. 查看某一个key是否存在（1 存在 0 不存在）</span><br><span class="line">exists name</span><br><span class="line"></span><br><span class="line"># 3. 删除key</span><br><span class="line">del name</span><br><span class="line">del name1 name2</span><br><span class="line"></span><br><span class="line"># 4. 设置key的生存时间（秒、毫秒）</span><br><span class="line">expire  name 10</span><br><span class="line">pexpire name milliseconds 10000</span><br><span class="line"></span><br><span class="line"># 5. 设置key的截止时间（秒、毫秒）（时间戳）</span><br><span class="line">expireat  name 1010100101</span><br><span class="line">pexpireat name 1010100101000</span><br><span class="line"></span><br><span class="line"># 6. 查看key的剩余生存时间（秒、毫秒）（-2 key不存在 -1 key 没有设置生存时间）</span><br><span class="line">ttl  name</span><br><span class="line">pttl name</span><br><span class="line"></span><br><span class="line"># 7. 移除key的生存时间（1 移除生存 0 key不存在或没有设置生存时间）</span><br><span class="line">persist name</span><br></pre></td></tr></table></figure><h2 id="持久化命令"><a href="#持久化命令" class="headerlink" title="持久化命令"></a>持久化命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> Redis 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 持久化</title>
      <link href="/2020/05/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/Redis%20%E6%95%99%E7%A8%8B/Redis%20%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2020/05/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/Redis%20%E6%95%99%E7%A8%8B/Redis%20%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>是什么、有什么、怎么用、为什么。</p><h2 id="持久化简介"><a href="#持久化简介" class="headerlink" title="持久化简介"></a>持久化简介</h2><h2 id="RDB-持久化"><a href="#RDB-持久化" class="headerlink" title="RDB 持久化"></a>RDB 持久化</h2><p>RDB 是在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行说讲的 Snapshot 快照，它恢复时是将快照文件直接读到内存中。</p><p>Redis 会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程不进行任何 IO 操作的，这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加高效。RDB 的缺点是最后一次持久化后的数据可能丢失。</p><p>Fork 的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程。</p><p>RDB 保存的是 dump.db 文件，存储于 Redis 的根目录。</p><h4 id="RDB-的策略"><a href="#RDB-的策略" class="headerlink" title="RDB 的策略"></a>RDB 的策略</h4><p>Redis RDB 持久化的触发条件有以下：</p><ol><li>Redis shutdown；</li><li>Redis 执行 <code>save</code> 或者 <code>bgsave</code> 命令；</li><li>符合配置文件的其中一个条件；</li></ol><p>save 命令只管保存，其它不管，全部阻塞。bgsave 命令 Redis 会在后台异步进行快照操作，同时还可以响应客户端请求。可以通过 lastsave 命令获取最后一次成功执行快照的时间。</p><p>默认持久化配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900          # 900 秒内改动一次，就触发持久化。</span><br><span class="line">save 300 10       # 300 秒内改动一次，就触发持久化</span><br><span class="line">save 60  10000    # 60  秒内改动一次，就触发持久化</span><br></pre></td></tr></table></figure><p>如果需要禁用持久化，只需要加上以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save &quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="RDB-的恢复"><a href="#RDB-的恢复" class="headerlink" title="RDB 的恢复"></a>RDB 的恢复</h4><p>在配置文件加上以下的配置后，Redis 重启会从安装目录寻找 dump.rdb 文件进行恢复。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Redis 重启启动后，会从安装目录寻找 dump.rdb 文件进行恢复。</p><blockquote><p>注意，Redis shutdown 之后会立即备份数据，把原来备份的 dump.rdb 给覆盖掉。</p></blockquote><h4 id="RDB-的其它配置"><a href="#RDB-的其它配置" class="headerlink" title="RDB 的其它配置"></a>RDB 的其它配置</h4><p><code>stop-writes-on-bgsave-error</code> 当备份出错时是否停止写入。如果设置为 yes 那么当持久化是出现异常，比如磁盘满了，那么 Redis 就会抛出以下异常并拒绝新的写入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redis is configured to save RDB snapshots, but is currently not able to persist on disk.</span><br></pre></td></tr></table></figure><p>也就是说，它认为，你当下，持久化数据出现了问题，你就不要再 set 啦。</p><p>如果设置为 no，表示你不在乎数据不一致或者有其它的手段发现和控制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop-writes-on-bgsave-error yes</span><br></pre></td></tr></table></figure><p><code>rdbcompression</code> 对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的化，Redis 会采用 LZF 算法进行压缩。如果你不想消耗 CPU 来进行压缩的化，可以设置关闭此功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdbcompression yes</span><br></pre></td></tr></table></figure><p><code>rdbchecksum</code> 在存储快照后，还可以让 Redis 使用 CRC64 算法来进行数据校验，但是这样做会增加大约 10% 的性能消耗。如果希望获取最大的性能提升，可以关闭此功能。  </p><h2 id="两种备份方式的对比"><a href="#两种备份方式的对比" class="headerlink" title="两种备份方式的对比"></a>两种备份方式的对比</h2><h2 id="Snapshot-快照"><a href="#Snapshot-快照" class="headerlink" title="Snapshot 快照"></a>Snapshot 快照</h2><p>只要符合其中一个条件，就触发持久化。</p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> Redis 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 数据类型</title>
      <link href="/2020/05/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/Redis%20%E6%95%99%E7%A8%8B/Redis%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/05/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/Redis%20%E6%95%99%E7%A8%8B/Redis%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="常用的-5-种数据结构"><a href="#常用的-5-种数据结构" class="headerlink" title="常用的 5 种数据结构"></a>常用的 5 种数据结构</h2><p>key-string;<br>一个 key 对应一个值。</p><p>key-hash<br>一个 key 对应一个 Map。<br>一般用来存储一个对象，比如一个 person。 </p><p>key-list<br>一个key对应一个列表<br>使用list实现队列和栈结构。</p><p>key-set<br>一个key对应一个集合</p><p>存储交集、差集和并集的操作。</p><p>key-zset<br>一个key对应一个有序的集合。</p><p>排行榜、积分存储等操作。</p><p><img src="https://th.bing.com/th/id/Rba80f21985a0afb426d5cb7a7e8bed8f?rik=%2biFt%2bXzyYrrCvQ&amp;riu=http%3a%2f%2fwww.runoob.com%2fwp-content%2fuploads%2f2018%2f05%2fredis-data-structure-types.jpeg&amp;ehk=QTIn%2bCgaY1enG9YBtkYWpyvQ2uNS4Z9wdkdqqVPy2fQ%3d&amp;risl=&amp;pid=ImgRaw" alt=""></p><h2 id="另外-3-种数据结构"><a href="#另外-3-种数据结构" class="headerlink" title="另外 3 种数据结构"></a>另外 3 种数据结构</h2><p>HyperLogLog<br>用来计算近似值的。</p><p>GEO<br>地址位置，经纬度</p><p>BIT<br>一般存储的也是一个字符串，存储的是一个 byte[]。</p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> Redis 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 淘汰策略</title>
      <link href="/2020/05/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/Redis%20%E6%95%99%E7%A8%8B/Redis%20%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/"/>
      <url>/2020/05/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/Redis%20%E6%95%99%E7%A8%8B/Redis%20%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>是什么、有什么、怎么用、为什么。</p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> Redis 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 简介</title>
      <link href="/2020/05/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/Redis%20%E6%95%99%E7%A8%8B/Redis%20%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/05/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/Redis%20%E6%95%99%E7%A8%8B/Redis%20%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>是什么、有什么、怎么用、为什么。</p><h2 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h2><h2 id="Redis-基本使用"><a href="#Redis-基本使用" class="headerlink" title="Redis 基本使用"></a>Redis 基本使用</h2><h2 id="Redis-横向比较"><a href="#Redis-横向比较" class="headerlink" title="Redis 横向比较"></a>Redis 横向比较</h2><p>Redis与Memcached的区别:</p><ol><li><p>共同点<br>Redis 和 Memcache 都是将数据存放在内存中，都是内存数据库。</p></li><li><p>存储内容<br>Redis 只能存储数据，Memcache 可以存储数据、图片、视频等。</p><p>Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 list，set，hash 等数据结构的存储。</p></li><li><p>数据结构<br>Redis 在数据支持上要比 Memecache 多的多。 </p></li><li><p>数据安全<br>Redis 支持持久化，定期保存到磁盘（持久化） 。</p><p>Redis支持数据的备份，即master-slave模式的数据备份。</p><p>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</p><p>Memecache 数据只存储在硬盘上，一段挂掉无法恢复。</p></li><li><p>性能区别<br>性能上都很出色，具体到细节，由于Redis只使用单核，而Memcached可以使用多核，所以平均每一个核上Redis在存储小数据时比 </p><p>Memcached性能更高。而在100k以上的数据中，Memcached性能要高于Redis，虽然Redis最近也在存储大数据的性能上进行优化，但是比起 Memcached，还是稍有逊色。</p></li></ol><h2 id="Redis-底层原理"><a href="#Redis-底层原理" class="headerlink" title="Redis 底层原理"></a>Redis 底层原理</h2><h2 id="Redis-应用场景"><a href="#Redis-应用场景" class="headerlink" title="Redis 应用场景"></a>Redis 应用场景</h2><ol><li><p>缓存热数据<br>热点数据（经常会被查询，但是不经常被修改或者删除的数据），首选是使用redis缓存，毕竟强大到冒泡的QPS和极强的稳定性不是所有类似工具都有的，而且相比于memcached还提供了丰富的数据类型可以使用，另外，内存中的数据也提供了AOF和RDB等持久化机制可以选择，要冷、热的还是忽冷忽热的都可选。</p></li><li><p>计数器<br>诸如统计点击数等应用。由于单线程，可以避免并发问题，保证不会出错，而且100%毫秒级性能！爽。</p></li><li><p>队列<br>相当于消息系统，ActiveMQ，RocketMQ等工具类似，但是个人觉得简单用一下还行，如果对于数据一致性要求高的话还是用RocketMQ等专业系统。</p><p>由于 Redis 把数据添加到队列是返回添加元素在队列的第几位，所以可以做判断用户是第几个访问这种业务</p><p>队列不仅可以把并发请求变成串行，并且还可以做队列或者栈使用</p></li><li><p>分布式锁<br>验证前端的重复请求（可以自由扩展类似情况），可以通过redis进行过滤：每次请求将request Ip、参数、接口等hash作为key存储redis（幂等性请求），设置多长时间有效期，然后下次请求过来的时候先在redis中检索有没有这个key，进而验证是不是一定时间内过来的重复提交</p><p>秒杀系统，基于redis是单线程特征，防止出现数据库“爆破”</p><p>全局增量ID生成，类似“秒杀”</p></li><li><p>排行榜<br>谁得分高谁排名往上。命令：ZADD（有续集，sorted set）</p></li><li>最新列表<br>例如新闻列表页面最新的新闻列表，如果总数量很大的情况下，尽量不要使用select a from A limit 10这种low货，尝试redis的 LPUSH命令构建List，一个个顺序都塞进去就可以啦。不过万一内存清掉了咋办？也简单，查询不到存储key的话，用mysql查询并且初始化一个List到redis中就好了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> Redis 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见问题</title>
      <link href="/2020/05/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/Redis%20%E6%95%99%E7%A8%8B/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/Redis%20%E6%95%99%E7%A8%8B/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="Could-not-get-a-resource-from-the-poo"><a href="#Could-not-get-a-resource-from-the-poo" class="headerlink" title="Could not get a resource from the poo"></a>Could not get a resource from the poo</h4><p> Jeredis报异常：org.springframework.data.redis.RedisConnectionFailureException: Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the poo<br> Redis没启动或者Java没连上Redis，我这边的问题是spring.redis.hostName写成了spring.redis.host，于是Redis使用127.0.0.1去请求。</p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> Redis 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 常用操作</title>
      <link href="/2020/05/22/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MongoDB/MongoDB%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/05/22/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MongoDB/MongoDB%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// query：可选，使用查询操作符指定查询条件</span></span><br><span class="line"><span class="comment">// projection：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）</span></span><br><span class="line"><span class="comment">// collection：表名</span></span><br><span class="line">db.collection.find(query, projection)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pretty() 方法以格式化的方式来显示所有文档</span></span><br><span class="line">db.collection.find().pretty()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">db.col.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"56063f17ade2f21f36b03133"</span>),</span><br><span class="line">        <span class="string">"title"</span> : <span class="string">"MongoDB 教程"</span>,</span><br><span class="line">        <span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</span><br><span class="line">        <span class="string">"by"</span> : <span class="string">"菜鸟教程"</span>,</span><br><span class="line">        <span class="string">"url"</span> : <span class="string">"http://www.runoob.com"</span>,</span><br><span class="line">        <span class="string">"tags"</span> : [</span><br><span class="line">                <span class="string">"mongodb"</span>,</span><br><span class="line">                <span class="string">"database"</span>,</span><br><span class="line">                <span class="string">"NoSQL"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"likes"</span> : <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：</p><div class="table-container"><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">范例</th><th style="text-align:left">SQL类似语句</th></tr></thead><tbody><tr><td style="text-align:left">等于</td><td style="text-align:left">db.col.find({“by”:”菜鸟教程”}).pretty()</td><td style="text-align:left">where by = ‘菜鸟教程’</td></tr><tr><td style="text-align:left">小于</td><td style="text-align:left">db.col.find({“likes”:{$lt:50}}).pretty()</td><td style="text-align:left">where likes &lt; 50</td></tr><tr><td style="text-align:left">小于或等于</td><td style="text-align:left">db.col.find({“likes”:{$lte:50}}).pretty()</td><td style="text-align:left">where likes &lt;= 50</td></tr><tr><td style="text-align:left">大于</td><td style="text-align:left">db.col.find({“likes”:{$gt:50}}).pretty()</td><td style="text-align:left">where likes &gt; 50</td></tr><tr><td style="text-align:left">大于或等于</td><td style="text-align:left">db.col.find({“likes”:{$gte:50}}).pretty()</td><td style="text-align:left">where likes &gt;= 50</td></tr><tr><td style="text-align:left">不等于</td><td style="text-align:left">db.col.find({“likes”:{$ne:50}}).pretty()</td><td style="text-align:left">where likes != 50</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Chapter 1.4 三种方案对比</title>
      <link href="/2020/05/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F/Chapter%201.4%20%E4%B8%89%E7%A7%8D%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94/"/>
      <url>/2020/05/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F/Chapter%201.4%20%E4%B8%89%E7%A7%8D%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<p>上面几种方式，哪种方式都无法做到完美。就像 CAP 一样，在复杂性、可靠性、性能等方面无法同时满足，所以，根据不同的应用场景选择最适合自己的才是王道。</p><p>从理解的难易程度角度（从低到高）：数据库 &gt; Redis &gt; Zookeeper。</p><p>从实现的复杂性角度（从低到高）：Zookeeper &gt;= Redis &gt; 数据库。</p><p>从性能角度（从高到低）：Redis &gt; Zookeeper &gt;= 数据库。</p><p>从可靠性角度（从高到低）：Zookeeper &gt; Redis &gt; 数据库。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Chapter 1.3 基础 Redis 实现分布式锁</title>
      <link href="/2020/05/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F/Chapter%201.3%20%E5%9F%BA%E4%BA%8E%20Redis%20%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2020/05/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F/Chapter%201.3%20%E5%9F%BA%E4%BA%8E%20Redis%20%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>本篇文章主要介绍基于 Redis 如何实现分布式锁。</p><h2 id="setnx-expire-命令"><a href="#setnx-expire-命令" class="headerlink" title="setnx + expire 命令"></a>setnx + expire 命令</h2><p>Redis 的 <strong>setnx</strong> 命令 <strong>setnx key value</strong> 将 key 设置为 value，当键不存在时，才能成功，若键存在，什么也不做，成功返回 1，失败返回 0。<strong>setnx</strong> 实际上就是 SET IF NOT EXISTS 的缩写。</p><p>因为分布式锁还需要超时机制，所以我们利用 <strong>expire</strong> 命令来设置，所以利用 <strong>setnx</strong> + <strong>expire</strong> 命令的核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String key, String requset, <span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">    Long result = jedis.setnx(key, requset);</span><br><span class="line">    <span class="comment">// result = 1时，设置成功，否则设置失败</span></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">1L</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> jedis.expire(key, timeout) == <span class="number">1L</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上上面的步骤是有问题的，<strong>setnx</strong> 和 <strong>expire</strong> 是分开的两步操作，不具有原子性，如果执行完第一条指令应用异常或者重启了，锁将无法过期。</p><p>一种改善方案就是使用 Lua 脚本来保证原子性（包含 <strong>setnx</strong> 和 <strong>expire</strong> 两条指令）。</p><h2 id="使用-Lua-脚本"><a href="#使用-Lua-脚本" class="headerlink" title="使用 Lua 脚本"></a>使用 Lua 脚本</h2><p>使用 Lua 脚本，包含 <strong>setnx</strong> 和 <strong>expire</strong> 两条指令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock_with_lua</span><span class="params">(String key, String UniqueId, <span class="keyword">int</span> seconds)</span> </span>&#123;</span><br><span class="line">    String lua_scripts = <span class="string">"if redis.call('setnx',KEYS[1],ARGV[1]) == 1 then"</span> +</span><br><span class="line">            <span class="string">"redis.call('expire',KEYS[1],ARGV[2]) return 1 else return 0 end"</span>;</span><br><span class="line">    List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    keys.add(key);</span><br><span class="line">    values.add(UniqueId);</span><br><span class="line">    values.add(String.valueOf(seconds));</span><br><span class="line">    Object result = jedis.eval(lua_scripts, keys, values);</span><br><span class="line">    <span class="comment">//判断是否成功</span></span><br><span class="line">    <span class="keyword">return</span> result.equals(<span class="number">1L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="set-key-value-命令"><a href="#set-key-value-命令" class="headerlink" title="set key value 命令"></a>set key value 命令</h2><p>Redis 在 2.6.12 版本开始，为 <strong>set</strong> 命令增加一系列选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET key value [EX seconds] [PX milliseconds][NX|XX]</span><br></pre></td></tr></table></figure><ul><li><p>EX: 设定过期时间，单位为秒</p></li><li><p>PX: 设定过期时间，单位为毫秒</p></li><li><p>NX: 仅当 key 不存在时设置值</p></li><li><p>XX: 仅当 key 存在时设置值</p></li></ul><p><strong>set</strong> 命令的 NX 选项，就等同于 <strong>setnx</strong> 命令，代码过程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock_with_set</span><span class="params">(String key, String UniqueId, <span class="keyword">int</span> seconds)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"OK"</span>.equals(jedis.set(key, UniqueId, <span class="string">"NX"</span>, <span class="string">"EX"</span>, seconds));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>value 必须要具有唯一性，我们可以用 UUID 来做，设置随机字符串保证唯一性，至于为什么要保证唯一性？假如 value 不是随机字符串，而是一个固定值，那么就可能存在下面的问题：</p><ol><li>客户端 1 获取锁成功</li><li>客户端 1 在某个操作上阻塞了太长时间</li><li>设置的 key 过期了，锁自动释放了</li><li>客户端 2 获取到了对应同一个资源的锁</li><li>客户端 1 从阻塞中恢复过来，因为 value 值一样，所以执行释放锁操作时就会释放掉客户端 2 持有的锁，这样就会造成问题</li></ol><p>所以通常来说，在释放锁时，我们需要对value进行验证。也就是说我们在获取锁的时候需要设置一个 value，不能直接用 <strong>del key</strong> 这种粗暴的方式，因为直接 <strong>del key</strong> 任何客户端都可以进行解锁了，所以解锁时，我们需要判断锁是否是自己的，基于 value 值来判断，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseLock_with_lua</span><span class="params">(String key,String value)</span> </span>&#123;</span><br><span class="line">    String luaScript = <span class="string">"if redis.call('get',KEYS[1]) == ARGV[1] then "</span> +</span><br><span class="line">            <span class="string">"return redis.call('del',KEYS[1]) else return 0 end"</span>;</span><br><span class="line">    <span class="keyword">return</span> jedis.eval(luaScript, </span><br><span class="line">                      Collections.singletonList(key), </span><br><span class="line">                      Collections.singletonList(value)).equals(<span class="number">1L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用Lua脚本的方式，尽量保证原子性。</p><p>使用 <strong>set key value</strong> 命令看上去很 OK，实际上在 Redis 集群的时候也会出现问题，比如说 A 客户端在 Redis 的 master 节点上拿到了锁，但是这个加锁的 key 还没有同步到 slave 节点，master 故障，发生故障转移，一个 slave 节点升级为 master 节点，B 客户端也可以获取同个 key 的锁，但客户端 A 也已经拿到锁了，这就导致多个客户端都拿到锁。</p><p>所以针对Redis集群这种情况，还有其他方案</p><h2 id="Redlock-算法"><a href="#Redlock-算法" class="headerlink" title="Redlock 算法"></a>Redlock 算法</h2><p>Redis 作者 antirez 基于分布式环境下提出了一种更高级的分布式锁的实现 Redlock。</p><p>假设有 5 个独立的 Redis 节点（注意这里的节点可以是 5 个 Redis 单 master 实例，也可以是 5 个 Redis Cluster 集群，但并不是有 5 个主节点的 cluster 集群）：</p><ol><li><p>获取当前 Unix 时间，以毫秒为单位</p></li><li><p>依次尝试从 5 个实例，使用相同的 key 和具有唯一性的 value（例如 UUID ）获取锁，当向 Redis 请求获取锁时，客户端应该设置一个网络连接和响应超时时间，这个超时时间应用小于锁的失效时间，例如你的锁自动失效时间为 10s，则超时时间应该在 5 ~ 50 毫秒之间，这样可以避免服务器端 Redis 已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务端没有在规定时间内响应，客户端应该尽快尝试去另外一个 Redis 实例请求获取锁</p></li><li><p>客户端使用当前时间减去开始获取锁时间（步骤 1 记录的时间）就得到获取锁使用的时间，当且仅当从大多数（N / 2 + 1，这里是 3 个节点）的 Redis 节点都取到锁，并且使用的时间小于锁失败时间时，锁才算获取成功</p></li><li><p>如果取到了锁，key 的真正有效时间等于有效时间减去获取锁所使用的时间（步骤 3 计算的结果）</p></li><li><p>如果某些原因，获取锁失败（没有在至少 N / 2 + 1 个 Redis 实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的 Redis 实例上进行解锁（即便某些 Redis 实例根本就没有加锁成功，防止某些节点获取到锁但是客户端没有得到响应而导致接下来的一段时间不能被重新获取锁）</p></li></ol><p>具体实现参考： <a href="https://mp.weixin.qq.com/s?__biz=MzU5ODUwNzY1Nw==&amp;mid=2247484155&amp;idx=1&amp;sn=0c73f45f2f641ba0bf4399f57170ac9b&amp;scene=21#wechat_redirect">Redlock：Redis分布式锁最牛逼的实现</a></p><h2 id="Redisson-实现"><a href="#Redisson-实现" class="headerlink" title="Redisson 实现"></a>Redisson 实现</h2><p>对于 Java 用户而言，我们经常使用 Jedis，Jedis 是 Redis 的 Java 客户端，除了 Jedis 之外，Redisson 也是 Java 的客户端，Jedis 是阻塞式 I/O，而 Redisson 底层使用 Netty 可以实现非阻塞 I/O，该客户端封装了锁的，继承了 J.U.C 的 <strong>Lock</strong> 接口，所以我们可以像使用 <strong>ReentrantLock</strong> 一样使用 Redisson，具体使用过程如下。</p><p>首先加入POM依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用 Redisson，代码如下（与使用 <strong>ReentrantLock</strong> 类似）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 配置文件</span></span><br><span class="line">Config config = <span class="keyword">new</span> Config();</span><br><span class="line">config.useSingleServer()</span><br><span class="line">        .setAddress(<span class="string">"redis://127.0.0.1:6379"</span>)</span><br><span class="line">        .setPassword(RedisConfig.PASSWORD)</span><br><span class="line">        .setDatabase(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//2. 构造RedissonClient</span></span><br><span class="line">RedissonClient redissonClient = Redisson.create(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 设置锁定资源名称</span></span><br><span class="line">RLock lock = redissonClient.getLock(<span class="string">"redlock"</span>);</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"获取锁成功，实现业务逻辑"</span>);</span><br><span class="line">    Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="一个简易的分布式锁"><a href="#一个简易的分布式锁" class="headerlink" title="一个简易的分布式锁"></a>一个简易的分布式锁</h2><p>下面利用 SpringBoot + Jedis + AOP 的组合来实现一个简易的分布式锁。</p><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p>自定义一个注解，被注解的方法会执行获取分布式锁的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RedisLock &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务键</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">key</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁的过期秒数,默认是5秒</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">expire</span><span class="params">()</span> <span class="keyword">default</span> 5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试加锁，最多等待时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">waitTime</span><span class="params">()</span> <span class="keyword">default</span> Long.MIN_VALUE</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁的超时时间单位</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TimeUnit <span class="title">timeUnit</span><span class="params">()</span> <span class="keyword">default</span> TimeUnit.SECONDS</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AOP-拦截器实现"><a href="#AOP-拦截器实现" class="headerlink" title="AOP 拦截器实现"></a>AOP 拦截器实现</h4><p>在AOP中我们去执行获取分布式锁和释放分布式锁的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockMethodAspect</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JedisUtil jedisUtil;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisLockHelper redisLockHelper;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(LockMethodAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"@annotation(com.redis.lock.annotation.RedisLock)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = jedisUtil.getJedis();</span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line"></span><br><span class="line">        RedisLock redisLock = method.getAnnotation(RedisLock.class);</span><br><span class="line">        String value = UUID.randomUUID().toString();</span><br><span class="line">        String key = redisLock.key();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> islock = redisLockHelper.lock(jedis,</span><br><span class="line">                                                        key, </span><br><span class="line">                                                        value, </span><br><span class="line">                                                        redisLock.expire(), </span><br><span class="line">                                                        redisLock.timeUnit());</span><br><span class="line">            logger.info(<span class="string">"isLock : &#123;&#125;"</span>,islock);</span><br><span class="line">            <span class="keyword">if</span> (!islock) &#123;</span><br><span class="line">                logger.error(<span class="string">"获取锁失败"</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"获取锁失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"系统异常"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  <span class="keyword">finally</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"释放锁"</span>);</span><br><span class="line">            redisLockHelper.unlock(jedis,key, value);</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Redis-实现分布式锁核心类"><a href="#Redis-实现分布式锁核心类" class="headerlink" title="Redis 实现分布式锁核心类"></a>Redis 实现分布式锁核心类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sleepTime = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接使用setnx + expire方式获取分布式锁</span></span><br><span class="line"><span class="comment">     * 非原子性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock_setnx</span><span class="params">(Jedis jedis,String key, String value, <span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">        Long result = jedis.setnx(key, value);</span><br><span class="line">        <span class="comment">// result = 1时，设置成功，否则设置失败</span></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">1L</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> jedis.expire(key, timeout) == <span class="number">1L</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Lua脚本，脚本中使用setnex+expire命令进行加锁操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> UniqueId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Lock_with_lua</span><span class="params">(Jedis jedis,String key, String UniqueId, <span class="keyword">int</span> seconds)</span> </span>&#123;</span><br><span class="line">        String lua_scripts = <span class="string">"if redis.call('setnx',KEYS[1],ARGV[1]) == 1 then"</span> +</span><br><span class="line">                <span class="string">"redis.call('expire',KEYS[1],ARGV[2]) return 1 else return 0 end"</span>;</span><br><span class="line">        List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        keys.add(key);</span><br><span class="line">        values.add(UniqueId);</span><br><span class="line">        values.add(String.valueOf(seconds));</span><br><span class="line">        Object result = jedis.eval(lua_scripts, keys, values);</span><br><span class="line">        <span class="comment">//判断是否成功</span></span><br><span class="line">        <span class="keyword">return</span> result.equals(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在Redis的2.6.12及以后中,使用 set key value [NX] [EX] 命令</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(Jedis jedis,String key, String value, <span class="keyword">int</span> timeout, TimeUnit timeUnit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> seconds = timeUnit.toSeconds(timeout);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>.equals(jedis.set(key, value, <span class="string">"NX"</span>, <span class="string">"EX"</span>, seconds));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义获取锁的超时时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waitTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock_with_waitTime</span><span class="params">(Jedis jedis,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      String key, </span></span></span><br><span class="line"><span class="function"><span class="params">                                      String value, </span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">int</span> timeout, </span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">long</span> waitTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      TimeUnit timeUnit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> seconds = timeUnit.toSeconds(timeout);</span><br><span class="line">        <span class="keyword">while</span> (waitTime &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            String result = jedis.set(key, value, <span class="string">"nx"</span>, <span class="string">"ex"</span>, seconds);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"OK"</span>.equals(result)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            waitTime -= sleepTime;</span><br><span class="line">            Thread.sleep(sleepTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误的解锁方法—直接删除key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock_with_del</span><span class="params">(Jedis jedis,String key)</span> </span>&#123;</span><br><span class="line">        jedis.del(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Lua脚本进行解锁操纵，解锁的时候验证value值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unlock</span><span class="params">(Jedis jedis,String key,String value)</span> </span>&#123;</span><br><span class="line">        String luaScript = <span class="string">"if redis.call('get',KEYS[1]) == ARGV[1] then "</span> +</span><br><span class="line">                <span class="string">"return redis.call('del',KEYS[1]) else return 0 end"</span>;</span><br><span class="line">        <span class="keyword">return</span> jedis.eval(luaScript, </span><br><span class="line">                          Collections.singletonList(key), </span><br><span class="line">                          Collections.singletonList(value)).equals(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TestController-测试"><a href="#TestController-测试" class="headerlink" title="TestController 测试"></a>TestController 测试</h4><p>定义一个 <strong>TestController</strong> 来测试我们实现的分布式锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RedisLock</span>(key = <span class="string">"redis_lock"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Chapter 1.2 基于 MySQL 实现分布式锁</title>
      <link href="/2020/05/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F/Chapter%201.2%20%E5%9F%BA%E4%BA%8E%20MySQL%20%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2020/05/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F/Chapter%201.2%20%E5%9F%BA%E4%BA%8E%20MySQL%20%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Chapter 1.1 分布式锁</title>
      <link href="/2020/05/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F/Chapter%201.1%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2020/05/18/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F/Chapter%201.1%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是锁"><a href="#什么是锁" class="headerlink" title="什么是锁"></a>什么是锁</h2><p>在多线程的环境下，为了保证一个代码块在同一时间只能由一个线程访问，我们需要对此代码块加锁。在 Java 中我们一般可以使用 <strong>synchronized</strong> 和 <strong>ReetrantLock</strong> 实现。</p><h2 id="什么是分布式锁"><a href="#什么是分布式锁" class="headerlink" title="什么是分布式锁"></a>什么是分布式锁</h2><p>对于分布式场景，我们可以使用分布式锁，它是控制分布式系统之间互斥访问共享资源的一种方式。</p><p>比如说在一个分布式系统中，多台机器上部署了多个服务，当客户端一个用户发起一个数据插入请求时，如果没有分布式锁机制保证，那么那多台机器上的多个服务可能进行并发插入操作，导致数据重复插入，对于某些不允许有多余数据的业务来说，这就会造成问题。而分布式锁机制就是为了解决类似这类问题，保证多个服务之间互斥的访问共享资源，如果一个服务抢占了分布式锁，其他服务没获取到锁，就不进行后续操作。大致意思如下图所示：<br><img src="https://user-gold-cdn.xitu.io/2019/4/25/16a53749547937bb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h2 id="分布式锁的实现方式"><a href="#分布式锁的实现方式" class="headerlink" title="分布式锁的实现方式"></a>分布式锁的实现方式</h2><h2 id="基于数据库实现"><a href="#基于数据库实现" class="headerlink" title="基于数据库实现"></a>基于数据库实现</h2><p>基于 MySql 的 InnoDB 引擎，可以使用以下方法来实现加锁操作：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="基于-Redis-实现"><a href="#基于-Redis-实现" class="headerlink" title="基于 Redis 实现"></a>基于 Redis 实现</h2><h2 id="基于-ZooKeeper-实现"><a href="#基于-ZooKeeper-实现" class="headerlink" title="基于 ZooKeeper 实现"></a>基于 ZooKeeper 实现</h2>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Building REST services with Spring</title>
      <link href="/2020/04/29/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Spring%20Tutorial/Building%20REST%20services%20with%20Spring/"/>
      <url>/2020/04/29/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Spring%20Tutorial/Building%20REST%20services%20with%20Spring/</url>
      
        <content type="html"><![CDATA[<p>REST has quickly become the de-facto (事实上) standard for building web services on the web because they’re easy to build and easy to consume (消费).</p><p>There’re much larger discussion to be had about how REST fits in the world of microservices, but for this tutorial - let’s just look at building RESTful services.</p><p>Why REST? REST embraces (拥抱) the precepts (方案) of the web, including its architecture (架构), benefits (优势), and everything else.  This is no surpise given its author, Roy Fielding, was involved (参与) in probably a dozen specs which govern (统治) how the web operates.</p><p>What benefits? The web and its core protocol, HTTP, provide a stack of features:</p><ul><li>Stiable (合适的) action (GET, POST, PUT, DELETE, …)</li><li>Caching</li><li>Redirection and forwarding</li><li>Security (encryption 加密 and authentication)</li></ul><p>There are all critical factors (要害因素) on building resilient (有适应力的) services. But that is not all. The web is built out of lots of tiny specs, hence (因此) it’s been able to evolve easily, without getting bogged down in “standards wars”.</p><p>Developers are able to draw upon (凭借) 3rd party toolkits that implement these diverse (不同的) sepcs and instantly (立刻) have both client and server technology at their fingertips (指尖).</p><p>So  building on top of HTTP, REST APIs provide the means to build flexible APIs that can:</p><ul><li>Support backward compatibility (兼容)</li><li>Evolvable (可展开的) APIs</li><li>Scaleable services</li><li>Securable services</li><li>A spectrum (系列) of stateless (无状态) to stateful (有状态) servcie</li></ul><p>What’s important to realize is that REST, however ubiquitous (似乎无所不在的), is not a standard, per se (本质上), but an approach, a style, a set of constraints (约束) on your architecture that can help you build web-scale systems. In this tutorial we will use the Spring protfolio (作品集) to build a RESTful service while leveraging (对…施加影响) the stackless features of REST.</p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>As we work through this tutorial, we’ll use Spring Boot. Go to Spring Initializr and select the follow:</p><ul><li>Web</li><li>JPA</li><li>H2</li><li>Lombok</li></ul><p>Then choose “Generate Project”. A <code>.zip</code> will downloaded. Unzip it. Inside you’ll find a simple, Maven-based project including a <code>pom.xml</code> build file (NOTE: You can use Gradle. The example in this tutorial will be Maven based.)</p><p>Spring Boot can work with any IDE. You can use Eclipse, IntelliJ IDEA, Netbeans, etc. The Spring Tool suite is an open-source, Eclipse-based IDE distribution (发行) that provides a superset of the Java EE distribution of Eclipse. It includes features that making working with Spring application even easier. It is, by no means, required. But consider it if you want that extra oomph (特质) for your keystrokes (按键). Here’s a video demonstrating how to get started with STS and Spring Boot. THis is a general introduction to familiarize you with the tools.</p><p>If you pukc up IntelliJ IDEA as your IDE for this tutorial, you have to install lombok plugin. In order to see how we install plugin in IntelliJ please have a look at managing-pulginss. After this you have to ensure that “Enable annotation processing” checkbox is ticked under: Perferences -&gt; Complier -&gt; Annotation Processors, as it is described <a href="https://stackoverflow.com/questions/14866765/building-with-lomboks-slf4j-and-intellij-cannot-find-symbol-log">here</a>.</p><h2 id="The-Story-so-Far…"><a href="#The-Story-so-Far…" class="headerlink" title="The Story so Far…"></a>The Story so Far…</h2><p>Let’s start off with the simplest thing we can construct. In fact, to make it as simple as possible, we can even leave out the concepts of REST. (Later on, we’ll add REST to understand the differencne.)</p><p>our example models a simple payroll service that managers the employees of a company. Simply put, you need to store employee objects in an H2 in-memory database, and access them via JPA. This will be warpped with a Spring MVC layer to access remotely.</p><p>nonrest/src/main/java/payroll/Employee.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String role;</span><br><span class="line"></span><br><span class="line">  Employee() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  Employee(String name, String role) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.role = role;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Despite being small, this Java class contains much:</p><ul><li>@Data is a Lombok annotation to create all the getters, setters, equals, hash, and toString methods, based on the fields.</li><li>@Entity is a JPA annotation to make this object ready for storage in a JPA-based data store.</li><li>id, name, and role are the attribute for our domain object, the first being marked with more JPA annotations to indicate it’s the primary key and automatically populated by the JPA provider.</li><li>a custom constructor is created when we need to create a new instance, bu don’t yet have an id.</li></ul><p>With the domain object definition, we can now turn to Spring Data JPA to handle the tedious (冗长的) database interactions. Spring Data repositories are interfaces with methods supporting reading, updating, deleting, and creating records against a back end store. Some repositories also support data paging, and sorting, where appropriate (适当的). Spring Data synthesizes (整合) implementations based on conventions found in the naming of the methods in the interface.</p><blockquote><p>There are multiple repository implementations besides JPA. You can use Spring Data MongoDB, Spring Data GemFire, Spring Data Cassandra, etc. For this tutorial, we’ll stick with JPA.</p></blockquote><p>nonrest/src/main/java/payroll/EmployeeRepostiory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This interface extends Spring Dat JPA’s <code>JpaRepository</code>, specifying the domain type as Employee and the id types as Long. This interface, though empty on the surface, packs a punch (能击出有力的一拳) given it supports:</p><ul><li>Creating new instances</li><li>Updating existing ones</li><li>Deleting</li><li>Finding (one, all, by simple or complex properties)</li></ul><p>Spring Data’s repository solution makes it possible to sidestep data store specifics and instead solve a majority or problems using domain-specific terminology.</p><p>Believe it or not, this is enough to launch an application! A Spring Data application is, at a minimum, a <code>public static void main</code> entry-point and the <code>@SpringBootApplication</code> annotation. This tells Spring Boot to help out, wherever possible.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayrollApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(PayrollApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@SpringBootApplication</code> is a meta-annotation that pulls in component scanning, autoconfiguration, and property support. We won’t dive into the details of Spring Boot in this tutorial, bu in essence, it will fire up a servlet container and serve up our service.</p><p>Nevertheless (然而), an application with no data isn’t very interesting, so let’s preload it. The follow class will get loaded automatically by Spring:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadDatabase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function">CommandLineRunner <span class="title">initDatabase</span><span class="params">(EmployeeRepository repository)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">      log.info(<span class="string">"Preloading "</span> + repository.save(<span class="keyword">new</span> Employee(<span class="string">"Bilbo Baggins"</span>, <span class="string">"burglar"</span>)));</span><br><span class="line">      log.info(<span class="string">"Preloading "</span> + repository.save(<span class="keyword">new</span> Employee(<span class="string">"Frodo Baggins"</span>, <span class="string">"thief"</span>)));</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>What happens when it gets loaded?</p><ul><li>Spring Boot will run ALL CommandLineRunner beans once the application context is loaded.</li><li>This runner will request a copy of the EmployeeRepository you just created.</li><li>Using it, it wll create two entities and store them.</li><li>@Slf4j is a Lombok annotation to autocreate an Slf4j-based LoggerFactory as log, allowing us to log these newly created “employees”.</li></ul><p>Right-click and Run PayRollApplication, and this is what you get:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Fragment of console output showing preloading of dataW</span><br><span class="line">...</span><br><span class="line">2018-08-09 11:36:26.169  INFO 74611 --- [main] payroll.LoadDatabase : Preloading Employee(id=1, name=Bilbo Baggins, role=burglar)</span><br><span class="line">2018-08-09 11:36:26.174  INFO 74611 --- [main] payroll.LoadDatabase : Preloading Employee(id=2, name=Frodo Baggins, role=thief)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>This isn’t the whole log, but just the key bits of preloading data. (Indeed, check out the whole console. It’s glorious.)</p><h2 id="HTTP-is-the-Platform"><a href="#HTTP-is-the-Platform" class="headerlink" title="HTTP is the Platform"></a>HTTP is the Platform</h2><p>To warp your repository with a web layer, you must turn to Spring MVC. Thanks to Spring Boot, there is little in infrastructure (基础建设) to code. Instead, we can focus on actions:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> EmployeeRepository repository;</span><br><span class="line"></span><br><span class="line">  EmployeeController(EmployeeRepository repository) &#123;</span><br><span class="line">    <span class="keyword">this</span>.repository = repository;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Aggregate root</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/employees"</span>)</span><br><span class="line">  <span class="function">List&lt;Employee&gt; <span class="title">all</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> repository.findAll();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">"/employees"</span>)</span><br><span class="line">  <span class="function">Employee <span class="title">newEmployee</span><span class="params">(@RequestBody Employee newEmployee)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> repository.save(newEmployee);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Single item</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/employees/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function">Employee <span class="title">one</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> repository.findById(id)</span><br><span class="line">      .orElseThrow(() -&gt; <span class="keyword">new</span> EmployeeNotFoundException(id));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PutMapping</span>(<span class="string">"/employees/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function">Employee <span class="title">replaceEmployee</span><span class="params">(@RequestBody Employee newEmployee, @PathVariable Long id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> repository.findById(id)</span><br><span class="line">      .map(employee -&gt; &#123;</span><br><span class="line">        employee.setName(newEmployee.getName());</span><br><span class="line">        employee.setRole(newEmployee.getRole());</span><br><span class="line">        <span class="keyword">return</span> repository.save(employee);</span><br><span class="line">      &#125;)</span><br><span class="line">      .orElseGet(() -&gt; &#123;</span><br><span class="line">        newEmployee.setId(id);</span><br><span class="line">        <span class="keyword">return</span> repository.save(newEmployee);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@DeleteMapping</span>(<span class="string">"/employees/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deleteEmployee</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">    repository.deleteById(id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>@RestController indicates that the data returned by each will be written straight into the reponse body instead of rendering a template.</li><li>An EmployeeRepository is injected by constructor into the controller.</li><li>We have for each operations (<code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code> and <code>@DeleteMpaaing</code>, corresponding to HTTP GET, POST, PUT, and DELETE calls). (NOTE: It’s useful to read each method and understand what they do.)</li><li>EmloyeeNotFoundException is an exception used to indicate when an employee is looked up but not found.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeNotFoundException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  EmployeeNotFoundException(Long id) &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Could not find employee "</span> + id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When an EmployeeNotFoundException is thrown, this extra tidbit (花絮) of Spring MVC configuration is used to render an HTTP 404:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeNotFoundAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(EmployeeNotFoundException.class)</span><br><span class="line">  <span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</span><br><span class="line">  <span class="function">String <span class="title">employeeNotFoundHandler</span><span class="params">(EmployeeNotFoundException ex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ex.getMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><strong>@ResponseBody</strong> signals taht this advice is rendered straight (笔直地) into the response body.</li><li><strong>@ExceptionHandler</strong> configures the advice to only respond if an EmployeeNotFoundException is thrown.</li><li><strong>@ResponseStatus</strong> says to issue an <strong>HttpStatus.NOT_FOUND</strong>, i.e. an <strong>HTTP 404</strong>.</li><li>The body of the advice generates the content. In this case, it gives the message of the exception.</li></ul><p>To lanuch the application, either right-click the <strong>public static void main</strong> in <strong>PayRollApplication</strong> and select Run from your IDE, or:</p><p>Spring initializr uses maven warpper so type this:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./mvnw clean spring-boot:run</span><br></pre></td></tr></table></figure></p><p>Alternatively using your installed maven version type this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn clean spring-boot:run</span><br></pre></td></tr></table></figure></p><p>When the app starts, we can immediately interrogate (interrogate) it:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v localhost:8080/employees</span><br></pre></td></tr></table></figure></p><p>This will yield:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*   Trying ::1...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to localhost (::1) port 8080 (#0)</span><br><span class="line">&gt; GET /employees HTTP/1.1</span><br><span class="line">&gt; Host: localhost:8080</span><br><span class="line">&gt; User-Agent: curl/7.54.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 200</span><br><span class="line">&lt; Content-Type: application/json;charset=UTF-8</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; Date: Thu, 09 Aug 2018 17:58:00 GMT</span><br><span class="line">&lt;</span><br><span class="line">* Connection #0 to host localhost left intact</span><br><span class="line">[&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;Bilbo Baggins&quot;,&quot;role&quot;:&quot;burglar&quot;&#125;,&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;Frodo Baggins&quot;,&quot;role&quot;:&quot;thief&quot;&#125;]</span><br></pre></td></tr></table></figure></p><p>Here you can see the pre-loaded data, in a compacted format.</p><p>If you try and query a user that doesn’t exist…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v localhost:8080/employees/99</span><br></pre></td></tr></table></figure><p>You get…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*   Trying ::1...</span><br><span class="line">* TCP_NODELAY <span class="built_in">set</span></span><br><span class="line">* Connected to localhost (::1) port 8080 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET /employees/99 HTTP/1.1</span><br><span class="line">&gt; Host: localhost:8080</span><br><span class="line">&gt; User-Agent: curl/7.54.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 404</span><br><span class="line">&lt; Content-Type: text/plain;charset=UTF-8</span><br><span class="line">&lt; Content-Length: 26</span><br><span class="line">&lt; Date: Thu, 09 Aug 2018 18:00:56 GMT</span><br><span class="line">&lt;</span><br><span class="line">* Connection <span class="comment">#0 to host localhost left intact</span></span><br><span class="line">Could not find employee 99</span><br></pre></td></tr></table></figure><p>This message nicely shows an <strong>HTTP 404</strong> error with the custom message <strong>Cound not find employee 99</strong>.</p><p>It’s not hard to show the currently coded interactions…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST localhost:8080/employees -H <span class="string">'Content-type:application/json'</span> -d <span class="string">'&#123;"name": "Samwise Gamgee", "role": "gardener"&#125;'</span></span><br></pre></td></tr></table></figure><p>Creates a new <strong>Employee</strong> record, and then sends the content back to us:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;id&quot;:3,&quot;name&quot;:&quot;Samwise Gamgee&quot;,&quot;role&quot;:&quot;gardener&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>You can alter (更改) the user:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X PUT localhost:8080/employees/3 -H &apos;Content-type:application/json&apos; -d &apos;&#123;&quot;name&quot;: &quot;Samwise Gamgee&quot;, &quot;role&quot;: &quot;ring bearer&quot;&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>Updates the user:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;id&quot;:3,&quot;name&quot;:&quot;Samwise Gamgee&quot;,&quot;role&quot;:&quot;ring bearer&quot;&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>Depending on how you construct your service can have significant impacts (有很大关系). In this situation, replace is a better description than update. For example, if the name was NOT provided, it would instead get nulled out.</p></blockquote><p>And you can delete…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X DELETE localhost:8080/employees/3</span><br><span class="line">$ curl localhost:8080/employees/3</span><br><span class="line">Could not find employee 3</span><br></pre></td></tr></table></figure><p>This is all well and good, but do we have RESTful service yet? (IF you didn’t catch the hint, the answer is no.)</p><p>What’s missing?</p><h2 id="What-makes-something-RESTful"><a href="#What-makes-something-RESTful" class="headerlink" title="What makes something RESTful?"></a>What makes something RESTful?</h2><p>So far, you have a web-based service that handles the core operations involving employee data. But that’s not enough to make things “RESTful”.</p><ul><li>Pretty URLs like /employees/3 aren’t REST.</li><li>Merely using <strong>GET</strong>, <strong>POST</strong>, etc. aren’t REST.</li><li>Having all the CRUD operations laid out arent’t REST.</li></ul><p>In fact, what we have built so far is better described as <strong>RPC</strong> (Remote Procedure Call 远程过程调用). That’s because there is no way to know how to interact with this service. If you published this today, you’d also have to write a document or host a developer’s portal somewhere with all the details.</p><p>This <strong>statement</strong> (报告) of Roy Fielding may further lend a clue (线索) to the difference between <strong>REST</strong> and <strong>RPC</strong>:</p><blockquote><p>I am getting frustrated (沮丧) by the number of people calling any HTTP-based interface a REST API. Today’s example is the socialsite (社交网站) REST API. That is RPC. It screams RPC. There is so much coupling (结合) on display that it should be given an X rating.</p><p>What needs to be done to make the REST architectural (建筑) style clear on the notion that hypertext is a constraint (约束)? In other words, if the engine of application state (and hence the API) is not being driven by hypertext, then it cannot be RESTful and cannot be a REST API. Period. Is there some broken manual somewhere that needs to be fixed?</p></blockquote><p>The side effect of NOT including hypermedia in our representationsis that clients MUST hard code URIs to navigate the API. This leads to the same brittle nature (脆弱性) that predated the rise of e-commerce (电子商务) on the web. It’s a signal that our JSON output needs a little help.</p><p>Introducing Spring HEATEOAS, a Spring project aimed at helping you write hypermedia-driven outputs. To upgrade your service to being RESTful, add this to your build:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-hateoas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>This tiny library will give us the constructs to define a RESTful service and then render it in an acceptable format for client consumption (消费).</p><p>A critical ingredient (关键成分) to any RESTful service is adding links to relvant (相关性) oprations. To make your controller more RESTful, add links like this:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/employees/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function">EntityModel&lt;Employee&gt; <span class="title">one</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Employee employee = repository.findById(id)</span><br><span class="line">    .orElseThrow(() -&gt; <span class="keyword">new</span> EmployeeNotFoundException(id));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> EntityModel&lt;&gt;(employee,</span><br><span class="line">    linkTo(methodOn(EmployeeController.class).one(id)).withSelfRel(),</span><br><span class="line">    linkTo(methodOn(EmployeeController.class).all()).withRel(<span class="string">"employees"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This is very similar to what we had bedore, but a few things have changed:</p><ul><li>The return type of the method has changed from <strong>Empoyee</strong> to <strong>EntityMode</strong>. <strong>EntityMode</strong> is a generic container from Spring HATEOAS that includes not only the data but a collcection of links.</li><li><strong>linkTo(MethodOn(EmployeeController.class).one(id).withSelfRel())</strong> asks that Spring HATEOAS build a link to the <strong>EmployeeController</strong>‘s <code>one()</code> method, and flag it as a self link.  </li><li><strong>linkTo(methodOn(EmployeeController.class).all()).withRel(“employees”)</strong> asks Spring HATEOAS to build a link to the aggregate (聚合) root, <strong>all()</strong>, and call it “empolyees”.</li></ul><p>What do we mean by “build a link”? One of Spring HATEOAS’s core types is <strong>Link</strong>. It includes a <strong>URI</strong> and a <strong>rel</strong> (relation). Links are what empower (授权) the web. Before the World Wide Web, other document systems would render information or links, but it was the linking of documents WITH data that stitched (缝合) the web together.</p><p>Roy Fielding encourages bulding APIs with the same techniques that make the web successful, and links are one of them.</p><p>If you restart the application and query the employee record of <strong>Bilbo</strong>, you’ll get a slightly different response than earlier:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># RESTful representation of a singe employee</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 1,</span><br><span class="line">  &quot;name&quot;: &quot;Bilbo Baggins&quot;,</span><br><span class="line">  &quot;role&quot;: &quot;burglar&quot;,</span><br><span class="line">  &quot;_links&quot;: &#123;</span><br><span class="line">    &quot;self&quot;: &#123;</span><br><span class="line">      &quot;href&quot;: &quot;http://localhost:8080/employees/1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;employees&quot;: &#123;</span><br><span class="line">      &quot;href&quot;: &quot;http://localhost:8080/employees&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This decompressed output shows not only the data elements you saw earlier (<strong>id</strong>, <strong>name</strong> and <strong>role</strong>), but also a <strong>_links</strong> entry containing two URIs. This entire document is formatted using <strong>HAL</strong>.</p><p>HAL is a lightweight mediatype that allows encoding not just data but also hypermedia controls, alerting consumers to other parts of the API they can navigate toward. In this case, there is a “self” link (kink of like a “this” statement in code) along with a link back to the <strong>aggregate root</strong>.</p><p>To make the aggregate root ALSO more RESTful, you want to include top level links while ALSO including any RESTful components within:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Getting an aggregate root resource</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/employees"</span>)</span><br><span class="line">CollectionModel&lt;EntityModel&lt;Employee&gt;&gt; all() &#123;</span><br><span class="line"></span><br><span class="line">  List&lt;EntityModel&lt;Employee&gt;&gt; employees = repository.findAll().stream()</span><br><span class="line">    .map(employee -&gt; <span class="keyword">new</span> EntityModel&lt;&gt;(employee,</span><br><span class="line">      linkTo(methodOn(EmployeeController.class).one(employee.getId())).withSelfRel(),</span><br><span class="line">      linkTo(methodOn(EmployeeController.class).all()).withRel(<span class="string">"employees"</span>)))</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> CollectionModel&lt;&gt;(employees,</span><br><span class="line">    linkTo(methodOn(EmployeeController.class).all()).withSelfRel());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Wow! That method, which used to just be <code>repository.findAll()</code> has grown big! Let’s unpack it.</p><p><strong>CollectionModel</strong> is another Spring HATEOAS container aimed at encapsulating  (压缩) collections. it, too, also lets you include links. Don’t let that first statement slip by (流逝). What does “encapsulating collections” mean? Collections of employees?</p><p>Not quite.</p><p>Since we’re talking REST, it should encapsulate collections of <strong>empoyee resources</strong>.</p><p>That’s why you fetch (取回) all the employees, but then tranform them into a list of <strong>EmtityModel</strong> objects. (Tanks Java 8 Stream API!!)</p><p>If you restart the appllcation and fetch the aggregate root, you can see what this looks like.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># RESTful representation of a collection of employee resources</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_embedded"</span>: &#123;</span><br><span class="line">    <span class="string">"employeeList"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Bilbo Baggins"</span>,</span><br><span class="line">        <span class="string">"role"</span>: <span class="string">"burglar"</span>,</span><br><span class="line">        <span class="string">"_links"</span>: &#123;</span><br><span class="line">          <span class="string">"self"</span>: &#123;</span><br><span class="line">            <span class="string">"href"</span>: <span class="string">"http://localhost:8080/employees/1"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"employees"</span>: &#123;</span><br><span class="line">            <span class="string">"href"</span>: <span class="string">"http://localhost:8080/employees"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Frodo Baggins"</span>,</span><br><span class="line">        <span class="string">"role"</span>: <span class="string">"thief"</span>,</span><br><span class="line">        <span class="string">"_links"</span>: &#123;</span><br><span class="line">          <span class="string">"self"</span>: &#123;</span><br><span class="line">            <span class="string">"href"</span>: <span class="string">"http://localhost:8080/employees/2"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"employees"</span>: &#123;</span><br><span class="line">            <span class="string">"href"</span>: <span class="string">"http://localhost:8080/employees"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"_links"</span>: &#123;</span><br><span class="line">    <span class="string">"self"</span>: &#123;</span><br><span class="line">      <span class="string">"href"</span>: <span class="string">"http://localhost:8080/employees"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For this aggregate root, which serves up aa collection of employee resources, there is a top-level <strong>“self”</strong> link. The <strong>“Collection”</strong> is listed underneath (在底下) the “_embedded” section. This is how HAL represents collections.</p><p>And each individual member of the collection has their information as well as related links.</p><p>What is the point of adding all these links? It makes it possible to evolve (进化) REST services over time. Existing links can be maintained (维护) while new links are added in the future. Newer clients may take advantage (优势) of the new links, while legacy (遗产) clients can sustain (维持) themselves on the old links. This is especially helpful is services get relocated and moved around. As long as the link structure is maintained, clients can STILL find and interact with things.</p><h2 id="Simplifying-Link-Creation"><a href="#Simplifying-Link-Creation" class="headerlink" title="Simplifying Link Creation"></a>Simplifying Link Creation</h2><p>Did you notice the repetition (重复) in single employee link creation? The code to provide a single link to an employee as well as an “employees” links to the aggregate root was shown twice. If that raised your concern (关心), good! There’s a solution.</p><p>Simply put, you need to define a function that converts <strong>Employee</strong> objects to <strong>EntityModel</strong> objects. While you could easily code this method yourself, there are benefits down the road of implementing Spring HATEOAS’s <strong>RepresentationModelAssembler</strong> interface.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeModelAssembler</span> <span class="keyword">implements</span> <span class="title">RepresentationModelAssembler</span>&lt;<span class="title">Employee</span>, <span class="title">EntityModel</span>&lt;<span class="title">Employee</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> EntityModel&lt;Employee&gt; <span class="title">toModel</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EntityModel&lt;&gt;(employee,</span><br><span class="line">      linkTo(methodOn(EmployeeController.class).one(employee.getId())).withSelfRel(),</span><br><span class="line">      linkTo(methodOn(EmployeeController.class).all()).withRel(<span class="string">"employees"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This simple interface has one method: <strong>toModel()</strong>. It is based on converting a non-resource object (<strong>Employee</strong>) into a resource-based object (<strong>EntityModel</strong>).</p><p>All the code you saw earlier in the controller can be moved into this class. And by applying Spring Framework’s <strong>@Conponent</strong>, this component will be automatically created when the app starts.</p><blockquote><p>Spring HATEOAS’s abstract base class for all resources is <strong>RepresentationModel</strong>. But for simplicity, I recomend using <strong>EntityModel</strong> as your mechanism to easily warp all POJOs as resources.</p></blockquote><p>To leverage (生效) this assembler (装配工), you only have to alter the EmployeeController by injecting the assembler in the constructor.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> EmployeeRepository repository;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> EmployeeModelAssembler assembler;</span><br><span class="line"></span><br><span class="line">  EmployeeController(EmployeeRepository repository,</span><br><span class="line">             EmployeeModelAssembler assembler) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.repository = repository;</span><br><span class="line">    <span class="keyword">this</span>.assembler = assembler;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From here, you can use it in the single-item employee method:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/employees/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function">EntityModel&lt;Employee&gt; <span class="title">one</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Employee employee = repository.findById(id)</span><br><span class="line">    .orElseThrow(() -&gt; <span class="keyword">new</span> EmployeeNotFoundException(id));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> assembler.toModel(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This code is almost the same, except instead of creating the <strong>EntityModel</strong> instance here, you delegate it to the assembler. Maybe that doesn’t look like much?</p><p>Applying the same thing in the aggregate root controller method is more impressive (引人注目的):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/employees"</span>)</span><br><span class="line">CollectionModel&lt;EntityModel&lt;Employee&gt;&gt; all() &#123;</span><br><span class="line"></span><br><span class="line">  List&lt;EntityModel&lt;Employee&gt;&gt; employees = repository.findAll().stream()</span><br><span class="line">    .map(assembler::toModel)</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> CollectionModel&lt;&gt;(employees,</span><br><span class="line">    linkTo(methodOn(EmployeeController.class).all()).withSelfRel());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The code is, again, almost the same, however you get to replace all that <strong>EntityModel</strong> creation logic with <strong>map(assembler::toModel)</strong>. Thanks to Java 8 method references, it’s super easy to plug it in and simplify your controller.</p><blockquote><p>A key design goal of Spring HATEOAS is to make it easier to do The Right Thing. In this scenario, adding hypermedia to your service without hard coding a thing.</p></blockquote><p>At this stage (阶段), you’ve created a Spring MVC REST controller that actually produces hypermedia-powered content! Clients that don’t speak HAL can ignore the extra bits while consuming the pure data. Clients that DO speak HAL can navigate your empowered API.</p><p>But that is not the only thing needed to build a truly RESTful service with Spring.</p><h2 id="Evolving-REST-APIs"><a href="#Evolving-REST-APIs" class="headerlink" title="Evolving REST APIs"></a>Evolving REST APIs</h2><p>With one additional library and a few lines of extra code, you have added hypermedia to your application. But that is not the only thing needed to make your service RESTful. An important facet (方面) of REST if the fact that it’s neither a technology stack nor a single standard.</p><p>REST is a collection of architectural constraints (约束) that when adopted (被采用的) make your application much more resilient (有弹性的). A key factor (因素) of resilience is that when you make upgrades to your services, your clients don’t suffer from downtime.</p><p>In the “olden” days, upgrades were notorious (声名狼藉的) for breaking clients. In other words, an upgrade to the server required an update to the client. In this day and age, hours or even minutes of downtime spent doing an upgrade can cost milions in lost revenue (收益).</p><p>Some compaines requre that you present management with a plan to minimize downtime. In the past, you could get away with upgrading at 2:00 a.m. on a Sunday when load was at a minimum. But in today’s Internet-based e-commerce with international coustomers, such strategies are not as effective.</p><p>SOAP-based services and CORBA-based services were incredibly brittle (难以置信的脆弱). It was hard to roll out (推出) a server that could support both old and new clients. With REST-based practices, it’s much easier Especially using the Spring stack.</p><p>Imagine this design problem: You’ve rolled out a system with this <strong>Employee</strong>-based record. The system is a major hit. You’ve sold your system to countless enterprises. Suddenly, the need for an employee’s name to be split into <strong>firstName</strong> and <strong>lastName</strong> arises.</p><p>Uh oh. Didn’t think of that.</p><p>Before you open up the <strong>Employee</strong> class and replace the single field <strong>name</strong> with <strong>firstName</strong> and <strong>lastName</strong>, stop and think for a second. Will that break any clients? How long will it take to upgrade them. Do you even control all the clients accessing your services?</p><p>Downtime = lost money. Is management ready for that?</p><p>There is an old strategy that precedes REST by years.</p><blockquote><p>Never delete a column in a database.</p></blockquote><p>You can always add columns (fields) to a database table. But don’t take one away. The principle in RESTful services is the same. Add new fields to your JSON representations, but don’t take any away. Like this:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"firstName"</span>: <span class="string">"Bilbo"</span>,</span><br><span class="line">  <span class="attr">"lastName"</span>: <span class="string">"Baggins"</span>,</span><br><span class="line">  <span class="attr">"role"</span>: <span class="string">"burglar"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Bilbo Baggins"</span>,</span><br><span class="line">  <span class="attr">"_links"</span>: &#123;</span><br><span class="line">    <span class="attr">"self"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://localhost:8080/employees/1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"employees"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://localhost:8080/employees"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Notice how this format shows <strong>firstName</strong>, <strong>lastName</strong>, AND <strong>name</strong>? While it sports duplication of information, the purpose is to support both old and new clients. That means you can upgrade the server without requiring clients upgrade at the same time. A good move that should reduce downtime.</p><p>And not only should you show this information in both the “old way” and the “new way”, you should also process incoming data both ways.</p><p>How? Simple. Like this:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> String firstName;</span><br><span class="line">  <span class="keyword">private</span> String lastName;</span><br><span class="line">  <span class="keyword">private</span> String role;</span><br><span class="line"></span><br><span class="line">  Employee() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  Employee(String firstName, String lastName, String role) &#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    <span class="keyword">this</span>.role = role;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    String[] parts =name.split(<span class="string">" "</span>);</span><br><span class="line">    <span class="keyword">this</span>.firstName = parts[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.lastName = parts[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This class is very similar to the previous version of <strong>Employee</strong>. Let’s go over the changes:</p><ul><li>Field name has been replaced by firstName and lastName. Lombok will generate getters and setters for those.</li><li>A “virtual” getter for the old <strong>name</strong> property, <strong>getName()</strong> is defined. It uses the <strong>firstName</strong> and <strong>lastName</strong> fileds to produce a value.</li><li>A “virtual” setter for the old <strong>name</strong> property is also defined, <strong>setName()</strong>. It parses an incoming string and stores it into the proper fields.</li></ul><p>Of course not EVERY change to your API is as simple as splitting a string or merging two strings. But it’s surely not impossible to come up with a set of transform for most scenarios (情景), ehh?</p><p>Another fine tuning is to ensure each of your REST methods returns a proper response. Update the POST method like this:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/employees"</span>)</span><br><span class="line">ResponseEntity&lt;?&gt; newEmployee(<span class="meta">@RequestBody</span> Employee newEmployee) <span class="keyword">throws</span> URISyntaxException &#123;</span><br><span class="line"></span><br><span class="line">  EntityModel&lt;Employee&gt; entityModel = assembler.toModel(repository.save(newEmployee));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ResponseEntity</span><br><span class="line">    .created(entityModel.getRequiredLink(IanaLinkRelations.SELF).toUri())</span><br><span class="line">    .body(entityModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>The new <strong>Employee</strong> object is saved as before. But the resulting object is wrapped using the <strong>EmployeeModelAssembler</strong>.</li><li>Spring MVC’s <strong>responseEntity</strong> is used to create an <strong>HTTP 201 Created</strong> status message. This type of response typically includes a <strong>Location</strong> response header, and we use the URI derived from the model’s self-related link.</li><li>Additionally, return the resource-based version of the saved object.</li></ul><p>With this tweak (微调) in place, you can use the same endpoint to create a new employee resource, and use the legacy <strong>name</strong> field:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v -X POST localhost:8080/employees -H <span class="string">'Content-Type:application/json'</span> -d <span class="string">'&#123;"name": "Samwise Gamgee", "role": "gardener"&#125;'</span></span><br></pre></td></tr></table></figure></p><p>The output is shown below:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt; POST /employees HTTP/1.1</span><br><span class="line">&gt; Host: localhost:8080</span><br><span class="line">&gt; User-Agent: curl/7.54.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; Content-Type:application/json</span><br><span class="line">&gt; Content-Length: 46</span><br><span class="line">&gt;</span><br><span class="line">&lt; Location: http://localhost:8080/employees/3</span><br><span class="line">&lt; Content-Type: application/hal+json;charset=UTF-8</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; Date: Fri, 10 Aug 2018 19:44:43 GMT</span><br><span class="line">&lt;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 3,</span><br><span class="line">  &quot;firstName&quot;: &quot;Samwise&quot;,</span><br><span class="line">  &quot;lastName&quot;: &quot;Gamgee&quot;,</span><br><span class="line">  &quot;role&quot;: &quot;gardener&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;Samwise Gamgee&quot;,</span><br><span class="line">  &quot;_links&quot;: &#123;</span><br><span class="line">    &quot;self&quot;: &#123;</span><br><span class="line">      &quot;href&quot;: &quot;http://localhost:8080/employees/3&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;employees&quot;: &#123;</span><br><span class="line">      &quot;href&quot;: &quot;http://localhost:8080/employees&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This not only has the resulting object rendered in HAL (both <strong>name</strong> as well as <strong>firstName</strong> / <strong>lastName</strong>), but also the <strong>Location</strong> header populated with <strong><a href="http://localhost:8080/employees/3">http://localhost:8080/employees/3</a></strong>. A hypermedia powered client could opt to “surf” to this new resource and proceed to interact with it.</p><p>The PUT controller method needs similar tweaks:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"/employees/&#123;id&#125;"</span>)</span><br><span class="line">ResponseEntity&lt;?&gt; replaceEmployee(<span class="meta">@RequestBody</span> Employee newEmployee, <span class="meta">@PathVariable</span> Long id) <span class="keyword">throws</span> URISyntaxException &#123;</span><br><span class="line"></span><br><span class="line">  Employee updatedEmployee = repository.findById(id)</span><br><span class="line">    .map(employee -&gt; &#123;</span><br><span class="line">      employee.setName(newEmployee.getName());</span><br><span class="line">      employee.setRole(newEmployee.getRole());</span><br><span class="line">      <span class="keyword">return</span> repository.save(employee);</span><br><span class="line">    &#125;)</span><br><span class="line">    .orElseGet(() -&gt; &#123;</span><br><span class="line">      newEmployee.setId(id);</span><br><span class="line">      <span class="keyword">return</span> repository.save(newEmployee);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  EntityModel&lt;Employee&gt; entityModel = assembler.toModel(updatedEmployee);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ResponseEntity</span><br><span class="line">    .created(entityModel.getRequiredLink(IanaLinkRelations.SELF).toUri())</span><br><span class="line">    .body(entityModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The <strong>Employee</strong> object built from the <strong>save()</strong> operation is then wrapped using the <strong>EmployeeModelAssembler</strong> into an <strong>EntityModel</strong> object. Using the <strong>getRequiredLink()</strong> method, you can retrieve (找回) the Link created by the <strong>EmployeeModelAssembler</strong> with a SELF rel. This method returns a Link which must be turned into a URI with the <strong>toUri</strong> method.</p><p>Since we want a more detailed HTTP response code than <strong>200 OK</strong>, we will use Spring MVC’s <strong>ResponseEntity</strong> wrapper. It has handy static method <strong>created()</strong> where we can plug (补充) in the resource’s URI. It’s debatable (有争议的) if <strong>HTTP 201 Created</strong> carries the right semantics (语意) since we aren’t necessarily “creating” a new resource. But it comes pre-loaded with a Location response header, so run with it. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v -X PUT localhost:8080/employees/3 -H &apos;Content-Type:application/json&apos; -d &apos;&#123;&quot;name&quot;: &quot;Samwise Gamgee&quot;, &quot;role&quot;: &quot;ring bearer&quot;&#125;&apos;</span><br><span class="line"></span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to localhost (::1) port 8080 (#0)</span><br><span class="line">&gt; PUT /employees/3 HTTP/1.1</span><br><span class="line">&gt; Host: localhost:8080</span><br><span class="line">&gt; User-Agent: curl/7.54.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; Content-Type:application/json</span><br><span class="line">&gt; Content-Length: 49</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 201</span><br><span class="line">&lt; Location: http://localhost:8080/employees/3</span><br><span class="line">&lt; Content-Type: application/hal+json;charset=UTF-8</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; Date: Fri, 10 Aug 2018 19:52:56 GMT</span><br><span class="line">&#123;</span><br><span class="line">&quot;id&quot;: 3,</span><br><span class="line">&quot;firstName&quot;: &quot;Samwise&quot;,</span><br><span class="line">&quot;lastName&quot;: &quot;Gamgee&quot;,</span><br><span class="line">&quot;role&quot;: &quot;ring bearer&quot;,</span><br><span class="line">&quot;name&quot;: &quot;Samwise Gamgee&quot;,</span><br><span class="line">&quot;_links&quot;: &#123;</span><br><span class="line">&quot;self&quot;: &#123;</span><br><span class="line">&quot;href&quot;: &quot;http://localhost:8080/employees/3&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;employees&quot;: &#123;</span><br><span class="line">&quot;href&quot;: &quot;http://localhost:8080/employees&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That employee resource has now been updated and the location URI sent back. Finally, update the DELETE operation suitably:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/employees/&#123;id&#125;"</span>)</span><br><span class="line">ResponseEntity&lt;?&gt; deleteEmployee(<span class="meta">@PathVariable</span> Long id) &#123;</span><br><span class="line"></span><br><span class="line">  repository.deleteById(id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ResponseEntity.noContent().build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This return an <strong>HTTP 204 No Content</strong> response.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v -X DELETE localhost:8080/employees/1</span><br><span class="line"></span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to localhost (::1) port 8080 (#0)</span><br><span class="line">&gt; DELETE /employees/1 HTTP/1.1</span><br><span class="line">&gt; Host: localhost:8080</span><br><span class="line">&gt; User-Agent: curl/7.54.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 204</span><br><span class="line">&lt; Date: Fri, 10 Aug 2018 21:30:26 GMT</span><br></pre></td></tr></table></figure><blockquote><p>Making changes to the fields in the <strong>Employee</strong> class will require coordination (协调) with your detabase team, so that they can properly (正确地) migrate existing content into the new columns.</p></blockquote><p>You are now ready for an upgrade that will NOT disturb existing clients while newer clients can take advantage of the enhancements (增强)!</p><p>By the way, are you worried about sending too much information over the wire (电线)? In some systems where every byte counts, evolution of APIs may need to take a backseat (后座). But don’t pursue such premature (未成熟的) optimization until you measure.</p>]]></content>
      
      
      <categories>
          
          <category> Spring Tutorial </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 锁</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E9%94%81/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>只有正确指定主键，才会执行行锁，否则执行表锁。</p><p>无锁<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">-1</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure></p><p>行锁<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> fro <span class="keyword">update</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">name</span> = <span class="string">'kkk'</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure></p><p>表锁<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 主键不明确</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'kkk'</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> &lt;&gt; <span class="number">3</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure></p><h2 id="锁算法"><a href="#锁算法" class="headerlink" title="锁算法"></a>锁算法</h2><h4 id="行锁算法"><a href="#行锁算法" class="headerlink" title="行锁算法"></a>行锁算法</h4><p>Record Lock（普通行锁）</p><ol><li>键值在条件范围内</li><li>记录存在</li></ol><p>Gap Lock（间隙锁）</p><ol><li>对于键值不存条件范围内，叫做“间隙”（GAP），引擎会对这个“间隙”加锁，这种机制叫做GAP机制。</li></ol><p>Next-Key Lock（行 &amp; 间隙）</p><ol><li>在键值范围条件内，同时键值又不存在条件范围内 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- id 只有 50</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> &gt; <span class="number">49</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure></li></ol><h4 id="表锁算法"><a href="#表锁算法" class="headerlink" title="表锁算法"></a>表锁算法</h4><p>意向锁（升级机制）</p><ol><li>当一个事务带着表锁去访问一个被加了行锁的资源，那么此时这个行锁就会升级为意向锁，将表锁定。 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务 A 升级表锁</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务 B 锁表</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'kkk%'</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure></li></ol><p>自增锁</p><ol><li>事务插入自增类型的列时，获取自增锁<br> 如果一个事务正在往表插入自增记录，其它事务都必须等待</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>共享锁 &amp; 排它锁</p><blockquote><p>行锁和表锁其实是粒度的概念，共享锁和排它锁是它们的具体实现</p></blockquote><p>共享锁</p><ol><li>允许一个事务去度一行，阻止其它事务去获取该行的排它锁</li><li>一般理解：能度，不能写</li></ol><p>排它锁：写锁</p><ol><li>允许持有排它锁的事务读取数据，阻止其它事务获取该资源的共享锁和排它锁</li><li>不能访问任何锁，不代表不能读</li></ol><p>注意点</p><ol><li>某个事务获取数据的排它锁，其它事务不能获取该数据的任何锁，并不代表其它事务不能无锁读取该数据 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 无锁</span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> ....</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 共享锁</span></span><br><span class="line"><span class="comment">-- MySQL 8.0 以上，for share 代替了 lock in share mode</span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 排它锁</span></span><br><span class="line"><span class="keyword">update</span> ...</span><br><span class="line"><span class="keyword">delete</span> ...</span><br><span class="line"><span class="keyword">insert</span> ...</span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">for</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="乐观锁-amp-悲观锁"><a href="#乐观锁-amp-悲观锁" class="headerlink" title="乐观锁 &amp; 悲观锁"></a>乐观锁 &amp; 悲观锁</h2><blockquote><p>不管什么锁都需要加失败重试</p></blockquote><p>乐观锁</p><ol><li>一般通过版本号进行更新 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upate user <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'www'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">version</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ol><p>悲观锁</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h2 id="什么是锁"><a href="#什么是锁" class="headerlink" title="什么是锁"></a>什么是锁</h2><p>锁是计算机协调多个进程或线程并发访问同一资源的机制（避免资源争抢）。</p><p>加锁是实现数据库并发控制的一个非常重要的技术。当事务在对某个数据对象进行操作前，先向系统发出请求，对其加锁。加锁后事务就对该数据对象有了一定的控制，在该事务释放锁之前，其他的事务不能对此数据对象进行更新操作。</p><h2 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h2><p>从对数据操作的粒度分：</p><ol><li>表锁：操作时，会锁定整个表</li><li>行锁：操作时，会锁定当前操作行</li></ol><p>从对数据操作的类型分：</p><ol><li>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会相互影响。</li><li>写锁（排它锁）：当前操作没有完成之前，它会阻断其它写锁和读锁。</li></ol><h2 id="MySQL锁"><a href="#MySQL锁" class="headerlink" title="MySQL锁"></a>MySQL锁</h2><p>相对其它数据库而言，MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。下表中罗列了各种存储引擎对锁的支持情况：</p><div class="table-container"><table><thead><tr><th style="text-align:left">存储引擎</th><th>表级锁</th><th>行级锁</th><th>页面锁</th></tr></thead><tbody><tr><td style="text-align:left">MyISAM</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td style="text-align:left">InnoDB</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td style="text-align:left">MEMORY</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td style="text-align:left">DBD</td><td>支持</td><td>不支持</td><td>支持</td></tr></tbody></table></div><p>MySQL 这 3 种锁的特性可大致归纳如下：</p><div class="table-container"><table><thead><tr><th style="text-align:left">锁类型</th><th>特点</th></tr></thead><tbody><tr><td style="text-align:left">表级锁</td><td>偏向 MyISAM 存储引擎，开销小；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最小</td></tr><tr><td style="text-align:left">行级锁</td><td>偏向 InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高</td></tr><tr><td style="text-align:left">页面锁</td><td>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁直接，并发度一般</td></tr></tbody></table></div><p>从上述特点可见，很难笼统地说哪种锁更好，只能就具体应用的特点来说哪种锁更适合！仅从锁的角度来说：表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如 Web 应用。而行锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并查询的应用，如一些在线事务处理（OLTP）系统。</p><h2 id="MyISAM-表锁"><a href="#MyISAM-表锁" class="headerlink" title="MyISAM 表锁"></a>MyISAM 表锁</h2><p>MyISAM 存储引擎只支持表锁，这也是 MySQL 开始几个版本中唯一支持的锁类型。</p><h4 id="如何加锁"><a href="#如何加锁" class="headerlink" title="如何加锁"></a>如何加锁</h4><p>MyISAM 在开始执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（INSERT、UPDATE、DELETE 等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此，用户一般不需要直接用 LOCK TABLE 命令 MyISAM 表显式加锁。</p><p>显式加表锁语法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 加读锁</span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> table_name <span class="keyword">read</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 加写锁</span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> table_name write;</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- book 表 user表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 客户端1，加book读锁</span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> book <span class="keyword">read</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 客户端1，能正常读book数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> book;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 客户端2，能正常读book数据（读锁，共享锁）</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> book;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 客户端1，不能读user数据，因为已经锁定了book，不能访问其它表</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 客户端2，能读user数据，因为没有锁</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 客户端1，不能写book数据，因为是读锁</span></span><br><span class="line"><span class="keyword">update</span> book <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'Solr'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 客户端2，写book数据进入阻塞状态，需要客户端1释放表锁才能继续进行</span></span><br><span class="line"><span class="keyword">update</span> book <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'Solr'</span>;</span><br></pre></td></tr></table></figure><p>理解：</p><ol><li>表的读锁和写锁同时只能有一个。一个客户端同一时间只能拥有一个锁。</li><li>当一个客户端拥有了一个表的读锁时，只能拥有此表的读权限，不能修改，不能操作其它表。</li><li>其它客户端可以共享此锁（不拥有此锁），可以访问此表数据，也可以操作其它表数据。</li><li>一个客户端同一时间只能拥有一个锁。所以其它客户端要修改此表，只能等待锁释放了。</li></ol><p>test:</p><ol><li>当一个线程拥有了一个表的读锁，它不会阻塞其它线程的读操作，会阻塞写操作。</li></ol><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>锁模式的相互兼容性：</p><div class="table-container"><table><thead><tr><th style="text-align:left">当前锁模式</th><th>无请求</th><th>读请求锁</th><th>写请求锁</th></tr></thead><tbody><tr><td style="text-align:left">读锁</td><td>是</td><td>是</td><td>否</td></tr><tr><td style="text-align:left">写锁</td><td>是</td><td>否</td><td>否</td></tr></tbody></table></div><p>由上表可见：</p><ol><li>对 MyISAM 表的读操作，不会阻塞其它用户对同一表的读请求，但会阻塞对同一表的写请求。</li><li>对 MyISAM 表的写操作，则会阻止其它用户对同一表的读和写操作。</li></ol><p>此外，MyISAM 的读写锁调度是写优先，这也是 MyISAM 不适合做写为主的表的存储引擎的原因。因为写锁后，其它线程不能做任何操作，大量的更新会使得查询很难得到锁，从而造成永远阻塞。</p><h2 id="锁的操作"><a href="#锁的操作" class="headerlink" title="锁的操作"></a>锁的操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询锁的争用情况</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> <span class="keyword">tables</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询表的锁定情况</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Table_lo%'</span></span><br></pre></td></tr></table></figure><h2 id="行锁介绍"><a href="#行锁介绍" class="headerlink" title="行锁介绍"></a>行锁介绍</h2><p>行锁是偏向 InnoDB 存储引擎，开销大，加锁慢，会出现死锁，锁的粒度最小，发生锁冲突的概率最低，并发度也最高。</p><p>InnoDB 与 MyISAM 的两个最大不同点是：一支持事务，而采用了行锁。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h4 id="事务及其-ACID-属性"><a href="#事务及其-ACID-属性" class="headerlink" title="事务及其 ACID 属性"></a>事务及其 ACID 属性</h4><p>事务是由一组 SQL 语句组成的逻辑处理单元。</p><p>事务具有以下 4 个特性，简称为事务的 ACID 属性。</p><div class="table-container"><table><thead><tr><th style="text-align:left">ACID 属性</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left">原子性</td><td>事务是一个原子操作，其对数据的修改，要么全部成功，要么全部失败</td></tr><tr><td style="text-align:left">一致性</td><td>在事务开始和完成时，数据都必须保持一致状态</td></tr><tr><td style="text-align:left">隔离性</td><td>数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境运行</td></tr><tr><td style="text-align:left">持久性</td><td>事务完成之后，对于数据的修改是永久性的</td></tr></tbody></table></div><h4 id="并发事务处理带来的问题"><a href="#并发事务处理带来的问题" class="headerlink" title="并发事务处理带来的问题"></a>并发事务处理带来的问题</h4><p>|问题|含义|<br>|丢失更新|当两个或多个事务选择同一行，最初的事务修改的值，会被后面的事务修改的值覆盖|<br>|脏独|当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问了这个数据，然后使用了数据|<br>|不可重复读|一个事务在读取某些数据时，再次读取以前读过的数据，却发现和以前读出的数据不一致|<br>|幻读|一个事务按照相同的查询条件重新读取以前查询过的数据，却发现其它事务插入了满足其查询条件的新数据|</p><h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><p>为了解决上诉提到的事务并发问题，数据库提供了一定的事务隔离机制来解决这个问题。数据库的事务隔离越严格，并发副作用越小，但付出的代价也就越大，因为事务隔离实质上就是使用事务在一定程度上“串行化”进行，这显然与“并发”是矛盾的。</p><p>数据库的隔离级别有 4 个，由低到高依次为读未提交、读已提交、可重复读、串行化，这四个级别解决了脏写、脏读、不可重复读、幻读这几类问题。</p><div class="table-container"><table><thead><tr><th style="text-align:left">隔离级别</th><th>丢失更新</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td style="text-align:left">Read uncommited</td><td>x</td><td>y</td><td>y</td><td>y</td></tr><tr><td style="text-align:left">Read commited</td><td>x</td><td>x</td><td>y</td><td>y</td></tr><tr><td style="text-align:left">Repeatable read</td><td>x</td><td>x</td><td>x</td><td>y</td></tr><tr><td style="text-align:left">Serializable</td><td>x</td><td>x</td><td>x</td><td>x</td></tr></tbody></table></div><p>MySQL 的数据库的默认隔离级别为 Repeatable read，查看方式为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sho variables tx_Isolation;</span><br></pre></td></tr></table></figure><h2 id="InnoDB-的行锁模式"><a href="#InnoDB-的行锁模式" class="headerlink" title="InnoDB 的行锁模式"></a>InnoDB 的行锁模式</h2><h2 id="案例准备工作"><a href="#案例准备工作" class="headerlink" title="案例准备工作"></a>案例准备工作</h2><h2 id="行锁基本演示"><a href="#行锁基本演示" class="headerlink" title="行锁基本演示"></a>行锁基本演示</h2><h2 id="行锁升级为表锁"><a href="#行锁升级为表锁" class="headerlink" title="行锁升级为表锁"></a>行锁升级为表锁</h2><p>如果不通过索引条件检索数据， 那么 InnoDB 将对表中所有记录都加锁，实际效果和表锁是一样的。</p><blockquote><p>如果一个 VARCHAR 类型的索引列（如用户名）没有加单引号（where name = 900 &amp; where name = ‘900’），则索引失效。</p></blockquote><h2 id="间隙锁危害"><a href="#间隙锁危害" class="headerlink" title="间隙锁危害"></a>间隙锁危害</h2><p>当我们用范围条件，而不是使用相等条件检索数据，并请求共享或排它锁，InnoDB 会给符合条件的已有数据进行加锁；对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP）”，InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁（Next-Key锁）。</p><h2 id="InnoDB-行锁争用情况"><a href="#InnoDB-行锁争用情况" class="headerlink" title="InnoDB 行锁争用情况"></a>InnoDB 行锁争用情况</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'innodb_row_lock%'</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>InnoDB 存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面带来了性能耗损可能会比表锁更高一点，但是在整体并发处理能力方面要远远高于 MyISAM 的表锁。当系统并发量较高时，InnoDB 的整体性能和 MyISAM 相比就会有比较明显的优势。</p><p>但是，InnoDB 的行级锁同样也有其脆弱的一面，当我们使用不当时，可能会让 InnoDB 的整体性能表现不仅不能比 MyISAM 高，甚至可能会更差。</p><p>优化建议：</p><ol><li>尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁</li><li>合理设计索引，尽量缩小锁的范围</li><li>尽可能检索索引条件，及索引范围，避免间隙锁</li><li>尽量可能事务大小，减少锁定资源量和时间长度</li><li>尽可能使用低级别事务隔离（但是需要满足业务层面需求）</li></ol><h2 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h2><h2 id="索引的缺点"><a href="#索引的缺点" class="headerlink" title="索引的缺点"></a>索引的缺点</h2><h2 id="索引性能对比"><a href="#索引性能对比" class="headerlink" title="索引性能对比"></a>索引性能对比</h2><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例 1"></a>案例 1</h4><p>在通常情况下，有索引的情况下查询比较快，插入比较慢，所以在大批量的数据导入操作中应该首先删除索引，待数据导入完成后再建立索引。</p><div class="table-container"><table><thead><tr><th style="text-align:left">表名</th><th style="text-align:left">表属性</th><th style="text-align:left">当前数据量</th><th>插入（秒）</th><th>查询（秒）</th><th>删除（秒）</th></tr></thead><tbody><tr><td style="text-align:left">test1</td><td style="text-align:left">有索引</td><td style="text-align:left">50W</td><td>0.15</td><td>1.67</td></tr><tr><td style="text-align:left">test2</td><td style="text-align:left">无索引</td><td style="text-align:left">50W</td><td>0.00</td><td>2.53</td></tr><tr><td style="text-align:left">test1</td><td style="text-align:left">有索引</td><td style="text-align:left">100W</td><td></td><td></td></tr><tr><td style="text-align:left">test2</td><td style="text-align:left">无索引</td><td style="text-align:left">100W</td><td></td><td></td></tr><tr><td style="text-align:left">test1</td><td style="text-align:left">有索引</td><td style="text-align:left">200W</td><td></td><td></td></tr><tr><td style="text-align:left">test2</td><td style="text-align:left">无索引</td><td style="text-align:left">200W</td><td></td></tr></tbody></table></div><h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例 2"></a>案例 2</h4><div class="table-container"><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">无索引</th><th style="text-align:left">单个索引</th><th style="text-align:left">多个索引</th></tr></thead><tbody><tr><td style="text-align:left">插入 3000 记录</td></tr><tr><td style="text-align:left">插入 19000 记录</td></tr></tbody></table></div><p><a href="https://www.cnblogs.com/ssslinppp/p/8423472.html"></a></p><h4 id="案例-3"><a href="#案例-3" class="headerlink" title="案例 3"></a>案例 3</h4><p><a href="https://blog.csdn.net/lenux2017/article/details/80086265"></a></p><p>对 200000 条数据的查询结果对比。</p><div class="table-container"><table><thead><tr><th style="text-align:left">表属性</th><th>插入（秒）</th><th>查询（秒）</th><th>删除（秒）</th></tr></thead><tbody><tr><td style="text-align:left">无索引</td><td></td><td>0.15</td></tr><tr><td style="text-align:left">有索引</td><td></td><td>0.09</td></tr></tbody></table></div><h2 id="什么时候使用索引"><a href="#什么时候使用索引" class="headerlink" title="什么时候使用索引"></a>什么时候使用索引</h2><h2 id="什么时候不使用索引"><a href="#什么时候不使用索引" class="headerlink" title="什么时候不使用索引"></a>什么时候不使用索引</h2><p>尽管创建索引的目的是提升数据库的性能，但是还是有一些情况应当避免使用索引。下面几条指导原则给出了何时应当重新考虑是否使用索引：</p><ul><li><p>小的数据表不应当使用索引</p></li><li><p>需要频繁进行大批量的更新或者插入操作的表</p></li><li><p>如果列中包含大数或者 NULL 值，不宜创建索引</p></li><li><p>频繁操作的列不宜创建索引</p></li></ul><h2 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h2><ol><li>对查询频率较高，且数据量较大的表建立索引</li><li>索引字段的选择，最佳候选列应当从where子句的条件中提取。</li><li>使用唯一索引，区分度越高，索引效率越高</li><li>索引不是越多越好，维护索引的代价也大</li><li>使用短索引，索引创建后也是使用磁盘来存储的，因此提升索引访问的I/O效率很重要</li><li>利用最左前缀，N个列组合而成的组合索引，那么相当于创建了N个索引。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用MySQL</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E9%94%812/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E9%94%812/</url>
      
        <content type="html"><![CDATA[<p>网上流传较广的50道SQL训练，奋斗了不知道多久终于写完了。前18道题的难度依次递增，从19题开始的后半部分算是循环练习和额外function的附加练习，难度恢复到普通状态。</p><p>第9题非常难，我反正没有写出来，如果有写出来了的朋友还请赐教。</p><p>这50道里面自认为应该没有太多错误，而且尽可能使用了最简单或是最直接的查询，有多种不相上下解法的题目我也都列出了，但也欢迎一起学习的朋友进行讨论和解法优化啊~</p><h2 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h2><p>学生表 Student</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Student(<span class="keyword">SId</span> <span class="built_in">varchar</span>(<span class="number">10</span>),Sname <span class="built_in">varchar</span>(<span class="number">10</span>),Sage datetime,Ssex <span class="built_in">varchar</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'赵雷'</span> , <span class="string">'1990-01-01'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'钱电'</span> , <span class="string">'1990-12-21'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'孙风'</span> , <span class="string">'1990-12-20'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'李云'</span> , <span class="string">'1990-12-06'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'周梅'</span> , <span class="string">'1991-12-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'吴兰'</span> , <span class="string">'1992-01-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'郑竹'</span> , <span class="string">'1989-01-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'09'</span> , <span class="string">'张三'</span> , <span class="string">'2017-12-20'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'10'</span> , <span class="string">'李四'</span> , <span class="string">'2017-12-25'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'11'</span> , <span class="string">'李四'</span> , <span class="string">'2012-06-06'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'12'</span> , <span class="string">'赵六'</span> , <span class="string">'2013-06-13'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'13'</span> , <span class="string">'孙七'</span> , <span class="string">'2014-06-01'</span> , <span class="string">'女'</span>);</span><br></pre></td></tr></table></figure><p>科目表 Course</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Course(CId <span class="built_in">varchar</span>(<span class="number">10</span>),Cname <span class="keyword">nvarchar</span>(<span class="number">10</span>),TId <span class="built_in">varchar</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'语文'</span> , <span class="string">'02'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'数学'</span> , <span class="string">'01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'英语'</span> , <span class="string">'03'</span>);</span><br></pre></td></tr></table></figure><p>教师表 Teacher<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Teacher(TId <span class="built_in">varchar</span>(<span class="number">10</span>),Tname <span class="built_in">varchar</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'张三'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'李四'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'王五'</span>);</span><br></pre></td></tr></table></figure></p><p>成绩表 SC</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> SC(<span class="keyword">SId</span> <span class="built_in">varchar</span>(<span class="number">10</span>),CId <span class="built_in">varchar</span>(<span class="number">10</span>),score <span class="built_in">decimal</span>(<span class="number">18</span>,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'01'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'02'</span> , <span class="number">90</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'03'</span> , <span class="number">99</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'01'</span> , <span class="number">70</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'02'</span> , <span class="number">60</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'03'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'01'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'02'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'03'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'01'</span> , <span class="number">50</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'02'</span> , <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'03'</span> , <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'01'</span> , <span class="number">76</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'02'</span> , <span class="number">87</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'01'</span> , <span class="number">31</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'03'</span> , <span class="number">34</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'02'</span> , <span class="number">89</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'03'</span> , <span class="number">98</span>);</span><br></pre></td></tr></table></figure><h2 id="练习题目"><a href="#练习题目" class="headerlink" title="练习题目"></a>练习题目</h2><h4 id="查询”01”课程比”02”课程成绩高的学生的信息及课程分数"><a href="#查询”01”课程比”02”课程成绩高的学生的信息及课程分数" class="headerlink" title="查询”01”课程比”02”课程成绩高的学生的信息及课程分数"></a>查询”01”课程比”02”课程成绩高的学生的信息及课程分数</h4><p>因为需要全部的学生信息，则需要在 sc 表中得到符合条件的 sid 后与 student 表进行 join，可以 <code>left join</code> 也可以 <code>right join</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- left join</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sname, sc.* <span class="keyword">FROM</span>(</span><br><span class="line">        <span class="keyword">select</span>  t1.sid <span class="keyword">sid</span>, t1.cid t1_cid, t1.score t1_socre, t2.cid t2_cid, t2.score t2_socre <span class="keyword">from</span></span><br><span class="line">                (<span class="keyword">select</span> * <span class="keyword">from</span> sc <span class="keyword">where</span> sc.cid = <span class="string">'01'</span>) <span class="keyword">as</span> t1,</span><br><span class="line">                (<span class="keyword">select</span> * <span class="keyword">from</span> sc <span class="keyword">where</span> sc.cid = <span class="string">'02'</span>) <span class="keyword">as</span> t2</span><br><span class="line">        <span class="keyword">where</span> t1.sid = t2.sid <span class="keyword">and</span> t1.score &gt; t2.score</span><br><span class="line">) sc <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student s <span class="keyword">ON</span> s.sid = sc.sid</span><br><span class="line"></span><br><span class="line"><span class="comment">-- right join</span></span><br><span class="line"><span class="keyword">select</span> s.sname, sc.* <span class="keyword">from</span> student s <span class="keyword">right</span> <span class="keyword">join</span>(</span><br><span class="line">        <span class="keyword">select</span>  t1.sid <span class="keyword">sid</span>, t1.cid t1_cid, t1.score t1_socre, t2.cid t2_cid, t2.score t2_socre <span class="keyword">from</span></span><br><span class="line">                (<span class="keyword">select</span> * <span class="keyword">from</span> sc <span class="keyword">where</span> sc.cid = <span class="string">'01'</span>) <span class="keyword">as</span> t1,</span><br><span class="line">                (<span class="keyword">select</span> * <span class="keyword">from</span> sc <span class="keyword">where</span> sc.cid = <span class="string">'02'</span>) <span class="keyword">as</span> t2</span><br><span class="line">        <span class="keyword">where</span> t1.sid = t2.sid <span class="keyword">and</span> t1.score &gt; t2.score</span><br><span class="line">) sc <span class="keyword">on</span> s.sid = sc.sid</span><br><span class="line"></span><br><span class="line">sname<span class="keyword">sid</span>t1_cidt1_socret2_cidt2_socre</span><br><span class="line">钱电<span class="number">02</span><span class="number">01</span><span class="number">70.0</span><span class="number">02</span><span class="number">60.0</span></span><br><span class="line">李云<span class="number">04</span><span class="number">01</span><span class="number">50.0</span><span class="number">02</span><span class="number">30.0</span></span><br></pre></td></tr></table></figure><h4 id="查询同时存在”01”课程和”02”课程的情况"><a href="#查询同时存在”01”课程和”02”课程的情况" class="headerlink" title="查询同时存在”01”课程和”02”课程的情况"></a>查询同时存在”01”课程和”02”课程的情况</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 以Student作为主表</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> * <span class="keyword">from</span> sc <span class="keyword">where</span> sc.CId = <span class="string">'01'</span>) <span class="keyword">as</span> t1,</span><br><span class="line">    (<span class="keyword">select</span> * <span class="keyword">from</span> sc <span class="keyword">where</span> sc.CId = <span class="string">'02'</span>) <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">where</span> t1.SId = t2.SId;</span><br><span class="line"></span><br><span class="line">SIdCIdscoreSId(1)CId(1)score(1)</span><br><span class="line">010180.0010290.0</span><br><span class="line">020170.0020260.0</span><br><span class="line">030180.0030280.0</span><br><span class="line">040150.0040230.0</span><br><span class="line">050176.0050287.0</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以SC作为主表</span></span><br><span class="line">???</span><br></pre></td></tr></table></figure><h4 id="查询存在”01”课程但可能不存在”02”课程的情况-不存在时显示为-null"><a href="#查询存在”01”课程但可能不存在”02”课程的情况-不存在时显示为-null" class="headerlink" title="查询存在”01”课程但可能不存在”02”课程的情况(不存在时显示为 null)"></a>查询存在”01”课程但可能不存在”02”课程的情况(不存在时显示为 null)</h4><p>这一道就是明显需要使用 join 的情况了，02可能不存在，即为 <code>left join</code> 的右侧或 <code>right join</code> 的左侧即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- left join</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> * <span class="keyword">from</span> sc <span class="keyword">where</span> sc.CId = <span class="string">'01'</span>) <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">(<span class="keyword">select</span> * <span class="keyword">from</span> sc <span class="keyword">where</span> sc.CId = <span class="string">'02'</span>) <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">on</span> t1.SId = t2.SId;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- right join</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> * <span class="keyword">from</span> sc <span class="keyword">where</span> sc.CId = <span class="string">'02'</span>) <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span></span><br><span class="line">(<span class="keyword">select</span> * <span class="keyword">from</span> sc <span class="keyword">where</span> sc.CId = <span class="string">'01'</span>) <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">on</span> t1.SId = t2.SId;</span><br><span class="line"></span><br><span class="line">SIdCIdscoreSId(1)CId(1)score(1)</span><br><span class="line">010180.0010290.0</span><br><span class="line">020170.0020260.0</span><br><span class="line">030180.0030280.0</span><br><span class="line">040150.0040230.0</span><br><span class="line">050176.0050287.0</span><br><span class="line">060131.0null    null    null</span><br></pre></td></tr></table></figure><h4 id="查询平均成绩大于等于-60-分的同学的学生编号和学生姓名和平均成绩"><a href="#查询平均成绩大于等于-60-分的同学的学生编号和学生姓名和平均成绩" class="headerlink" title="查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩"></a>查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩</h4><p>这里只用根据学生 ID 把成绩分组，对分组中的 score 求平均值，最后在选取结果中 AVG 大于 60 的即可. 注意，这里必须要给计算得到的 AVG 结果一个 alias。（AS ss）得到学生信息的时候既可以用 join 也可以用一般的联合搜索</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- having</span></span><br><span class="line"><span class="keyword">select</span> st.sname <span class="keyword">name</span>, sc.score score <span class="keyword">from</span></span><br><span class="line">    student st,</span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">sid</span>, <span class="keyword">avg</span>(score) score <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span> <span class="keyword">having</span> score &gt; <span class="number">60</span>)sc</span><br><span class="line"><span class="keyword">where</span> st.sid = sc.sid</span><br><span class="line"></span><br><span class="line"><span class="comment">-- right join</span></span><br><span class="line"><span class="keyword">select</span> Student.SId, Student.Sname, r.ss <span class="keyword">from</span> Student <span class="keyword">right</span> <span class="keyword">join</span>(</span><br><span class="line">      <span class="keyword">select</span> <span class="keyword">SId</span>, <span class="keyword">AVG</span>(score) <span class="keyword">AS</span> ss <span class="keyword">from</span> sc</span><br><span class="line">      <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span></span><br><span class="line">      <span class="keyword">HAVING</span> <span class="keyword">AVG</span>(score)&gt; <span class="number">60</span></span><br><span class="line">)r <span class="keyword">on</span> Student.SId = r.SId;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- left join</span></span><br><span class="line"><span class="keyword">select</span> s.sid,ss,sname</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">sid</span>, <span class="keyword">AVG</span>(score) <span class="keyword">as</span> ss <span class="keyword">from</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">sid</span> <span class="keyword">HAVING</span> <span class="keyword">AVG</span>(score)&gt; <span class="number">60</span>)r</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> Student.SId, Student.Sname <span class="keyword">from</span> Student)s <span class="keyword">on</span> s.SId = r.SId;</span><br><span class="line"></span><br><span class="line">namescore</span><br><span class="line">赵雷89.66667</span><br><span class="line">钱电70.00000</span><br><span class="line">孙风80.00000</span><br><span class="line">周梅81.50000</span><br><span class="line">郑竹93.50000</span><br></pre></td></tr></table></figure><h4 id="查询在-SC-表存在成绩的学生信息"><a href="#查询在-SC-表存在成绩的学生信息" class="headerlink" title="查询在 SC 表存在成绩的学生信息"></a>查询在 SC 表存在成绩的学生信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span>(sname) <span class="keyword">from</span> student, sc <span class="keyword">where</span> student.sid = sc.sid</span><br><span class="line"></span><br><span class="line">sname</span><br><span class="line">赵雷</span><br><span class="line">钱电</span><br><span class="line">孙风</span><br><span class="line">李云</span><br><span class="line">周梅</span><br><span class="line">吴兰</span><br><span class="line">郑竹</span><br></pre></td></tr></table></figure><h4 id="查询所有同学的学生编号、学生姓名、选课总数、所有课程的成绩总和"><a href="#查询所有同学的学生编号、学生姓名、选课总数、所有课程的成绩总和" class="headerlink" title="查询所有同学的学生编号、学生姓名、选课总数、所有课程的成绩总和"></a>查询所有同学的学生编号、学生姓名、选课总数、所有课程的成绩总和</h4><p>联合查询不会显示没选课的学生。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student.sid, student.sname,r.coursenumber,r.scoresum</span><br><span class="line"><span class="keyword">from</span> student,</span><br><span class="line">(<span class="keyword">select</span> sc.sid, <span class="keyword">sum</span>(sc.score) <span class="keyword">as</span> scoresum, <span class="keyword">count</span>(sc.cid) <span class="keyword">as</span> coursenumber <span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sc.sid)r</span><br><span class="line"><span class="keyword">where</span> student.sid = r.sid;</span><br><span class="line"></span><br><span class="line">sidsnamecoursenumberscoresum</span><br><span class="line">01赵雷3269.0</span><br><span class="line">02钱电3210.0</span><br><span class="line">03孙风3240.0</span><br><span class="line">04李云3100.0</span><br><span class="line">05周梅2163.0</span><br><span class="line">06吴兰265.0</span><br><span class="line">07郑竹2187.0</span><br></pre></td></tr></table></figure><p>如要显示没选课的学生(显示为NULL)，需要使用join。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.sid, s.sname,r.coursenumber,r.scoresum</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    (<span class="keyword">select</span> student.sid,student.sname</span><br><span class="line">    <span class="keyword">from</span> student</span><br><span class="line">    )s</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">    (<span class="keyword">select</span></span><br><span class="line">        sc.sid, <span class="keyword">sum</span>(sc.score) <span class="keyword">as</span> scoresum, <span class="keyword">count</span>(sc.cid) <span class="keyword">as</span> coursenumber</span><br><span class="line">        <span class="keyword">from</span> sc</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> sc.sid</span><br><span class="line">    )r</span><br><span class="line">   <span class="keyword">on</span> s.sid = r.sid</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">sidsnamecoursenumberscoresum</span><br><span class="line">01赵雷3269.0</span><br><span class="line">02钱电3210.0</span><br><span class="line">03孙风3240.0</span><br><span class="line">04李云3100.0</span><br><span class="line">05周梅2163.0</span><br><span class="line">06吴兰265.0</span><br><span class="line">07郑竹2187.0</span><br><span class="line">09张三null    null</span><br><span class="line">10李四null    null</span><br></pre></td></tr></table></figure><h4 id="查有成绩的学生信息"><a href="#查有成绩的学生信息" class="headerlink" title="查有成绩的学生信息"></a>查有成绩的学生信息</h4><p>这一题涉及到in和exists的用法，在这种小表中，两种方法的效率都差不多。</p><p>当表2的记录数量非常大的时候，选用exists比in要高效很多</p><p>EXISTS用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值True或False.</p><p>结论：IN()适合B表比A表数据小的情况</p><p>结论：EXISTS()适合B表比A表数据大的情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- in</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sid</span>, sname <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">sid</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">sid</span> <span class="keyword">from</span> sc)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- exists</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sid</span>, sname <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> sc <span class="keyword">where</span> sc.sid = student.sid)</span><br><span class="line"></span><br><span class="line"><span class="keyword">sid</span>sname</span><br><span class="line"><span class="number">01</span>赵雷</span><br><span class="line"><span class="number">02</span>钱电</span><br><span class="line"><span class="number">03</span>孙风</span><br><span class="line"><span class="number">04</span>李云</span><br><span class="line"><span class="number">05</span>周梅</span><br><span class="line"><span class="number">06</span>吴兰</span><br><span class="line"><span class="number">07</span>郑竹</span><br></pre></td></tr></table></figure><h4 id="查询「李」姓老师的数量"><a href="#查询「李」姓老师的数量" class="headerlink" title="查询「李」姓老师的数量"></a>查询「李」姓老师的数量</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> teacher <span class="keyword">where</span> tname <span class="keyword">like</span> <span class="string">'李%'</span>;</span><br><span class="line"></span><br><span class="line">count</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="查询学过「张三」老师授课的同学的信息"><a href="#查询学过「张三」老师授课的同学的信息" class="headerlink" title="查询学过「张三」老师授课的同学的信息"></a>查询学过「张三」老师授课的同学的信息</h4><p>多表联合查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.sid, s.sname, t.tname <span class="keyword">from</span> student s, sc, course c, teacher t</span><br><span class="line"><span class="keyword">where</span> s.sid = sc.sid</span><br><span class="line"><span class="keyword">and</span>   sc.cid = c.cid</span><br><span class="line"><span class="keyword">and</span> c.tid = t.tid</span><br><span class="line"><span class="keyword">and</span> t.tname = <span class="string">'张三'</span>;</span><br><span class="line"></span><br><span class="line">sidsnametname</span><br><span class="line">01赵雷张三</span><br><span class="line">02钱电张三</span><br><span class="line">03孙风张三</span><br><span class="line">04李云张三</span><br><span class="line">05周梅张三</span><br><span class="line">07郑竹张三</span><br></pre></td></tr></table></figure><h4 id="查询没有学全所有课程的同学的信息"><a href="#查询没有学全所有课程的同学的信息" class="headerlink" title="查询没有学全所有课程的同学的信息"></a>查询没有学全所有课程的同学的信息</h4><p>因为有学生什么课都没有选，反向思考，先查询选了所有课的学生，再选择这些人之外的学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> student.sid <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">  <span class="keyword">select</span> sc.sid <span class="keyword">from</span> sc</span><br><span class="line">  <span class="keyword">group</span> <span class="keyword">by</span> sc.sid</span><br><span class="line">  <span class="keyword">having</span> <span class="keyword">count</span>(sc.cid)= (<span class="keyword">select</span> <span class="keyword">count</span>(cid) <span class="keyword">from</span> course)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">sidsnamessex</span><br><span class="line">05周梅女</span><br><span class="line">06吴兰女</span><br><span class="line">07郑竹女</span><br><span class="line">09张三女</span><br><span class="line">10李四女</span><br><span class="line">11李四女</span><br><span class="line">12赵六女</span><br><span class="line">13孙七女</span><br></pre></td></tr></table></figure><h4 id="查询至少有一门课与学号为”01”的同学所学相同的同学的信息"><a href="#查询至少有一门课与学号为”01”的同学所学相同的同学的信息" class="headerlink" title="查询至少有一门课与学号为”01”的同学所学相同的同学的信息"></a>查询至少有一门课与学号为”01”的同学所学相同的同学的信息</h4><p>这个用联合查询也可以，但是逻辑不清楚，我觉得较为清楚的逻辑是这样的：从sc表查询01同学的所有选课cid—从sc表查询所有同学的sid如果其cid在前面的结果中—从student表查询所有学生信息如果sid在前面的结果中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sid</span>, sname <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> student.sid <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> sc.sid <span class="keyword">from</span> sc</span><br><span class="line">    <span class="keyword">where</span> sc.cid <span class="keyword">in</span>(</span><br><span class="line">        <span class="keyword">select</span> sc.cid <span class="keyword">from</span> sc</span><br><span class="line">        <span class="keyword">where</span> sc.sid = <span class="string">'01'</span></span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">sidsname</span><br><span class="line">01赵雷</span><br><span class="line">02钱电</span><br><span class="line">03孙风</span><br><span class="line">04李云</span><br><span class="line">05周梅</span><br><span class="line">06吴兰</span><br><span class="line">07郑竹</span><br></pre></td></tr></table></figure><h4 id="查询和”01”号的同学学习的课程完全相同的其他同学的信息"><a href="#查询和”01”号的同学学习的课程完全相同的其他同学的信息" class="headerlink" title="查询和”01”号的同学学习的课程完全相同的其他同学的信息"></a>查询和”01”号的同学学习的课程完全相同的其他同学的信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sid</span> <span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">sid</span>&lt;&gt;<span class="string">'01'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span></span><br><span class="line"><span class="keyword">having</span> <span class="keyword">group_concat</span>(cid <span class="keyword">order</span> <span class="keyword">by</span> cid ) =</span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">group_concat</span>(cid <span class="keyword">order</span> <span class="keyword">by</span> cid ) <span class="keyword">from</span> SC <span class="keyword">where</span> <span class="keyword">sid</span> = <span class="string">'01'</span>)</span><br></pre></td></tr></table></figure><h4 id="查询没学过”张三”老师讲授的任一门课程的学生姓名"><a href="#查询没学过”张三”老师讲授的任一门课程的学生姓名" class="headerlink" title="查询没学过”张三”老师讲授的任一门课程的学生姓名"></a>查询没学过”张三”老师讲授的任一门课程的学生姓名</h4><p>仍然还是嵌套，三层嵌套， 或者多表联合查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sid</span>, sname <span class="keyword">from</span> student</span><br><span class="line">    <span class="keyword">where</span> student.sid <span class="keyword">not</span> <span class="keyword">in</span>(</span><br><span class="line">        <span class="keyword">select</span> sc.sid <span class="keyword">from</span> sc <span class="keyword">where</span> sc.cid <span class="keyword">in</span>(</span><br><span class="line">            <span class="keyword">select</span> course.cid <span class="keyword">from</span> course <span class="keyword">where</span> course.tid <span class="keyword">in</span>(</span><br><span class="line">                <span class="keyword">select</span> teacher.tid <span class="keyword">from</span> teacher <span class="keyword">where</span> tname = <span class="string">"张三"</span></span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sid</span>, sname <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> student.sid <span class="keyword">not</span> <span class="keyword">in</span>(</span><br><span class="line">    <span class="keyword">select</span> sc.sid <span class="keyword">from</span> sc,course,teacher</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        sc.cid = course.cid</span><br><span class="line">        <span class="keyword">and</span> course.tid = teacher.tid</span><br><span class="line">        <span class="keyword">and</span> teacher.tname= <span class="string">"张三"</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">sidsname</span><br><span class="line">06吴兰</span><br><span class="line">09张三</span><br><span class="line">10李四</span><br><span class="line">11李四</span><br><span class="line">12赵六</span><br><span class="line">13孙七</span><br></pre></td></tr></table></figure><h4 id="查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩"><a href="#查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩" class="headerlink" title="查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩"></a>查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩</h4><p>从SC表中选取score小于60的，并group by sid，having count 大于1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student.sid, student.sname, <span class="keyword">AVG</span>(sc.score) <span class="keyword">from</span> student,sc</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    student.sid = sc.sid <span class="keyword">and</span> sc.score&lt;<span class="number">60</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sc.sid</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">sidsnameAVG(sc.score)</span><br><span class="line">04李云33.33333</span><br><span class="line">06吴兰32.50000</span><br></pre></td></tr></table></figure><h4 id="检索”-01-“课程分数小于-60，按分数降序排列的学生信息"><a href="#检索”-01-“课程分数小于-60，按分数降序排列的学生信息" class="headerlink" title="检索” 01 “课程分数小于 60，按分数降序排列的学生信息"></a>检索” 01 “课程分数小于 60，按分数降序排列的学生信息</h4><p>双表联合查询，在查询最后可以设置排序方式，语法为ORDER BY <strong>*</strong> DESC\ASC;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student.sid, student.sname, sc.score <span class="keyword">from</span> student, sc</span><br><span class="line"><span class="keyword">where</span> student.sid = sc.sid</span><br><span class="line"><span class="keyword">and</span> sc.score &lt; <span class="number">60</span></span><br><span class="line"><span class="keyword">and</span> cid = <span class="string">"01"</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> sc.score <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line">sidsnamescore</span><br><span class="line">04李云50.0</span><br><span class="line">06吴兰31.0</span><br></pre></td></tr></table></figure><h4 id="按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩"><a href="#按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩" class="headerlink" title="按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩"></a>按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *  <span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">sid</span>,<span class="keyword">avg</span>(score) <span class="keyword">as</span> avscore <span class="keyword">from</span> sc</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span></span><br><span class="line">    )r</span><br><span class="line"><span class="keyword">on</span> sc.sid = r.sid</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> avscore <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line">sidcidscoresid(1)avscore</span><br><span class="line">070289.00793.50000</span><br><span class="line">070398.00793.50000</span><br><span class="line">010399.00189.66667</span><br><span class="line">010290.00189.66667</span><br><span class="line">010180.00189.66667</span><br><span class="line">050176.00581.50000</span><br><span class="line">050287.00581.50000</span><br><span class="line">030280.00380.00000</span><br></pre></td></tr></table></figure><h4 id="查询各科成绩最高分、最低分和平均分"><a href="#查询各科成绩最高分、最低分和平均分" class="headerlink" title="查询各科成绩最高分、最低分和平均分"></a>查询各科成绩最高分、最低分和平均分</h4><p>以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率</p><p>及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90</p><p>要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">sc.CId ,</span><br><span class="line"><span class="keyword">max</span>(sc.score)<span class="keyword">as</span> 最高分,</span><br><span class="line"><span class="keyword">min</span>(sc.score)<span class="keyword">as</span> 最低分,</span><br><span class="line"><span class="keyword">AVG</span>(sc.score)<span class="keyword">as</span> 平均分,</span><br><span class="line"><span class="keyword">count</span>(*)<span class="keyword">as</span> 选修人数,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&gt;=<span class="number">60</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> )/<span class="keyword">count</span>(*)<span class="keyword">as</span> 及格率,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&gt;=<span class="number">70</span> <span class="keyword">and</span> sc.score&lt;<span class="number">80</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> )/<span class="keyword">count</span>(*)<span class="keyword">as</span> 中等率,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&gt;=<span class="number">80</span> <span class="keyword">and</span> sc.score&lt;<span class="number">90</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> )/<span class="keyword">count</span>(*)<span class="keyword">as</span> 优良率,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&gt;=<span class="number">90</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> )/<span class="keyword">count</span>(*)<span class="keyword">as</span> 优秀率</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sc.CId</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">count</span>(*)<span class="keyword">DESC</span>, sc.CId <span class="keyword">ASC</span></span><br><span class="line"></span><br><span class="line">CId最高分最低分平均分选修人数及格率中等率优良率优秀率</span><br><span class="line"><span class="number">01</span><span class="number">80.0</span><span class="number">31.0</span><span class="number">64.50000</span><span class="number">6</span><span class="number">0.6667</span><span class="number">0.3333</span><span class="number">0.3333</span><span class="number">0.0000</span></span><br><span class="line"><span class="number">02</span><span class="number">90.0</span><span class="number">30.0</span><span class="number">72.66667</span><span class="number">6</span><span class="number">0.8333</span><span class="number">0.0000</span><span class="number">0.5000</span><span class="number">0.1667</span></span><br><span class="line"><span class="number">03</span><span class="number">99.0</span><span class="number">20.0</span><span class="number">68.50000</span><span class="number">6</span><span class="number">0.6667</span><span class="number">0.0000</span><span class="number">0.3333</span><span class="number">0.3333</span></span><br></pre></td></tr></table></figure><h4 id="按各科成绩进行排序，并显示排名，-Score-重复时保留名次空缺"><a href="#按各科成绩进行排序，并显示排名，-Score-重复时保留名次空缺" class="headerlink" title="按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺"></a>按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺</h4><p>这一道题有点tricky，可以用变量，但也有更为简单的方法，即自交（左交）</p><p>用sc中的score和自己进行对比，来计算“比当前分数高的分数有几个”。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.cid, a.sid, a.score, <span class="keyword">count</span>(b.score)+<span class="number">1</span> <span class="keyword">as</span> <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">from</span> sc <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> sc <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">on</span> a.score&lt;b.score <span class="keyword">and</span> a.cid = b.cid</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.cid, a.sid,a.score</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.cid, <span class="keyword">rank</span> <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line">cidsidscorerank</span><br><span class="line">010180.01</span><br><span class="line">010380.01</span><br><span class="line">010576.03</span><br><span class="line">010270.04</span><br><span class="line">010450.05</span><br><span class="line">010631.06</span><br><span class="line">020190.01</span><br><span class="line">020789.02</span><br><span class="line">020587.03</span><br><span class="line">020380.04</span><br></pre></td></tr></table></figure><h4 id="查询学生的总成绩，并进行排名，总分重复时不保留名次空缺"><a href="#查询学生的总成绩，并进行排名，总分重复时不保留名次空缺" class="headerlink" title="查询学生的总成绩，并进行排名，总分重复时不保留名次空缺"></a>查询学生的总成绩，并进行排名，总分重复时不保留名次空缺</h4><p>这里主要学习一下使用变量。在SQL里面变量用@来标识。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> @crank=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">select</span> q.sid, total, @crank := @crank +<span class="number">1</span> <span class="keyword">as</span> <span class="keyword">rank</span> <span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> sc.sid, <span class="keyword">sum</span>(sc.score) <span class="keyword">as</span> total <span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sc.sid</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> total <span class="keyword">desc</span>)q;</span><br><span class="line"></span><br><span class="line">sidtotalrank</span><br><span class="line">01269.01</span><br><span class="line">03240.02</span><br><span class="line">02210.03</span><br><span class="line">07187.04</span><br><span class="line">05163.05</span><br><span class="line">04100.06</span><br><span class="line">0665.07</span><br></pre></td></tr></table></figure><h4 id="统计各科成绩各分数段人数：课程编号，课程名称，-100-85-，-85-70-，-70-60-，-60-0-及所占百分比"><a href="#统计各科成绩各分数段人数：课程编号，课程名称，-100-85-，-85-70-，-70-60-，-60-0-及所占百分比" class="headerlink" title="统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比"></a>统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比</h4><p>有时候觉得自己真是死脑筋。group by以后的查询结果无法使用别名，所以不要想着先单表group by计算出结果再从第二张表里添上课程信息，而应该先将两张表join在一起得到所有想要的属性再对这张总表进行统计计算。这里就不算百分比了，道理相同。<br>注意一下，用case when 返回1 以后的统计不是用count而是sum</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> course.cname, course.cid,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&lt;=<span class="number">100</span> <span class="keyword">and</span> sc.score&gt;<span class="number">85</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">"[100-85]"</span>,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&lt;=<span class="number">85</span> <span class="keyword">and</span> sc.score&gt;<span class="number">70</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">"[85-70]"</span>,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&lt;=<span class="number">70</span> <span class="keyword">and</span> sc.score&gt;<span class="number">60</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">"[70-60]"</span>,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&lt;=<span class="number">60</span> <span class="keyword">and</span> sc.score&gt;<span class="number">0</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">"[60-0]"</span></span><br><span class="line"><span class="keyword">from</span> sc <span class="keyword">left</span> <span class="keyword">join</span> course</span><br><span class="line"><span class="keyword">on</span> sc.cid = course.cid</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sc.cid;</span><br><span class="line"></span><br><span class="line">cnamecid[100-85][85-70][70-60][60-0]</span><br><span class="line">语文010        312</span><br><span class="line">数学023        102</span><br><span class="line">英语032        202</span><br></pre></td></tr></table></figure><h4 id="查询各科成绩前三名的记录"><a href="#查询各科成绩前三名的记录" class="headerlink" title="查询各科成绩前三名的记录"></a>查询各科成绩前三名的记录</h4><p>大坑比。mysql不能group by 了以后取limit，所以不要想着讨巧了，我快被这一题气死了。思路有两种，第一种比较暴力，计算比自己分数大的记录有几条，如果小于3 就select，因为对前三名来说不会有3个及以上的分数比自己大了，最后再对所有select到的结果按照分数和课程编号排名即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> sc <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">where</span> sc.cid = a.cid <span class="keyword">and</span> sc.score&lt;a.score</span><br><span class="line">)&lt; <span class="number">3</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> cid <span class="keyword">asc</span>, sc.score <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line">sidcidscore</span><br><span class="line">010180.0</span><br><span class="line">030180.0</span><br><span class="line">050176.0</span><br><span class="line">010290.0</span><br><span class="line">070289.0</span><br><span class="line">050287.0</span><br><span class="line">010399.0</span><br><span class="line">070398.0</span><br><span class="line">020380.0</span><br><span class="line">030380.0</span><br></pre></td></tr></table></figure><p>order by cid asc, sc.score desc;<br>第二种比较灵巧一些，用自身左交，但是有点难以理解。<br>先用自己交自己，条件为a.cid = b.cid and a.score&lt;b.score，其实就是列出同一门课内所有分数比较的情况。<br>想要查看完整的表可以</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sc a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> sc b <span class="keyword">on</span> a.cid = b.cid <span class="keyword">and</span> a.score&lt;b.score</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.cid,a.score;</span><br></pre></td></tr></table></figure><p>查看，发现结果是47行的一个表，列出了类似 01号课里“30分小于50，也小于70，也小于80，也小于90”“50分小于70，小于80，小于90”…..<br>所以理论上，对任何一门课来说，分数最高的那三个记录，在这张大表里，通过a.sid和a.cid可以联合确定这个同学的这门课的这个分数究竟比多少个其他记录高/低，<br>如果这个特定的a.sid和a.cid组合出现在这张表里的次数少于3个，那就意味着这个组合（学号+课号+分数）是这门课里排名前三的。<br>所以下面这个计算中having count 部分其实count()或者任意其他列都可以，这里制定了一个列只是因为比count()运行速度上更快。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.sid,a.cid,a.score <span class="keyword">from</span> sc a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> sc b <span class="keyword">on</span> a.cid = b.cid <span class="keyword">and</span> a.score&lt;b.score</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.cid, a.sid</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(b.cid)&lt;<span class="number">3</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.cid;</span><br></pre></td></tr></table></figure><h4 id="查询每门课程被选修的学生数"><a href="#查询每门课程被选修的学生数" class="headerlink" title="查询每门课程被选修的学生数"></a>查询每门课程被选修的学生数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cid, <span class="keyword">count</span>(<span class="keyword">sid</span>) <span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cid;</span><br><span class="line"></span><br><span class="line">cidcount(sid)</span><br><span class="line">016</span><br><span class="line">026</span><br><span class="line">036</span><br></pre></td></tr></table></figure><h4 id="查询出只选修两门课程的学生学号和姓名"><a href="#查询出只选修两门课程的学生学号和姓名" class="headerlink" title="查询出只选修两门课程的学生学号和姓名"></a>查询出只选修两门课程的学生学号和姓名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 嵌套查询</span></span><br><span class="line"><span class="keyword">select</span> student.sid, student.sname <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> student.sid <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> sc.sid <span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sc.sid</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(sc.cid)=<span class="number">2</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 联合查询</span></span><br><span class="line"><span class="keyword">select</span> student.SId,student.Sname</span><br><span class="line"><span class="keyword">from</span> sc,student</span><br><span class="line"><span class="keyword">where</span> student.SId=sc.SId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sc.SId</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">count</span>(*)=<span class="number">2</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">SId</span>Sname</span><br><span class="line"><span class="number">05</span>周梅</span><br><span class="line"><span class="number">06</span>吴兰</span><br><span class="line"><span class="number">07</span>郑竹</span><br></pre></td></tr></table></figure><h4 id="查询男生、女生人数"><a href="#查询男生、女生人数" class="headerlink" title="查询男生、女生人数"></a>查询男生、女生人数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ssex, <span class="keyword">count</span>(*) <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> ssex;</span><br><span class="line"></span><br><span class="line">ssexcount(*)</span><br><span class="line">女8</span><br><span class="line">男4</span><br></pre></td></tr></table></figure><h4 id="查询名字中含有「风」字的学生信息"><a href="#查询名字中含有「风」字的学生信息" class="headerlink" title="查询名字中含有「风」字的学生信息"></a>查询名字中含有「风」字的学生信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> student.Sname <span class="keyword">like</span> <span class="string">'%风%'</span></span><br></pre></td></tr></table></figure><h4 id="查询同名学生名单，并统计同名人数"><a href="#查询同名学生名单，并统计同名人数" class="headerlink" title="查询同名学生名单，并统计同名人数"></a>查询同名学生名单，并统计同名人数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 找到同名的名字并统计个数</span></span><br><span class="line"><span class="keyword">select</span> sname, <span class="keyword">count</span>(*) <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sname</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">snamecount(*)</span><br><span class="line">李四2</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 嵌套查询列出同名的全部学生的信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sname <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sname</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">sidsnamessex</span><br><span class="line">10李四女</span><br><span class="line">11李四女</span><br></pre></td></tr></table></figure><h4 id="查询-1990-年出生的学生名单"><a href="#查询-1990-年出生的学生名单" class="headerlink" title="查询 1990 年出生的学生名单"></a>查询 1990 年出生的学生名单</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">YEAR</span>(student.Sage)=<span class="number">1990</span>;</span><br></pre></td></tr></table></figure><h4 id="查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列"><a href="#查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列" class="headerlink" title="查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列"></a>查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sc.cid, course.cname, <span class="keyword">AVG</span>(SC.SCORE) <span class="keyword">as</span> average <span class="keyword">from</span> sc, course</span><br><span class="line"><span class="keyword">where</span> sc.cid = course.cid</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sc.cid</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> average <span class="keyword">desc</span>,cid <span class="keyword">asc</span>;</span><br><span class="line"></span><br><span class="line">cidcnameaverage</span><br><span class="line">02数学72.66667</span><br><span class="line">03英语68.50000</span><br><span class="line">01语文64.50000</span><br></pre></td></tr></table></figure><h4 id="查询平均成绩大于等于-85-的所有学生的学号、姓名和平均成绩"><a href="#查询平均成绩大于等于-85-的所有学生的学号、姓名和平均成绩" class="headerlink" title="查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩"></a>查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩</h4><p>having也可以用来截取结果表，在这里就先得到平均成绩总表，再截取AVG大于85的即可.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sidsnameaver</span><br><span class="line">01赵雷89.66667</span><br><span class="line">07郑竹93.50000</span><br></pre></td></tr></table></figure><h4 id="查询课程名称为「数学」，且分数低于-60-的学生姓名和分数"><a href="#查询课程名称为「数学」，且分数低于-60-的学生姓名和分数" class="headerlink" title="查询课程名称为「数学」，且分数低于 60 的学生姓名和分数"></a>查询课程名称为「数学」，且分数低于 60 的学生姓名和分数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student.sname, sc.score <span class="keyword">from</span> student, sc, course</span><br><span class="line"><span class="keyword">where</span> student.sid = sc.sid</span><br><span class="line"><span class="keyword">and</span> course.cid = sc.cid</span><br><span class="line"><span class="keyword">and</span> course.cname = <span class="string">"数学"</span></span><br><span class="line"><span class="keyword">and</span> sc.score &lt; <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">snamescore</span><br><span class="line">李云30.0</span><br></pre></td></tr></table></figure><h4 id="查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）"><a href="#查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）" class="headerlink" title="查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）"></a>查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student.sname, cid, score <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> sc</span><br><span class="line"><span class="keyword">on</span> student.sid = sc.sid;</span><br><span class="line"></span><br><span class="line">snamecidscore</span><br><span class="line">赵雷0180.0</span><br><span class="line">赵雷0290.0</span><br><span class="line">赵雷0399.0</span><br><span class="line">钱电0170.0</span><br><span class="line">钱电0260.0</span><br><span class="line">钱电0380.0</span><br><span class="line">孙风0180.0</span><br><span class="line">孙风0280.0</span><br></pre></td></tr></table></figure><h4 id="查询任何一门课程成绩在-70-分以上的姓名、课程名称和分数"><a href="#查询任何一门课程成绩在-70-分以上的姓名、课程名称和分数" class="headerlink" title="查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数"></a>查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student.sname, course.cname,sc.score <span class="keyword">from</span> student,course,sc</span><br><span class="line"><span class="keyword">where</span> sc.score&gt;<span class="number">70</span></span><br><span class="line"><span class="keyword">and</span> student.sid = sc.sid</span><br><span class="line"><span class="keyword">and</span> sc.cid = course.cid;</span><br><span class="line"></span><br><span class="line">snamecnamescore</span><br><span class="line">赵雷语文80.0</span><br><span class="line">赵雷数学90.0</span><br><span class="line">赵雷英语99.0</span><br><span class="line">钱电英语80.0</span><br><span class="line">孙风语文80.0</span><br><span class="line">孙风数学80.0</span><br><span class="line">孙风英语80.0</span><br></pre></td></tr></table></figure><h4 id="查询存在不及格的课程"><a href="#查询存在不及格的课程" class="headerlink" title="查询存在不及格的课程"></a>查询存在不及格的课程</h4><p>可以用group by 来取唯一，也可以用distinct</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- group by</span></span><br><span class="line"><span class="keyword">select</span> cid <span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> score&lt; <span class="number">60</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cid;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- distinct</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">DISTINCT</span> sc.CId</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> sc.score &lt;<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">cid</span><br><span class="line">01</span><br><span class="line">02</span><br><span class="line">03</span><br></pre></td></tr></table></figure><h4 id="查询课程编号为-01-且课程成绩在-80-分及以上的学生的学号和姓名"><a href="#查询课程编号为-01-且课程成绩在-80-分及以上的学生的学号和姓名" class="headerlink" title="查询课程编号为 01 且课程成绩在 80 分及以上的学生的学号和姓名"></a>查询课程编号为 01 且课程成绩在 80 分及以上的学生的学号和姓名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student.sid,student.sname</span><br><span class="line"><span class="keyword">from</span> student,sc</span><br><span class="line"><span class="keyword">where</span> cid=<span class="string">"01"</span></span><br><span class="line"><span class="keyword">and</span> score&gt;=<span class="number">80</span></span><br><span class="line"><span class="keyword">and</span> student.sid = sc.sid;</span><br><span class="line"></span><br><span class="line">sidsname</span><br><span class="line">01赵雷</span><br><span class="line">03孙风</span><br></pre></td></tr></table></figure><h4 id="求每门课程的学生人数"><a href="#求每门课程的学生人数" class="headerlink" title="求每门课程的学生人数"></a>求每门课程的学生人数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sc.CId,<span class="keyword">count</span>(*) <span class="keyword">as</span> 学生人数</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sc.CId;</span><br><span class="line"></span><br><span class="line">CId学生人数</span><br><span class="line">016</span><br><span class="line">026</span><br><span class="line">036</span><br></pre></td></tr></table></figure><h4 id="成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩"><a href="#成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩" class="headerlink" title="成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩"></a>成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩</h4><p>用having max()理论上也是对的，但是下面那种按分数排序然后取limit 1的更直观可靠</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student.*, sc.score, sc.cid <span class="keyword">from</span> student, teacher, course,sc</span><br><span class="line"><span class="keyword">where</span> teacher.tid = course.tid</span><br><span class="line"><span class="keyword">and</span> sc.sid = student.sid</span><br><span class="line"><span class="keyword">and</span> sc.cid = course.cid</span><br><span class="line"><span class="keyword">and</span> teacher.tname = <span class="string">"张三"</span></span><br><span class="line"><span class="keyword">having</span> <span class="keyword">max</span>(sc.score);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> student.*, sc.score, sc.cid <span class="keyword">from</span> student, teacher, course,sc</span><br><span class="line"><span class="keyword">where</span> teacher.tid = course.tid</span><br><span class="line"><span class="keyword">and</span> sc.sid = student.sid</span><br><span class="line"><span class="keyword">and</span> sc.cid = course.cid</span><br><span class="line"><span class="keyword">and</span> teacher.tname = <span class="string">"张三"</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">sidsnamesage            ssexscorecid</span><br><span class="line">01赵雷1990-01-01 00:00:00男90.002</span><br></pre></td></tr></table></figure><h4 id="成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩"><a href="#成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩" class="headerlink" title="成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩"></a>成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩</h4><p>为了验证这一题，先修改原始数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> sc <span class="keyword">SET</span> score=<span class="number">90</span></span><br><span class="line"><span class="keyword">where</span> <span class="keyword">sid</span> = <span class="string">"07"</span></span><br><span class="line"><span class="keyword">and</span> cid =<span class="string">"02"</span>;</span><br></pre></td></tr></table></figure><p>and cid =”02”;<br>这样张三老师教的02号课就有两个学生同时获得90的最高分了。</p><p>这道题的思路继续上一题，我们已经查询到了符合限定条件的最高分了，这个时候只用比较这张表，找到全部score等于这个最高分的记录就可，看起来有点繁复。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student.*, sc.score, sc.cid <span class="keyword">from</span> student, teacher, course,sc</span><br><span class="line"><span class="keyword">where</span> teacher.tid = course.tid</span><br><span class="line"><span class="keyword">and</span> sc.sid = student.sid</span><br><span class="line"><span class="keyword">and</span> sc.cid = course.cid</span><br><span class="line"><span class="keyword">and</span> teacher.tname = <span class="string">"张三"</span></span><br><span class="line"><span class="keyword">and</span> sc.score = (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">Max</span>(sc.score)</span><br><span class="line">    <span class="keyword">from</span> sc,student, teacher, course</span><br><span class="line">    <span class="keyword">where</span> teacher.tid = course.tid</span><br><span class="line">    <span class="keyword">and</span> sc.sid = student.sid</span><br><span class="line">    <span class="keyword">and</span> sc.cid = course.cid</span><br><span class="line">    <span class="keyword">and</span> teacher.tname = <span class="string">"张三"</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">sidsnamesagessexscorecid</span><br><span class="line">01赵雷1990-01-01 00:00:00男90.002</span><br><span class="line">07郑竹1989-07-01 00:00:00女90.002</span><br></pre></td></tr></table></figure><h4 id="查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩"><a href="#查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩" class="headerlink" title="查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩"></a>查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩</h4><p>同上，在这里用了inner join后会有概念是重复的记录：“01 课与 03课”=“03 课与 01 课”，所以这里取唯一可以直接用group by</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  a.cid, a.sid,  a.score <span class="keyword">from</span> sc <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">sc <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">on</span> a.sid = b.sid</span><br><span class="line"><span class="keyword">and</span> a.cid != b.cid</span><br><span class="line"><span class="keyword">and</span> a.score = b.score</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cid, <span class="keyword">sid</span>;</span><br><span class="line"></span><br><span class="line">cidsidscore</span><br><span class="line">010380.0</span><br><span class="line">020380.0</span><br><span class="line">030380.0</span><br></pre></td></tr></table></figure><h4 id="查询每门功成绩最好的前两名"><a href="#查询每门功成绩最好的前两名" class="headerlink" title="查询每门功成绩最好的前两名"></a>查询每门功成绩最好的前两名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.sid,a.cid,a.score <span class="keyword">from</span> sc <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> sc <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">on</span> a.cid = b.cid <span class="keyword">and</span> a.score&lt;b.score</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.cid, a.sid</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(b.cid)&lt;<span class="number">2</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.cid;</span><br><span class="line"></span><br><span class="line">sidcidscore</span><br><span class="line">010180.0</span><br><span class="line">030180.0</span><br><span class="line">010290.0</span><br><span class="line">070290.0</span><br><span class="line">010399.0</span><br><span class="line">070398.0</span><br></pre></td></tr></table></figure><h4 id="统计每门课程的学生选修人数（超过-5-人的课程才统计）"><a href="#统计每门课程的学生选修人数（超过-5-人的课程才统计）" class="headerlink" title="统计每门课程的学生选修人数（超过 5 人的课程才统计）"></a>统计每门课程的学生选修人数（超过 5 人的课程才统计）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sc.cid, <span class="keyword">count</span>(<span class="keyword">sid</span>) <span class="keyword">as</span> cc <span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cid</span><br><span class="line"><span class="keyword">having</span> cc &gt;<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">cidcc</span><br><span class="line">016</span><br><span class="line">026</span><br><span class="line">036</span><br></pre></td></tr></table></figure><h4 id="检索至少选修两门课程的学生学号"><a href="#检索至少选修两门课程的学生学号" class="headerlink" title="检索至少选修两门课程的学生学号"></a>检索至少选修两门课程的学生学号</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sid</span>, <span class="keyword">count</span>(cid) <span class="keyword">as</span> cc <span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span></span><br><span class="line"><span class="keyword">having</span> cc&gt;=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">sidcc</span><br><span class="line">013</span><br><span class="line">023</span><br><span class="line">033</span><br><span class="line">043</span><br><span class="line">052</span><br><span class="line">062</span><br><span class="line">072</span><br></pre></td></tr></table></figure><h4 id="查询选修了全部课程的学生信息"><a href="#查询选修了全部课程的学生信息" class="headerlink" title="查询选修了全部课程的学生信息"></a>查询选修了全部课程的学生信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student.*</span><br><span class="line"><span class="keyword">from</span> sc ,student</span><br><span class="line"><span class="keyword">where</span> sc.SId=student.SId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sc.SId</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">count</span>(*) = (<span class="keyword">select</span> <span class="keyword">DISTINCT</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> course )</span><br><span class="line"></span><br><span class="line"><span class="keyword">sid</span>snamesagessex</span><br><span class="line"><span class="number">01</span>赵雷<span class="number">1990</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>男</span><br><span class="line"><span class="number">02</span>钱电<span class="number">1990</span><span class="number">-12</span><span class="number">-21</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>男</span><br><span class="line"><span class="number">03</span>孙风<span class="number">1990</span><span class="number">-05</span><span class="number">-20</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>男</span><br><span class="line"><span class="number">04</span>李云<span class="number">1990</span><span class="number">-08</span><span class="number">-06</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>男</span><br></pre></td></tr></table></figure><h4 id="查询各学生的年龄，只按年份来算"><a href="#查询各学生的年龄，只按年份来算" class="headerlink" title="查询各学生的年龄，只按年份来算"></a>查询各学生的年龄，只按年份来算</h4><h4 id="按照出生日期来算，当前月日-lt-出生年月的月日则，年龄减一"><a href="#按照出生日期来算，当前月日-lt-出生年月的月日则，年龄减一" class="headerlink" title="按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一"></a>按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student.SId <span class="keyword">as</span> 学生编号,student.Sname  <span class="keyword">as</span>  学生姓名,</span><br><span class="line"><span class="keyword">TIMESTAMPDIFF</span>(<span class="keyword">YEAR</span>,student.Sage,<span class="keyword">CURDATE</span>()) <span class="keyword">as</span> 学生年龄</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"></span><br><span class="line">学生编号学生姓名学生年龄</span><br><span class="line"><span class="number">01</span>赵雷<span class="number">30</span></span><br><span class="line"><span class="number">02</span>钱电<span class="number">29</span></span><br><span class="line"><span class="number">03</span>孙风<span class="number">30</span></span><br><span class="line"><span class="number">04</span>李云<span class="number">29</span></span><br><span class="line"><span class="number">05</span>周梅<span class="number">28</span></span><br><span class="line"><span class="number">06</span>吴兰<span class="number">28</span></span><br></pre></td></tr></table></figure><h4 id="查询本周过生日的学生"><a href="#查询本周过生日的学生" class="headerlink" title="查询本周过生日的学生"></a>查询本周过生日的学生</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">WEEKOFYEAR</span>(student.Sage)=<span class="keyword">WEEKOFYEAR</span>(<span class="keyword">CURDATE</span>());</span><br></pre></td></tr></table></figure><h4 id="查询下周过生日的学生"><a href="#查询下周过生日的学生" class="headerlink" title="查询下周过生日的学生"></a>查询下周过生日的学生</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">WEEKOFYEAR</span>(student.Sage)=<span class="keyword">WEEKOFYEAR</span>(<span class="keyword">CURDATE</span>())+<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="查询本月过生日的学生"><a href="#查询本月过生日的学生" class="headerlink" title="查询本月过生日的学生"></a>查询本月过生日的学生</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">MONTH</span>(student.Sage)=<span class="keyword">MONTH</span>(<span class="keyword">CURDATE</span>());</span><br></pre></td></tr></table></figure><h4 id="查询下月过生日的学生"><a href="#查询下月过生日的学生" class="headerlink" title="查询下月过生日的学生"></a>查询下月过生日的学生</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">MONTH</span>(student.Sage)=<span class="keyword">MONTH</span>(<span class="keyword">CURDATE</span>())+<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/476b52ee4f1b">50道SQL练习题及答案与详细分析</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>abc</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E9%94%814/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E9%94%814/</url>
      
        <content type="html"><![CDATA[<h2 id="最全-MySQL-面试-60-题和答案"><a href="#最全-MySQL-面试-60-题和答案" class="headerlink" title="最全 MySQL 面试 60 题和答案"></a>最全 MySQL 面试 60 题和答案</h2><h4 id="MySQL-中有哪几种锁？"><a href="#MySQL-中有哪几种锁？" class="headerlink" title="MySQL 中有哪几种锁？"></a>MySQL 中有哪几种锁？</h4><p>MySQL 的锁大致分为 3 种：表锁、页锁、行锁。</p><p>他们的区别如下</p><div class="table-container"><table><thead><tr><th style="text-align:left">锁名称</th><th>锁定粒度</th><th>开销</th><th>并发量</th><th>冲突概率</th><th>支持引擎</th></tr></thead><tbody><tr><td style="text-align:left">表锁</td><td>整张表</td><td>小</td><td>低</td><td>大</td><td>MyISAM、InnoDB</td></tr><tr><td style="text-align:left">页锁</td><td>邻的一组记录</td><td>中</td><td>中</td><td>中</td><td>BDB</td></tr><tr><td style="text-align:left">行锁</td><td>指定的记录</td><td>大</td><td>高</td><td>小</td><td>InnoDB</td></tr></tbody></table></div><h4 id="MySQL-中有哪些不同的表格（存储引擎）？"><a href="#MySQL-中有哪些不同的表格（存储引擎）？" class="headerlink" title="MySQL 中有哪些不同的表格（存储引擎）？"></a>MySQL 中有哪些不同的表格（存储引擎）？</h4><p>数据库存储引擎是数据库底层软件组件，数据库管理系统使用数据引擎进行创建、查询、更新和删除数据操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。</p><p>引擎区别：</p><div class="table-container"><table><thead><tr><th style="text-align:left">存储引擎</th><th>说明</th><th>ACID兼容</th><th>锁支持</th><th>存储结构</th><th>隔离级别</th><th>性能</th><th>适用场景</th></tr></thead><tbody><tr><td style="text-align:left">MyISAM</td><td>常用引擎</td><td>不支持</td><td>表锁</td><td><code>.frm</code> <code>.MYI</code> <code>.MYD</code></td><td></td><td>高</td><td></td></tr><tr><td style="text-align:left">InnoDB</td><td>默认引擎</td><td>支持</td><td>表锁 行锁</td><td><code>.frm</code> <code>.ibd</code></td><td>支持事务的四种隔离级别</td><td>慢</td></tr></tbody></table></div><p>|MEMORY|存储到内存中|极快的插入、查询速度||不支持||临时表，存放查询的中间结果|<br>|Archive||||||存储归档数据，如记录日志信息|</p><p>性能对比：<br>（待补充）</p><h4 id="简述在-MySQL-数据库中-MyISAM-和-InnoDB-的区别"><a href="#简述在-MySQL-数据库中-MyISAM-和-InnoDB-的区别" class="headerlink" title="简述在 MySQL 数据库中 MyISAM 和 InnoDB 的区别"></a>简述在 MySQL 数据库中 MyISAM 和 InnoDB 的区别</h4><p>同上</p><h4 id="MySQL-中-InnoDB-支持的四种事务隔离级别名称，以及逐级之间的区别？"><a href="#MySQL-中-InnoDB-支持的四种事务隔离级别名称，以及逐级之间的区别？" class="headerlink" title="MySQL 中 InnoDB 支持的四种事务隔离级别名称，以及逐级之间的区别？"></a>MySQL 中 InnoDB 支持的四种事务隔离级别名称，以及逐级之间的区别？</h4><div class="table-container"><table><thead><tr><th style="text-align:left">隔离界别</th><th>描述</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td style="text-align:left">Read uncommited</td><td>读未提交</td><td>不可避免</td><td>不可避免</td><td>不可避免</td></tr><tr><td style="text-align:left">Read committed</td><td>读已提交</td><td>可避免</td><td>不可避免</td><td>不可避免</td></tr><tr><td style="text-align:left">Repeatable read</td><td>可重复读</td><td>可避免</td><td>可避免</td><td>不可避免</td></tr><tr><td style="text-align:left">Serializable</td><td>串行化</td><td>可避免</td><td>可避免</td><td>可避免</td></tr></tbody></table></div><h4 id="CHAR-和-VARCHAR-的区别？"><a href="#CHAR-和-VARCHAR-的区别？" class="headerlink" title="CHAR 和 VARCHAR 的区别？"></a>CHAR 和 VARCHAR 的区别？</h4><h4 id="主键和候选键有什么区别？"><a href="#主键和候选键有什么区别？" class="headerlink" title="主键和候选键有什么区别？"></a>主键和候选键有什么区别？</h4><ol><li>超键：在关系中能唯一标识元组的属性集，里面可能包含很多能唯一标识元组的属性<br> {学号}{学号，姓名}{学号，性别}{性别，年龄}。。。</li><li>候选键：不含有多余属性的超键，即它里面的属性一旦去掉任何一个，它就不是超键<br> 任何的候选键都可以作为主键，这取决于用户的选择</li><li>主键：用户选作元组标识的一个候选键<br> 学号、或者Id（如果没有的话）</li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">学号</th><th>姓名</th><th>性别</th><th>年龄</th><th>系别</th><th>专业</th></tr></thead><tbody><tr><td style="text-align:left">20020612李辉</td><td>男</td><td>20</td><td>计算机</td><td>软件开发</td></tr><tr><td style="text-align:left">20060613</td><td>张明</td><td>男</td><td>18</td><td>计算机</td><td>软件开发</td></tr><tr><td style="text-align:left">20060614</td><td>王小玉</td><td>女</td><td>19</td><td>物理</td><td>力学</td></tr><tr><td style="text-align:left">20060615</td><td>李淑华</td><td>女</td><td>17</td><td>生物</td><td>动物学</td></tr><tr><td style="text-align:left">20060616</td><td>赵静</td><td>男</td><td>21</td><td>化学</td><td>食品化学</td></tr><tr><td style="text-align:left">20060617</td><td>赵静</td><td>女</td><td>20</td><td>生物</td><td>植物学</td></tr></tbody></table></div><h4 id="myisamchk-是用来做什么的？"><a href="#myisamchk-是用来做什么的？" class="headerlink" title="myisamchk 是用来做什么的？"></a>myisamchk 是用来做什么的？</h4><h4 id="MyISAM-Static-和-MyISAM-Dynamic-有什么区别？"><a href="#MyISAM-Static-和-MyISAM-Dynamic-有什么区别？" class="headerlink" title="MyISAM Static 和 MyISAM Dynamic 有什么区别？"></a>MyISAM Static 和 MyISAM Dynamic 有什么区别？</h4><h4 id="如果一个表有一列定义为TIMESTAMP，将发生什么？"><a href="#如果一个表有一列定义为TIMESTAMP，将发生什么？" class="headerlink" title="如果一个表有一列定义为TIMESTAMP，将发生什么？"></a>如果一个表有一列定义为TIMESTAMP，将发生什么？</h4><p>对于TIMESTAMP，它把客户端插入的时间从当前时区转化为UTC（世界标准时间）进行存储。查询时，将其又转化为客户端当前时区进行返回。</p><p>而对于DATETIME，不做任何改变，基本上是原样输入和输出。</p><p>两者所能存储的时间范围不一样</p><p>timestamp所能存储的时间范围为：’1970-01-01 00:00:01.000000’ 到 ‘2038-01-19 03:14:07.999999’。</p><p>datetime所能存储的时间范围为：’1000-01-01 00:00:00.000000’ 到 ‘9999-12-31 23:59:59.999999’。</p><p>看起来是不是有点奇怪，我并没有对hiredate字段进行插入操作，它的值自动修改为当前值，而且在创建表的时候，我也并没有定义“show create table test\G”结果中显示的“ DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP”。</p><p>其实，这个特性是自动初始化和自动更新（Automatic Initialization and Updating）。</p><p>自动初始化指的是如果对该字段（譬如上例中的hiredate字段）没有显性赋值，则自动设置为当前系统时间。</p><p>自动更新指的是如果修改了其它字段，则该字段的值将自动更新为当前系统时间。</p><h4 id="列设置为-AUTO-INCREMENT-时，如果在表中达到最大值，会发生什么情况？"><a href="#列设置为-AUTO-INCREMENT-时，如果在表中达到最大值，会发生什么情况？" class="headerlink" title="列设置为 AUTO INCREMENT 时，如果在表中达到最大值，会发生什么情况？"></a>列设置为 AUTO INCREMENT 时，如果在表中达到最大值，会发生什么情况？</h4><p>它会停止递增，任何进一步的插入都将产生错误，因为密钥已被使用。（没法复现，不知多少才是最大值）</p><h4 id="怎样才能找出最后一次插入时分配了哪个自动增量？"><a href="#怎样才能找出最后一次插入时分配了哪个自动增量？" class="headerlink" title="怎样才能找出最后一次插入时分配了哪个自动增量？"></a>怎样才能找出最后一次插入时分配了哪个自动增量？</h4><p><code>LAST_INSERT_ID</code> 函数将返回由 <code>AUTO_INCREMENT</code> 分配的最后一个值，并且不需要指定表名称。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入数据，没有指定Id</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span>(<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">VALUES</span>(<span class="literal">NULL</span>, <span class="string">'zhangsan'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定的新增的Id（当前客户端的）</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">LAST_INSERT_ID</span>();</span><br><span class="line"><span class="comment">-- 10</span></span><br></pre></td></tr></table></figure><h4 id="你怎么看到为表格定义的所有索引？"><a href="#你怎么看到为表格定义的所有索引？" class="headerlink" title="你怎么看到为表格定义的所有索引？"></a>你怎么看到为表格定义的所有索引？</h4><p>使用 <code>SHOW INDEX</code> 命令可以查看此表所定义的索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><h4 id="like-声明中的-％-和-是什么意思？"><a href="#like-声明中的-％-和-是什么意思？" class="headerlink" title="like 声明中的 ％ 和 _ 是什么意思？"></a>like 声明中的 ％ 和 _ 是什么意思？</h4><ol><li><code>%</code> 表示任意 0 个或多个字符。可匹配任意类型和长度的字符，有些情况下若是中文，请使用两个百分号表示。</li><li><code>_</code> 表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字符长度语句。</li><li><code>\</code> 表示转义字符。</li><li><code>[]</code> ?? 表示括号内所列字符中的一个（类似正则表达式）。指定一个字符、字符串或范围，要求所匹配对象为它们中的任一个。</li><li><code>[^]</code> ?? 表示不在括号所列之内的单个字符。其取值和 [] 相同，但它要求所匹配对象为指定字符以外的任一个字符。</li></ol><p>示例：</p><ol><li><code>%a</code> 以 a 结尾的数据</li><li><code>a%</code> 以 a 开头的数据</li><li><code>%a%</code> 含有 a 的数据</li><li><code>%a\_</code>  以 a_ 结尾的数据</li><li><code>_a</code> 两位且结尾字母是 a 的</li><li><code>a_</code> 两位且开头字母是 a 的</li><li><code>_a_</code> 三位且中间字母是 a 的</li></ol><h4 id="如何在-Unix-和-MySQL-时间戳之间进行转换？"><a href="#如何在-Unix-和-MySQL-时间戳之间进行转换？" class="headerlink" title="如何在 Unix 和 MySQL 时间戳之间进行转换？"></a>如何在 Unix 和 MySQL 时间戳之间进行转换？</h4><ol><li>Unix 时间精确到秒，从协调世界时 1970 年 1 月 1 日 0 时 0 分 0 秒起至现在的总秒数。</li><li>MySQL <code>FROM_UNIXTIME</code> 函数将 Unix 时间戳转为 MySQL 日期。</li><li>MySQL <code>UNIX_TIMESTAMP</code> 函数将 MySQL 日期转换为 Unix 时间戳。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取 MySQL 当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>();</span><br><span class="line"><span class="comment">-- 2020-06-02 17:11:09</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取 Unix 时间戳</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UNIX_TIMESTAMP</span>();</span><br><span class="line"><span class="comment">-- 1591089100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Unix 时间戳转换成为 MySQL 时间</span></span><br><span class="line"><span class="keyword">SELECT</span> FROM_UNIXTIME(<span class="number">1156219870</span>);</span><br><span class="line"><span class="comment">-- 2006-08-22 12:11:10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- MySQL 日期转换成为 Unix 时间戳</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UNIX_TIMESTAMP</span>(<span class="keyword">NOW</span>());</span><br><span class="line"><span class="comment">-- 1591089100</span></span><br></pre></td></tr></table></figure><h4 id="列对比运算符是什么？"><a href="#列对比运算符是什么？" class="headerlink" title="列对比运算符是什么？"></a>列对比运算符是什么？</h4><p>比较运算符可以判断表中的哪些记录是符合条件的。比较结果为真，则返回 1，为假则返回 0，比较结果不确定则返回 NULL。</p><p>在 <code>SELECT</code> 语句的列比较中使用 <code>=</code>，<code>&lt;&gt;</code>，<code>&lt;</code>，<code>&lt;=</code>，<code>&gt;</code>，<code>&gt;=</code>，<code>&lt;&lt;</code>，<code>&gt;&gt;</code>，<code>&lt;=&gt;</code>，<code>AND</code>，<code>IS NULL</code>, <code>IS NOT NULL</code>, <code>OR</code> 或 <code>LIKE</code>运算符。</p><h4 id="BLOB-和-TEXT-有什么区别？"><a href="#BLOB-和-TEXT-有什么区别？" class="headerlink" title="BLOB 和 TEXT 有什么区别？"></a>BLOB 和 TEXT 有什么区别？</h4><ol><li>BLOB 是一个二进制对象，可以容纳可变数量的数据。TEXT 是一个不区分大小写的 BLOB。</li><li>BLOB 和 TEXT 类型之间的唯一区别在于对 BLOB 值进行排序和比较时区分大小写，对 TEXT 值不区分大小写。</li></ol><h4 id="mysql-fetch-array-和-mysql-fetch-object-的区别是什么？"><a href="#mysql-fetch-array-和-mysql-fetch-object-的区别是什么？" class="headerlink" title="mysql_fetch_array 和 mysql_fetch_object 的区别是什么？"></a>mysql_fetch_array 和 mysql_fetch_object 的区别是什么？</h4><p>PHP 不记。</p><ol><li>mysql_fetch_array – 将结果行作为关联数组或来自数据库的常规数组返回。</li><li>mysql_fetch_object – 从数据库返回结果行作为对象。</li></ol><h4 id="MyISAM-表格将在哪里存储，并且还提供其存储格式？"><a href="#MyISAM-表格将在哪里存储，并且还提供其存储格式？" class="headerlink" title="MyISAM 表格将在哪里存储，并且还提供其存储格式？"></a>MyISAM 表格将在哪里存储，并且还提供其存储格式？</h4><p>在没有指定的情况下，MySQL 数据存储在 <code>./data</code> 目录下。</p><p>每个 MyISAM 表格以三种格式存储在磁盘上：</p><ol><li><code>.frm</code> 文件存储表定义</li><li><code>.MYD</code> 文件存储表数据</li><li><code>.MYI</code> 文件存储表索引</li></ol><h4 id="MySQL-如何优化-DISTINCT？"><a href="#MySQL-如何优化-DISTINCT？" class="headerlink" title="MySQL 如何优化 DISTINCT？"></a>MySQL 如何优化 DISTINCT？</h4><p><code>DISTINCT</code> 在所有列上转换为 <code>GROUP BY</code>，并与 <code>ORDER BY</code> 子句结合使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> t1.a <span class="keyword">FROM</span> t1, t2 <span class="keyword">WHERE</span> t1.a = t2.a;</span><br></pre></td></tr></table></figure><h4 id="如何显示前-50-行？"><a href="#如何显示前-50-行？" class="headerlink" title="如何显示前 50 行？"></a>如何显示前 50 行？</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">50</span>;</span><br></pre></td></tr></table></figure><h4 id="可以使用多少列创建索引？"><a href="#可以使用多少列创建索引？" class="headerlink" title="可以使用多少列创建索引？"></a>可以使用多少列创建索引？</h4><p>任何标准表最多可以创建 16 个索引列。</p><h4 id="NOW-和-CURRENT-DATE-有什么区别？"><a href="#NOW-和-CURRENT-DATE-有什么区别？" class="headerlink" title="NOW() 和 CURRENT_DATE() 有什么区别？"></a>NOW() 和 CURRENT_DATE() 有什么区别？</h4><ol><li><code>NOW()</code> 命令用于显示当前年份，月份，日期，小时，分钟和秒。</li><li><code>CURRENT_DATE()</code> 仅显示当前年份，月份和日期。</li></ol><h4 id="什么是非标准字符串类型？"><a href="#什么是非标准字符串类型？" class="headerlink" title="什么是非标准字符串类型？"></a>什么是非标准字符串类型？</h4><ol><li>TINYTEXT</li><li>TEXT</li><li>MEDIUMTEXT</li><li>LONGTEXT</li></ol><h4 id="什么是通用-SQL-函数？"><a href="#什么是通用-SQL-函数？" class="headerlink" title="什么是通用 SQL 函数？"></a>什么是通用 SQL 函数？</h4><h4 id="MySQL-支持事务吗？"><a href="#MySQL-支持事务吗？" class="headerlink" title="MySQL 支持事务吗？"></a>MySQL 支持事务吗？</h4><ol><li>MySQL 默认的 InnoDB 存储引擎是支持事务的，其它存储引擎不支持</li><li>缺省模式下，MySQL 是 autocommit 模式的，所有的数据库更新操作都会即时提交。</li><li>可以设置 <code>SET AUTOCOMMIT = 0</code> 关闭 autocommit 模式，在这种情况下，你必须使用 COMMIT 来提交你的更改，或者用 ROLLBACK 来回滚你的更改。</li></ol><h4 id="MySQL-里记录货币用什么字段类型好"><a href="#MySQL-里记录货币用什么字段类型好" class="headerlink" title="MySQL 里记录货币用什么字段类型好"></a>MySQL 里记录货币用什么字段类型好</h4><p>NUMERIC 和 DECIMAL 类型被 MySQL 实现为同样的类型，这在 SQL92 标准允许。他们被用于保存值，该值的准确精度是极其重要的值，例如与金钱有关的数据。当声明一个类是这些类型之一时，精度和规模的能被(并且通常是)指定。</p><p>例如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salary DECIMAL(9,2)</span><br></pre></td></tr></table></figure></p><p>在这个例子中，9 代表将被用于存储值的总的小数位数，而 2 代表将被用于存储小数点后的位数。</p><p>因此，在这种情况下，能被存储在salary列中的值的范围是从 -9999999.99 到 9999999.99。</p><h4 id="MySQL-有关权限的表都有哪几个？"><a href="#MySQL-有关权限的表都有哪几个？" class="headerlink" title="MySQL 有关权限的表都有哪几个？"></a>MySQL 有关权限的表都有哪几个？</h4><p>MySQL 服务器通过权限表来控制用户对数据库的访问，权限表存放在 MySQL 数据库里，由 mysql_install_db 脚本初始化。这些权限表分别 user，db，table_priv，columns_priv 和 host。</p><h4 id="列的字符串类型可以是什么？"><a href="#列的字符串类型可以是什么？" class="headerlink" title="列的字符串类型可以是什么？"></a>列的字符串类型可以是什么？</h4><p>字符串类型是：</p><ol><li>SET</li><li>ENUM</li><li>CHAR</li><li>VARCHAR</li><li>BLOB</li><li>TEXT</li></ol><p>???</p><h4 id="MySQL-数据库作发布系统的存储，一天五万条以上的增量，预计运维三年-怎么优化？"><a href="#MySQL-数据库作发布系统的存储，一天五万条以上的增量，预计运维三年-怎么优化？" class="headerlink" title="MySQL 数据库作发布系统的存储，一天五万条以上的增量，预计运维三年,怎么优化？"></a>MySQL 数据库作发布系统的存储，一天五万条以上的增量，预计运维三年,怎么优化？</h4><ol><li>选择合适的表字段数据类型和存储引擎，适当的添加索引。</li><li>MySQL 库主从读写分离。</li><li>找规律分表，减少单表中的数据量提高查询速度。</li><li>添加缓存机制，比如 memcached，apc 等。</li><li>不经常改动的页面，生成静态页面。</li><li>书写高效率的SQL。比如 SELECT * FROM TABEL 改为 SELECT field_1, field_2, field_3 FROM TABLE.</li></ol><p>???</p><h4 id="锁的优化策略"><a href="#锁的优化策略" class="headerlink" title="锁的优化策略"></a>锁的优化策略</h4><ol><li>读写分离</li><li>分段加锁</li><li>减少锁持有的时间</li><li>多个线程尽量以相同的顺序去获取资源</li></ol><p>不能将锁的粒度过于细化，不然可能会出现线程的加锁和释放次数过多，反而效率不如一次加一把大锁。</p><h4 id="索引的底层实现原理和优化"><a href="#索引的底层实现原理和优化" class="headerlink" title="索引的底层实现原理和优化"></a>索引的底层实现原理和优化</h4><p>B+ 树，经过优化的 B 树</p><p>主要是在所有的叶子结点中增加了指向下一个叶子节点的指针，因此InnoDB建议为大部分表使用默认自增的主键作为主索引。</p><h4 id="什么情况下设置了索引但无法使用"><a href="#什么情况下设置了索引但无法使用" class="headerlink" title="什么情况下设置了索引但无法使用"></a>什么情况下设置了索引但无法使用</h4><ol><li>以“%”开头的LIKE语句，模糊匹配</li><li>OR语句前后没有同时使用索引</li><li>数据类型出现隐式转化（如varchar不加单引号的话可能会自动转换为int型）</li></ol><h4 id="实践中如何优化MySQL"><a href="#实践中如何优化MySQL" class="headerlink" title="实践中如何优化MySQL"></a>实践中如何优化MySQL</h4><p>最好是按照以下顺序优化：</p><ol><li>SQL语句及索引的优化</li><li>数据库表结构的优化</li><li>系统配置的优化</li><li>硬件的优化</li></ol><h4 id="优化数据库的方法"><a href="#优化数据库的方法" class="headerlink" title="优化数据库的方法"></a>优化数据库的方法</h4><p>选取最适用的字段属性，尽可能减少定义字段宽度，尽量把字段设置NOTNULL，例如’省份’、’性别’最好适用ENUM<br> 使用连接(JOIN)来代替子查询<br> 适用联合(UNION)来代替手动创建的临时表<br> 事务处理<br> 锁定表、优化事务处理<br> 适用外键，优化锁定表<br> 建立索引<br> 优化查询语句</p><h4 id="简单描述mysql中，索引，主键，唯一索引，联合索引的区别，对数据库的性能有什么影响（从读写两方面）"><a href="#简单描述mysql中，索引，主键，唯一索引，联合索引的区别，对数据库的性能有什么影响（从读写两方面）" class="headerlink" title="简单描述mysql中，索引，主键，唯一索引，联合索引的区别，对数据库的性能有什么影响（从读写两方面）"></a>简单描述mysql中，索引，主键，唯一索引，联合索引的区别，对数据库的性能有什么影响（从读写两方面）</h4><p>索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。</p><p>普通索引(由关键字KEY或INDEX定义的索引)的唯一任务是加快对数据的访问速度。</p><p>普通索引允许被索引的数据列包含重复的值。如果能确定某个数据列将只包含彼此各不相同的值，在为这个数据列创建索引的时候就应该用关键字UNIQUE把它定义为一个唯一索引。也就是说，唯一索引可以保证数据记录的唯一性。</p><p>主键，是一种特殊的唯一索引，在一张表中只能定义一个主键索引，主键用于唯一标识一条记录，使用关键字 PRIMARY KEY 来创建。</p><p>索引可以覆盖多个数据列，如像INDEX(columnA, columnB)索引，这就是联合索引。</p><p>索引可以极大的提高数据的查询速度，但是会降低插入、删除、更新表的速度，因为在执行这些写操作时，还要操作索引文件。</p><h4 id="数据库中的事务是什么"><a href="#数据库中的事务是什么" class="headerlink" title="数据库中的事务是什么?"></a>数据库中的事务是什么?</h4><p>事务（transaction）是作为一个单元的一组有序的数据库操作。如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消。</p><p>事务特性：</p><p>（1）原子性：即不可分割性，事务要么全部被执行，要么就全部不被执行。</p><p>（2）一致性或可串性。事务的执行使得数据库从一种正确状态转换成另一种正确状态</p><p>（3）隔离性。在事务正确提交之前，不允许把该事务对数据的任何改变提供给任何其他事务，</p><p>（4） 持久性。事务正确提交后，其结果将永久保存在数据库中，即使在事务提交后有了其他故障，事务的处理结果也会得到保存。</p><p>或者这样理解：</p><p>事务就是被绑定在一起作为一个逻辑工作单元的SQL语句分组，如果任何一个语句操作失败那么整个操作就被失败，以后操作就会回滚到操作前状态，或者是上有个节点。为了确保要么执行，要么不执行，就可以使用事务。要将有组语句作为事务考虑，就需要通过ACID测试，即原子性，一致性，隔离性和持久性。</p><h4 id="SQL注入漏洞产生的原因？如何防止？"><a href="#SQL注入漏洞产生的原因？如何防止？" class="headerlink" title="SQL注入漏洞产生的原因？如何防止？"></a>SQL注入漏洞产生的原因？如何防止？</h4><p>SQL注入产生的原因：程序开发过程中不注意规范书写sql语句和对特殊字符进行过滤，导致客户端可以通过全局变量POST和GET提交一些sql语句正常执行。</p><p>防止SQL注入的方式：<br>开启配置文件中的magic_quotes_gpc 和 magic_quotes_runtime设置</p><p>执行sql语句时使用addslashes进行sql语句转换</p><p>Sql语句书写尽量不要省略双引号和单引号。</p><p>过滤掉sql语句中的一些关键词：update、insert、delete、select、 * 。</p><p>提高数据库表和字段的命名技巧，对一些重要的字段根据程序的特点命名，取不易被猜到的。</p><h4 id="为表中得字段选择合适得数据类型"><a href="#为表中得字段选择合适得数据类型" class="headerlink" title="为表中得字段选择合适得数据类型"></a>为表中得字段选择合适得数据类型</h4><p>字段类型优先级: 整形&gt;date,time&gt;enum,char&gt;varchar&gt;blob,text</p><p>优先考虑数字类型，其次是日期或者二进制类型，最后是字符串类型，同级别得数据类型，应该优先选择占用空间小的数据类型</p><h4 id="存储时期"><a href="#存储时期" class="headerlink" title="存储时期"></a>存储时期</h4><p>Datatime:以 YYYY-MM-DD HH:MM:SS 格式存储时期时间，精确到秒，占用8个字节得存储空间，datatime类型与时区无关<br>Timestamp:以时间戳格式存储，占用4个字节，范围小1970-1-1到2038-1-19，显示依赖于所指定得时区，默认在第一个列行的数据修改时可以自动得修改timestamp列得值<br>Date:（生日）占用得字节数比使用字符串.datatime.int储存要少，使用date只需要3个字节，存储日期月份，还可以利用日期时间函数进行日期间得计算<br>Time: 存储时间部分得数据<br>注意: 不要使用字符串类型来存储日期时间数据（通常比字符串占用得储存空间小，在进行查找过滤可以利用日期得函数）<br>使用int存储日期时间不如使用timestamp类型</p><h4 id="索引的目的是什么？"><a href="#索引的目的是什么？" class="headerlink" title="索引的目的是什么？"></a>索引的目的是什么？</h4><p>快速访问数据表中的特定信息，提高检索速度<br>创建唯一性索引，保证数据库表中每一行数据的唯一性。<br>加速表和表之间的连接</p><p>使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间</p><h4 id="索引对数据库系统的负面影响是什么？"><a href="#索引对数据库系统的负面影响是什么？" class="headerlink" title="索引对数据库系统的负面影响是什么？"></a>索引对数据库系统的负面影响是什么？</h4><p>创建索引和维护索引需要耗费时间，这个时间随着数据量的增加而增加；索引需要占用物理空间，不光是表需要占用数据空间，每个索引也需要占用物理空间；当对表进行增、删、改、的时候索引也要动态维护，这样就降低了数据的维护速度。</p><h4 id="为数据表建立索引的原则有哪些？"><a href="#为数据表建立索引的原则有哪些？" class="headerlink" title="为数据表建立索引的原则有哪些？"></a>为数据表建立索引的原则有哪些？</h4><p>在最频繁使用的、用以缩小查询范围的字段上建立索引。</p><p>在频繁使用的、需要排序的字段上建立索引</p><h4 id="什么情况下不宜建立索引？"><a href="#什么情况下不宜建立索引？" class="headerlink" title="什么情况下不宜建立索引？"></a>什么情况下不宜建立索引？</h4><p>对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引。</p><p>对于一些特殊的数据类型，不宜建立索引，比如文本字段（text）等</p><h4 id="解释-MySQL-外连接、内连接与自连接的区别"><a href="#解释-MySQL-外连接、内连接与自连接的区别" class="headerlink" title="解释 MySQL 外连接、内连接与自连接的区别"></a>解释 MySQL 外连接、内连接与自连接的区别</h4><p>先说什么是交叉连接: 交叉连接又叫笛卡尔积，它是指不使用任何条件，直接将一个表的所有记录和另一个表中的所有记录一一匹配。</p><p>内连接 则是只有条件的交叉连接，根据某个条件筛选出符合条件的记录，不符合条件的记录不会出现在结果集中，即内连接只连接匹配的行。</p><p>外连接 其结果集中不仅包含符合连接条件的行，而且还会包括左表、右表或两个表中的所有数据行，这三种情况依次称之为左外连接，右外连接，和全外连接。</p><p>左外连接，也称左连接，左表为主表，左表中的所有记录都会出现在结果集中，对于那些在右表中并没有匹配的记录，仍然要显示，右边对应的那些字段值以NULL来填充。右外连接，也称右连接，右表为主表，右表中的所有记录都会出现在结果集中。左连接和右连接可以互换，MySQL目前还不支持全外连接。</p><h4 id="MySQL-中的事务回滚机制概述"><a href="#MySQL-中的事务回滚机制概述" class="headerlink" title="MySQL 中的事务回滚机制概述"></a>MySQL 中的事务回滚机制概述</h4><p>事务是用户定义的一个数据库操作序列，这些操作要么全做要么全不做，是一个不可分割的工作单位，事务回滚是指将该事务已经完成的对数据库的更新操作撤销。</p><p>要同时修改数据库中两个不同表时，如果它们不是一个事务的话，当第一个表修改完，可能第二个表修改过程中出现了异常而没能修改，此时就只有第二个表依旧是未修改之前的状态，而第一个表已经被修改完毕。而当你把它们设定为一个事务的时候，当第一个表修改完，第二表修改出现异常而没能修改，第一个表和第二个表都要回到未修改的状态，这就是所谓的事务回滚</p><h4 id="SQL语言包括哪几部分？每部分都有哪些操作关键字？"><a href="#SQL语言包括哪几部分？每部分都有哪些操作关键字？" class="headerlink" title="SQL语言包括哪几部分？每部分都有哪些操作关键字？"></a>SQL语言包括哪几部分？每部分都有哪些操作关键字？</h4><p>SQL语言包括数据定义(DDL)、数据操纵(DML),数据控制(DCL)和数据查询（DQL）四个部分。</p><p>数据定义：Create Table,Alter Table,Drop Table, Create/Drop Index等</p><p>数据操纵：Select ,insert, update, delete,</p><p>数据控制：grant,revoke</p><p>数据查询：select</p><h4 id="完整性约束包括哪些？"><a href="#完整性约束包括哪些？" class="headerlink" title="完整性约束包括哪些？"></a>完整性约束包括哪些？</h4><p>数据完整性(Data Integrity)是指数据的精确(Accuracy)和可靠性(Reliability)。</p><p>分为以下四类：</p><p>1) 实体完整性：规定表的每一行在表中是惟一的实体。</p><p>2) 域完整性：是指表中的列必须满足某种特定的数据类型约束，其中约束又包括取值范围、精度等规定。</p><p>3) 参照完整性：是指两个表的主关键字和外关键字的数据应一致，保证了表之间的数据的一致性，防止了数据丢失或无意义的数据在数据库中扩散。</p><p>4) 用户定义的完整性：不同的关系数据库系统根据其应用环境的不同，往往还需要一些特殊的约束条件。用户定义的完整性即是针对某个特定关系数据库的约束条件，它反映某一具体应用必须满足的语义要求。</p><p>与表有关的约束：包括列约束(NOT NULL（非空约束）)和表约束(PRIMARY KEY、foreign key、check、UNIQUE) 。</p><h4 id="什么是锁？"><a href="#什么是锁？" class="headerlink" title="什么是锁？"></a>什么是锁？</h4><p>数据库是一个多用户使用的共享资源。当多个用户并发地存取数据时，在数据库中就会产生多个事务同时存取同一数据的情况。若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据库的一致性。</p><p>加锁是实现数据库并发控制的一个非常重要的技术。当事务在对某个数据对象进行操作前，先向系统发出请求，对其加锁。加锁后事务就对该数据对象有了一定的控制，在该事务释放锁之前，其他的事务不能对此数据对象进行更新操作。</p><p>基本锁类型：锁包括行级锁和表级锁</p><h4 id="什么叫视图？游标是什么？"><a href="#什么叫视图？游标是什么？" class="headerlink" title="什么叫视图？游标是什么？"></a>什么叫视图？游标是什么？</h4><p>视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，视图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询。</p><p>游标：是对查询出来的结果集作为一个单元来有效的处理。游标可以定在该单元中的特定行，从结果集的当前行检索一行或多行。可以对结果集当前行做修改。一般不使用游标，但是需要逐条处理数据的时候，游标显得十分重要。</p><h4 id="什么是存储过程？用什么来调用？"><a href="#什么是存储过程？用什么来调用？" class="headerlink" title="什么是存储过程？用什么来调用？"></a>什么是存储过程？用什么来调用？</h4><p>存储过程是一个预编译的SQL语句，优点是允许模块化的设计，就是说只需创建一次，以后在该程序中就可以调用多次。如果某次操作需要执行多次SQL，使用存储过程比单纯SQL语句执行要快。可以用一个命令对象来调用存储过程。</p><h4 id="如何通俗地理解三个范式？"><a href="#如何通俗地理解三个范式？" class="headerlink" title="如何通俗地理解三个范式？"></a>如何通俗地理解三个范式？</h4><p>答：第一范式：1NF是对属性的原子性约束，要求属性具有原子性，不可再分解；</p><p>第二范式：2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性；</p><p>第三范式：3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余。。</p><p>范式化设计优缺点:</p><p>优点:</p><p>可以尽量得减少数据冗余，使得更新快，体积小</p><p>缺点:对于查询需要多个表进行关联，减少写得效率增加读得效率，更难进行索引优化</p><p>反范式化:</p><p>优点:可以减少表得关联，可以更好得进行索引优化</p><p>缺点:数据冗余以及数据异常，数据得修改需要更多的成本</p><h4 id="什么是基本表？什么是视图？"><a href="#什么是基本表？什么是视图？" class="headerlink" title="什么是基本表？什么是视图？"></a>什么是基本表？什么是视图？</h4><ol><li>基本表是本身独立存在的表，在 SQL 中一个关系就对应一个表。</li><li>视图是从一个或几个基本表导出的表。视图本身不独立存储在数据库中，是一个虚表</li></ol><h4 id="试述视图的优点？"><a href="#试述视图的优点？" class="headerlink" title="试述视图的优点？"></a>试述视图的优点？</h4><ol><li>视图能够简化用户的操作</li><li>视图使用户能以多种角度看待同一数据</li><li>视图为数据库提供了一定程度的逻辑独立性</li><li>视图能够对机密数据提供安全保护</li></ol><h4 id="NULL-是什么意思"><a href="#NULL-是什么意思" class="headerlink" title="NULL 是什么意思"></a>NULL 是什么意思</h4><ol><li>NULL 这个值表示 UNKNOWN（未知），它不表示“”（空字符串）</li><li>对 NULL 这个值的任何比较都会生产一个 NULL 值。您不能把任何值与一个 NULL 值进行比较，并在逻辑上希望获得一个答案</li><li>使用 IS  NULL 来进行 NULL 判断</li></ol><h4 id="主键、外键和索引的区别？"><a href="#主键、外键和索引的区别？" class="headerlink" title="主键、外键和索引的区别？"></a>主键、外键和索引的区别？</h4><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th>定义</th><th>作用</th><th>个数</th></tr></thead><tbody><tr><td style="text-align:left">主键</td><td>唯一标识一条记录，不能有重复的，不允许为空</td><td>用来保证数据完整性</td><td>主键只能有一个</td></tr><tr><td style="text-align:left">外键</td><td>表的外键是另一表的主键, 外键可以有重复的, 可以是空值</td><td>用来和其他表建立联系用的</td><td>一个表可以有多个外键</td></tr><tr><td style="text-align:left">索引</td><td>该字段没有重复值，但可以有一个空值（？）</td><td>是提高查询排序的速度</td><td>一个表可以有多个唯一索引</td></tr></tbody></table></div><h4 id="你可以用什么来确保表格里的字段只接受特定范围里的值"><a href="#你可以用什么来确保表格里的字段只接受特定范围里的值" class="headerlink" title="你可以用什么来确保表格里的字段只接受特定范围里的值?"></a>你可以用什么来确保表格里的字段只接受特定范围里的值?</h4><h4 id="说说对SQL语句优化有哪些方法？（选择几条）"><a href="#说说对SQL语句优化有哪些方法？（选择几条）" class="headerlink" title="说说对SQL语句优化有哪些方法？（选择几条）"></a>说说对SQL语句优化有哪些方法？（选择几条）</h4><p>（1）Where子句中：where表之间的连接必须写在其他Where条件之前，那些可以过滤掉最大数量记录的条件必须写在Where子句的末尾.HAVING最后。</p><p>（2）用EXISTS替代IN、用NOT EXISTS替代NOT IN。</p><p>（3） 避免在索引列上使用计算</p><p>（4）避免在索引列上使用IS NULL和IS NOT NULL</p><p>（5）对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p><p>（6）应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描</p><p>（7）应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描</p><h2 id="108道Java面试题-工作10年，面试超过500人想进阿里总结出的"><a href="#108道Java面试题-工作10年，面试超过500人想进阿里总结出的" class="headerlink" title="108道Java面试题:工作10年，面试超过500人想进阿里总结出的!"></a>108道Java面试题:工作10年，面试超过500人想进阿里总结出的!</h2><h4 id="数据库三范式及判断、E-R-图"><a href="#数据库三范式及判断、E-R-图" class="headerlink" title="数据库三范式及判断、E-R 图"></a>数据库三范式及判断、E-R 图</h4><h4 id="InnoDB-和-MyISAM-存储引擎的区别"><a href="#InnoDB-和-MyISAM-存储引擎的区别" class="headerlink" title="InnoDB 和 MyISAM 存储引擎的区别"></a>InnoDB 和 MyISAM 存储引擎的区别</h4><h4 id="索引分类，最左前缀原则，哪些条件无法使用索引"><a href="#索引分类，最左前缀原则，哪些条件无法使用索引" class="headerlink" title="索引分类，最左前缀原则，哪些条件无法使用索引"></a>索引分类，最左前缀原则，哪些条件无法使用索引</h4><h4 id="B-树、B-树区别，索引为何使用-B-树"><a href="#B-树、B-树区别，索引为何使用-B-树" class="headerlink" title="B 树、B+ 树区别，索引为何使用 B+ 树"></a>B 树、B+ 树区别，索引为何使用 B+ 树</h4><h4 id="聚集索引与非聚集索引（使用非聚集索引的查询过程）"><a href="#聚集索引与非聚集索引（使用非聚集索引的查询过程）" class="headerlink" title="聚集索引与非聚集索引（使用非聚集索引的查询过程）"></a>聚集索引与非聚集索引（使用非聚集索引的查询过程）</h4><h4 id="事务的ACID（原子性、一致性、隔离性、持久性）"><a href="#事务的ACID（原子性、一致性、隔离性、持久性）" class="headerlink" title="事务的ACID（原子性、一致性、隔离性、持久性）"></a>事务的ACID（原子性、一致性、隔离性、持久性）</h4><h4 id="事务隔离级别和各自存在的问题（脏读、不可重复读、幻读）和解决方式（间隙锁及MVCC）"><a href="#事务隔离级别和各自存在的问题（脏读、不可重复读、幻读）和解决方式（间隙锁及MVCC）" class="headerlink" title="事务隔离级别和各自存在的问题（脏读、不可重复读、幻读）和解决方式（间隙锁及MVCC）"></a>事务隔离级别和各自存在的问题（脏读、不可重复读、幻读）和解决方式（间隙锁及MVCC）</h4><h4 id="乐观锁和悲观锁、行锁与表锁、共享锁与排他锁"><a href="#乐观锁和悲观锁、行锁与表锁、共享锁与排他锁" class="headerlink" title="乐观锁和悲观锁、行锁与表锁、共享锁与排他锁"></a>乐观锁和悲观锁、行锁与表锁、共享锁与排他锁</h4><h4 id="MVCC（增加两个版本号）及delete、update、select时的具体控制"><a href="#MVCC（增加两个版本号）及delete、update、select时的具体控制" class="headerlink" title="MVCC（增加两个版本号）及delete、update、select时的具体控制"></a>MVCC（增加两个版本号）及delete、update、select时的具体控制</h4><h4 id="死锁判定原理和具体场景"><a href="#死锁判定原理和具体场景" class="headerlink" title="死锁判定原理和具体场景"></a>死锁判定原理和具体场景</h4><h4 id="查询缓慢和解决方式（explain、慢查询日志、show-profile等）"><a href="#查询缓慢和解决方式（explain、慢查询日志、show-profile等）" class="headerlink" title="查询缓慢和解决方式（explain、慢查询日志、show profile等）"></a>查询缓慢和解决方式（explain、慢查询日志、show profile等）</h4><h4 id="drop、truncate、delete-区别"><a href="#drop、truncate、delete-区别" class="headerlink" title="drop、truncate、delete 区别"></a>drop、truncate、delete 区别</h4><h4 id="查询语句不同元素（where、jion、limit、group-by、having等等）执行先后顺序"><a href="#查询语句不同元素（where、jion、limit、group-by、having等等）执行先后顺序" class="headerlink" title="查询语句不同元素（where、jion、limit、group by、having等等）执行先后顺序"></a>查询语句不同元素（where、jion、limit、group by、having等等）执行先后顺序</h4><h4 id="mysql优化，读写分离、主从复制"><a href="#mysql优化，读写分离、主从复制" class="headerlink" title="mysql优化，读写分离、主从复制"></a>mysql优化，读写分离、主从复制</h4><h4 id="数据库崩溃时事务的恢复机制（REDO-日志和-UNDO-日志）"><a href="#数据库崩溃时事务的恢复机制（REDO-日志和-UNDO-日志）" class="headerlink" title="数据库崩溃时事务的恢复机制（REDO 日志和 UNDO 日志）"></a>数据库崩溃时事务的恢复机制（REDO 日志和 UNDO 日志）</h4><h2 id="2019-最全支付宝高级Java现场面试37题"><a href="#2019-最全支付宝高级Java现场面试37题" class="headerlink" title="2019 最全支付宝高级Java现场面试37题"></a>2019 最全支付宝高级Java现场面试37题</h2><h4 id="SQL优化，常用的索引？"><a href="#SQL优化，常用的索引？" class="headerlink" title="SQL优化，常用的索引？"></a>SQL优化，常用的索引？</h4><h4 id="数据库性能调优如何做"><a href="#数据库性能调优如何做" class="headerlink" title="数据库性能调优如何做"></a>数据库性能调优如何做</h4><h4 id="数据库事务属性"><a href="#数据库事务属性" class="headerlink" title="数据库事务属性"></a>数据库事务属性</h4><h2 id="2019-最全阿里天猫Java-3面真题，含面试题答案！"><a href="#2019-最全阿里天猫Java-3面真题，含面试题答案！" class="headerlink" title="2019 最全阿里天猫Java 3面真题，含面试题答案！"></a>2019 最全阿里天猫Java 3面真题，含面试题答案！</h2><p>无</p><h2 id="2019-最新阿里中间件Java-4轮面试题！60万年薪起步"><a href="#2019-最新阿里中间件Java-4轮面试题！60万年薪起步" class="headerlink" title="2019 最新阿里中间件Java 4轮面试题！60万年薪起步~"></a>2019 最新阿里中间件Java 4轮面试题！60万年薪起步~</h2><h4 id="数据库索引，表锁；乐观锁；悲观锁"><a href="#数据库索引，表锁；乐观锁；悲观锁" class="headerlink" title="数据库索引，表锁；乐观锁；悲观锁"></a>数据库索引，表锁；乐观锁；悲观锁</h4><h2 id="2019蚂蚁金服-Java面试题目！涵盖现场3面真题"><a href="#2019蚂蚁金服-Java面试题目！涵盖现场3面真题" class="headerlink" title="2019蚂蚁金服 Java面试题目！涵盖现场3面真题"></a>2019蚂蚁金服 Java面试题目！涵盖现场3面真题</h2><h4 id="如何做的-MySQL-优化"><a href="#如何做的-MySQL-优化" class="headerlink" title="如何做的 MySQL 优化"></a>如何做的 MySQL 优化</h4><h2 id="阿里蚂蚁金服中间件-Java-4轮面试题含答案-：Redis缓存-线程锁-微服务等"><a href="#阿里蚂蚁金服中间件-Java-4轮面试题含答案-：Redis缓存-线程锁-微服务等" class="headerlink" title="阿里蚂蚁金服中间件(Java 4轮面试题含答案)：Redis缓存+线程锁+微服务等"></a>阿里蚂蚁金服中间件(Java 4轮面试题含答案)：Redis缓存+线程锁+微服务等</h2><h4 id="MySQL-事务隔离级别以及-MVCC-机制"><a href="#MySQL-事务隔离级别以及-MVCC-机制" class="headerlink" title="MySQL 事务隔离级别以及 MVCC 机制"></a>MySQL 事务隔离级别以及 MVCC 机制</h4><h2 id="2019-阿里Java-4轮面试题，含必考题答案参考！"><a href="#2019-阿里Java-4轮面试题，含必考题答案参考！" class="headerlink" title="2019 阿里Java 4轮面试题，含必考题答案参考！"></a>2019 阿里Java 4轮面试题，含必考题答案参考！</h2><h4 id="MySQL-数据库优化会涉及到哪些？"><a href="#MySQL-数据库优化会涉及到哪些？" class="headerlink" title="MySQL 数据库优化会涉及到哪些？"></a>MySQL 数据库优化会涉及到哪些？</h4><h4 id="MySQL-的事务隔离级别，分别解决什么问题？"><a href="#MySQL-的事务隔离级别，分别解决什么问题？" class="headerlink" title="MySQL 的事务隔离级别，分别解决什么问题？"></a>MySQL 的事务隔离级别，分别解决什么问题？</h4><h4 id="从SQL、JVM、架构、数据库四个方面讲讲优化思路，以及如何优先排序？"><a href="#从SQL、JVM、架构、数据库四个方面讲讲优化思路，以及如何优先排序？" class="headerlink" title="从SQL、JVM、架构、数据库四个方面讲讲优化思路，以及如何优先排序？"></a>从SQL、JVM、架构、数据库四个方面讲讲优化思路，以及如何优先排序？</h4><h2 id="最新2019-蚂蚁金服4面-Java-面试题"><a href="#最新2019-蚂蚁金服4面-Java-面试题" class="headerlink" title="最新2019 蚂蚁金服4面(Java)面试题"></a>最新2019 蚂蚁金服4面(Java)面试题</h2><h4 id="MySQL的主从复制怎么做的，具体原理是什么，有什么优缺点。"><a href="#MySQL的主从复制怎么做的，具体原理是什么，有什么优缺点。" class="headerlink" title="MySQL的主从复制怎么做的，具体原理是什么，有什么优缺点。"></a>MySQL的主从复制怎么做的，具体原理是什么，有什么优缺点。</h4><h2 id="2018阿里集团中间件Java面试题-4面"><a href="#2018阿里集团中间件Java面试题-4面" class="headerlink" title="2018阿里集团中间件Java面试题(4面)"></a>2018阿里集团中间件Java面试题(4面)</h2><h2 id="蚂蚁金服4轮面经-Java研发）-G1收集器-连接池-分布式架构"><a href="#蚂蚁金服4轮面经-Java研发）-G1收集器-连接池-分布式架构" class="headerlink" title="蚂蚁金服4轮面经(Java研发）:G1收集器+连接池+分布式架构"></a>蚂蚁金服4轮面经(Java研发）:G1收集器+连接池+分布式架构</h2><h4 id="MySql-默认存储引擎？MyISAM、InnoDB、MEMORY的区别"><a href="#MySql-默认存储引擎？MyISAM、InnoDB、MEMORY的区别" class="headerlink" title="MySql 默认存储引擎？MyISAM、InnoDB、MEMORY的区别"></a>MySql 默认存储引擎？MyISAM、InnoDB、MEMORY的区别</h4><h4 id="什么是幻读，如何解决"><a href="#什么是幻读，如何解决" class="headerlink" title="什么是幻读，如何解决"></a>什么是幻读，如何解决</h4><h4 id="事务隔离级别有什么？通过什么来实现的？分别解决了什么问题？"><a href="#事务隔离级别有什么？通过什么来实现的？分别解决了什么问题？" class="headerlink" title="事务隔离级别有什么？通过什么来实现的？分别解决了什么问题？"></a>事务隔离级别有什么？通过什么来实现的？分别解决了什么问题？</h4><h4 id="乐观锁与悲观锁的使用场景"><a href="#乐观锁与悲观锁的使用场景" class="headerlink" title="乐观锁与悲观锁的使用场景"></a>乐观锁与悲观锁的使用场景</h4><h4 id="数据库主从同步数据一致性如何解决？技术方案的优劣势比较？"><a href="#数据库主从同步数据一致性如何解决？技术方案的优劣势比较？" class="headerlink" title="数据库主从同步数据一致性如何解决？技术方案的优劣势比较？"></a>数据库主从同步数据一致性如何解决？技术方案的优劣势比较？</h4><h2 id="天猫研发Java团队-4面全题目）：并发压测-Mina-事务-集群-秒杀架构"><a href="#天猫研发Java团队-4面全题目）：并发压测-Mina-事务-集群-秒杀架构" class="headerlink" title="天猫研发Java团队(4面全题目）：并发压测+Mina+事务+集群+秒杀架构"></a>天猫研发Java团队(4面全题目）：并发压测+Mina+事务+集群+秒杀架构</h2><h4 id="MySQL-数据库默认存储引擎，有什么优点"><a href="#MySQL-数据库默认存储引擎，有什么优点" class="headerlink" title="MySQL 数据库默认存储引擎，有什么优点"></a>MySQL 数据库默认存储引擎，有什么优点</h4><h4 id="MySQL-的事务隔离级别，分别解决什么问题。"><a href="#MySQL-的事务隔离级别，分别解决什么问题。" class="headerlink" title="MySQL 的事务隔离级别，分别解决什么问题。"></a>MySQL 的事务隔离级别，分别解决什么问题。</h4><h4 id="四个表-记录成绩，每个大约十万条记录，如何找到成绩最好的同学"><a href="#四个表-记录成绩，每个大约十万条记录，如何找到成绩最好的同学" class="headerlink" title="四个表 记录成绩，每个大约十万条记录，如何找到成绩最好的同学"></a>四个表 记录成绩，每个大约十万条记录，如何找到成绩最好的同学</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_1</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> table_2</span><br></pre></td></tr></table></figure><h4 id="数据库分库分表一般数据量多大才需要？"><a href="#数据库分库分表一般数据量多大才需要？" class="headerlink" title="数据库分库分表一般数据量多大才需要？"></a>数据库分库分表一般数据量多大才需要？</h4><h4 id="MySQL的慢-SQL-优化一般如何来做？除此外还有什么方法优化？"><a href="#MySQL的慢-SQL-优化一般如何来做？除此外还有什么方法优化？" class="headerlink" title="MySQL的慢 SQL 优化一般如何来做？除此外还有什么方法优化？"></a>MySQL的慢 SQL 优化一般如何来做？除此外还有什么方法优化？</h4><h2 id="2019-最新蚂蚁花呗Java三面题目：红黑树-并发容器-CAS-Solr-分布式等"><a href="#2019-最新蚂蚁花呗Java三面题目：红黑树-并发容器-CAS-Solr-分布式等" class="headerlink" title="2019 最新蚂蚁花呗Java三面题目：红黑树+并发容器+CAS+Solr+分布式等"></a>2019 最新蚂蚁花呗Java三面题目：红黑树+并发容器+CAS+Solr+分布式等</h2><h4 id="查询中哪些情况不会使用索引？"><a href="#查询中哪些情况不会使用索引？" class="headerlink" title="查询中哪些情况不会使用索引？"></a>查询中哪些情况不会使用索引？</h4><h4 id="数据库索引，底层是怎样实现的，为什么要用B树索引？"><a href="#数据库索引，底层是怎样实现的，为什么要用B树索引？" class="headerlink" title="数据库索引，底层是怎样实现的，为什么要用B树索引？"></a>数据库索引，底层是怎样实现的，为什么要用B树索引？</h4><h4 id="MySql-主从同步的实现原理？"><a href="#MySql-主从同步的实现原理？" class="headerlink" title="MySql 主从同步的实现原理？"></a>MySql 主从同步的实现原理？</h4><h4 id="MySQL-是怎么用B-树？"><a href="#MySQL-是怎么用B-树？" class="headerlink" title="MySQL 是怎么用B+树？"></a>MySQL 是怎么用B+树？</h4><h4 id="谈谈数据库乐观锁与悲观锁"><a href="#谈谈数据库乐观锁与悲观锁" class="headerlink" title="谈谈数据库乐观锁与悲观锁?"></a>谈谈数据库乐观锁与悲观锁?</h4><h2 id="牛逼！支付宝高级Java三面题目：线程锁-事务-雪崩-Docker等"><a href="#牛逼！支付宝高级Java三面题目：线程锁-事务-雪崩-Docker等" class="headerlink" title="牛逼！支付宝高级Java三面题目：线程锁+事务+雪崩+Docker等"></a>牛逼！支付宝高级Java三面题目：线程锁+事务+雪崩+Docker等</h2><h4 id="MySql-如何在RR隔离级别下避免幻读问题"><a href="#MySql-如何在RR隔离级别下避免幻读问题" class="headerlink" title="MySql 如何在RR隔离级别下避免幻读问题"></a>MySql 如何在RR隔离级别下避免幻读问题</h4><h4 id="MySql范式和反范式的区别以及彼此的优缺点"><a href="#MySql范式和反范式的区别以及彼此的优缺点" class="headerlink" title="MySql范式和反范式的区别以及彼此的优缺点"></a>MySql范式和反范式的区别以及彼此的优缺点</h4><h4 id="MySql-索引类别有哪些，什么是覆盖索引"><a href="#MySql-索引类别有哪些，什么是覆盖索引" class="headerlink" title="MySql 索引类别有哪些，什么是覆盖索引"></a>MySql 索引类别有哪些，什么是覆盖索引</h4><h4 id="mysql如何获取慢SQL，以及慢查询的解决方式"><a href="#mysql如何获取慢SQL，以及慢查询的解决方式" class="headerlink" title="mysql如何获取慢SQL，以及慢查询的解决方式"></a>mysql如何获取慢SQL，以及慢查询的解决方式</h4><h4 id="MySql-主从同步如何配置，工作原理"><a href="#MySql-主从同步如何配置，工作原理" class="headerlink" title="MySql 主从同步如何配置，工作原理"></a>MySql 主从同步如何配置，工作原理</h4><h4 id="乐观锁和悲观锁、行锁与表锁、共享锁与排他锁（inndob如何手动加共享锁与排他锁）"><a href="#乐观锁和悲观锁、行锁与表锁、共享锁与排他锁（inndob如何手动加共享锁与排他锁）" class="headerlink" title="乐观锁和悲观锁、行锁与表锁、共享锁与排他锁（inndob如何手动加共享锁与排他锁）"></a>乐观锁和悲观锁、行锁与表锁、共享锁与排他锁（inndob如何手动加共享锁与排他锁）</h4><h4 id="死锁判定原理和具体场景-1"><a href="#死锁判定原理和具体场景-1" class="headerlink" title="死锁判定原理和具体场景"></a>死锁判定原理和具体场景</h4><h4 id="谈谈事务的ACID"><a href="#谈谈事务的ACID" class="headerlink" title="谈谈事务的ACID"></a>谈谈事务的ACID</h4><h4 id="数据库崩溃时事务的恢复机制"><a href="#数据库崩溃时事务的恢复机制" class="headerlink" title="数据库崩溃时事务的恢复机制"></a>数据库崩溃时事务的恢复机制</h4><h2 id="蚂蚁花呗团队面试题：LinkedHashMap-SpringCloud-线程锁-分布式"><a href="#蚂蚁花呗团队面试题：LinkedHashMap-SpringCloud-线程锁-分布式" class="headerlink" title="蚂蚁花呗团队面试题：LinkedHashMap+SpringCloud+线程锁+分布式"></a>蚂蚁花呗团队面试题：LinkedHashMap+SpringCloud+线程锁+分布式</h2><h4 id="数据库索引有哪些？底层怎么实现的？数据库怎么优化？"><a href="#数据库索引有哪些？底层怎么实现的？数据库怎么优化？" class="headerlink" title="数据库索引有哪些？底层怎么实现的？数据库怎么优化？"></a>数据库索引有哪些？底层怎么实现的？数据库怎么优化？</h4><h4 id="数据库的事务，四个性质说一下，分别有什么用，怎么实现的？"><a href="#数据库的事务，四个性质说一下，分别有什么用，怎么实现的？" class="headerlink" title="数据库的事务，四个性质说一下，分别有什么用，怎么实现的？"></a>数据库的事务，四个性质说一下，分别有什么用，怎么实现的？</h4><h4 id="MySql存储引擎"><a href="#MySql存储引擎" class="headerlink" title="MySql存储引擎"></a>MySql存储引擎</h4><h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><h4 id="不可重复度和幻读，怎么避免，底层怎么实现（行锁表锁）"><a href="#不可重复度和幻读，怎么避免，底层怎么实现（行锁表锁）" class="headerlink" title="不可重复度和幻读，怎么避免，底层怎么实现（行锁表锁）"></a>不可重复度和幻读，怎么避免，底层怎么实现（行锁表锁）</h4><h4 id="MySQL-有哪几种-join-方式，底层原理是什么"><a href="#MySQL-有哪几种-join-方式，底层原理是什么" class="headerlink" title="MySQL 有哪几种 join 方式，底层原理是什么"></a>MySQL 有哪几种 join 方式，底层原理是什么</h4><h4 id="MySQL数据库怎么实现分库分表，以及数据同步？"><a href="#MySQL数据库怎么实现分库分表，以及数据同步？" class="headerlink" title="MySQL数据库怎么实现分库分表，以及数据同步？"></a>MySQL数据库怎么实现分库分表，以及数据同步？</h4><h2 id="最全蚂蚁金服高级Java面试题目-3面"><a href="#最全蚂蚁金服高级Java面试题目-3面" class="headerlink" title="最全蚂蚁金服高级Java面试题目(3面)"></a>最全蚂蚁金服高级Java面试题目(3面)</h2><h4 id="在工作中，SQL语句的优化和注意的事项"><a href="#在工作中，SQL语句的优化和注意的事项" class="headerlink" title="在工作中，SQL语句的优化和注意的事项"></a>在工作中，SQL语句的优化和注意的事项</h4><h4 id="MySql同步机制原理，有哪几种同步方法"><a href="#MySql同步机制原理，有哪几种同步方法" class="headerlink" title="MySql同步机制原理，有哪几种同步方法"></a>MySql同步机制原理，有哪几种同步方法</h4><h4 id="数据库主从同步如何实现，事务如何实现"><a href="#数据库主从同步如何实现，事务如何实现" class="headerlink" title="数据库主从同步如何实现，事务如何实现"></a>数据库主从同步如何实现，事务如何实现</h4><h2 id="2018-支付宝Java开发四面-Ngnix-MQ队列-集群-并发抢购"><a href="#2018-支付宝Java开发四面-Ngnix-MQ队列-集群-并发抢购" class="headerlink" title="2018 支付宝Java开发四面:Ngnix+MQ队列+集群+并发抢购"></a>2018 支付宝Java开发四面:Ngnix+MQ队列+集群+并发抢购</h2><h4 id="MySql-limit-分页如何保证可靠性"><a href="#MySql-limit-分页如何保证可靠性" class="headerlink" title="MySql limit 分页如何保证可靠性"></a>MySql limit 分页如何保证可靠性</h4><h4 id="MySQL引擎及区别，项目用的哪个，为什么"><a href="#MySQL引擎及区别，项目用的哪个，为什么" class="headerlink" title="MySQL引擎及区别，项目用的哪个，为什么"></a>MySQL引擎及区别，项目用的哪个，为什么</h4><h4 id="mycat-分库分表、读写分离的实现"><a href="#mycat-分库分表、读写分离的实现" class="headerlink" title="mycat 分库分表、读写分离的实现"></a>mycat 分库分表、读写分离的实现</h4><h2 id="蚂蚁三面题目-java开发岗）-Java锁机制-JVM-线程池-事务-中间件"><a href="#蚂蚁三面题目-java开发岗）-Java锁机制-JVM-线程池-事务-中间件" class="headerlink" title="蚂蚁三面题目(java开发岗）:Java锁机制+JVM+线程池+事务+中间件"></a>蚂蚁三面题目(java开发岗）:Java锁机制+JVM+线程池+事务+中间件</h2><h4 id="MySQL的表锁-amp-行锁-amp-乐观锁-amp-悲观锁-各自的使用场景"><a href="#MySQL的表锁-amp-行锁-amp-乐观锁-amp-悲观锁-各自的使用场景" class="headerlink" title="MySQL的表锁&amp;行锁&amp;乐观锁&amp;悲观锁,各自的使用场景"></a>MySQL的表锁&amp;行锁&amp;乐观锁&amp;悲观锁,各自的使用场景</h4><h4 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h4><h4 id="事务的二段提交机制？"><a href="#事务的二段提交机制？" class="headerlink" title="事务的二段提交机制？"></a>事务的二段提交机制？</h4><h4 id="聚簇索引-amp-非聚簇索引"><a href="#聚簇索引-amp-非聚簇索引" class="headerlink" title="聚簇索引&amp;非聚簇索引"></a>聚簇索引&amp;非聚簇索引</h4><h4 id="ACID-CAP-BASE理论，以及RPC过程。"><a href="#ACID-CAP-BASE理论，以及RPC过程。" class="headerlink" title="ACID CAP BASE理论，以及RPC过程。"></a>ACID CAP BASE理论，以及RPC过程。</h4><h2 id="蚂蚁中间件团队Java面试题：Netty-Redis-Kafka-MongoDB-分布式"><a href="#蚂蚁中间件团队Java面试题：Netty-Redis-Kafka-MongoDB-分布式" class="headerlink" title="蚂蚁中间件团队Java面试题：Netty+Redis+Kafka+MongoDB+分布式"></a>蚂蚁中间件团队Java面试题：Netty+Redis+Kafka+MongoDB+分布式</h2><h4 id="索引什么时候会失效变成全表扫描"><a href="#索引什么时候会失效变成全表扫描" class="headerlink" title="索引什么时候会失效变成全表扫描"></a>索引什么时候会失效变成全表扫描</h4><h4 id="数据库万级变成亿级，你如何来解决。"><a href="#数据库万级变成亿级，你如何来解决。" class="headerlink" title="数据库万级变成亿级，你如何来解决。"></a>数据库万级变成亿级，你如何来解决。</h4><h2 id="最新阿里聚划算Java-5轮面试题-涵盖GC收集器、多线程锁等"><a href="#最新阿里聚划算Java-5轮面试题-涵盖GC收集器、多线程锁等" class="headerlink" title="最新阿里聚划算Java 5轮面试题,涵盖GC收集器、多线程锁等"></a>最新阿里聚划算Java 5轮面试题,涵盖GC收集器、多线程锁等</h2><h4 id="MySQL采用了什么存储引擎，为什么？"><a href="#MySQL采用了什么存储引擎，为什么？" class="headerlink" title="MySQL采用了什么存储引擎，为什么？"></a>MySQL采用了什么存储引擎，为什么？</h4><h4 id="索引的类型，索引的底层实现原理"><a href="#索引的类型，索引的底层实现原理" class="headerlink" title="索引的类型，索引的底层实现原理"></a>索引的类型，索引的底层实现原理</h4><h4 id="MySQL数据库对应的行锁、表锁、悲观锁、乐观锁的区别"><a href="#MySQL数据库对应的行锁、表锁、悲观锁、乐观锁的区别" class="headerlink" title="MySQL数据库对应的行锁、表锁、悲观锁、乐观锁的区别"></a>MySQL数据库对应的行锁、表锁、悲观锁、乐观锁的区别</h4><h4 id="MySQL数据库引擎？应用场景？查询优化？NoSQL有用或了解吗？"><a href="#MySQL数据库引擎？应用场景？查询优化？NoSQL有用或了解吗？" class="headerlink" title="MySQL数据库引擎？应用场景？查询优化？NoSQL有用或了解吗？"></a>MySQL数据库引擎？应用场景？查询优化？NoSQL有用或了解吗？</h4><h4 id="MySql事务讲一下，事务定义，四个性质，事务并发引起的问题，事务的四个隔离级别"><a href="#MySql事务讲一下，事务定义，四个性质，事务并发引起的问题，事务的四个隔离级别" class="headerlink" title="MySql事务讲一下，事务定义，四个性质，事务并发引起的问题，事务的四个隔离级别"></a>MySql事务讲一下，事务定义，四个性质，事务并发引起的问题，事务的四个隔离级别</h4><h4 id="Redis-和数据库如何保证数据一致性"><a href="#Redis-和数据库如何保证数据一致性" class="headerlink" title="Redis 和数据库如何保证数据一致性"></a>Redis 和数据库如何保证数据一致性</h4><h4 id="谈谈MySQL的查询优化方法，重点谈谈优化步骤。"><a href="#谈谈MySQL的查询优化方法，重点谈谈优化步骤。" class="headerlink" title="谈谈MySQL的查询优化方法，重点谈谈优化步骤。"></a>谈谈MySQL的查询优化方法，重点谈谈优化步骤。</h4><h2 id="最新天猫Java3轮面试题目：虚拟机-并发锁-Sql防注入-Zookeeper"><a href="#最新天猫Java3轮面试题目：虚拟机-并发锁-Sql防注入-Zookeeper" class="headerlink" title="最新天猫Java3轮面试题目：虚拟机+并发锁+Sql防注入+Zookeeper"></a>最新天猫Java3轮面试题目：虚拟机+并发锁+Sql防注入+Zookeeper</h2><h4 id="如何防止sql注入，了解哪些加密算法，rsa过程说下"><a href="#如何防止sql注入，了解哪些加密算法，rsa过程说下" class="headerlink" title="如何防止sql注入，了解哪些加密算法，rsa过程说下"></a>如何防止sql注入，了解哪些加密算法，rsa过程说下</h4><h4 id="MySql索引设计，联合索引，SQL-语句优化，abc-索引，搜索b，会使用索引吗（走索引要回表）"><a href="#MySql索引设计，联合索引，SQL-语句优化，abc-索引，搜索b，会使用索引吗（走索引要回表）" class="headerlink" title="MySql索引设计，联合索引，SQL 语句优化，abc 索引，搜索b，会使用索引吗（走索引要回表）"></a>MySql索引设计，联合索引，SQL 语句优化，abc 索引，搜索b，会使用索引吗（走索引要回表）</h4><h2 id="非常全面的阿里的Java面试题目-涵盖Java基础-高级-架构"><a href="#非常全面的阿里的Java面试题目-涵盖Java基础-高级-架构" class="headerlink" title="非常全面的阿里的Java面试题目,涵盖Java基础+高级+架构"></a>非常全面的阿里的Java面试题目,涵盖Java基础+高级+架构</h2><h4 id="数据库隔离级别-脏读-幻读-ACID-mysql的隔离级别"><a href="#数据库隔离级别-脏读-幻读-ACID-mysql的隔离级别" class="headerlink" title="数据库隔离级别 脏读 幻读 ACID mysql的隔离级别"></a>数据库隔离级别 脏读 幻读 ACID mysql的隔离级别</h4><h4 id="mysql索引实现，如何解决慢查询"><a href="#mysql索引实现，如何解决慢查询" class="headerlink" title="mysql索引实现，如何解决慢查询"></a>mysql索引实现，如何解决慢查询</h4><h4 id="数据库锁是怎么实现的"><a href="#数据库锁是怎么实现的" class="headerlink" title="数据库锁是怎么实现的"></a>数据库锁是怎么实现的</h4><h4 id="用过mysql吗？为啥加索引会变快？聚簇型索引和非聚簇型索引的区别？"><a href="#用过mysql吗？为啥加索引会变快？聚簇型索引和非聚簇型索引的区别？" class="headerlink" title="用过mysql吗？为啥加索引会变快？聚簇型索引和非聚簇型索引的区别？"></a>用过mysql吗？为啥加索引会变快？聚簇型索引和非聚簇型索引的区别？</h4><h2 id="淘宝网Java五面：现场面试49题含答案！"><a href="#淘宝网Java五面：现场面试49题含答案！" class="headerlink" title="淘宝网Java五面：现场面试49题含答案！"></a>淘宝网Java五面：现场面试49题含答案！</h2><h4 id="讲一下数据库的隔离等级"><a href="#讲一下数据库的隔离等级" class="headerlink" title="讲一下数据库的隔离等级"></a>讲一下数据库的隔离等级</h4><h4 id="说一聚簇索引和非聚簇索引的有什么不同"><a href="#说一聚簇索引和非聚簇索引的有什么不同" class="headerlink" title="说一聚簇索引和非聚簇索引的有什么不同"></a>说一聚簇索引和非聚簇索引的有什么不同</h4><h4 id="mysql用的什么存储引擎，这个存储引擎用的什么数据结构-，有哪些优缺点，怎么使用"><a href="#mysql用的什么存储引擎，这个存储引擎用的什么数据结构-，有哪些优缺点，怎么使用" class="headerlink" title="mysql用的什么存储引擎，这个存储引擎用的什么数据结构 ，有哪些优缺点，怎么使用"></a>mysql用的什么存储引擎，这个存储引擎用的什么数据结构 ，有哪些优缺点，怎么使用</h4><h2 id="史上最全阿里Java面试题目大汇总！强烈建议收藏"><a href="#史上最全阿里Java面试题目大汇总！强烈建议收藏" class="headerlink" title="史上最全阿里Java面试题目大汇总！强烈建议收藏~"></a>史上最全阿里Java面试题目大汇总！强烈建议收藏~</h2><h4 id="MySQL的常见优化方式、定为慢查询"><a href="#MySQL的常见优化方式、定为慢查询" class="headerlink" title="MySQL的常见优化方式、定为慢查询"></a>MySQL的常见优化方式、定为慢查询</h4><h4 id="数据库（最多的还是mysql，Nosql有redis）索引（包括分类及优化方式，失效条件，底层结构）"><a href="#数据库（最多的还是mysql，Nosql有redis）索引（包括分类及优化方式，失效条件，底层结构）" class="headerlink" title="数据库（最多的还是mysql，Nosql有redis）索引（包括分类及优化方式，失效条件，底层结构）"></a>数据库（最多的还是mysql，Nosql有redis）索引（包括分类及优化方式，失效条件，底层结构）</h4><h4 id="sql语法（join，union，子查询，having，group-by）"><a href="#sql语法（join，union，子查询，having，group-by）" class="headerlink" title="sql语法（join，union，子查询，having，group by）"></a>sql语法（join，union，子查询，having，group by）</h4><h4 id="引擎对比（InnoDB，MyISAM）"><a href="#引擎对比（InnoDB，MyISAM）" class="headerlink" title="引擎对比（InnoDB，MyISAM）"></a>引擎对比（InnoDB，MyISAM）</h4><h4 id="数据库的锁（行锁，表锁，页级锁，意向锁，读锁，写锁，悲观锁，乐观锁，以及加锁的select-sql方式）"><a href="#数据库的锁（行锁，表锁，页级锁，意向锁，读锁，写锁，悲观锁，乐观锁，以及加锁的select-sql方式）" class="headerlink" title="数据库的锁（行锁，表锁，页级锁，意向锁，读锁，写锁，悲观锁，乐观锁，以及加锁的select sql方式）"></a>数据库的锁（行锁，表锁，页级锁，意向锁，读锁，写锁，悲观锁，乐观锁，以及加锁的select sql方式）</h4><h4 id="隔离级别，依次解决的问题（脏读、不可重复读、幻读）"><a href="#隔离级别，依次解决的问题（脏读、不可重复读、幻读）" class="headerlink" title="隔离级别，依次解决的问题（脏读、不可重复读、幻读）"></a>隔离级别，依次解决的问题（脏读、不可重复读、幻读）</h4><h4 id="事务的ACID"><a href="#事务的ACID" class="headerlink" title="事务的ACID"></a>事务的ACID</h4><h4 id="优化（explain，慢查询，show-profile）"><a href="#优化（explain，慢查询，show-profile）" class="headerlink" title="优化（explain，慢查询，show profile）"></a>优化（explain，慢查询，show profile）</h4><h4 id="数据库的范式"><a href="#数据库的范式" class="headerlink" title="数据库的范式"></a>数据库的范式</h4><h4 id="分库分表，主从复制，读写分离。"><a href="#分库分表，主从复制，读写分离。" class="headerlink" title="分库分表，主从复制，读写分离。"></a>分库分表，主从复制，读写分离。</h4><h2 id="最全Java面试180题：阿里11面试-网易-百度-美团！含答案大赠送！"><a href="#最全Java面试180题：阿里11面试-网易-百度-美团！含答案大赠送！" class="headerlink" title="最全Java面试180题：阿里11面试+网易+百度+美团！含答案大赠送！"></a>最全Java面试180题：阿里11面试+网易+百度+美团！含答案大赠送！</h2><p><a href="https://youzhixueyuan.com/most-of-ali-baidu-netease-interview-180-questions.html">最全Java面试180题</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>abc</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Chapter 8.2 分布式事务</title>
      <link href="/2020/04/28/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F/Chapter%208.2%20%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
      <url>/2020/04/28/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F/Chapter%208.2%20%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="CAP-理论"><a href="#CAP-理论" class="headerlink" title="CAP 理论"></a>CAP 理论</h2><p>CAP 原则是指在一个分布式系统中，一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）三者不可兼得。</p><ol><li>一致性：在分布式系统的所有数据备份中，在同一时刻是否有同样的值（等同于所有节点都访问同一份最新的数据副本）。</li><li>可用性：在集群中一部分节点发生故障后，集群整体能否响应客户端的读写请求（对数据更新具备高可用性）。</li><li>分区容错性：系统如果不能在时限内达成数据的一致性，就意味着发生了分区，必须就当前操作的 C 和 A 之间做出选择。以实际效果而言，分区相当于对通信的时限要求。</li></ol><h2 id="BASE-理论"><a href="#BASE-理论" class="headerlink" title="BASE 理论"></a>BASE 理论</h2><p>BASE 理论是 CAP 理论的验证，包括基本可用性（Basically Available）、柔性状态（Soft State）、最终一致性（Eventual Consistency）三个原则。</p><h2 id="两阶段提交协议"><a href="#两阶段提交协议" class="headerlink" title="两阶段提交协议"></a>两阶段提交协议</h2><p>分布式事务指涉及操作多个数据库的事务，在分布式系统中，各个节点之间在物理上相互独立，通过网络进行沟通和协调。</p><p>二阶段提交（Two-Phase Commit）指在计算机网络及数据库领域内，为了使分布式数据库的所有节点在进行事务提交时都保持一致性而设计的一种算法。在分布式系统中，每个节点虽然都可以知道自己的操作是否成功，却无法知道其它节点的操作是否成功。</p><p>在一个事务跨越多个节点时，为了保持事务的 ACID 特性，需要引入一个作为协调者的组件来统一掌控所有节点（称作参与者）的操作结果，并最终确认这些节点是否真正提交操作结果（比如将更新后的数据写入磁盘等）。因此，二阶段提交的算法思路可以概括为：参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈决定各参与者是提交操作还是终止操作。</p><h4 id="Prepare（准备阶段）"><a href="#Prepare（准备阶段）" class="headerlink" title="Prepare（准备阶段）"></a>Prepare（准备阶段）</h4><p>事务协调者（事务管理器）给每个参与者（源管理器）都发送 Prepare 消息，每个参与者要么直接返回失败（如权限验证失败），要么在本地执行事务，写本地的 redo 和 undo 日志但不提交，是一种“万事俱备，只欠东风”的状态。</p><h4 id="Commit（提交阶段）"><a href="#Commit（提交阶段）" class="headerlink" title="Commit（提交阶段）"></a>Commit（提交阶段）</h4><p>如果协调者接收到了参与者的失败消息或者等待超时，则直接给每个参与者都发送回滚消息，否则发送提交消息，参与者根据协调者的指令执行提交或者回滚操作，释放在所有事务处理过程中使用的锁资源。</p><p><img src="http://www.pbteach.com/post/java_distribut/subject_dtx-02/1563273133485.png" alt=""></p><h4 id="两阶段提交的缺点"><a href="#两阶段提交的缺点" class="headerlink" title="两阶段提交的缺点"></a>两阶段提交的缺点</h4><p>两阶段提交的缺点如下。</p><ol><li>同步阻塞问题：在执行过程中，所有参与者的任务都是阻塞执行的。</li><li>单点故障问题：所有请求都需要经过协调者，在协调者发生故障时，所有参与者都会被阻塞。</li><li>数据不一致：在二阶段提交的第 2 阶段，在协调者想参与者发送 Commmit 请求后发生了局部网络异常，或者在发送 Commit 请求过程中协调者发生了故障，导致只有一部分参与者接收到 Commit 请求，于是整个分布式系统出现了数据不一致的现象，这也被成为脑裂。</li><li>协调者宕机后事务状态丢失：协调者在发出 Commit 消息之后宕机，唯一接收到这条消息的参与者也宕机，即使协调者通过选择产生了新的协调者，这条事务的状态也是不确定的，没有人知道事务是否已被提交。</li></ol><h2 id="三阶段提交协议"><a href="#三阶段提交协议" class="headerlink" title="三阶段提交协议"></a>三阶段提交协议</h2><p>三阶段提交（Tree-Phase Commit）是二阶段提交的改进版本，具体改进如下：</p><ol><li>引入超时机制：在协调者和参与者中引入了超时机制，如果协调者长时间接收不到参与者的反馈，则认为参与者执行失败。</li><li>在第 1 阶段和第 2 阶段都加入了一个预准备阶段以保证在最后的任务提交之前各参与者的状态是一致的。也就是说，除了引入超时机制，三阶段提交协议把两阶段提交协议的准备阶段再次一分为二，这样三阶段提交就有了 CanCommmit、PreCommit、DoCommit 三个阶段。</li></ol><h4 id="CanCommit-阶段"><a href="#CanCommit-阶段" class="headerlink" title="CanCommit 阶段"></a>CanCommit 阶段</h4><p>协调者向参与者发送 Commit 请求，参与者如果可提交就返回 Yes 响应，否则返回 No 响应。</p><h4 id="PreCommit-阶段"><a href="#PreCommit-阶段" class="headerlink" title="PreCommit 阶段"></a>PreCommit 阶段</h4><p>协调者根据参与者的反应来决定是否继续进行，有以下两种可能。</p><ol><li>假如协调者从所有参与者那里获得的反馈都是 Yes 响应，就预执行事务。</li><li>假如有任意参与者向协调者发送了 No 响应，或者在等待超时之后协调者都没有接收到参与者的响应，则执行事务的中断。</li></ol><h4 id="DoCommit-阶段"><a href="#DoCommit-阶段" class="headerlink" title="DoCommit 阶段"></a>DoCommit 阶段</h4><p>该阶段进行真正的事务提交，主要包括：协调者发送提交请求，参与者提交事务，参与者响应反馈（在事务提交完之后向协调者发送 Ack 响应），协调者确定完成事务。</p><p><img src="https://tse3-mm.cn.bing.net/th/id/OIP.f9Y1UcT76nyk3o04kJ_ndQAAAA?pid=Api&amp;rs=1" alt=""></p><h2 id="柔性事务"><a href="#柔性事务" class="headerlink" title="柔性事务"></a>柔性事务</h2><p>在分布式数据库领域，基于 CAP 理论及 BASE 理论，阿里巴巴提出了柔性事务的概念。</p><p>我们通常所说的柔性事务分为：两阶段型、补偿型、异步确保型、最大努力通知型。</p><p>两阶段事务指分布式事务的两阶段提交，对应技术上的 XA 和 JTA/JTS，是分布式环境下事务处理的典型规范模式。</p><p>TCC 型事务（Try、Confirm、Cancel）为补偿型事务，是一种基于补偿的事务处理模型。如下图所示，服务器 A 发起事务，服务器 B 参与事务，如果服务器 A 的事务和服务器 B 的事务都顺利执行完成并提交，则整个事务执行完成。但是，如果事务 B 执行失败，事务 B 本身就回滚，这时事务 A 已被提交，所以需要执行一个补偿操作，将已经提交的事务 A 执行的操作进行回滚操作，恢复到未执行前事务 A 的状态。需要注意的是，发起提交的一般是主业务服务，而状态补偿的一般是业务活动管理者，因为活动日志被存储在业务活动管理中，补偿需要依靠日志进行恢复。TCC 事务模型牺牲了一定的隔离性和一致性，但是提高了事务的可用性。</p><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=453289732,866507005&amp;fm=26&amp;gp=0.jpg" alt=""></p><p>异步确保型事务指将一系列同步的事务操作修改为基于消息队列异步执行的操作，来避免分布式事务中同步阻塞带来的数据操作性能下降。如下图所示，在写业务数据 A 触发后将执行以下流程：</p><ol><li>业务 A 的模块在数据库 A 上执行数据更新操作。</li><li>业务 A 调用写消息数据模块。</li><li>写消息日志模块将数据库的写操作写入数据库 A 中。</li><li>读消息日志模块接收操作日志。</li><li>读消息数据调用写业务 B 的模块。</li><li>写业务 B 更新数据到数据库 B。</li><li>写业务数据 B 的模块发送异步消息更新到数据库 A 中的写消息日志状态，说明自己已经完成了异步数据更新操作。</li></ol><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1591804156048&amp;di=3595c8ccd553796b0f88856d17459242&amp;imgtype=0&amp;src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D2000960586%2C3622433777%26fm%3D214%26gp%3D0.jpg" alt=""></p><p>最大努力通知型事务也是通过消息中间</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> MySQL 性能调优 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 事务</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E4%BA%8B%E5%8A%A1/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>事务是作为一个单元的一组有序的数据库操作。如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消。</p><h2 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h2><p>如果一个数据库声称支持事务的操作，那么该数据库必须要具备以 ACID 4个特性。</p><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>原子性（Atomicity）是指一个事务所包含的操作要么全部成功，要么全部失败回滚。</p><h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><p>一致性（Consistency）是指一个事务执行之前和执行之后都必须处于一致性状态。</p><p>拿转账来说，假设用户 A 和用户 B 两者的钱加起来一共是 5000，那么不管 A 和 B 之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是 5000，这就是事务的一致性。</p><h4 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h4><p>隔离型（Isolation）是指当多个用户并发访问数据库时，比如操作同一张表，数据库为每一个用户开启事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p><p>即要达到这么一种效果：对于任意两个并发的事务 T1 和 T2，在事务 T1 看来，T2 要么在 T1 开始之前就已经结束，要么在 T1 结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p><h4 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h4><p>持久性（Durability）是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><h2 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h2><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据（<strong>针对未提交数据</strong>）。</p><p>当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户 A 向用户 B 转账 100 元，对应 SQL 命令如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money = money + <span class="number">100</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'B'</span>;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money = money - <span class="number">100</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'A'</span>;</span><br></pre></td></tr></table></figure><p>当只执行第一条 SQL 时，A 通知 B 查看账户，B 发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当 B 以后再次查看账户时就会发现钱其实并没有转。</p><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><p>不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了（<strong>针对其他提交前后，读取数据本身的对比</strong>）。</p><p>例如事务 T1 在读取某一数据，而事务 T2 立马修改了这个数据并且提交事务给数据库，事务 T1 再次读取该数据就得到了不同的结果，发送了不可重复读。</p><p>不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。</p><p>在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据 A 和 B 依次查询就可能不同，A 和 B 就可能打起来了……</p><h4 id="虚读（幻读）"><a href="#虚读（幻读）" class="headerlink" title="虚读（幻读）"></a>虚读（幻读）</h4><p>幻读是事务非独立执行时发生的一种现象。例如事务 T1 对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务 T2 又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务 T1 的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务 T2 中添加的，就好像产生幻觉一样，这就是发生了幻读（<strong>针对其他提交前后，读取数据条数的对比</strong>）。</p><p>幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。</p><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>MySQL 数据库为我们提供了 4 种隔离级别。</p><h4 id="Read-uncommitted"><a href="#Read-uncommitted" class="headerlink" title="Read uncommitted"></a>Read uncommitted</h4><p>Read uncommitted (读未提交)，最低级别，任何情况都无法保证。</p><p>它是最低的隔离级别，它最直接的效果就是一个事务可以读取另一个事务并未提交的更新结果。</p><h4 id="Read-committed"><a href="#Read-committed" class="headerlink" title="Read committed"></a>Read committed</h4><p>Read committed (读已提交)，可避免脏读的发生。</p><p>它通常是大部分数据库采用的默认隔离级别，它在 Read Uncommitted 隔离级别基础上所做的限定更进一步，在该隔离级别下，一个事务的更新操作结果只有在该事务提交之后，另一个事务才可能读取到同一笔数据更新后的结果。所以，Read Committed 可以避免 Read Uncommitted 隔离级别下存在的脏读问题，但无法避免不可重复读取和幻读的问题。</p><h4 id="Repeatable-read"><a href="#Repeatable-read" class="headerlink" title="Repeatable read"></a>Repeatable read</h4><p>Repeatable read (可重复读)，可避免脏读、不可重复读的发生。</p><p>此隔离级别可以保证在整个事务的过程中，对同一笔数据的读取结果是相同的，不管其他事务是否同时在对同一笔数据进行更新，也不管其他事务对同一笔数据的更新提交与否。Repeatable Read 隔离级别避免了脏读和不可重复读取的问题，但无法避免幻读。（MySQL 默认隔离级别）</p><h4 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h4><p>Serializable (串行化)，可避免脏读、不可重复读、幻读的发生。</p><p>最为严格的隔离级别，所有的事务操作都必须依次顺序执行，可以避免其他隔离级别遇到的所有问题，是最为安全的隔离级别， 但同时也是性能最差的隔离级别，因为所有的事务在该隔离级别下都需要依次顺序执行，所以，并发度下降，吞吐量上不去，性能自然就下来了。 因为该隔离级别极大的影响系统性能，所以，很少场景会使用它。通常情况下，我们会使用其他隔离级别加上相应的并发锁的机制来控制对数据的访问，这样既保证了系统性能不会损失太大，也能够一定程度上保证数据的一致性。</p><h2 id="隔离级别操作"><a href="#隔离级别操作" class="headerlink" title="隔离级别操作"></a>隔离级别操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当前事务的隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @@tx_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置隔离级别</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> repeatable <span class="keyword">read</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> tx_isolation = <span class="string">'repeatable-read'</span>;</span><br></pre></td></tr></table></figure><h4 id="不同隔离级别性能差异"><a href="#不同隔离级别性能差异" class="headerlink" title="不同隔离级别性能差异"></a>不同隔离级别性能差异</h4>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 索引</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>索引是用来快速检索出具有特定值的记录。MySQL 官方对索引的定义为：索引（Index）是帮助 MySQL 高效获取数据的数据结构。</p><h2 id="索引的作用"><a href="#索引的作用" class="headerlink" title="索引的作用"></a>索引的作用</h2><h2 id="索引的特征"><a href="#索引的特征" class="headerlink" title="索引的特征"></a>索引的特征</h2><p>索引有两个特征，即唯一性索引和复合索引。</p><h2 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h2><p>MySQL 目前主要有以下几种索引类型：</p><ol><li><p>普通索引<br> 最基本的索引，它没有任何限制。普通索引的唯一任务是加快对数据的访问速度。</p></li><li><p>唯一索引<br> 它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</p><p> 事实上，在许多场合，人们创建唯一索引的目的往往不是为了提高访问速度，而只是为了避免数据出现重复。</p></li><li><p>主键索引<br> 是一种特殊的唯一索引，一个表只能有一个主键，不允许有空值。一般是在建表的时候同时创建主键索引。主键索引与唯一索引的唯一区别是：前者在定义时使用的关键字是 PRIMARY 而不是 UNIQUE。 </p></li><li><p>外键索引<br> 如果为某个外键字段定义了一个外键约束条件，MySQL就会定义一个内部索引来帮助自己以最有效率的方式去管理和使用外键约束条件。 </p></li><li><p>组合索引<br> 指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用组合索引时遵循最左前缀原则。</p></li><li><p>全文索引<br> 通过数值比较、范围过滤等就可以完成绝大多数我们需要的查询，但是，如果希望通过关键字的匹配来进行查询过滤，那么就需要基于相似度的查询，而不是原来的精确数值比较。全文索引就是为这种场景设计的。</p><p> 你可能会说，用 like + % 就可以实现模糊匹配了，为什么还要全文索引？like + % 在文本比较少时是合适的，但是对于大量的文本数据检索，是不可想象的。全文索引在大量的数据面前，能比 like + % 快 N 倍，速度不是一个数量级，但是全文索引可能存在精度问题。</p><p> 你可能没有注意过全文索引，不过至少应该对一种全文索引技术比较熟悉：各种的搜索引擎。虽然搜索引擎的索引对象是超大量的数据，并且通常其背后都不是关系型数据库，不过全文索引的基本原理是一样的。</p></li></ol><h2 id="采用查找算法"><a href="#采用查找算法" class="headerlink" title="采用查找算法"></a>采用查找算法</h2><h4 id="Hash-散列法"><a href="#Hash-散列法" class="headerlink" title="Hash 散列法"></a>Hash 散列法</h4><p>哈希算法（也称散列），就是把任意长度值（key）通过散列算法变换成固定长度的 key 地址，通过这个地址进行访问的数据结构。它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p><p>哈希的时间复杂度是 $O(1)$。</p><p>哈希的不足是：1 不支持范围查询，2 不支持排序。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20190108/90b457d976614a65826199b1f41f3d28.gif" alt=""></p><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p>真实的数据存于叶子节点；非叶子节点存储指引搜索方向的数据项。</p><p>二叉树支持范围查询。</p><p>不足的地方是，根据我们插入的顺序，极端不平衡。</p><p><img src="http://www.cxyxiaowu.com/wp-content/uploads/2019/10/1571058094-fa3f978179e2c46.jpeg" alt=""></p><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><p>红黑树是平衡二叉树的一种，解决了插入顺序不平衡的问题。但是也只是相对的减少不平衡，还是会往右边倾斜。</p><p><img src="https://img.jbzj.com/file_images/article/201901/2019110153603213.gif?2019010153616" alt=""></p><h4 id="BTree"><a href="#BTree" class="headerlink" title="BTree"></a>BTree</h4><p>真实的数据存于叶子节点；非叶子节点存储指引搜索方向的数据项。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5tcC5zb2h1LmNvbS91cGxvYWQvMjAxNzA3MTMvM2JkMmI0MjIwYTBmNGQxODg3ZTI5NDNhNzI5YzQwYTFfdGgucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>B-树、B树和B-tree是同一个数据结构，只不过英语翻译过来之后，有些人误解了以为是多种树。所以好多讲解树的数据结构的博客完全是误导初学者。。。请读者认真分辨。</p></blockquote><h2 id="算法对比"><a href="#算法对比" class="headerlink" title="算法对比"></a>算法对比</h2><div class="table-container"><table><thead><tr><th style="text-align:left">算法名称</th><th style="text-align:left">时间复杂度</th><th style="text-align:left">支持范围查询</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">暴力遍历</td><td style="text-align:left">$O(n^2)$</td><td style="text-align:left">不支持</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">哈希</td><td style="text-align:left">$O(1)$</td><td style="text-align:left">不支持</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">二叉树</td><td style="text-align:left">$O(n)$</td><td style="text-align:left">支持</td><td style="text-align:left">不平衡，时间复杂度就是树的深度</td></tr><tr><td style="text-align:left">红黑树</td><td style="text-align:left"></td><td style="text-align:left">支持</td><td style="text-align:left">不平衡</td></tr><tr><td style="text-align:left">B-Tree</td><td style="text-align:left"></td><td style="text-align:left">支持</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">B+Tree</td><td style="text-align:left"></td><td style="text-align:left">支持</td></tr></tbody></table></div><h2 id="为什么要用索引，以及索引的原理"><a href="#为什么要用索引，以及索引的原理" class="headerlink" title="为什么要用索引，以及索引的原理"></a>为什么要用索引，以及索引的原理</h2><p>首先我们看下在没有索引的情况下是怎么查找数据的：</p><h2 id="为什么要用B-树"><a href="#为什么要用B-树" class="headerlink" title="为什么要用B+树"></a>为什么要用B+树</h2><h2 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h2><p>其实建索引的原理就是将磁盘I/O操作的最小化，不在磁盘中排序，而是在内存中排好序，通过排序的规则去指定磁盘读取就行，也不需要在磁盘上随机读取。</p><p>当一个表中有100万数据，而经常用到的数据只有40万或40万以下，是不用考虑建立索引的，没什么性能提升。</p><p>使用count统计数据量的时候建议使用count(<em>)而不是count(列)，因为count(</em>)MySQL是做了优化的。</p><p>什么时候开MySQL的查询缓存，交易系统（写多、读少）、SQL优化测试，建议关闭查询缓存，论坛文章类系统（写少、读多），建议开启查询缓存。</p><ol><li>复杂SQL语句优化的思路：</li></ol><p>1）首先考虑在一个表中能不能取到有关的信息，尽量少关联表<br>2）关联条件争取都走主键或外键查询条件，能走到对应的索引<br>3）争取在满足业务上走小集合数据查找<br>4）INNER JOIN 和子查询哪个更快，场景不一致速度也不同</p><p>where条件多条件一定要按照小结果集排大结果集前面</p><h2 id="索引的原理"><a href="#索引的原理" class="headerlink" title="索引的原理"></a>索引的原理</h2><p>索引的目的在于提高查询效率，与我们查阅图书所用的目录是一个道理：先定位到章，然后定位到该章下的一个小节，然后找到页数。相似的例子还有：查字典，查火车车次，飞机航班等</p><blockquote><p>本质都是：通过不断地缩小想要获取数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是说，有了这种索引机制，我们可以总是用同一种查找方式来锁定数据。</p></blockquote><h2 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h2><h4 id="树"><a href="#树" class="headerlink" title="树"></a>树</h4><p>树状图是一种数据结构，它是由 n（n &gt;= 1）个有限结点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。</p><p>它具有以下的特点：</p><ol><li><p>每个结点有零个或多个子结点</p></li><li><p>没有父结点的结点称为根结点</p></li><li><p>每一个非根结点有且只有一个父结点</p></li><li><p>除了根结点外，每个子结点可以分为多个不相交的子树</p></li></ol><p>在下图中：</p><ol><li><p>根节点：A</p></li><li><p>父节点：A 是 B、C 的父节点</p></li><li><p>叶子节点：D、E 是叶子节点</p></li><li><p>深度：树的深度/高度是 3</p></li></ol><p><img src="https://img2018.cnblogs.com/blog/827651/201812/827651-20181217164400401-478241633.png" alt=""></p><h4 id="B-树"><a href="#B-树" class="headerlink" title="B+ 树"></a>B+ 树</h4><p>B+ 树是通过二叉查找树，再由平衡二叉树，B 树演化而来。</p><p><img src="https://img2018.cnblogs.com/blog/827651/201812/827651-20181220151345766-1557776352.png" alt=""></p><p>B+ 树性质</p><ol><li><p>索引字段要尽量的小<br> 通过上面的分析，我们知道 I/O 次数取决于 B+ 树的高度 $h$，假设当前数据表的数据为 $n$，每个磁盘块的数据项的数量是 $m$，则有 $h=㏒_(m+1)n$，当数据量 $n$ 一定的情况下，$m$ 越大，$h$ 越小；而 $m = \frac {磁盘块的大小}{数据项的大小}$，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如 <strong>int</strong> 占 4 字节，要比 <strong>bigint</strong> 8 字节少一半。这也是为什么 B+ 树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于 1 时将会退化成线性表。</p></li><li><p>索引的最左匹配特性<br> 当 B+ 树的数据项是复合的数据结构，比如（<strong>name</strong>, <strong>age</strong>, <strong>sex</strong>）的时候，B+ 数是按照从左到右的顺序来建立搜索树的。当（<strong>张三</strong>, <strong>20</strong>, <strong>F</strong>）这样的数据来检索的时候，B+ 树会优先比较 <strong>name</strong> 来确定下一步的所搜方向，如果 <strong>name</strong> 相同再依次比较 <strong>age</strong> 和 <strong>sex</strong>，最后得到检索的数据；但当（<strong>20</strong>,<strong>F</strong>）这样的没有 <strong>name</strong> 的数据来的时候，B+ 树就不知道下一步该查哪个节点，因为建立搜索树的时候 <strong>name</strong> 就是第一个比较因子，必须要先根据 <strong>name</strong> 来搜索才能知道下一步去哪里查询。比如当（<strong>张三</strong>,<strong>F</strong>）这样的数据来检索时，B+ 树可以用 <strong>name</strong> 来指定搜索方向，但下一个字段 <strong>age</strong> 的缺失，所以只能把名字等于<strong>张三</strong>的数据都找到，然后再匹配性别是 <strong>F</strong> 的数据了， 这个是非常重要的性质，即索引的最左匹配特性。把名字等于<strong>张三</strong>的数据都找到，然后再匹配性别是 <strong>F</strong> 的数据了， 这个是非常重要的性质，即索引的最左匹配特性。</p></li></ol><h2 id="聚合索引与辅助索引"><a href="#聚合索引与辅助索引" class="headerlink" title="聚合索引与辅助索引"></a>聚合索引与辅助索引</h2><p>在数据库中，B+ 树的高度一般都在 2~4 层，这也就是说查找某一个键值的行记录时最多只需要 2 到 4 次 IO，这倒不错。因为当前一般的机械硬盘每秒至少可以做 100 次 IO，2~4 次的 IO 意味着查询时间只需要 0.02~0.04 秒。</p><p>数据库中的 B+ 树索引可以分为聚集索引（clustered index）和辅助索引（secondary index）。</p><p>聚集索引与辅助索引相同的是：不管是聚集索引还是辅助索引，其内部都是 B+ 树的形式，即高度是平衡的，叶子结点存放着所有的数据。</p><p>聚集索引与辅助索引不同的是：叶子结点存放的是否是一整行的信息。</p><h4 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h4><p>InnoDB 存储引擎表是索引组织表，即表中数据按照主键顺序存放。</p><p>而聚集索引就是按照每张表的主键构造一棵 B+ 树，同时叶子结点存放的即为整张表的行记录数据，也将聚集索引的叶子结点称为数据页。</p><p>聚集索引的这个特性决定了索引组织表中数据也是索引的一部分。同 B+ 树数据结构一样，每个数据页都通过一个双向链表来进行链接。</p><p>如果未定义主键，MySQL 取第一个唯一索引而且只含非空列作为主键，InnoDB 使用它作为聚簇索引。如果没有这样的列，InnoDB 就自己产生一个这样的 Id 值，它有六个字节，而且是隐藏的，使其作为聚簇索引。</p><p>由于实际的数据页只能按照一棵 B+ 树进行排序，因此每张表只能拥有一个聚集索引。在多数情况下，查询优化器倾向于采用聚集索引。因为聚集索引能够在B+树索引的叶子节点上直接找到数据。此外由于定义了数据的逻辑顺序，聚集索引能够特别快地访问针对范围值得查询。</p><p>聚集索引的好处之一：它对主键的排序查找和范围查找速度非常快，叶子节点的数据就是用户所要查询的数据。如用户需要查找一张表，查询最后的 10 位用户信息，由于 B+ 树索引是双向链表，所以用户可以快速找到最后一个数据页，并取出 10 条记录。</p><p>聚集索引的好处之二：范围查询（range query），即如果要查找主键某一范围内的数据，通过叶子节点的上层中间节点就可以得到页的范围，之后直接读取数据页即可。</p><h4 id="辅助索引"><a href="#辅助索引" class="headerlink" title="辅助索引"></a>辅助索引</h4><p>表中除了聚集索引外其他索引都是辅助索引（Secondary Index，也称为非聚集索引），与聚集索引的区别是：辅助索引的叶子节点不包含行记录的全部数据。</p><p>叶子节点除了包含键值以外，每个叶子节点中的索引行中还包含一个书签（bookmark）。该书签用来告诉 InnoDB 存储引擎去哪里可以找到与索引相对应的行数据。</p><p>由于 InnoDB 存储引擎是索引组织表，因此 InnoDB 存储引擎的辅助索引的书签就是相应行数据的聚集索引键。</p><p>辅助索引的存在并不影响数据在聚集索引中的组织，因此每张表上可以有多个辅助索引，但只能有一个聚集索引。当通过辅助索引来寻找数据时，InnoDB 存储引擎会遍历辅助索引并通过叶子级别的指针获得只想主键索引的主键，然后再通过主键索引来找到一个完整的行记录。</p><p>举例来说，如果在一棵高度为 3 的辅助索引树种查找数据，那需要对这个辅助索引树遍历 3 次找到指定主键，如果聚集索引树的高度同样为 3，那么还需要对聚集索引树进行3次查找，最终找到一个完整的行数据所在的页，因此一共需要 6 次逻辑 IO 访问才能得到最终的一个数据页。</p><h2 id="索引算法"><a href="#索引算法" class="headerlink" title="索引算法"></a>索引算法</h2><p>我们可以在创建上述索引的时候，为其指定索引类型，分两类</p><ul><li>Hash：查询单条快，范围查询慢</li><li>BTree：B+ 树，层数越多，数据量指数级增长（默认）</li></ul><h2 id="索引命中"><a href="#索引命中" class="headerlink" title="索引命中"></a>索引命中</h2><p>并不是说我们创建了索引就一定会加快查询速度，若想利用索引达到预想的提高查询速度的效果，我们在添加索引时，必须遵循以下问题：</p><ol><li><p>范围问题，或者说条件不明确</p></li><li></li></ol><h2 id="联合索引和覆盖索引"><a href="#联合索引和覆盖索引" class="headerlink" title="联合索引和覆盖索引"></a>联合索引和覆盖索引</h2><h4 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h4><p>联合索引是指对表上的多个列合起来做一个索引。联合索引的创建方法与单个索引的创建方法一样，不同之处仅在于有多个索引列。</p><p>那么何时需要使用联合索引呢？在讨论这个问题之前，先来看一下联合索引内部的结果。从本质上来说，联合索引就是一棵 B+ 树，不同的是联合索引的键值得数量不是 1，而是 &gt;=2。接着来讨论两个整型列组成的联合索引，假定两个键值得名称分别为 a、b 如图：</p><p><img src="https://images2018.cnblogs.com/blog/1036857/201711/1036857-20171126004856453-1491949427.png" alt=""></p><p>可以看到这与我们之前看到的单个键的 B+ 树并没有什么不同，键值都是排序的，通过叶子结点可以逻辑上顺序地读出所有数据，就上面的例子来说，即（1,1），（1,2），（2,1），（2,4），（3,1），（3,2），数据按（a,b）的顺序进行了存放。</p><p>因此，对于查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> a = xxx <span class="keyword">and</span> b = xxx</span><br></pre></td></tr></table></figure></p><p>显然是可以使用 (a, b) 这个联合索引的，而对于单个列 a 的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> a = xxx</span><br></pre></td></tr></table></figure><p>也是可以使用（a, b）这个索引的。</p><p>但对于 b 列的查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> b = xxx,</span><br></pre></td></tr></table></figure></p><p>则不可以使用（a,b） 索引，其实你不难发现原因，叶子节点上b的值为 1、2、1、4、1、2 显然不是排序的，因此对于 b 列的查询使用不到 (a,b) 索引。</p><p>联合索引的第二个好处是在第一个键相同的情况下，已经对第二个键进行了排序处理，例如在很多情况下应用程序都需要查询某个用户的购物情况，并按照时间进行排序，最后取出最近三次的购买记录，这时使用联合索引可以帮我们避免多一次的排序操作，因为索引本身在叶子节点已经排序了。</p><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>InnoDB 存储引擎支持覆盖索引（covering index，或称索引覆盖），即从辅助索引中就可以得到查询记录，而不需要查询聚集索引中的记录。</p><p>使用覆盖索引的一个好处是：辅助索引不包含整行记录的所有信息，故其大小要远小于聚集索引，因此可以减少大量的 IO 操作。</p><blockquote><p>注意：覆盖索引技术最早是在 InnoDB Plugin 中完成并实现，这意味着对于 InnoD B版本小于 1.0 的，或者 MySQL 数据库版本为 5.0 以下的，InnoDB 存储引擎不支持覆盖索引特性。</p></blockquote><p><img src="http://assets.processon.com/chart_image/5ed3cfc55653bb073440bcd1.png?_=1590939667033" alt=""></p><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 单列索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name (column_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 唯一索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">on</span> table_name (column_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 联合索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">on</span> table_name (column1, column2);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 全文索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    column1 <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    column2 <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"></span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>),</span><br><span class="line">    FULLTEXT <span class="keyword">KEY</span> index_name(column1, column2)  </span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> FULLTEXT <span class="keyword">INDEX</span> index_name <span class="keyword">on</span> table_name(column1, column2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> FULLTEXT <span class="keyword">INDEX</span> index_name(column1, column2);</span><br></pre></td></tr></table></figure><h4 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h4><p>修改个 O，直接删掉重建。</p><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><p>删除索引时应当特别小心，数据库的性能可能会因此而降低或者提高。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用 DROP INDEX 命令删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> table_name.index_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 ALTER 命令删除主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 ALTER 命令删除索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_name;</span><br></pre></td></tr></table></figure><h4 id="显示索引信息"><a href="#显示索引信息" class="headerlink" title="显示索引信息"></a>显示索引信息</h4><p>你可以使用 SHOW INDEX 命令来列出表中的相关的索引信息。可以通过添加 <strong>\G</strong> 来格式化输出信息。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 存储引擎之Memory</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMemory/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMemory/</url>
      
        <content type="html"><![CDATA[<p>MEMORY 存储引擎是 MySQL 中的一种特殊的存储引擎。其使用存储在内存中的内容来创建表，而且所有数据也放在内存中。</p><h2 id="MEMORY-的文件格式"><a href="#MEMORY-的文件格式" class="headerlink" title="MEMORY 的文件格式"></a>MEMORY 的文件格式</h2><p>每个基于 MEMORY 存储引擎的表实际对应一个磁盘文件。改文件的文件名与表名相同，类型为 <strong>.frm</strong>。该文件中只存储表的结构，而其数据文件是存储在内存中。这样有利于对数据的快速处理，提高整个表的处理效率。值得注意的是，服务器需要有足够的内存来维持 MEMORY 存储引擎的表的使用。如果不需要使用了，可以释放这些内容，甚至可以删除不需要的表。</p><h2 id="MEMORY-的索引类型"><a href="#MEMORY-的索引类型" class="headerlink" title="MEMORY 的索引类型"></a>MEMORY 的索引类型</h2><p>MEMORY 存储引擎默认使用 HASH 索引，其速度要比使用 BTree 索引快。如果读者希望使用 BTree 索引，可以在创建索引时选择使用。</p><h2 id="MEMORY-的存储周期"><a href="#MEMORY-的存储周期" class="headerlink" title="MEMORY 的存储周期"></a>MEMORY 的存储周期</h2><p>MEMORY 存储引擎通常很少用到，因为 MEMORY 表的所有数据都是存储在内存上的，如果内存出现异常就会影响到数据的完整性。如果重启机器或者关机，表中所有数据将消失。因此，基于 MEMORY 存储引擎的表声明周期很短，一般都是一次性的。</p><h2 id="MEMORY-的优缺点"><a href="#MEMORY-的优缺点" class="headerlink" title="MEMORY 的优缺点"></a>MEMORY 的优缺点</h2><p>MEMORY 表的大小是受到限制的。表的大小主要取决于两个参数，分别是 <strong>max rows</strong> 和 <strong>max_heap_size</strong>。其中 <strong>max_rows</strong> 可以在创建表时指定；<strong>max_heap_size</strong> 的大小默认是 16MB，可以按需进行扩大。因此，其存在于内存中的特性，决定了这类表的处理速度非常快。但是，其数据易丢失，生命周期短。</p><p>创建 MySQL MEMORY 存储引擎的出发点是速度。为得到最快的相应时间，采用的逻辑存储介质是系统内存。虽然在内存中存储表数据确实会提高性能，但要记住，当 MySQL 守护进程奔溃时，所有的 MEMORY 数据都丢失。</p><p>MEMORY 表不支持 <strong>VARCHAR</strong>、<strong>BLOB</strong>、和 <strong>TEXT</strong> 数据类型，因为这种表类型按照固定长度的记录格式存储。此外，如果使用版本 4.1.0 之前的 MySQL，则不支持自动增加列（通过 AUTO_INCREMENT 属性）。当然，要记住 MEMORY 表只用于特殊的范围，不会用于长期存储数据。基于其这个缺陷，选择 MEMORY 存储引擎时要特别小心。</p><p>当数据有如下情况时，可以考虑使用 MEMORY 表。</p><ol><li><p>暂时：目标数据只是临时需要，在其生命周期中必需立即可用。</p></li><li><p>相对无关：存储在 MEMORY 表中的数据如果突然丢失，不会对应用服务产生实质的负面影响，而且不会对数据完整性有长期影响。</p></li></ol><p>如果使用 MySQL 4.1 及之前版本，MEMORY 的搜索比 MyISAM 表的搜索效率要低，因为 MEMORY 表只支持散列索引，这需要使用整个键进行搜索。但是，4.1 之后的版本同时支持散列索引和 BTree 索引。BTree 索引优于散列索引的是，可以部分查询和通配查询，也可以使用 <strong>&lt;</strong>、<strong>&gt;</strong> 和 <strong>&gt;=</strong> 等操作符方便数据挖掘。</p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 存储引擎</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是存储引擎？"><a href="#什么是存储引擎？" class="headerlink" title="什么是存储引擎？"></a>什么是存储引擎？</h2><p>存储引擎其实就是如何存储数据、如何为存储的数据建立索引和如何更新、查询数据等约束的实现方法。因为在关系数据库中数据是以表的形式存储的，所以存储引擎也可以称为表类型（即存储和操作此表的类型）。</p><p>存储引擎的作用规定了数据存储时的存储结构。在现实生活中，由于不同的业务产生了不同的数据，这些数据有的可能偏重于频繁查询，有的要求增删速度快，有的则对事务、索引、外键有特俗的规定。这样一来就对存储数据的表要求不同的数据组织结构，也就是存储引擎。</p><p>在 Oracle 和 SQL Server 等数据库只有一种存储引擎，所有的数据存储管理机制都是一样的；而 MySQL 数据库提供了多种存储引擎，用户可以根据不同的需求为数据表选择不同的存储引擎，也可以根据需要编写自己的存储引擎。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h4 id="查询默认的存储引擎"><a href="#查询默认的存储引擎" class="headerlink" title="查询默认的存储引擎"></a>查询默认的存储引擎</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; show variables like '%storage_engine%';</span><br><span class="line">+<span class="comment">----------------------------+--------+</span></span><br><span class="line">| Variable_name              | Value  |</span><br><span class="line">+<span class="comment">----------------------------+--------+</span></span><br><span class="line">| default_storage_engine     | InnoDB |</span><br><span class="line">+<span class="comment">----------------------------+--------+</span></span><br><span class="line">| default_tmp_storage_engine | InnoDB |</span><br><span class="line">+<span class="comment">----------------------------+--------+</span></span><br><span class="line"></span><br><span class="line">2 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="查询支持的全部存储引擎"><a href="#查询支持的全部存储引擎" class="headerlink" title="查询支持的全部存储引擎"></a>查询支持的全部存储引擎</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; show engines;</span><br><span class="line">+<span class="comment">--------+---------+------------------------------------------+--------------+------+------------+</span></span><br><span class="line">| Engine | Support | <span class="keyword">Comment</span>                                  | Transactions | XA   | Savepoints |</span><br><span class="line">+<span class="comment">--------+---------+------------------------------------------+--------------+------+------------+</span></span><br><span class="line">| MyISAM | YES     | MyISAM <span class="keyword">storage</span> <span class="keyword">engine</span>                    | <span class="keyword">NO</span>           | <span class="keyword">NO</span>   | <span class="keyword">NO</span>         |</span><br><span class="line">+<span class="comment">--------+---------+------------------------------------------+--------------+------+------------+</span></span><br><span class="line">| <span class="keyword">InnoDB</span> | <span class="keyword">DEFAULT</span> | Supports transactions, <span class="keyword">row</span>-<span class="keyword">level</span> locking | YES          | YES  | YES        |</span><br><span class="line">+<span class="comment">--------+---------+------------------------------------------+--------------+------+------------+</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="类型选择"><a href="#类型选择" class="headerlink" title="类型选择"></a>类型选择</h2><p>创建表时，使用字符串类型应该遵循以下原则：</p><ol><li>从速度方面考虑，要选择固定的列，可以使用 <strong>CHAR</strong> 类型。</li><li>要节省空间，使用动态的列，可以使用 <strong>VARCHAR</strong> 类型。</li><li>要将列中的内容限制在一种选择，可以使用 <strong>ENUM</strong> 类型。</li><li>允许在一个列中有多于一个的条目，可以使用 <strong>SET</strong> 类型。</li><li>如果搜索的内容不区分大小写，可以使用 <strong>TEXT</strong> 类型。</li><li>如果要搜索的内容区分大小写，可以使用 <strong>BLOB</strong> 类型。</li></ol><h2 id="存储引擎对比"><a href="#存储引擎对比" class="headerlink" title="存储引擎对比"></a>存储引擎对比</h2><div class="table-container"><table><thead><tr><th style="text-align:left">引擎名称</th><th style="text-align:left">优点</th><th style="text-align:left">缺点</th><th style="text-align:left">应用场景</th></tr></thead><tbody><tr><td style="text-align:left">MyISAM</td><td style="text-align:left">访问速度快，对事务完整性没有要求，以 select、insert 为主的应用基本上可以使用这个引擎。</td><td style="text-align:left">不支持事务/行级锁/外建约束</td><td style="text-align:left">适合管理邮件或 Web 服务器日志数据</td></tr><tr><td style="text-align:left">InnoDB</td><td style="text-align:left">事务型存储引擎，支持事务/行级锁/外建约束，支持制动灾难恢复</td><td style="text-align:left">处理效率会比 MyISAM 差一些，并且会占用更多的磁盘空间以保留数据和索引</td><td style="text-align:left">需要事务支持，并且有较高的并发读取频率</td></tr><tr><td style="text-align:left">MEMORY</td><td style="text-align:left">为得到更快的响应速度，采用的逻辑存储介质是系统内存</td><td style="text-align:left">当 MySQL 守护进程崩溃时，所有的 Memory 数据都会丢失；不能使用 BLOB 或 TEXT 这样子的长度可变的数据类型</td><td style="text-align:left">临时表</td></tr><tr><td style="text-align:left">MERGE</td><td style="text-align:left">是 MyISAM 的一种变种。合并表是将几个相同的 MyISAM 表合并为一个虚表</td><td style="text-align:left"></td><td style="text-align:left">常用于日志和数据仓库</td></tr><tr><td style="text-align:left">ARCHIVE</td><td style="text-align:left">归档的意思，支持索引，拥有很好的压缩机制</td><td style="text-align:left">仅支持插入和查询功能</td><td style="text-align:left">经常被用来当作仓库使用</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 存储引擎之InnoDB</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BInnoDB/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BInnoDB/</url>
      
        <content type="html"><![CDATA[<p>InnoDB是 MySQL 的数据库引擎之一，与传统的 MyISAM 相比，InnoDB 最大的特点是支持了 ACID 兼容的事务功能。</p><h2 id="InnoDB-有什么特点"><a href="#InnoDB-有什么特点" class="headerlink" title="InnoDB 有什么特点"></a>InnoDB 有什么特点</h2><h2 id="MyISAM-和-InnoDB-的区别"><a href="#MyISAM-和-InnoDB-的区别" class="headerlink" title="MyISAM 和 InnoDB 的区别"></a>MyISAM 和 InnoDB 的区别</h2><ol><li><p>锁的区别<br> MyISAM 常用的是表级锁，而 InnoDB 采用的是行级锁（当索引失败的时候切换回表级锁）。</p></li><li><p>对事务的支持c<br> MyISAM 是不支持事务的，而 InnoDB 支持事务操作。如果您的数据安全性要求高，那么最好选择 InnoDB。</p></li><li><p>存储结构的区别<br> MyISAM 在磁盘上会存储 3 个文件，其中 <strong>.frm</strong> 文件存储表定义，<strong>.myd</strong> 存储数据文件，<strong>.myi</strong> 存储索引文件。<br> InnoDB 在磁盘上会存储 2 个文件，其中 <strong>.frm</strong> 存储表结构文件，<strong>.ibd</strong> 文件存储数据和索引。</p><p> 由此可见，MyISAM 的叶子节点存储的是数据所在的地址，而不是数据。InnoDB 叶子节点存储的是整个数据行的所有数据。</p></li></ol><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>InnoDB 表是如下情况理想的存储引擎。</p><ol><li><p>更新密集的表：InnoDB 存储引擎特别适合处理多重并发的更新要求。</p></li><li><p>事务：InnoDB 是唯一支持事务的标准 MySQL 存储引擎，这是管理敏感数据（如金融信息和用户注册信息）的刚需。</p></li><li><p>自动灾难恢复：与其他存储引擎不同，InnoDB 表能够自动从灾难中恢复。虽然 MyISAM 表能在灾难后修复，但其过程要长得多。</p></li></ol><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>创建表时指定表的存储引擎为 InnoDB。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`mobile`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'注册手机号'</span>,</span><br><span class="line">  <span class="string">`nickname`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'发表人昵称'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'用户表'</span>;</span><br></pre></td></tr></table></figure><p>然后就可以在 <strong>./data/phonerepairer/</strong> 目录里看到 InnoDB 创建的 2 个文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.frm</span><br><span class="line">user.ibd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 存储引擎之MyISAM</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMyISAM/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMyISAM/</url>
      
        <content type="html"><![CDATA[<p>MyISAM 是 MySQL 的默认数据库引擎（5.5 版本之前），由早期的 ISAM（有索引的顺序访问方式）所改良。虽然性能极佳，但不支持事务处理。</p><h2 id="MyISAM-的文件类型"><a href="#MyISAM-的文件类型" class="headerlink" title="MyISAM 的文件类型"></a>MyISAM 的文件类型</h2><p>MyISAM 存储引擎的表存储成 3 个文件。文件的名字与表名相同，扩展名包括 <strong>.frm</strong>、<strong>.MYD</strong> 和 <strong>.MYI</strong>。</p><ol><li><p><strong>.frm</strong>：存储表的结构</p></li><li><p><strong>.MYD</strong>：存储数据，是 MYData 的缩写</p></li><li><p><strong>.MYI</strong>：存储索引，是 MYIndex 的缩写</p></li></ol><h2 id="MyISAM-的存储格式"><a href="#MyISAM-的存储格式" class="headerlink" title="MyISAM 的存储格式"></a>MyISAM 的存储格式</h2><p>基于 MyISAM 存储引擎的表支持 3 种不同的存储格式，包括静态型、动态型和压缩型。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>创建表时指定表的存储引擎为 MyISAM。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`mobile`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'注册手机号'</span>,</span><br><span class="line">  <span class="string">`nickname`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'发表人昵称'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'用户表'</span>;</span><br></pre></td></tr></table></figure><p>然后就可以在 <strong>./data/phonerepairer/</strong> 目录里看到 MyISAM 创建的 2 个文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user.frm</span><br><span class="line">user.MYD</span><br><span class="line">user.MYI</span><br></pre></td></tr></table></figure><h2 id="MYI-索引文件"><a href="#MYI-索引文件" class="headerlink" title="MYI 索引文件"></a>MYI 索引文件</h2><p>MyISAM 索引文件和数据文件是分离的，索引文件仅保存记录所在页的指针（物理位置），通过这些地址来读取页，进而读取被索引的行。</p><p>树中叶子保存的是对应行的物理位置。通过该值，存储引擎能顺利地进行回表查询，得到一行完整记录。同时，每个叶子页也保存了指向下一个叶子页的指针。从而方便叶子节点的范围遍历。</p><p><img src="https://pic4.zhimg.com/80/v2-5094f94cd876c866b7b50481956ced6f_720w.jpg" alt=""></p><p>以内容存储。</p><p>如果username重复了。</p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 基础之数据类型</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 设计原则</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库范式"><a href="#数据库范式" class="headerlink" title="数据库范式"></a>数据库范式</h2><p>为了建立冗余较小、结构合理的数据库，设计数据库时必须遵循一定的规则，在关系型数据库中这种规则就称为范式。范式是符合某一种设计要求的总结。要想设计一个结构合理的关系型数据库，必须满足一定的范式。</p><ol><li><p>第一范式：确保每列保持原子性<br> 第一范式是最基本的范式。如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。</p><p> 第一范式的合理遵循需要根据系统的实际需求来定。比如某些数据库系统中需要用到“地址”这个属性，本来直接将“地址”属性设计成一个数据库表的字段就行。但是如果系统经常会访问“地址”属性中的“城市”部分，那么就非要将“地址”这个属性重新拆分为省份、城市、详细地址等多个部分进行存储，这样在对地址中某一部分操作的时候将非常方便。</p></li><li><p>第二范式：确保表中的每列都和主键相关<br> 第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。</p><p> 例如，在选课关系表(学号，课程号，成绩，学分)，关键字为组合关键字(学号，课程号)，但由于非主属性学分仅依赖于课程号，对关键字(学号，课程号)只是部分依赖，而不是完全依赖，因此此种方式会导致数据冗余以及更新异常等问题，解决办法是将其分为两个关系模式：学生表(学号，课程号，分数)和课程表(课程号，学分)，新关系通过学生表中的外关键字课程号联系，在需要时进行连接。</p></li><li><p>第三范式：确保每列都和主键列直接相关,而不是间接相关<br> 第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p><p> 比如在设计一个订单数据表的时候，可以将客户编号作为一个外键和订单表建立相应的关系。而不可以在订单表中添加关于客户其它信息（比如姓名、所属公司等）的字段。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 基础之函数</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E5%87%BD%E6%95%B0/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 部署-读写分离</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E9%83%A8%E7%BD%B2-%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E9%83%A8%E7%BD%B2-%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 部署-备份</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E9%83%A8%E7%BD%B2-%E5%A4%87%E4%BB%BD/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E9%83%A8%E7%BD%B2-%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><h2 id="全量备份与增量备份"><a href="#全量备份与增量备份" class="headerlink" title="全量备份与增量备份"></a>全量备份与增量备份</h2><h3 id="全量备份"><a href="#全量备份" class="headerlink" title="全量备份"></a>全量备份</h3><p>全量数据就是数据库中所有的数据，全量备份就是把数据库中所有的数据进行备份。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份一个库</span></span><br><span class="line">mysqldump </span><br><span class="line">mysqldump -uroot -poldbody -S /data/33-6/mysql.sock -F -B oldbody|gzip &gt; /server/backup/mysqlbak_$(data +%F).sql.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份所有库</span></span><br><span class="line">mysqldump -uroot -poldbody -S /data/33-6/mysql.sock -F -B -A|gzip &gt; /server/backup/mysqlbak_$(data +%F).sql.gz</span><br></pre></td></tr></table></figure></p><h3 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h3><p>增量数据就是从上次全量备份之后，更新的新数据。对于MySQL来说，binlog日志就是MySQL的增量数据。</p><h4 id="按天备份情况"><a href="#按天备份情况" class="headerlink" title="按天备份情况"></a>按天备份情况</h4><p>优点：</p><ol><li>恢复时间短</li><li>维护成本低</li></ol><p>缺点：</p><ol><li>占用空间多</li><li>占用资源多，经常锁表操作</li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">周一全量备份</th><th>周一增量数据</th><th>周一全量备份</th><th>周二增量数据</th><th>…</th></tr></thead><tbody><tr><td style="text-align:left">000000001.sql.gz</td><td>mysql-bin.000036</td><td>000000002.sql.gz</td><td>mysql-bin.000056</td></tr><tr><td style="text-align:left"></td><td>mysql-bin.000037</td><td></td><td>mysql-bin.000057</td></tr><tr><td style="text-align:left"></td><td>mysql-bin.000038</td><td></td><td>mysql-bin.000058</td></tr><tr><td style="text-align:left"></td><td>mysql-bin.000039</td><td></td><td>mysql-bin.000059</td></tr></tbody></table></div><h4 id="按周备份情况"><a href="#按周备份情况" class="headerlink" title="按周备份情况"></a>按周备份情况</h4><p>优点：</p><ol><li>占用空间小</li><li>占用资源少，无需经常锁表，用户体验会好点</li></ol><p>缺点：</p><ol><li>维护成本大，恢复麻烦</li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">周六全量备份</th><th>周一增量备份</th><th>周二增量备份</th><th>周三增量备份</th><th>…</th></tr></thead><tbody><tr><td style="text-align:left">000000001.sql.gz</td><td>mysql-bin.000037</td><td>mysql-bin.000037</td><td>mysql-bin.000037</td></tr></tbody></table></div><h4 id="全量和增量的频率是怎么做的呢？"><a href="#全量和增量的频率是怎么做的呢？" class="headerlink" title="全量和增量的频率是怎么做的呢？"></a>全量和增量的频率是怎么做的呢？</h4><ol><li>中小公司，全量一般是每天一次，业务流量低谷执行全备，执行前要锁表</li><li>单台数据库，如何增量。用rsync（配合定时任务频率大点，或者inotify，主从复制）把所有binlog备份到远程服务器，尽量做主从复制</li><li>大公司周备，每周六00点一次全量，下周日-下周六00点前都是增量</li><li>一主多从，会有一个从库做备份，延迟同步</li></ol><h4 id="mysql的mysqldump备份什么时候能派上用场？"><a href="#mysql的mysqldump备份什么时候能派上用场？" class="headerlink" title="mysql的mysqldump备份什么时候能派上用场？"></a>mysql的mysqldump备份什么时候能派上用场？</h4><ol><li>迁移或者升级数据库时</li><li>增加从库的时候</li><li>因为硬件或特殊异常情况，主库或者从库挂机，主从可以相互切换，无需备份</li><li>人为的DDL，DML语句，主从库没办法了，所有库都会执行。此时需要备份</li><li>跨机房灾备，需要备份拷贝走</li></ol><p>增量备份例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz /data/3306/mysql-bin.000* rsync_backup@10.0.0.18::backup --password-file=/etc/rsync.password</span><br></pre></td></tr></table></figure></p><h4 id="什么情况下需要增量恢复？"><a href="#什么情况下需要增量恢复？" class="headerlink" title="什么情况下需要增量恢复？"></a>什么情况下需要增量恢复？</h4><p>我们在生产工作中一般常用一主多从的数据库架构，常见的备份方案是在某一不对外服务的从库上开启binlog，然后实施定时全备份和实时增量备份</p><h4 id="什么是增量恢复"><a href="#什么是增量恢复" class="headerlink" title="什么是增量恢复"></a>什么是增量恢复</h4><p>利用二进制日志和全备进行的恢复国产，被称为增量恢复</p><h4 id="主或从库宕机（硬件损坏）是否需要增量恢复？"><a href="#主或从库宕机（硬件损坏）是否需要增量恢复？" class="headerlink" title="主或从库宕机（硬件损坏）是否需要增量恢复？"></a>主或从库宕机（硬件损坏）是否需要增量恢复？</h4><p>不要增量恢复，主库宕机，只需要把其中一个同步最快的从库（master.info，或5.5半同步机制）切换为主库即可。从库宕机，直接不用就好了（一般会配LVS负载均衡）， 或者正常修复。</p><h4 id="人为操作数据库SQL破坏主库是否需要增量恢复？"><a href="#人为操作数据库SQL破坏主库是否需要增量恢复？" class="headerlink" title="人为操作数据库SQL破坏主库是否需要增量恢复？"></a>人为操作数据库SQL破坏主库是否需要增量恢复？</h4><p>在数据库主库内部命令行误操作，会导致所有的数据库（包括从库）数据丢失，例如：在主库里执行了drop database test;这样的删除语句，这是所有的从库也会执行这个drop database test;语句，从而导致所有的数据库的test库丢死后。这样的场景是需要增量恢复的。</p><h4 id="只有一个主库是否需要增量恢复？"><a href="#只有一个主库是否需要增量恢复？" class="headerlink" title="只有一个主库是否需要增量恢复？"></a>只有一个主库是否需要增量恢复？</h4><p>如果公司里只有一个主库的情况，首先应该做定时全量备份（每天一次）及增量备份（每个1-10分钟对binlog日志做切割然后备份到其它的服务器上，或者本地其它的硬盘里）或者些到网络文件系统（备份服务器）里。</p><p>如果不允许数据丢失，最好的办法就是做从库，通过drbd（基于磁盘块的）同步。</p><p>正常情况：</p><ol><li>主从同步：除了分担读写分离压力外，还可以防止物理设置损坏数据丢失的恢复</li><li>从库备份：在从库进行全量和增量方式的备份，可以防止人为对主库的误操作导致数据丢失，确保备份的从库实时和主库是同步状态的</li></ol><blockquote><p>小结<br>一般由人为（或程序）逻辑的方式在数据库执行的SQL语句等误操作，需要增量恢复，因为此时，所有的从库也执行了误操作语句。</p></blockquote><h2 id="MySQL增量恢复必备条件"><a href="#MySQL增量恢复必备条件" class="headerlink" title="MySQL增量恢复必备条件"></a>MySQL增量恢复必备条件</h2><h3 id="开启log-bin日志功能"><a href="#开启log-bin日志功能" class="headerlink" title="开启log-bin日志功能"></a>开启log-bin日志功能</h3><p>MySQL数据库开启log-bin参数记录binlog日志功能如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="built_in">log</span>-bin /data/3306/my.cnf</span><br><span class="line"><span class="built_in">log</span>-bin=/data/3306/mysql-bin</span><br></pre></td></tr></table></figure></p><p>提示：主库和备份的从库都要开启binlog记录功能</p><blockquote><p>小结<br>存在一份全备份加上全备之后的时刻到问题时刻的所有增量binlog文件备份</p></blockquote><h2 id="使用cp进行备份"><a href="#使用cp进行备份" class="headerlink" title="使用cp进行备份"></a>使用cp进行备份</h2><h4 id="向数据表施加读锁（只能读不能写）"><a href="#向数据表施加读锁（只能读不能写）" class="headerlink" title="向数据表施加读锁（只能读不能写）"></a>向数据表施加读锁（只能读不能写）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; flush tables with <span class="built_in">read</span> lock;</span><br></pre></td></tr></table></figure><h4 id="备份数据文件"><a href="#备份数据文件" class="headerlink" title="备份数据文件"></a>备份数据文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ mkdir /backup                     <span class="comment"># 创建文件夹存放备份数据库文件</span></span><br><span class="line">zhangqinghua$ cp -a /var/lib/mysql/* /backup    <span class="comment"># 保留权限的拷贝源数据文件</span></span><br></pre></td></tr></table></figure><h4 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; unlock tables;</span><br></pre></td></tr></table></figure><h4 id="模拟数据丢失并恢复"><a href="#模拟数据丢失并恢复" class="headerlink" title="模拟数据丢失并恢复"></a>模拟数据丢失并恢复</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随便删除一条数据</span></span><br><span class="line">zhangqinghua$ systemctl stop mysqld             <span class="comment"># 先停止MySQL服务</span></span><br><span class="line">zhangqinghua$ rm -rf /var/lib/mysql/*           <span class="comment"># 清空数据，这一步可以不做</span></span><br><span class="line">zhangqinghua$ cp -a /backup/* /var/lib/mysql/   <span class="comment"># 将备份的数据文件拷贝回去</span></span><br><span class="line">zhangqinghua$ systemctl start mysqld            <span class="comment"># 重启MySQL服务</span></span><br><span class="line"><span class="comment"># 可以看到，数据又回来了</span></span><br></pre></td></tr></table></figure><h2 id="使用mysqldump备份数据"><a href="#使用mysqldump备份数据" class="headerlink" title="使用mysqldump备份数据"></a>使用mysqldump备份数据</h2><p>mysqldump是MySQL自带的逻辑备份工具。它的原理是，通过协议连接到MySQL数据库，将需要备份的数据查询出来转化成对应的insert语句，当我们需要还原这些数据时，只要执行这些insert语句即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ mysql -uroot -p -e <span class="string">'show master status'</span></span><br><span class="line">Enter password: </span><br><span class="line">+---------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+---------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| binlog.000002 |      584 |              |                  |                   |</span><br><span class="line">+---------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure><p>mysqldump是MySQL自带的逻辑备份工具。它的原理是，通过协议连接到MySQL数据库，将需要备份的数据查询出来转化成对应的insert语句，当我们需要还原这些数据时，只要执行这些insert语句即可。</p><p>mysqldump是一个客户端工具，所有当它连接数据库时，也会读取MySQL数据库的配置文件，加载跟客户端相关的配置。</p><h4 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h4><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h4 id="将数据库aonitask备份信息输出到屏幕上（不带数据库）"><a href="#将数据库aonitask备份信息输出到屏幕上（不带数据库）" class="headerlink" title="将数据库aonitask备份信息输出到屏幕上（不带数据库）"></a>将数据库aonitask备份信息输出到屏幕上（不带数据库）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest mysql]<span class="comment"># mysqldump -uroot aonitask -p</span></span><br><span class="line">Enter password: </span><br><span class="line">-- MySQL dump 10.13  Distrib 8.0.17, <span class="keyword">for</span> Linux (x86_64)</span><br><span class="line">--</span><br><span class="line">-- Host: localhost    Database: aonitask</span><br><span class="line">-- ------------------------------------------------------</span><br><span class="line">-- Server version8.0.17</span><br><span class="line"></span><br><span class="line">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;</span><br><span class="line">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;</span><br><span class="line">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;</span><br><span class="line">/*!50503 SET NAMES utf8mb4 */;</span><br><span class="line">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;</span><br><span class="line">/*!40103 SET TIME_ZONE=<span class="string">'+00:00'</span> */;</span><br><span class="line">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;</span><br><span class="line">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;</span><br><span class="line">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=<span class="string">'NO_AUTO_VALUE_ON_ZERO'</span> */;</span><br><span class="line">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">-- Table structure <span class="keyword">for</span> table `po_banner`</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `po_banner`;</span><br><span class="line">/*!40101 SET @saved_cs_client     = @@character_set_client */;</span><br><span class="line">/*!50503 SET character_set_client = utf8mb4 */;</span><br><span class="line">CREATE TABLE `po_banner` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT <span class="string">'主键'</span>,</span><br><span class="line">  `creator` varchar(64) NOT NULL DEFAULT <span class="string">'[SYS]'</span> COMMENT <span class="string">'创建者id'</span>,</span><br><span class="line">  `gmt_created` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT <span class="string">'创建时间'</span>,</span><br><span class="line">  `gmt_modified` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT <span class="string">'修改时间'</span>,</span><br><span class="line">  `is_deleted` char(1) NOT NULL DEFAULT <span class="string">'n'</span> COMMENT <span class="string">'是否已删除 y:已删除 n:未删除'</span>,</span><br><span class="line">  `modifier` varchar(64) NOT NULL DEFAULT <span class="string">'[SYS]'</span> COMMENT <span class="string">'修改者id'</span>,</span><br><span class="line">  `image_key` varchar(64) NOT NULL COMMENT <span class="string">'图片Key'</span>,</span><br><span class="line">  `image_link` varchar(512) NOT NULL COMMENT <span class="string">'链接地址'</span>,</span><br><span class="line">  `release_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT <span class="string">'发布时间'</span>,</span><br><span class="line">  `status` char(1) DEFAULT <span class="string">'n'</span> COMMENT <span class="string">'状态 n-下线 y-上线'</span>,</span><br><span class="line">  `title` varchar(64) NOT NULL COMMENT <span class="string">'标题'</span>,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `isDeleted` (`is_deleted`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=<span class="string">'广告表'</span>;</span><br><span class="line">/*!40101 SET character_set_client = @saved_cs_client */;</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">-- Dumping data <span class="keyword">for</span> table `po_banner`</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">LOCK TABLES `po_banner` WRITE;</span><br><span class="line">/*!40000 ALTER TABLE `po_banner` DISABLE KEYS */;</span><br><span class="line">INSERT INTO `po_banner` VALUES (1,<span class="string">'[SYS]'</span>,<span class="string">'2020-03-08 18:39:10'</span>,<span class="string">'2020-03-08 18:49:11'</span>,<span class="string">'n'</span>,<span class="string">'[SYS]'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'2020-03-08 18:39:10'</span>,<span class="string">'n'</span>,<span class="string">'123'</span>);</span><br><span class="line">/*!40000 ALTER TABLE `po_banner` ENABLE KEYS */;</span><br><span class="line">UNLOCK TABLES;</span><br><span class="line">/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;</span><br><span class="line"></span><br><span class="line">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;</span><br><span class="line">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;</span><br><span class="line">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;</span><br><span class="line">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;</span><br><span class="line">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;</span><br><span class="line">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;</span><br><span class="line">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;</span><br><span class="line"></span><br><span class="line">-- Dump completed on 2020-03-08 19:15:37</span><br></pre></td></tr></table></figure><h4 id="将数据库aonitask备份信息写入aonitask-sql脚本（不带数据库）"><a href="#将数据库aonitask备份信息写入aonitask-sql脚本（不带数据库）" class="headerlink" title="将数据库aonitask备份信息写入aonitask.sql脚本（不带数据库）"></a>将数据库aonitask备份信息写入aonitask.sql脚本（不带数据库）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest /]<span class="comment"># mysqldump -uroot aonitask &gt; /backup/aonitask.sql -p</span></span><br><span class="line">Enter password: </span><br><span class="line">[root@vultrguest /]<span class="comment"># ll /backup</span></span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 root root 2827 Mar  8 19:21 aonitask.sql</span><br></pre></td></tr></table></figure><h4 id="将数据库aonitask备份信息写入aonitask-sql脚本（带数据库）"><a href="#将数据库aonitask备份信息写入aonitask-sql脚本（带数据库）" class="headerlink" title="将数据库aonitask备份信息写入aonitask.sql脚本（带数据库）"></a>将数据库aonitask备份信息写入aonitask.sql脚本（带数据库）</h4><p>使用—databases选项指定数据库时，即可在备份时生成创建数据库的语句。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest /]<span class="comment"># mysqldump -uroot --databases aonitask &gt; /backup/aonitask.sql -p</span></span><br><span class="line">Enter password: </span><br><span class="line">[root@vultrguest /]<span class="comment"># cat /backup/aonitask.sql </span></span><br><span class="line">-- MySQL dump 10.13  Distrib 8.0.17, <span class="keyword">for</span> Linux (x86_64)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">-- Current Database: `aonitask`</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">CREATE DATABASE /*!32312 IF NOT EXISTS*/ `aonitask` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION=<span class="string">'N'</span> */;</span><br><span class="line"></span><br><span class="line">USE `aonitask`;</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">-- Table structure <span class="keyword">for</span> table `po_banner`</span><br><span class="line">--</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h4 id="备份aonitask中的所有表，但不生成创建aonitask的语句"><a href="#备份aonitask中的所有表，但不生成创建aonitask的语句" class="headerlink" title="备份aonitask中的所有表，但不生成创建aonitask的语句"></a>备份aonitask中的所有表，但不生成创建aonitask的语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest /]<span class="comment"># mysqldump -uroot aonitask -p</span></span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><h4 id="备份aonitask中的所有表，同时生成创建aonitask的语句"><a href="#备份aonitask中的所有表，同时生成创建aonitask的语句" class="headerlink" title="备份aonitask中的所有表，同时生成创建aonitask的语句"></a>备份aonitask中的所有表，同时生成创建aonitask的语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest /]<span class="comment"># mysqldump -uroot --databases aonitask -p</span></span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><h4 id="备份aonitask中的t1、t2表，同时生成创建aonitask的语句"><a href="#备份aonitask中的t1、t2表，同时生成创建aonitask的语句" class="headerlink" title="备份aonitask中的t1、t2表，同时生成创建aonitask的语句"></a>备份aonitask中的t1、t2表，同时生成创建aonitask的语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest /]<span class="comment"># mysqldump -uroot --databases aonitask t1 t2 -p</span></span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><h4 id="备份aonitask1，aonitask2中的所有表，同时生成创建aonitask1、aonitask2的语句"><a href="#备份aonitask1，aonitask2中的所有表，同时生成创建aonitask1、aonitask2的语句" class="headerlink" title="备份aonitask1，aonitask2中的所有表，同时生成创建aonitask1、aonitask2的语句"></a>备份aonitask1，aonitask2中的所有表，同时生成创建aonitask1、aonitask2的语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest /]<span class="comment"># mysqldump -uroot --databases aonitask1 aonitask2 -p</span></span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><h4 id="只备份表结构，不备份数据"><a href="#只备份表结构，不备份数据" class="headerlink" title="只备份表结构，不备份数据"></a>只备份表结构，不备份数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest /]<span class="comment"># mysqldump -uroot --databases -d aonitask -p</span></span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><h4 id="备份所有的数据库"><a href="#备份所有的数据库" class="headerlink" title="备份所有的数据库"></a>备份所有的数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest /]<span class="comment"># mysqldump -uroot --all-databases -p</span></span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><h4 id="导出所有库"><a href="#导出所有库" class="headerlink" title="导出所有库"></a>导出所有库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uusername -ppassword --all-databases &gt; all.sql</span><br></pre></td></tr></table></figure><h4 id="导入所有库"><a href="#导入所有库" class="headerlink" title="导入所有库"></a>导入所有库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;<span class="built_in">source</span> all.sql;</span><br></pre></td></tr></table></figure><h4 id="导出某些库"><a href="#导出某些库" class="headerlink" title="导出某些库"></a>导出某些库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uusername -ppassword --databases db1 db2 &gt; db1db2.sql</span><br></pre></td></tr></table></figure><h4 id="导入某些库"><a href="#导入某些库" class="headerlink" title="导入某些库"></a>导入某些库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;<span class="built_in">source</span> db1db2.sql;</span><br></pre></td></tr></table></figure><h4 id="导入某个库"><a href="#导入某个库" class="headerlink" title="导入某个库"></a>导入某个库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;ource db1.sql;</span><br></pre></td></tr></table></figure><h4 id="导出某些数据表"><a href="#导出某些数据表" class="headerlink" title="导出某些数据表"></a>导出某些数据表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uusername -ppassword db1 table1 table2 &gt; tb1tb2.sql</span><br></pre></td></tr></table></figure><h4 id="导入某些数据表"><a href="#导入某些数据表" class="headerlink" title="导入某些数据表"></a>导入某些数据表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uusername -ppassword db1 &lt; tb1tb2.sql</span><br></pre></td></tr></table></figure><p>或者MySQL命令行：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user db1;</span><br><span class="line">source tb1tb2.sql;</span><br></pre></td></tr></table></figure></p><h4 id="mysqldump字符集设置"><a href="#mysqldump字符集设置" class="headerlink" title="mysqldump字符集设置"></a>mysqldump字符集设置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uusername -ppassword --default-character-set=gb2312 db1 table1 &gt; tb1.sql</span><br></pre></td></tr></table></figure><h2 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h2><h4 id="—master-data"><a href="#—master-data" class="headerlink" title="—master-data"></a>—master-data</h4><p>—master-data可以记录备份日志的还原点，有3个选值：</p><ol><li>0: 表示在备份时，不记录对应二进制日志文件的位置，和不使用此选项一样</li><li>1: 表示在备份时，在备份文件中生成对应的<code>CHANGE MASTER TO</code>语句，标明此次备份开始时二进制日志的前缀名以及其所处的position（位置）</li><li>3: 跟选项2一样，只不过此条语句是注释状态的</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># mysqldump -uroot --master-data=2 aonitask -p</span></span><br><span class="line">Enter password: </span><br><span class="line">-- MySQL dump 10.13  Distrib 8.0.17, <span class="keyword">for</span> Linux (x86_64)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">-- Position to start replication or point-in-time recovery from</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">'binlog.000002'</span>, MASTER_LOG_POS=2946;</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">-- Table structure <span class="keyword">for</span> table `po_banner`</span><br><span class="line">--</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="—fulsh-logs"><a href="#—fulsh-logs" class="headerlink" title="—fulsh-logs"></a>—fulsh-logs</h4><p>即生成新日志，例如当前二进制日志是binlog.000002，调用<code>mysqladmin flush-logs</code>后，即生成binlog.000003，后续的操作会写入binlog.000003中。所以我们可以每小时调用此命令以达到增量备份的效果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成备份，刷新二进制日志，并清空旧日志</span></span><br><span class="line">[root@vultrguest mysql]<span class="comment"># mysqldump -uroot -p --flush-logs --delete-master-logs --all-databases</span></span><br></pre></td></tr></table></figure><h4 id="其它常用选项"><a href="#其它常用选项" class="headerlink" title="其它常用选项"></a>其它常用选项</h4><p>在数据库中，还存在一些存储过程和存储函数，存在一些触发器、事件表，这些东西也需要备份以免最终的备份“不全”：</p><ul><li>—events选项：表示备份时，事件表会被备份</li><li>—routines选项：表示备份时，存储过程和存储函数也会被备份</li><li>—triggers选项：表示备份时，触发器会被备份</li></ul><h2 id="自动化脚本"><a href="#自动化脚本" class="headerlink" title="自动化脚本"></a>自动化脚本</h2><h4 id="备份脚本"><a href="#备份脚本" class="headerlink" title="备份脚本"></a>备份脚本</h4><p>文件放置于/usr/local/script/backup_database.sh，确保mysqldump命令可用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line"><span class="comment">#Shell Command For Backup MySQL Database Everyday Automatically By Crontab  </span></span><br><span class="line"><span class="comment">#time 2015-5-20 </span></span><br><span class="line">    <span class="comment">#name huxianglin </span></span><br><span class="line">USER=root </span><br><span class="line">PASSWORD=1 </span><br><span class="line">DATABASE1=aonitask </span><br><span class="line">BACKUP_DIR=/data/backup/database/                       <span class="comment"># 备份数据库文件的路径 </span></span><br><span class="line">LOGFILE=/data/backup/database/data_backup.log           <span class="comment"># 备份数据库脚本的日志文件 </span></span><br><span class="line">DATE=`date +%Y%m%d-%H%M -d -3minute`                    <span class="comment"># 获取当前系统时间-3分钟 </span></span><br><span class="line">DUMPFILE1=<span class="variable">$DATE</span>-zblog.sql                               <span class="comment"># 需要备份的数据库名称 </span></span><br><span class="line">ARCHIVE1=<span class="variable">$DUMPFILE1</span>-tar.gz                              <span class="comment"># 备份的数据库压缩后的名称 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$BACKUP_DIR</span> ];                                <span class="comment"># 判断备份路径是否存在，若不存在则创建该路径 </span></span><br><span class="line"><span class="keyword">then</span>  </span><br><span class="line">mkdir -p <span class="string">"<span class="variable">$BACKUP_DIR</span>"</span> </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\n"</span> &gt;&gt; <span class="variable">$LOGFILE</span>   </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"------------------------------------"</span> &gt;&gt; <span class="variable">$LOGFILE</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"BACKUP DATE:<span class="variable">$DATE</span>"</span>&gt;&gt; <span class="variable">$LOGFILE</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"------------------------------------"</span> &gt;&gt; <span class="variable">$LOGFILE</span>  </span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$BACKUP_DIR</span>                                          <span class="comment">#跳到备份路径下 </span></span><br><span class="line">mysqldump -u<span class="variable">$USER</span> -p<span class="variable">$PASSWORD</span> <span class="variable">$DATABASE1</span> &gt; <span class="variable">$DUMPFILE1</span>   <span class="comment">#使用mysqldump备份数据库 </span></span><br><span class="line"><span class="keyword">if</span> [[ $? == 0 ]]; <span class="keyword">then</span> </span><br><span class="line">tar czvf <span class="variable">$ARCHIVE1</span> <span class="variable">$DUMPFILE1</span> &gt;&gt; <span class="variable">$LOGFILE</span> 2&gt;&amp;1          <span class="comment">#判断是否备份成功，若备份成功，则压缩备份数据库，否则将错误日志写入日志文件中去。 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$ARCHIVE1</span> BACKUP SUCCESSFUL!"</span> &gt;&gt; <span class="variable">$LOGFILE</span>  </span><br><span class="line">rm -f <span class="variable">$DUMPFILE1</span> </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line"><span class="built_in">echo</span> “<span class="variable">$ARCHIVE1</span> Backup Fail!” &gt;&gt; <span class="variable">$LOGFILE</span>  </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="删除过时备份脚本"><a href="#删除过时备份脚本" class="headerlink" title="删除过时备份脚本"></a>删除过时备份脚本</h4><p>/usr/local/script/clean_database.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment">#time 2015-05-21 </span></span><br><span class="line"><span class="comment">#name huxianglin </span></span><br><span class="line"></span><br><span class="line">BACKUPDIR=<span class="string">"/data/backup/database/"</span>                                     <span class="comment">#定义备份文件路径 </span></span><br><span class="line">KEEPTIME=7                                                             <span class="comment">#定义需要删除的文件距离当前的天数 </span></span><br><span class="line">DELFILE=`find <span class="variable">$BACKUPDIR</span> -<span class="built_in">type</span> f -mtime +<span class="variable">$KEEPTIME</span> -<span class="built_in">exec</span> ls &#123;&#125; \;`     <span class="comment">#找到天数大于7天的文件 </span></span><br><span class="line"><span class="keyword">for</span> delfile <span class="keyword">in</span> <span class="variable">$&#123;DELFILE&#125;</span>                                              <span class="comment">#循环删除满足天数大于七天的文件 </span></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">rm -f <span class="variable">$delfile</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="定时执行脚本"><a href="#定时执行脚本" class="headerlink" title="定时执行脚本"></a>定时执行脚本</h4><p>/usr/local/script/crontab.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SHELL=/bin/bash </span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin </span><br><span class="line">MAILTO=root </span><br><span class="line"><span class="comment"># For details see man 4 crontabs </span></span><br><span class="line"><span class="comment"># Example of job definition: </span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59) </span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23) </span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31) </span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ... </span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat </span></span><br><span class="line"><span class="comment"># |  |  |  |  | </span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name  command to be executed </span></span><br><span class="line">  01 00 * * * root /usr/<span class="built_in">local</span>/script/backup_database.sh              <span class="comment">#定义每天凌晨0点01分执行备份数据库脚本 </span></span><br><span class="line">  02 00 * * 0 root /usr/<span class="built_in">local</span>/script/clean_database.sh               <span class="comment">#定义每周日凌晨0点02分执行删除数据库备份文件</span></span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>在对数据库进行一次全量备份和N次增量备份后，删库删表，然后尝试恢复。</p><h4 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class="line">+----+-----------+------------+-------+</span><br><span class="line">| id | image_key | image_link | title |</span><br><span class="line">+----+-----------+------------+-------+</span><br><span class="line">|  1 | 1         | 1          | 123   |</span><br><span class="line">|  2 | 111       | 222        | 333   |</span><br><span class="line">+----+-----------+------------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="全量备份-1"><a href="#全量备份-1" class="headerlink" title="全量备份"></a>全量备份</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest mysql]<span class="comment"># mysqldump -uroot -p --single-transaction --master-data=2 --routines --flush-logs --all-databases &gt; /backup/alldb.sql;</span></span><br></pre></td></tr></table></figure><h4 id="增量备份-1"><a href="#增量备份-1" class="headerlink" title="增量备份"></a>增量备份</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># change id = 1, image_key = 1_change &gt; binlog.000002</span></span><br><span class="line">[root@vultrguest mysql]<span class="comment"># mysqladmin -uroot -p1 flush-logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># change id = 1, image_link = 1_change &gt; binlog.000003</span></span><br><span class="line">[root@vultrguest mysql]<span class="comment"># mysqladmin -uroot -p1 flush-logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># change id = 1, title = 1_change &gt; binlog.000004</span></span><br><span class="line">[root@vultrguest mysql]<span class="comment"># mysqladmin -uroot -p1 flush-logs</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class="line">+----+-----------+------------+----------+</span><br><span class="line">| id | image_key | image_link | title    |</span><br><span class="line">+----+-----------+------------+----------+</span><br><span class="line">|  1 | 1_change  | 1_change   | 1_change |</span><br><span class="line">|  2 | 111       | 222        | 333      |</span><br><span class="line">+----+-----------+------------+----------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="模拟误删数据"><a href="#模拟误删数据" class="headerlink" title="模拟误删数据"></a>模拟误删数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将日志切换到binlog.000005</span></span><br><span class="line">[root@vultrguest mysql]<span class="comment"># mysqladmin -uroot -p1 flush-logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟误删数据...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据</span></span><br><span class="line">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class="line">+----+-----------+------------+-------+</span><br><span class="line">| id | image_key | image_link | title |</span><br><span class="line">+----+-----------+------------+-------+</span><br><span class="line">|  2 | 111       | 222        | 333   |</span><br><span class="line">+----+-----------+------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="恢复全量数据"><a href="#恢复全量数据" class="headerlink" title="恢复全量数据"></a>恢复全量数据</h4><p>恢复数据前先关闭数据写入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest mysql]<span class="comment"># mysql -uroot -p1 -e 'source /backup/alldb.sql;'</span></span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line"></span><br><span class="line">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class="line">+----+-----------+------------+-------+</span><br><span class="line">| id | image_key | image_link | title |</span><br><span class="line">+----+-----------+------------+-------+</span><br><span class="line">|  1 | 1         | 1          | 123   |</span><br><span class="line">|  2 | 111       | 222        | 333   |</span><br><span class="line">+----+-----------+------------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="恢复增量数据"><a href="#恢复增量数据" class="headerlink" title="恢复增量数据"></a>恢复增量数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest mysql]<span class="comment"># mysqlbinlog binlog.000002 binlog.000003 binlog.000004 | mysql -uroot -p1</span></span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line"></span><br><span class="line">mysql&gt; select id, image_key, image_link, title from po_banner;</span><br><span class="line">+----+-----------+------------+----------+</span><br><span class="line">| id | image_key | image_link | title    |</span><br><span class="line">+----+-----------+------------+----------+</span><br><span class="line">|  1 | 1_change  | 1_change   | 1_change |</span><br><span class="line">|  2 | 111       | 222        | 333      |</span><br><span class="line">+----+-----------+------------+----------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><div class="table-container"><table><thead><tr><th style="text-align:left">备份方法</th><th>备份速度</th><th>恢复速度</th><th>便捷性</th><th>功能</th><th>一般用于</th></tr></thead><tbody><tr><td style="text-align:left">cp</td><td>快</td><td>快</td><td>一般、灵活性低</td><td>很弱</td><td>少量数据</td></tr><tr><td style="text-align:left">mysqldump</td><td>慢</td><td>慢</td><td>一般、可无视存储引擎的差异</td><td>一般</td><td>中小型数据量的备份</td></tr><tr><td style="text-align:left">lvm2快照</td><td>快</td><td>快</td><td>一般、支持几乎热备、速度快</td><td>一般</td><td>中小型数据量的备份</td></tr><tr><td style="text-align:left">xtrabackup</td><td>较快</td><td>较快</td><td>实现innodb热备、对存储引擎有要求</td><td>强大</td><td>较大规模的备份</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 部署-安装</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E9%83%A8%E7%BD%B2-%E5%AE%89%E8%A3%85/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/MySQL%20%E6%8C%87%E5%8D%97/MySQL%20%E9%83%A8%E7%BD%B2-%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="使用yum安装MySQL"><a href="#使用yum安装MySQL" class="headerlink" title="使用yum安装MySQL"></a>使用yum安装MySQL</h2><h3 id="卸载旧的MySQL"><a href="#卸载旧的MySQL" class="headerlink" title="卸载旧的MySQL"></a>卸载旧的MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># yum list installed mysql*</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C.UTF-8</span><br><span class="line">Installed Packages</span><br><span class="line">mysql.x86_64                                         8.0.17-3.module_el8.0.0+181+899d6349                                  @AppStream</span><br><span class="line">mysql-common.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349                                  @AppStream</span><br><span class="line">[root@vultrguest ~]<span class="comment"># yum remove mysql-common.x86_64</span></span><br><span class="line">...</span><br><span class="line">[root@vultrguest ~]<span class="comment"># yum list installed mysql*</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C.UTF-8</span><br><span class="line">Error: No matching Packages to list</span><br></pre></td></tr></table></figure><h3 id="使用yum源安装"><a href="#使用yum源安装" class="headerlink" title="使用yum源安装"></a>使用yum源安装</h3><h4 id="下载rpm文件"><a href="#下载rpm文件" class="headerlink" title="下载rpm文件"></a>下载rpm文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># sudo mkdir /home/downloads</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># sudo cd  /home/downloads</span></span><br><span class="line"><span class="comment"># 这里是MySQL 5.7的源文件</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># sudo wget 'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'</span></span><br><span class="line"><span class="comment"># 这里是MySQL 8.0的源文件</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># sudo wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span></span><br></pre></td></tr></table></figure><h4 id="添加源到仓库中"><a href="#添加源到仓库中" class="headerlink" title="添加源到仓库中"></a>添加源到仓库中</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># sudo rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># sudo yum update</span></span><br></pre></td></tr></table></figure><h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># sudo yum install mysql-community-server</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="启动-MySQL-服务"><a href="#启动-MySQL-服务" class="headerlink" title="启动 MySQL 服务"></a>启动 MySQL 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># sudo systemctl start mysqld</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="查看初始密码"><a href="#查看初始密码" class="headerlink" title="查看初始密码"></a>查看初始密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># sudo grep 'temporary password' /var/log/mysqld.log</span></span><br><span class="line">0sIbtR0(Wkge</span><br></pre></td></tr></table></figure><h4 id="登录MySQL（使用初始密码）"><a href="#登录MySQL（使用初始密码）" class="headerlink" title="登录MySQL（使用初始密码）"></a>登录MySQL（使用初始密码）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># mysql -uroot -p  # 输入查看到的密码</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="使用yum库安装"><a href="#使用yum库安装" class="headerlink" title="使用yum库安装"></a>使用yum库安装</h3><p>配置文件：/etc/my.cnf<br>数据文件：/var/lib/mysql</p><h4 id="搜索仓库是否有mysql-server"><a href="#搜索仓库是否有mysql-server" class="headerlink" title="搜索仓库是否有mysql-server"></a>搜索仓库是否有mysql-server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># yum list | grep mysql</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C.UTF-8</span><br><span class="line">apr-util-mysql.x86_64                                1.6.1-6.el8                                       AppStream </span><br><span class="line">dovecot-mysql.x86_64                                 1:2.2.36-10.el8                                   AppStream </span><br><span class="line">freeradius-mysql.x86_64                              3.0.17-6.module_el8.1.0+198+858eb655              AppStream </span><br><span class="line">grafana-mysql.x86_64                                 6.2.2-2.el8                                       AppStream </span><br><span class="line">mysql.x86_64                                         8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class="line">mysql-common.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class="line">mysql-devel.x86_64                                   8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class="line">mysql-errmsg.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class="line">mysql-libs.x86_64                                    8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class="line">mysql-server.x86_64                                  8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class="line">mysql-test.x86_64                                    8.0.17-3.module_el8.0.0+181+899d6349              AppStream </span><br><span class="line">pcp-pmda-mysql.x86_64                                4.3.2-2.el8                                       AppStream </span><br><span class="line">php-mysqlnd.x86_64                                   7.2.11-2.module_el8.1.0+209+03b9a8ff              AppStream </span><br><span class="line">postfix-mysql.x86_64                                 2:3.3.1-9.el8                                     AppStream </span><br><span class="line">qt5-qtbase-mysql.i686                                5.11.1-7.el8                                      AppStream </span><br><span class="line">qt5-qtbase-mysql.x86_64                              5.11.1-7.el8                                      AppStream </span><br><span class="line">rsyslog-mysql.x86_64                                 8.37.0-13.el8                                     AppStream </span><br><span class="line">rubygem-mysql2.x86_64                                0.4.10-4.module_el8.1.0+214+9be47fd7              AppStream </span><br><span class="line">rubygem-mysql2-doc.noarch                            0.4.10-4.module_el8.1.0+214+9be47fd7              AppStream</span><br></pre></td></tr></table></figure><h4 id="安装MySQL客户端"><a href="#安装MySQL客户端" class="headerlink" title="安装MySQL客户端"></a>安装MySQL客户端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># yum install -y mysql</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="安装MySQL服务端（没有指定版本默认8-0）"><a href="#安装MySQL服务端（没有指定版本默认8-0）" class="headerlink" title="安装MySQL服务端（没有指定版本默认8.0）"></a>安装MySQL服务端（没有指定版本默认8.0）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># yum install -y mysql-server</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># systemctl start mysqld</span></span><br><span class="line">[root@vultrguest ~]<span class="comment"># systemctl status mysqld</span></span><br><span class="line">● mysqld.service - MySQL 8.0 database server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sun 2020-03-08 17:58:00 UTC; 15s ago</span><br><span class="line">  Process: 6095 ExecStartPost=/usr/libexec/mysql-check-upgrade (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 5968 ExecStartPre=/usr/libexec/mysql-prepare-db-dir mysqld.service (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 5944 ExecStartPre=/usr/libexec/mysql-check-socket (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 6052 (mysqld)</span><br><span class="line">   Status: <span class="string">"Server is operational"</span></span><br><span class="line">    Tasks: 39 (<span class="built_in">limit</span>: 5066)</span><br><span class="line">   Memory: 461.7M</span><br><span class="line">   CGroup: /system.slice/mysqld.service</span><br><span class="line">           └─6052 /usr/libexec/mysqld --basedir=/usr</span><br><span class="line"></span><br><span class="line">Mar 08 17:57:53 vultrguest systemd[1]: Starting MySQL 8.0 database server...</span><br><span class="line">Mar 08 17:57:53 vultrguest mysql-prepare-db-dir[5968]: Initializing MySQL database</span><br><span class="line">Mar 08 17:58:00 vultrguest systemd[1]: Started MySQL 8.0 database server.</span><br></pre></td></tr></table></figure><h4 id="登录MySQL（刚安装密码为空）"><a href="#登录MySQL（刚安装密码为空）" class="headerlink" title="登录MySQL（刚安装密码为空）"></a>登录MySQL（刚安装密码为空）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@vultrguest ~]<span class="comment"># mysql -uroot -p</span></span><br><span class="line">Enter password:    </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 8</span><br><span class="line">Server version: 8.0.17 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h2 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h2><h4 id="MySQL-5-7修改用户密码"><a href="#MySQL-5-7修改用户密码" class="headerlink" title="MySQL 5.7修改用户密码"></a>MySQL 5.7修改用户密码</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 调整MySQL密码验证规则</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">global</span> sql_mode = <span class="string">''</span>;</span><br><span class="line"><span class="comment">-- 修改用户密码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'bg360123456'</span>;</span><br></pre></td></tr></table></figure><h4 id="MySQL-8-0修改用户密码"><a href="#MySQL-8-0修改用户密码" class="headerlink" title="MySQL 8.0修改用户密码"></a>MySQL 8.0修改用户密码</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 调整MySQL密码验证规则</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.length=<span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 修改用户密码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><h2 id="创建数据库和用户"><a href="#创建数据库和用户" class="headerlink" title="创建数据库和用户"></a>创建数据库和用户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 5.7和8.0均适用</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> aonitask <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'username'</span>@<span class="string">'host'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span>;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> aonitask.* <span class="keyword">to</span> <span class="string">'aonitask'</span>@<span class="string">'%'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> MySQL 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Series Part 3, Spring WebFlux</title>
      <link href="/2020/04/19/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Spring%20Series%20Part%203,%20Spring%20WebFlux/"/>
      <url>/2020/04/19/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Spring%20Series%20Part%203,%20Spring%20WebFlux/</url>
      
        <content type="html"><![CDATA[<p>Spring WebFlux introduces reactive web development to the Spring ecosystem. This article will get you started with reactive systems and reactive programming with Spring. First you’ll find out why reactive systems are important and how they’re implemented in Spring framework 5, then you’ll get a hands-on introduction to building reactive services using Spring WebFlux. We’ll build our first reactive application using annotations. I’ll also show you how to build a similar application using Spring’s newer functional features.</p><h2 id="Reactive-systems-and-Spring-WebFlux"><a href="#Reactive-systems-and-Spring-WebFlux" class="headerlink" title="Reactive systems and Spring WebFlux"></a>Reactive systems and Spring WebFlux</h2><p>The term reactive is currently popular with developers and IT managers, but I’ve noticed some uncertainty about what it actually means. To get clearer on what reactive systems are, it’s helpful to understand the fundamental problem they’re designed to solve. In this section we’ll talk about reactive systems in general, and I’ll introduce the Reactive Systems API for Java applications.</p><blockquote><p>Scalability in Spring MVC<br>Spring MVC has earned its place among (在…中) the top choices for building Java web applications and web services. Spring MVC seamlessly (无缝地) integrates (使合并) annotations into the robust (强健) architecture of a Spring-based application. This enables developers familiar with Spring to quickly build satisfying, highly functional web applications. Scalability (可扩展性) is a challenge for Spring MVC applications, however. That is the problem Spring WebFlux seeks to address.</p></blockquote><h3 id="Blocking-vs-non-blocking-web-frameworks"><a href="#Blocking-vs-non-blocking-web-frameworks" class="headerlink" title="Blocking vs non-blocking web frameworks"></a>Blocking vs non-blocking web frameworks</h3><p>In traditional web applications, when a web server receives a request from a client, it accepts that requests and places it in an execution queue. A thread in the execution queue’s thread pool then receives the request, reads its input parameters, and generates a response. Along the way, if the execution thread needs to call a blocking resource — such as a database, a filesystem, or another web service — that thread executes the blocking until the external resource responds, which causes performance issues and limits scalability. To combat these issues, developers create generously sized thread pools, so that while one thread is blocked another thread can continue to process requests. Figure 1 shows the execution flow for a traditional, blocking web application.</p><p><img src="001.jpg" alt="Figure 1. Threaded execution model"></p><p>Non-blocking web frameworks such as NodeJS and Play take a different approach (方法). Instead of executing a blocking request and waiting for it to complete, the use non-blocking I/O. In this paradigm (范例), an application executes a request, provides code to be executed when a response is returned, and then given its thread back to the server. When an external resource returns a response, the provided code will be executed. Internally (内部的), non-blocking frameworks operate using an event loop. Within the loop, the appliation code either provides a callback or a future containing the code to execute when the asnchronous (异步) loop completes.</p><p>By nature, non-blocking frameworks are event-driven. This requires a different programming paradigm and a new approach to reasoning (推理) about how your code will be executed. Once you’ve warpped (变形的) your head arround it, reactive programming can lead to very scalable applications.</p><blockquote><p>Callbacks, promises, and futures<br>In early days, JavaScript handled all asynchronous functionality via callbacks. In this scenario, when an event occurs (such as when a response from a service call becomes available) the callback is executed. While callbacks are still prevalent, JavaScript’s asynchronous functionality has more recently moved to promises. With promises, a function call returns immediately, returning a promise to deliver the results at a future time. Rather than promises, Java implements a similar paradigm using futures. In this usage, a method returns a future that will have a value at some time in the future.</p></blockquote><h2 id="Reactive-programming"><a href="#Reactive-programming" class="headerlink" title="Reactive programming"></a>Reactive programming</h2><p>You may have hear the term reactive programming related to web development frameworks and tools, but what does it really mean? The term as we’ve come to know it originated from the Reactive Manifesto, which defines reactive systems as having four core traits (特征):</p><ul><li>Reactive systems are <strong>responsive</strong>, meaning that they respond in a timely manner (及时的), in all possible circumstances (环境). They focus on providing rapid (瞬间) and consistent response times, establishing (建立) reliable upper bounds (上边界) so they deliver (兑现) a consistent quality of service</li><li>Reactive systems are <strong>resilient</strong> (能复原的), meaning that they remain reponsive in the face of failure. Resilience is achieved (实现) by the techniques of relication (同步复制), containment (包容), isolation (隔离性), and delegation (委派). By isolating application compoents from each other, you can contain failures and protect the system as a whole</li><li>Reactive systems are elastic (灵活的), meaning that they stay responsive under varying workloads. This is achieved by scaling application components elastically to meet the current demand (需要)</li><li>Reactive systems are message-driven, meaning that they rely on asynchronous message passing between components. This allows you to create coupling (耦合), isolation, and location transparency (透明度)</li></ul><p>Figure 2 shows how these traits (特征) flow together in a reactive system.</p><p><img src="002.jpg" alt="Figure 2. Traits of a reactive system"></p><h2 id="Characteristics-of-a-reactive-system"><a href="#Characteristics-of-a-reactive-system" class="headerlink" title="Characteristics of a reactive system"></a>Characteristics of a reactive system</h2><p>Reactive systems are built by creating isolated components that communicate with one another asynchronously and can scale quickly to meet the current load. Components still fail in reactive systems, but there are defind actions to perform as a result of the failure, which keeps the system as a whole functional and responsive.</p><p>The Reaactive Manifesto is abstract, but reactive applicaitons are typically characcterized by follwoing components or techniques:</p><ul><li><strong>Data streams</strong>: A stream is a squence of events ordered in time, such as user interactions, REST service calls, JMS messages, and results from a database</li><li><strong>Asynchronous</strong>: Data stream events are captured asychronously and your code defines what to do when an event is emiited, when an error occurs, and when the stream of events has completed</li><li><strong>Non-blocking</strong>: As you process events, your code should not block and preform synchronouss calls; intead, it should make asychronous calls and respond as the results of those calls are returned</li><li><strong>Back pressure</strong>: Components control the number of event and how often they are emitted (发出). In reactive terms, your component is referred to as the subscriber and events are emitted by a pushlier. This is important because the subscriber is in control of how much data it receives and thus will not overburden (超载) itself</li><li><strong>Failure message</strong>: Instead of components throwing exceptions, failures are sent as message to a handler function. Whereas throwing exceptions breaks the stream, defining a function to handle failures as the occur does not</li></ul><h2 id="The-Reactive-Streams-API"><a href="#The-Reactive-Streams-API" class="headerlink" title="The Reactive Streams API"></a>The Reactive Streams API</h2><p>The new Reactive Stream API was created by engineers from Netflix, Pivotal, Lightbeand, RedHat, Twitter, and Oracle, among others. Pushished in 2015, the Reactive Streams API is now part of Java 9. It defines four interfaces:</p><ul><li><strong>Publisher</strong>: Emits a sequence of events to subscriber</li><li><strong>Subscriber</strong>: Recevies and processes events emitted by a Publisher</li><li><strong>Subscription</strong>: Defines a one-to-one relationship between a Publisher and a Subscriber</li><li><strong>Processor</strong>: Represent a processing stage consisting of both a Subscriber and a Publisher and obeys the contracts of both</li></ul><p>Figure 3 shows the relationship between a Publisher, and Subscription.</p><p><img src="003.jpg" alt="Figure 3. Interfaces in the Reactive Streams API"></p><p>In essence (本质), a Subscriber creates a Subscription to a Publisher and, when the Publisher has available data, it sends an event to the Subscriber with a stream of elements. Note that the Subscriber managers its back pressure (挤压) inside its Subscription (订阅) to the Publisher.</p><p>Now that you know a litte bit about reactive systems and the Reactive Streams API, let’s turn our attention to the tools Spring uses to implement reactive systems: Spring WebFlux and the Reactor library.</p><h2 id="Project-Reactor"><a href="#Project-Reactor" class="headerlink" title="Project Reactor"></a>Project Reactor</h2><p>Project Reactor is a third-party framework based on Java’s Reactive Streams Specification, which is used to build ono-blocking web applications. Project Reactor provides two publishers that are heavily used in Spring WebFlux:</p><ul><li><strong>Mono</strong>: Returns 0 or 1 element</li><li><strong>Flux</strong>: Returns 0 or more elements. A Flux can be endless, meaning that it can keep emitting elements forever, or it can return a sequence of elements and then send a completion notification when it has returned all of its elements</li></ul><p>Monos and fluxs are conceptually similar to futures, but more powerful. When you invoke a function that returns a mono or a flux, it will return immediately. The results of the function call will be delivered to you through the mono or flux when they become available.</p><p>In Spring WebFlux, you will reactive libraries that return monos and fluxes and your controllers will return monos and fluexs. Because these return immediately, your controllers will effectively give up their threads and allow Reactor to handle responses asynchronously. It is improtant to note that only by using reactive libraries can you WebFlux services stay reactive. If you use non-reative libraries, such as JDBC calls, your ocde will block and wait for those calls to complete before returning.</p><blockquote><p>Reactive programming with MongoDB<br> Currently, there aren’t many reactive database libraries, so you may be wondering if it’s practical to write rective services. The good news is that MongoDB has reactive support and there are a couple of third-party reactive database drivers for MySQL and Postgres. For all other use cases, WebFlux provides a machanism for executing JDBC calls in a reactive manner, albeit using a secondary thread pool that makes blocking JDBC calls.</p></blockquote><h2 id="Get-started-with-Spring-WebFlux"><a href="#Get-started-with-Spring-WebFlux" class="headerlink" title="Get started with Spring WebFlux"></a>Get started with Spring WebFlux</h2><p>For our first how-to example, we’ll create a simple book service that persists books to and from MongoDB in a reactive fashion.</p><p>Start by navigating to the Spring Initializr homepage, where you’ll choose a Maven Project with Java and select the most current release of Spring Boot (2.0.3 at time of this writing). Give your project a group name, such as “com.javaworld.webflux”, and an artifact name, such as “bookservice”. Expand the Switch to the full version like to show the full list of dependencies. Select the following dependencies for the example application:</p><ul><li>Web -&gt; Reactive Web: The dependency inlucdes Spring WebBlux</li><li>NoSQL -&gt; Reactive MongoDB: This dependency inluceds the reactive drivers for MongoDB</li><li>NoSQL -&gt; Embedded MongoDB: This dependency allows us to run an embedded version of MongoDB, so there is no need to install a separate instance. Usually this is used for testing, but we’ll include it in our release code to avoid installing MongoDB</li><li>Core -&gt; Lombok: Using Lombok is optional as you do not need it to build a Spring WebFlux. The benefit of using Project Lombok is that is enables you to add annotations to classes that will automatically generate getters and setters, constructors, hashCode(), equals(), and more.</li></ul><p>When you’re finished you should see something similar to Figure 4.</p><p><img src="004.jpg" alt="Figure 4. Screenshot of the Spring Initializr project"></p><p>Pressing Generate Proejct will trigger the download of a zip file containing your proejct source code. Unzip the download file and open it in your favorite IDE. If you’re using IntelliJ, choose File and then Open, and navigate to the directory where the download zip file has been decompressed.</p><p>You’ll find that Spring Initializr has generated two important files:</p><ul><li>A Maven pom.xml file, includes all necessary dependencies for the application</li><li>BookserviceApplicataion.java, which is the Spring Boot starter class for the application</li></ul><p>Listing 1 shows the contents fo the generated pom.xml file.</p><h3 id="Listing-1-Maven-pom-xml-for-the-Spring-WebFlux-example-application"><a href="#Listing-1-Maven-pom-xml-for-the-Spring-WebFlux-example-application" class="headerlink" title="Listing 1. Maven pom.xml for the Spring WebFlux example application"></a>Listing 1. Maven pom.xml for the Spring WebFlux example application</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.javaworld.webflux<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bookservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>bookservice<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.flapdoodle.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>de.flapdoodle.embed.mongo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Application-dependencies"><a href="#Application-dependencies" class="headerlink" title="Application dependencies"></a>Application dependencies</h3><p>The <code>&lt;parent&gt;</code> node references version 2.0.3.RELEASE of the spring-boot-starter-parent POM file. The parent POM file ensures that all dependency versions are compatible with this version of Spring Boot. These dependencies include:</p><ul><li>spring-boot-starter-webflux: Packs everything you need to run a WebFlux application, including spring-web (which gives you all of the Spring MVC capabilities) and Netty, which will be our reactive web server, plus a lot more</li><li>spring-boot-starter-data-mongodb-reactive: Includes the MongoDB drivers, reactive support for MongoDB, and Spring Data to make writing persistence (坚持) code easier</li><li>de.flapdoodle.embed.mongo: Includes an embedded MongoDB instance. By default this dependency will be scoped to “test” so that you can write tests that run against an embedded MongoDB instance and then connect to a standalone MongoDB instance in production. For the purpose of this example I removed the test scoping so that we can run our book service against this embedded MongoDB instance</li><li>lombok: Adds annotation niceties for generating getters and setters, constructors, and forth to the application’s model classes</li><li>spring-boot-starter-test: Includes Spring testing utilities as well as JUnit and Mockito</li><li>reactor-test: Includes testing utilities for testing the Reactor engine, which is used by Spring WebFlux for reactive functionality</li></ul><h2 id="The-Spring-Boot-starter-class"><a href="#The-Spring-Boot-starter-class" class="headerlink" title="The Spring Boot starter class"></a>The Spring Boot starter class</h2><p>Listing 2 shows the BookserviceApplication.java file.</p><h3 id="Listing-2-BookserviceApplication"><a href="#Listing-2-BookserviceApplication" class="headerlink" title="Listing 2. BookserviceApplication"></a>Listing 2. BookserviceApplication</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookserviceApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BookserviceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The BookserviceApplication is annotated with the <strong>@SpringBootApplication</strong> annotation. <strong>@SpringBootApplication</strong> is a convenience (方便) annotation that encompasses (包含) the following annotations:</p><ul><li><strong>@EnableAutoConfiguration</strong> enables auto-configuration of the Spring application context, attemping to guess and configure beans that you are likely to need. Auto-configuration classes are usually applied based on your CLASSPATH and the beans you have defined. For example, when you include the embedded MongoDB dependency in your CLASSPATH, Spring will automatically create an instance in memory and wire it into the application context</li><li><strong>@SpringBootConfiguration</strong> identifies this class as containing the Spring Boot configuration</li><li><strong>@ComponentScan</strong> directs Spring to scan the CLASSPATH, in the current package and all sub-packages, for Spring components. In short, this allows you to create a web package and add a <strong>@Controller</strong>, which Spring will find and make available to the application</li></ul><p>The BookserviceApplication itself defines a main() method that delegates to the SpringApplication.run() method, which starts the application.</p><h3 id="Using-Spring-WebFlux-with-annotations"><a href="#Using-Spring-WebFlux-with-annotations" class="headerlink" title="Using Spring WebFlux with annotations"></a>Using Spring WebFlux with annotations</h3><p>In order to build our book service we need to define the following classes and interfaces:</p><ul><li><strong>Book</strong>: A model class representing a book in our service</li><li><strong>BookRepository</strong>: A Spring Data MongoDB interface telling Spring Data to generate persistence code for books to and from MongoDB</li><li><strong>BookService</strong> and <strong>BookServiceImpl</strong>: The “business” service used to interact with the BookRepository to persist book to and from MongoDB. In this example, a service is not necessary and we could place calls to the BookRepository directly in our controller. When building Spring applications it is recommended to create this layer as a business interface between your controllers and persistence repository, however. The business interface enables you to change your repository — such as moving to an SQL-based database or calling another web service — without impacting your controllers.</li><li><strong>BookController</strong>: The web controller that will receive web requests and return reactive reponse (Monos and Fluxs)</li></ul><h2 id="Example-application-source-code"><a href="#Example-application-source-code" class="headerlink" title="Example application source code"></a>Example application source code</h2><p>Listing 3 shows the source code for our model class, Book.java</p><h3 id="Listing-3-Book-java"><a href="#Listing-3-Book-java" class="headerlink" title="Listing 3. Book.java"></a>Listing 3. Book.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The Book class is a simple POJO that contains an ID, title, and author. It is annotated with the <strong>@Document</strong> annotation, which identifies it as a MongoDB document. Spring Data will map documents to collections in MongoDB. THe next three annotations — <strong>@Data</strong>, <strong>@NoArgsContructor</strong>, and <strong>@AllArgsConstructor</strong> — are Lombok annotations. <strong>@Data</strong> includes the following capabilities:</p><ul><li>Generates getters and setters for all fields; setters are only generated for non-final properties</li><li>Generates a required arguments constructor</li><li>Generates a <strong>ToString()</strong> method</li><li>Generates <strong>equals()</strong> and <strong>hashCode()</strong> methods that uses all non-transient (非暂态) fields</li></ul><p>In order to work with Spring Data, we need a no-argument constructor so I added <strong>@NoArgsContructor</strong>. For testing purposes I also added an all-argument constructor, <strong>@AllArgsConstructor</strong>.</p><p>As mentioned above, Lombok is not required and you can simply implement getters, setters, and constructors to the class as you normally would do.</p><p>Listing 4 shows the source code for the BookRepository interafce.</p><h3 id="Listing-4-BookRepository-java"><a href="#Listing-4-BookRepository-java" class="headerlink" title="Listing 4. BookRepository.java"></a>Listing 4. BookRepository.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> <span class="keyword">extends</span> <span class="title">ReactiveMongoRepository</span>&lt;<span class="title">Book</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The BookRepsiotry is a Spring Data interface, meaning that you define the interface and Spring Data weill generate the code that implements that interface. Specifically, BookRepository extends teh ReactiveMongoRepository, which defines the following reactive methods (remember that these are methods that return either monos or fluxs):</p><ul><li><code>Mono&lt;Book&gt; save()</code></li><li><code>Flux&lt;Book&gt; saveAll()</code></li><li><code>Flux&lt;Book&gt; findById()</code></li><li><code>Mono&lt;Boolean&gt; existsById()</code></li><li><code>Flux&lt;Book&gt; findAll()</code></li><li><code>Flux&lt;Book&gt; findAllById()</code></li><li><code>Mono&lt;Long&gt; count()</code></li><li><code>Mono&lt;Void&gt; delete()</code></li><li><code>Mono&lt;Void&gt; deleteById()</code></li><li><code>Mono&lt;Voidd&gt; delteAll()</code></li><li><code>Flux&lt;Book&gt; insert()</code></li></ul><p>The query methods that return one element (such as <code>findById()</code>) return <code>Mono&lt;Book&gt;</code>. The methods that return more than one elements (such as <code>findAll()</code>) return <code>Flux&lt;Book&gt;</code>. It is interesting to note that the <code>delete</code> methods return a <code>Mono&lt;Void&gt;</code>. <code>Mono&lt;Void&gt;</code> means that there is no return type, but when the operation finishes it will publish a completion notification. Recall that these are publishers, so your code, or Spring WebFlux itself, will ultimately define functionality to execute when a message is published to its subscribers.</p><p>The BookRepository is defined with two generic parameters: Book, which is the type of document that the repository managers, and String, which is the type of the primary key (the Book’s id field). Your code can use the BookRepository methods to execute asynonchroous queries against MongoDB.</p><p>Listing 5 and 6 show the source code for the BookService and BookServiceImpl, respectively.</p><h3 id="Listing-5-BookService-java"><a href="#Listing-5-BookService-java" class="headerlink" title="Listing 5. BookService.java"></a>Listing 5. BookService.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Mono&lt;Book&gt; <span class="title">findById</span><span class="params">(String id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Flux&lt;Book&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Mono&lt;Book&gt; <span class="title">save</span><span class="params">(Book book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Mono&lt;Void&gt; <span class="title">deleteById</span><span class="params">(String id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Listing-6-BookServiceImple-java"><a href="#Listing-6-BookServiceImple-java" class="headerlink" title="Listing 6. BookServiceImple.java"></a>Listing 6. BookServiceImple.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookServiceImpl</span><span class="params">(BookRepository bookRepsotiry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookRepository = bookRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Book&gt; <span class="title">findById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;Book&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Book&gt; <span class="title">save</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">deleteById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Services represent business functionality and are identified in Spring using the <code>@Service</code> annotation. In this example, business functionality simply delegates to the underlying (隐含的) repository. If you needed to perform more complex logic on the queries or on the objects being persisted, this is where you would do it.</p><p>Listing 7 shows the source code for the BookController class.</p><h3 id="Listing-7-BookController-java"><a href="#Listing-7-BookController-java" class="headerlink" title="Listing 7. BookController.java"></a>Listing 7. BookController.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookController</span><span class="params">(BookService bookService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookService = bookService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/book/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Book&gt; <span class="title">getBookById</span><span class="params">(@PathVariable String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/books"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;Book&gt; <span class="title">getAllBooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/book"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Book&gt; <span class="title">createBook</span><span class="params">(@RequestBody Book book)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="About-the-code"><a href="#About-the-code" class="headerlink" title="About the code"></a>About the code</h2><p>If you’re already familiar with Spring MVC, you’ll notice that the Spring WebFlux application code looks remarkably familiar. The only difference is that all controllers and services return reactive types, namely monos and fluxes. We’ve also employed a reactive MongoDB driver instead of a nonreactive driver. While the code is familiar, the implementation is quite different. Under the hood, Spring WebFlux will invoke your handler method, capture the reactive reponse, and then leverage Reactor to wait for the response to be published, all asynchronously.</p><p>Here are some points to note about the example application:</p><ul><li><code>BookController</code> is annotated with the <code>@RestController</code> annotation, which is a convenience annotation. This annotation includes the <code>@Controller</code> annotation, which is used to identify a class that handles web request, and <code>@ResponseBody</code>, which indicates that method return values should be bound to the web response body</li><li><code>getBookById()</code> method, which is annotated with the <code>@GetMapping</code> annotation. <code>@GetMapping</code> is a convenience annotation for <code>@RequestMapping(method = RequestMethod.GET)</code>. It handles the URI path: <code>/book/{id}</code>, where the id is the value retrieved from the path and passed as the <code>@PathVariable</code> in the method call. The implementation simply delegates to the BookService’s <code>findById()</code> method. Note that this method returns a <code>Mono&lt;Book&gt;</code>, which again is a publisher that will provide WebFlux with a Book instance when it becomes available, ultimately from the reactive MongoDB call to <code>findById()</code>.</li><li><code>getAllBooks()</code> method handles the <code>/books</code> URI path and delegates to the BookService’s <code>findALl()</code> method. In this case it returns a <code>Flux&lt;Book&gt;</code>, which is a pulisher that send a stream of Books to Spring WebFlux. When all books have been retrieved from MongoDB, the reactive MongoDB <code>findAll()</code> method will publish a completion notification telling WebFlux that it is finished. WebFlux can then send the response back to the caller</li><li>Finally, the <code>createBook()</code> method is annotated with the <code>@PostMapping</code> annotation, which is a convenience annotation for <code>@RequestMapping(method = RequestMethod.POST)</code>. <code>@PostMapping</code> handles the <code>/book</code> URI path. The <code>@RequestBody</code> annotation, included when we added <code>@RestController</code> tells WebFlux to convert the object received from the caller into a Book instance. The <code>createBook()</code> method delegates to the BookService’s <code>save()</code> method and then returns a <code>Mono&lt;Book&gt;</code> that publishes the newly created Book.</li></ul><blockquote><p>Three styles of denpendency injection<br>The BookController uses contructor injetcion to autowire a BookService into itself. Recall that Spring supports three types of denpendency injection:</p><ul><li>Constructor injection: when a Spring-managed bean defines a constructor that accepts another Spring-managed bean, Spring will automatically retrieve an instance of that bean from the application context and pass it to the constructor</li><li>Setter injection: when a Spring-managed bean defines a setter method that accepts another Spring-managed bean, Spring will likewise find it in the application context and invoke the setter method</li><li>@Autowired: when a Spring-managed bean defines a field annotated with the @Autowired annotation, Spring will automatically set the value of the filed</li></ul></blockquote><h2 id="Run-the-application"><a href="#Run-the-application" class="headerlink" title="Run the application"></a>Run the application</h2><p>You can run your new service by exeucting the following command from the root directory of your project:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn spring-boot:run</span><br></pre></td></tr></table></figure></p><p>Now take out your favorite REST service testing tool, like Poster, or execute the following cURL commands on your command-line. See the responses below each cURL command:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ curl --header <span class="string">"Content-Type: application/json"</span> --request POST --data <span class="string">'&#123;"title": "Book 1", "author": "Mr Author"&#125;'</span> http://localhost:8080/book</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"5b2ea197c0f951f7354085d7"</span>,<span class="string">"title"</span>:<span class="string">"Book 1"</span>,<span class="string">"author"</span>:<span class="string">"Mr Author"</span>&#125;</span><br><span class="line">$ curl --header <span class="string">"Content-Type: application/json"</span> --request POST --data <span class="string">'&#123;"title": "Book 2", "author": "Other Author"&#125;'</span> http://localhost:8080/book</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"5b2ea1b0c0f951f7354085d8"</span>,<span class="string">"title"</span>:<span class="string">"Book 2"</span>,<span class="string">"author"</span>:<span class="string">"Other Author"</span>&#125;</span><br><span class="line">$ curl http://localhost:8080/books</span><br><span class="line">[&#123;<span class="string">"id"</span>:<span class="string">"5b2ea197c0f951f7354085d7"</span>,<span class="string">"title"</span>:<span class="string">"Book 1"</span>,<span class="string">"author"</span>:<span class="string">"Mr Author"</span>&#125;,&#123;<span class="string">"id"</span>:<span class="string">"5b2ea1b0c0f951f7354085d8"</span>,<span class="string">"title"</span>:<span class="string">"Book 2"</span>,<span class="string">"author"</span>:<span class="string">"Other Author"</span>&#125;]</span><br><span class="line">$ curl http://localhost:8080/book/5b2ea197c0f951f7354085d7</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"5b2ea197c0f951f7354085d7"</span>,<span class="string">"title"</span>:<span class="string">"Book 1"</span>,<span class="string">"author"</span>:<span class="string">"Mr Author"</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Functional-reactive-services-with-Spring-WebFlux"><a href="#Functional-reactive-services-with-Spring-WebFlux" class="headerlink" title="Functional reactive services with Spring WebFlux"></a>Functional reactive services with Spring WebFlux</h2><p>Spring WebFlux application can be built using either Spring MVC annotations (which you just saw) or functional programming techniques. Functional programming has many benefits, such as immutable data objects, inherent thread safety, the ability to pass functions to other functions, and the ability to program declaratively rather than imperatively (meaning that you describe the problem you are solving, not hte steps that define how to solve the problem).</p><p>Pure functions — or functions that provide the same result every time they are given the same input — limit side-effects, which makes testing easier. They also allows for easy parallelization and caching. If you haven’t taken the time to start learning functional programming, I encourage you to do so; It will change how you approach and solve problems.</p><p>Arjen Poutsma, a mamber of the Spring WebFlux team, posted a vieo on YouTube entitled “New in Spring Framework 5.0: Functional Web framework” that describes the motivation behind building functional web applications and how Spring WebFlux can be used functionally. In short, he argues for more library, less framework, meaning that WebFlux can be used as a library that leaves you in control of your web application. This is an efficient alternative to utilizing the full Spring framework, which is the approach we took in the previous section.</p><p>We’ll conclude this tutorial by using Spring WebFlux to build another BookHandler application, this time using functional techniques.</p><h2 id="Router-and-handler"><a href="#Router-and-handler" class="headerlink" title="Router and handler"></a>Router and handler</h2><p>Our functional Spring WebFlux application will be based on two main components, a router and a handler. The router is responsible ofr routing HTTP requests to handler functions. Handler functions are responsible for executing business functionality and building responses.</p><p>Listing 8 shows the source code for the BookHandler class.</p><h3 id="Listing-8-BookHandler-java"><a href="#Listing-8-BookHandler-java" class="headerlink" title="Listing 8. BookHandler.java"></a>Listing 8. BookHandler.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookService bookService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookHandler</span><span class="params">(BookService bookService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookService = bookService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">findById</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">        String id = request.pathVariable(<span class="string">"id"</span>);</span><br><span class="line">        <span class="keyword">return</span> ok()</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .body(bookService.findById(id), Book.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">findAll</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ok()</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .body(bookService.findAll(), Book.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">save</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Mono&lt;Book&gt; book = request.bodyToMono(Book.class);</span><br><span class="line">        <span class="keyword">return</span> ok()</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .body(fromPublisher(book.flatMap(bookService::save), Book.class));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">delete</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">        String id = request.pathVariable(<span class="string">"id"</span>);</span><br><span class="line">        <span class="keyword">return</span> ok()</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .body(bookService.deleteById(id), Void.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The BookHandler is annotated with <code>@Component</code>, a generic annotation that identifies the class as being a Spring-managed bean. Spring will discover this component when it does its component scan and add it to the application context. This is not a controller, but rather a standard Spring bean that will be wired into the BookRouter, defined below.</p><p>The functions in the BookHandler return <code>Mono&lt;ServerResponse&gt;</code>. This component is a litte different from the BookController built in the previous section, which returned <code>Mono&lt;Book&gt;</code> and <code>Flux&lt;Book&gt;</code>. When building a handler function, you are responsible for building the response that will ultimately be returned to the caller. All methods are requried to return a <code>Mon&lt;ServerResponse&gt;</code>, even if the body of the response contains a Flux.</p><p>Each method is passed a ServerRequest argument, which provides access to request parameters, such as path variables, query parameters, and, in the case of the <code>save()</code> method, the body of a POST or PUT.</p><p>In order to build a response body, we construct it using a BodyBuilder. The <code>ok()</code> method returns a BodyBuilder with an HTTP status code of 200; it is a convenience method for <code>status(HttpStatus.OK)</code>. The BodyBuilder interface defines methods for setting the content type, content length, as well as HTTP header values. The <code>body()</code> method sets the contents to be returned to the caller and returns a <code>Mono&lt;ServerResponse&gt;</code>.</p><h2 id="Important-methods-save-and-flatMap"><a href="#Important-methods-save-and-flatMap" class="headerlink" title="Important methods: save() and flatMap()"></a>Important methods: save() and flatMap()</h2><p>The method in this class that deservers special attention is the <code>save()</code> method. First, in order to deserialize the body payload to a class instance, we invoke the <code>bodyToMono()</code> method. This mehtod returns a <code>Mono&lt;Book&gt;</code>, which is a publisher that will provide a Book instance asynchronously when it is available. With the <code>Mono&lt;Book&gt;</code> in hand, we construct the response using the <code>ok()</code> method, as usual, and then the <code>body()</code> method is implemented as folows:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fromPublisher(book.flatMap(bookService::save), Book.class)</span><br></pre></td></tr></table></figure></p><p>The <code>fromPbulisher()</code> method reutrns a BodyInserter, which the <code>body()</code> method expects, from a publisher function and the class of the object that will be published, Book.class in this case. The publisher function is passed the following:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">book.flatMap(bookService::save)</span><br></pre></td></tr></table></figure></p><p>You’re probably already familiar with the Java 8 <code>map()</code> funciton, which converts every input item in a stream (or in the Mono in this case) into another object. The Java 8 <code>flatMap()</code> function is similar, but it “flattens” the response. For example, if we were constructing a list of objects and the map function returned am embedded list, rather than a list of lists, the <code>flatMap()</code> funciton would return a single list that contained all of the elements in all embedded lists.</p><p>We can read this function as follow: for each Book in the book object, which is a Mono so there will only be one, call the BookService’s <code>save()</code> method, and return the result of <code>BookService::save</code> to the caller (<code>fromPublisher()</code> in this case) as a single Mono object (not a <code>Mono&lt;Mono&lt;Book&gt;&gt;</code>). The <code>faltMap()</code> function takes care of flattening embedded Monos into a single Mono.</p><h2 id="Example-application-code"><a href="#Example-application-code" class="headerlink" title="Example application code"></a>Example application code</h2><p>Listing 9 show the source code for the BookRouter class.</p><h3 id="Listing-9-BookRouther-java"><a href="#Listing-9-BookRouther-java" class="headerlink" title="Listing 9. BookRouther.java"></a>Listing 9. BookRouther.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookRouter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title">route</span><span class="params">(BookHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RouterFunctions</span><br><span class="line">                .route(GET(<span class="string">"/fbooks"</span>).and(accept(MediaType.APPLICATION_JSON)), handler::findAll)</span><br><span class="line">                .andRoute(GET(<span class="string">"/fbook/&#123;id&#125;"</span>).and(accept(MediaType.APPLICATION_STREAM_JSON)), handler::findById)</span><br><span class="line">                .andRoute(POST(<span class="string">"/fbook"</span>).and(accept(MediaType.APPLICATION_JSON)), handler::save)</span><br><span class="line">                .andRoute(DELETE(<span class="string">"/fbook/&#123;id&#125;"</span>).and(accept(MediaType.APPLICATION_JSON)), handler::delete);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The BookRouter class is annotated with <code>@Configuration</code>, which is a Spring annotation that identifies a class as a configuration class whose method create other Spring beans. In this example, the <code>router()</code> method creates a bean of type <code>RouterFunciton&lt;ServerResponse&gt;</code>. Router functions are responsible for translting HTTP routes (HTTP verb and URI path) into handler functions. For example, the first route reads: if there is a request of type GET for the URI path <code>/fbooks</code> and a media accept type of APOLICATION_JSON, then invoke the BookHandler’s <code>findAll()</code> method.</p><p>The syntax might look a little strange, so let’s take it apart. First, consider the <code>GET()</code> method:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET(<span class="string">"/fbooks"</span>).and(accept(MediaType.APPLICATION_JSON)), handler::findAll</span><br></pre></td></tr></table></figure></p><p>The <code>GET()</code> method is statically imported from the RequestPredicates class and reutrns a RequestPredicate instance. A predicate is a boolean-valued function with a <code>test()</code> method that evaluates the predicate and returns true or false if the predicate’s conditions are met. A RequestPredicate evaluates a ServerRequest to determine whether or not this route should handle the request. So our goal is to define the criteria under which our handler function should be called.</p><p><code>GET()</code> is a convenience method for </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method(HttpMethod.GET).and(path(String Pattern))</span><br></pre></td></tr></table></figure><p>This means that the RequestPredicate will compare the HTTP verb in the ServerRequest to HttpMehod.GET and the path to the specified URI pattern. We then chain <code>accept(MediaType.APPICATION_JSON)</code> to the predicate using the <code>and()</code> method, which is a standard Predicate funciton that evaluates two prediates using AND boolean logic. The <code>accept()</code> method adds a condition to the predicate that verifies the “Accept” HTTP header against the provided media type. In the end, the <code>handler::findAll</code> method will be invoked if the following conditions are true:</p><ul><li>The HTTP verb is GET</li><li>THe URI path is <code>/fbooks</code></li><li>The HTTP “ACCEPT” header is “applicaiton/json”</li></ul><p>The <code>RoutherFunction::route</code> method returns a RouterFunction that allows you to add additional routes by invoking the <code>addRoute()</code> method. As you can see, we leverage this capability to chain together several different routes: GET with an id request parameter, POST and DELETE.</p><p>The only other magic in the BookRouter::route method is the Spring injection of the BookHandler. The router() method is annotated with <code>@Bean</code>, which means that it returns a Spring-managed bean. When Spring invokes this method it will see that requires a BookHandler argument. Having already discovered the BookHandler (annotated with <code>@Component</code>), and having added it to the application context, it will pass the Spring-managed BookHandler to the <code>route()</code> method.</p><p>In summary, the <code>BookRouter::route</code> create a RouterFunction, which is composed of several router functions that define the conditions for which specific handler functions should be invoked.</p><h2 id="Run-and-test-the-application"><a href="#Run-and-test-the-application" class="headerlink" title="Run and test the application"></a>Run and test the application</h2><p>You can test this code by starting the Spring Boot application with the following command:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn spring-boot:run</span><br></pre></td></tr></table></figure></p><p>Now you have two sets of end-points: <code>/book</code> uses the BookController and <code>/fbook</code> uses the functional BookRouter and BookHandler. The following are sample cURL commands to invoke these services:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ curl --header <span class="string">"Content-Type: application/json"</span> --request POST --data <span class="string">'&#123;"title": "Book 1", "author": "Author"&#125;'</span> http://localhost:8080/fbook</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"5b394748aaac8a7c67f94367"</span>,<span class="string">"title"</span>:<span class="string">"Book 1"</span>,<span class="string">"author"</span>:<span class="string">"Author"</span>&#125;</span><br><span class="line">$ curl --header <span class="string">"Content-Type: application/json"</span> --request POST --data <span class="string">'&#123;"title": "Book 2", "author": "Author"&#125;'</span> http://localhost:8080/fbook</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"5b39474daaac8a7c67f94368"</span>,<span class="string">"title"</span>:<span class="string">"Book 2"</span>,<span class="string">"author"</span>:<span class="string">"Author"</span>&#125;</span><br><span class="line">$ curl http://localhost:8080/fbooks</span><br><span class="line">[&#123;<span class="string">"id"</span>:<span class="string">"5b394748aaac8a7c67f94367"</span>,<span class="string">"title"</span>:<span class="string">"Book 1"</span>,<span class="string">"author"</span>:<span class="string">"Author"</span>&#125;,</span><br><span class="line"> &#123;<span class="string">"id"</span>:<span class="string">"5b39474daaac8a7c67f94368"</span>,<span class="string">"title"</span>:<span class="string">"Book 2"</span>,<span class="string">"author"</span>:<span class="string">"Author"</span>&#125;]</span><br><span class="line">$ curl http://localhost:8080/fbook/5b39474daaac8a7c67f94368</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"5b39474daaac8a7c67f94368"</span>,<span class="string">"title"</span>:<span class="string">"Book 2"</span>,<span class="string">"author"</span>:<span class="string">"Author"</span>&#125;</span><br><span class="line">$ curl --header <span class="string">"Content-Type: application/json"</span> --request DELETE http://localhost:8080/fbook/5b39474daaac8a7c67f94368</span><br><span class="line">$ curl http://localhost:8080/fbooks</span><br><span class="line">[&#123;<span class="string">"id"</span>:<span class="string">"5b394748aaac8a7c67f94367"</span>,<span class="string">"title"</span>:<span class="string">"Book 1"</span>,<span class="string">"author"</span>:<span class="string">"Author"</span>&#125;]</span><br></pre></td></tr></table></figure></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Spring WebFlux is Spring’s reactive web framework that uses the Reactor library to asynchronously manage web requests. I start this article by reviewing reactive systems and the Reactive Streaming API, and described the problems they’re designed to solve. I then showd you two ways to create a Spring WebFlux application: the tradition-based approach and the fuctnional approach. Spring WebFlux was introduced in Spring framework 5, and is new to the Spring ecosystem. It will undoubtedly continue to evolve. Still, it is already a powerful framework and library very scalable reactive web applications.</p>]]></content>
      
      
      <categories>
          
          <category> JavaWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> The Spring Series </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Series Part 2, Spring MVC</title>
      <link href="/2020/04/19/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Spring%20Series%20Part%202,%20Spring%20MVC/"/>
      <url>/2020/04/19/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Spring%20Series%20Part%202,%20Spring%20MVC/</url>
      
        <content type="html"><![CDATA[<p>Spring MVC is the Spring framework’s traditional library for building Java Web applications. It is one of the most popular web frameworks for building fully functional Java web applications and RESTful web services. In this tutorial, you’ll get an overview of Spring MVC and learn how to build Java Web applications using Spring Boot, Spring Initializr, and Thymeleaf.</p><h2 id="Spring-Boot-with-Spring-Initializr"><a href="#Spring-Boot-with-Spring-Initializr" class="headerlink" title="Spring Boot with Spring Initializr"></a>Spring Boot with Spring Initializr</h2><p>We’ll fastrack our Spring MVC web application with the help of Spring Boot and Spring Initializr. Given input for the type of application to be built, Spring Initializr uses the most common dependencies and defaults to setup and configure a baisc Spring Boot application. You can also add custom dependencies and Spring Initializr will include and manage them, ensuring version compatibility with both third-party software and Spring. Spring Boot applications run standalone, without requiring you to provide a runtime environment.</p><p>In this case, since we’re building a web application, Spring Boot will automatically include and configure Tomcat as part of the app’s runtime. We can also customize the app by adding an H2 database driver to our Maven POM file. Spring Boot will then automatically create an embedded database and DataSource instance in the application context. Once the dependencies are set, Spring Boot will provide default configurations fro the application. Of course we can change the configurations if we want to, but thanks to Spring Boot we hava a headstart: a fully configured, working application right out of the box.</p><p>once we’ve selected and configured our dependencies, we’ll pass those selections to Spring Initializr, which will provide a downloadable ZIP file containing a base Spring Boot project.</p><h2 id="Spring-MBC-with-H2-database-engine"><a href="#Spring-MBC-with-H2-database-engine" class="headerlink" title="Spring MBC with H2 database engine"></a>Spring MBC with H2 database engine</h2><p>We’ll start by creating a basic Spring MVC web application that persists data to an H2 embedded database.</p><h3 id="Step-1-Setup-adn-configure-the-app"><a href="#Step-1-Setup-adn-configure-the-app" class="headerlink" title="Step 1. Setup adn configure the app"></a>Step 1. Setup adn configure the app</h3><p>Navigate to Spring Initializr at start.spring.io and select Generate a Maven Project with java and Spring Boot 2.0.X, where X is the latest Spring Boot version (2.0.3 at time of this writing). Make sure you select Spring Boot 2.x so that you can implement Spring Web MVC 5. Spring Boot 1.4 and Spring Boot 1.5 will implement Spring 4.</p><p>Enter a group name the format matching your web address, such as com.geekcap.javaworld, and enter an artifact name, such as spring5mvc-example. Figure 1 shows you my configuration.</p><p><img src="001.jpg" alt="Figure 1. Configure for Spring Initializr"></p><p>To add dependencies to the web app, you may either enter a comma-separated list of dependencies into the <strong>Search for dependencies</strong> text field or click on <strong>Switch to the full version</strong>. We’ll take the easier route by clicking on <strong>Switch to the full version</strong>. The dependencies are divided into groups, such as Core, Web, and Template Engines. For this example, select the checkboxes for: <strong>Web —&gt; Web, Template Engines —&gt; Thymeleaf, SQL —&gt; JPA, and SQL —&gt; H2</strong>. Here’s what each of those selections will add to the application:</p><ul><li>Web: Spring MVC and Tomcat</li><li>Thymeleaf: Thymeleaf web template engine</li><li>JPA: Spring JPA, Hibernate, and Spring Data</li><li>H2: The H2 embedded database</li></ul><p>When you’re finished, click the Generate Project button at the bottom of page. Spring Initializr will create a readymade ZIP file with all the required project sources, which you can download.</p><h3 id="Step-2-Import-the-Spring-Initializr-project-to-Your-IDE"><a href="#Step-2-Import-the-Spring-Initializr-project-to-Your-IDE" class="headerlink" title="Step 2. Import the Spring Initializr project to Your IDE"></a>Step 2. Import the Spring Initializr project to Your IDE</h3><p>Extract the ZIP file from Spring Initializr, then import the project into your favorite IDE. For example, to import the project into IntelliJ, choose <strong>File —&gt; New Project</strong>, as shown in Figure 2.</p><p><img src="002.jpg" alt="Figure 2. Importing the project into IntelliJ"></p><h3 id="Step-3-Setup-your-Maven-POM"><a href="#Step-3-Setup-your-Maven-POM" class="headerlink" title="Step 3. Setup your Maven POM"></a>Step 3. Setup your Maven POM</h3><p>Next, navigate to <strong>Import project from external module</strong>, choose <strong>Maven</strong>, and press <strong>Next</strong>. Be sure to choose a Java 1.8 project SDK, then hit <strong>Finish</strong>.</p><h2 id="The-Spring-Boot-starter-app"><a href="#The-Spring-Boot-starter-app" class="headerlink" title="The Spring Boot starter app"></a>The Spring Boot starter app</h2><p>now let’s take a look at the Spring Boot starter application that has been generated by our (minimal) efforts so far.</p><p>To start, Listing 1 shows the Maven POM file.</p><h3 id="Listing-1-Maven-pom-xml"><a href="#Listing-1-Maven-pom-xml" class="headerlink" title="Listing 1. Maven pom.xml"></a>Listing 1. Maven pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.geekcap.javaworld<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring5mvc-example<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>spring5mvc-example<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Notice that the POM file uses a special parent POM: spring-boot-starter-parent. We’ll use the parent POM to manage the versions of all our dependencies and ensure versions are compatible. The repositories at the end of the POM file reference teh Spring <strong>snapshot</strong> and <strong>milestone</strong> repositories. We need these because Spring Boot 2.x is still a milestone release at the time of this writing.</p><p>The dependencies are quite minimal, and most are prefaced with spring-boot-starter:</p><ul><li>spring-boot-starter-data-jpa</li><li>spring-boot-starter-thymeleaf</li><li>spring-boot-starter-web</li><li>spring-boot-starter-test</li></ul><p>Each of these starter dependencies brings in all of the sub-dependencies it needs. Figure 3 shows the partially expanded dependency view in IntelliJ.</p><p><img src="003.jpg" alt="Figure 3. Spring starter project dependencies"></p><p>The POM file includes the following dependencies:</p><ul><li>spring-boot-starter-data-jpa includes Hibernate and Spring Data</li><li>spring-boot-starter-thymeleaf includes the Thymeleaf template engine</li><li>spring-boot-starter-web includes spring-boot-starter-tomcat, an embedded version of Apache Tomcat</li><li>spring-boot-starter-json includes the Jackson JSON libraries</li><li>spring-web and spring-webmvc includes Spring MVC</li><li>spring-boot-starter-test includes testing libraries such as JUnit and Mockito</li></ul><p>When Spring Boot sees these dependencies in the CLASSPATH, it initiates automatic configuration. For example, when it find spring-boot-starter-web, it creates an embedded version of Tomcat, and when if finds H2 and spring-boot-starter-jpa it creates an H2 embedded database and a Hibernate EntityManager. It then wires the EntityManager into Spring Data.</p><p>Spring Boot also creates a single class that can be used to run the application. The class for the example application is shown in Listing 2.</p><h3 id="Listing-2-SpringExampleApplication"><a href="#Listing-2-SpringExampleApplication" class="headerlink" title="Listing 2. SpringExampleApplication"></a>Listing 2. SpringExampleApplication</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Spring5mvcExampleApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Spring5mvcExampleApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The class leverages the <code>SpringApplication.run()</code> method, passing in the class to run (Spring5mvcExampleApplication in this exmaple). The @SpringBootApplication annotation includes the following annotations:</p><ul><li>@Configuration informs Spring that the Spring2mvcExample class contains configuration information. (This annotation can be used to create beans that will get registered with the Spring context.)</li><li>@EnableAutoConfiguration tells Spring to automatically configure resources from dependencies found in the CLASSPATH, such as H2 and Tomcat</li><li>ComponentScan tells Spring to can packages in the CLASSPATH under the current package (com.geekcap.javaworld.spring5mvcexample) for Spring annotated components such as @Service and @Controller</li></ul><p>Spring scans the CLASSPATH and automatically creates components such as the embeded Tomcat server and H2 database. It then populates the Spring context with the application components found in the package scan. In essence, Spring Boot makes it very easy to select and configure the services, components, controllers, entities, and so forth that you need for your application. Once you’ve done that, Spring will automatically find them, make them available in the Spring context, and autowire everthing together.</p><p>We’ve got our Spring Boot starter project setup and ready to go. In the next section we’ll create the Spring MVC components for our Java Web application.</p><blockquote><p>What is the Spring context?<br>The Spring context is a registry of all available Spring beans. Classes are identified as Spring beans by annotating them with specific Spring annotations. Examples include @Service, which identifies a business service, @Controller, which identifies a Spring MVC controller (i.e., handles web requests), and @Entity, which is a JPA annotation used to identify classes that are mapped to database tables.</p><p>Once these beans are annotated they need to be registered with the Spring context, which Spring Boot does by performing a package scan of all classes in packages in your project. As the Spring context is being built, it implements the <strong>inversion-of-control (IoC) design pattern</strong> through dependency injection: when a Spring bean needs a dependency, such as a service or repository, the bean can either define a constructor that accepts the dependent bean or it can leverage the @Autowired annotation to tell Spring that it needs that dependency. Spring resolves all dependencies and “autowires” the application together.</p><p>Dependency Injection is a powerful design pattern because, rather than creating and managing dependencies inside your code — which can be messy and leads to tightly coupled classes — you can instead delegate control to the Spring container. Your class simply tells the container what dependencies it needs to run and the container provides the appropriate dependencies to your class at runtime.</p></blockquote><h2 id="About-Spring-MVC-5"><a href="#About-Spring-MVC-5" class="headerlink" title="About Spring MVC 5"></a>About Spring MVC 5</h2><p>Spring MVC implements the poluar Model-View-Controller pattern, which you’ve probably seen in other web framework. The Model-View-Controller pattern separates concerns into the categories:</p><ul><li>Model represents your domain object</li><li>View renders your model tp a view, such as to an HTML page</li><li>Controller sits between your view and model and translates change requests in the view into changes in the model, and vice versa. In practical terms, the controller accepts incoming requests, potentially updates the model, and send your model objects to a “view” to render back to the client</li></ul><p>In Spring MVC, controllers are identified by the @Controller annotation and accompanied by a @Requestmapping annotation. The annotation defines the HTTP verb (standard HTTP commands like GET, POST, PUT, and DELELE) and URI for which the request-mapping method will be applied. Spring 4 introduced shortcut request mappings, which make things even easier. We’ll use these mappings — @GetMapping, @PostMapping, @PutMapping, @PatchMapping, and @DeleteMapping — for our example appliation.</p><h2 id="The-model-in-Spring-MVC"><a href="#The-model-in-Spring-MVC" class="headerlink" title="The model in Spring MVC"></a>The model in Spring MVC</h2><p>For our application, we’ll define a simple model object, a Widget, store it in an embeded H2 database, and build a controller to menage widgets. Let’s start with the Widget class, which is shown in Listing 3.</p><h3 id="Listing-3-Widget"><a href="#Listing-3-Widget" class="headerlink" title="Listing 3. Widget"></a>Listing 3. Widget</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Widget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Widget</span><span class="params">(Long id, String name, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The widget class in a plain old Java object (POJO) that is annotated with JPA (Java Persistence API) annotations. In this case there are three annotations:</p><ul><li><strong>@Entity</strong> identifies Widget as an entity that can be persisted to a database</li><li><strong>@Id</strong> identifies the <strong>id</strong> field as the primary key of the entity</li><li><strong>@GeneratedValue</strong> tells the JPA <strong>EntityManager</strong> that the key should be automatically generated in the database</li></ul><p>Note that <strong>EntityManager</strong> is created automatically for us because we included JPA in the Spring Initializr.</p><p>The <strong>Widget</strong> class manages three fields:</p><ul><li><strong>id</strong> is the ID, or primary key of the widget</li><li><strong>name</strong> is the name of the widget</li><li><strong>description</strong> is a description of the widget</li></ul><p>To persist widgets to and from our embedded (内嵌) database, we need to leverage (施加影响) Spring Data. Basically, we’ll define an interface that extends one of Spring Data’s interfaces, such as <strong>CrudRepository</strong>, and Spring Data will provide an implementation of that interface as runtime.</p><p>The <strong>CrudRepository</strong> interface includes the following methods:</p><ul><li><strong>findById</strong> finds the entity in the database with the specified ID</li><li><strong>findAll</strong> returns all entities of the repository type from the database (note that there are other Spring Data repository interfaces, such as <strong>PagingAndSortingRepository</strong>, that can help manage larger data sets)</li><li><strong>findAllById</strong> passed a collection of IDs, this method returns all entities for those IDs</li><li><strong>save</strong> persists an entity to the database (create or update)</li><li><strong>saveAll</strong> saves a collection of entities to the database</li><li><strong>delete</strong> deletes the specifies entity</li><li><strong>deleteById</strong> deletes the entity with the specified ID</li><li><strong>deleteAll</strong> delete all entities managed by the repository</li><li><strong>count</strong> returns the number of entities that are in the database</li><li><strong>existsById</strong> returns true if an entity with the specified ID exists in the database</li></ul><p>For our example, we’ll create a <strong>WidgetRepository</strong> interface that extends <strong>CrudRepository</strong>, as shown in Listing 4.</p><h3 id="Listing-4-WidgetRepository"><a href="#Listing-4-WidgetRepository" class="headerlink" title="Listing 4. WidgetRepository"></a>Listing 4. WidgetRepository</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WidgetRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Widget</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <strong>WidgetRepository</strong> allows us to perform all create, read, upadte, and delete (CRUD) operations on widgets. The two parameters passed to the <strong>CrudRepository</strong> are <strong>Widget</strong>, which represents the type of entity that the repository manages, and <strong>Long</strong>, which is the type of the primary key for the <strong>Widget</strong> entity. (This is a simple implementation) that scratches the surface of what you can do with Spring Data. I encourage you to learn more about this useful Spring project.)</p><h2 id="The-Controller-in-Spring-MVC"><a href="#The-Controller-in-Spring-MVC" class="headerlink" title="The Controller in Spring MVC"></a>The Controller in Spring MVC</h2><p>With our <strong>Widget</strong> entity and <strong>WidgetRepository</strong> in hand, we’re ready to build a controller. Listing 5 shows the source code for the <strong>WidgetController</strong>.</p><h3 id="Listing-5-WidgetController"><a href="#Listing-5-WidgetController" class="headerlink" title="Listing 5. WidgetController"></a>Listing 5. WidgetController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WidgetController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WidgetRepository widgetRepository;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Load the new widget page.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/widget/new"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">newWidget</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"widget"</span>, <span class="keyword">new</span> Widget());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"widgetform"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new widget.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> widget</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/widget"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createWidget</span><span class="params">(Widget widget, Model model)</span> </span>&#123;</span><br><span class="line">        widgetRepository.save(widget);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/widget/"</span> + widget.getId();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get a widget by ID.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/widget/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWidgetById</span><span class="params">(@PathVariable Long id, Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"widget"</span>, widgetRepository.findById(id).orElse(<span class="keyword">new</span> Widget()));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"widget"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get all widgets.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/widgets"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWidgets</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"widgets"</span>, widgetRepository.findAll());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"widgets"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Load the edit widget page for the widget with the specified ID.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/widget/edit/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">editWidget</span><span class="params">(@PathVariable Long id, Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"widget"</span>, widgetRepository.findById(id).orElse(<span class="keyword">new</span> Widget()));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"widgetform"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Update a widget.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> widget</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/widget/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateWidget</span><span class="params">(Widget widget)</span> </span>&#123;</span><br><span class="line">        widgetRepository.save(widget);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/widget/"</span> + widget.getId();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Delete a widget by ID.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/widget/delete/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteWidget</span><span class="params">(@PathVariable  Long id)</span> </span>&#123;</span><br><span class="line">        widgetRepository.deleteById(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/widgets"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <strong>WidgetController</strong> is annotated with the <strong>@Controller</strong> annotation. When Spring performs a package can of the classes, it will find the <strong>@Controller</strong> annotation, create an instance of this class, and add it to the Spring context, configured to handle web requests. This <strong>WidgetController</strong> defines a <strong>WidgetRepository</strong> implementation created by Spring Data and automatically wire the repository into the controller.</p><p>The <strong>WidgetController</strong> then difines a set of methods to handle requests, using the <strong>@GetMapping</strong> and <strong>PostMapping</strong> annotations. These annotations accept the URI path that each method is handling, defining the HTTP verb accordingly. Because we are using the Thymeleaf engine, each method returns a String naming the template to render. Templates are stored in <strong>src/main/resources/templates</strong> as HTML files with specific Thymeleaf markup, which is shown below.</p><p>The method that return a direct template name are all passed a <strong>Model</strong> object. The <strong>Model</strong> object implements a Spring UI interface and provides methods to add attributes to the model. These attributes will be made available to the template to be rendered. For example, in the <strong>getWidgetById</strong> method, we retrieve a <strong>Widget</strong> from the database and set it in the <strong>Model</strong> with the key <strong>widget</strong>. The template can then access that <strong>Widget</strong> using the <strong>widget</strong> key.</p><h2 id="Controller-methods-and-the-view-template"><a href="#Controller-methods-and-the-view-template" class="headerlink" title="Controller methods and the view template"></a>Controller methods and the view template</h2><p>Next let’s walk through each <strong>WidgetController</strong> method and its corresponding view template. The homepage for the application is the <strong>/widgets</strong> page, which shows a list of all widgets in the database. The <strong>getWidgets</strong> method retrieves all widgets by calling the <strong>WidgetRepository</strong>‘s <strong>findAll</strong> method, sets it as  the <strong>widgets</strong> attribute in the model, and returns <strong>widgets</strong>. Listing 6 shows the <strong>widgets.html</strong> tempalte file.</p><h3 id="Listing-6-widgets-html"><a href="#Listing-6-widgets-html" class="headerlink" title="Listing 6. widgets.html"></a>Listing 6. widgets.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Widgets<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../static/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;css/bootstrap.min.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Widgets<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>View<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"widget : $&#123;widgets&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;widget.id&#125;"</span>&gt;</span>Widget ID<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;widget.name&#125;"</span>&gt;</span>Widget Name<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;widget.description&#125;"</span>&gt;</span>Widget Description<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:href</span>=<span class="string">"$&#123;'/widget/' + widget.id&#125;"</span>&gt;</span>View<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:href</span>=<span class="string">"$&#123;'/widget/edit/' + widget.id&#125;"</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:href</span>=<span class="string">"$&#123;'/widget/delete/' + widget.id&#125;"</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"$&#123;'/widget/new'&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>New<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.2.1.slim.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../static/js/bootstrap.min.js"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;js/bootstrap.min.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Thymeleaf templates are HTML files that import the <strong><a href="http://www.thymeleaf.org">http://www.thymeleaf.org</a></strong> XML namespace, as seen in the <strong>html</strong> tag. With this namespace include (as <strong>th</strong>), Thymeleaf allows us to add tags to existing HTML elements. This enables you to create and style your HTML files without running your application in Tomcat.</p><p>For this example, we’ve added the Twitter Bootstrap library, which makes it eaiser to create a nice layout. Rather than constantly restarting Tomcat to view pages, this lets us build the page using an editor, then render the page in a browser. In order to work with your JavaScript and CSS lacally you also need to include the JavaScript <strong>href</strong> and script source <strong>src</strong> values that point to your relative CSS and JavaScript files, respectively. The <strong>th:href</strong> and <strong>th:src</strong> attributes will be resolved to actual URI paths by Thymeleaf in a live application, and will overwrite the <strong>href</strong> and <strong>src</strong> attribute values when the page is rendered.</p><p>The HTML file in Listing 6 contains a table that shows a summary of each widget, with buttons to view the details of a widget, edit a widget, or delete a widget. We use the model to pass in a collection of widgets, and we access those by adding the <strong>th:each</strong> attribute of the <strong>tr</strong> (table row) tag, where <strong>th:each</strong> is Thymeleaf’s implementation of a <strong>for-each</strong> contruct. This will create one row for each item in our collection. The <strong>th:each</strong> attribute is passed the value <strong>widget : ${widgets}</strong>. This retrieves the “widgets” collection from the model and assigns each widget to a local variable, “widget”, that will be used inside the row. We can then extract values from the widget using the <strong>${widget.propertyName}</strong> syntax.</p><p>For the first three rows, we include the <strong>th:text</strong> attribute in each table cell (<strong>td</strong>), extracting fields from the widget. For the last three rows, we add hyperlink to our other controller URIs:</p><ul><li><strong>/widget/{id}</strong> shows the widget with the specified ID</li><li><strong>/widget/edit/{id}</strong> shows the widget with the specified ID in an editable form</li><li><strong>/widget/delete/{id}</strong> deletes the widget with the specified ID, then shows the updated list of widgets</li></ul><p>The bottom of the page adds a <strong>New</strong> button that allows the user to create a new widget. Widgets are created through the <strong>/widget/new</strong> URL and presented in the same form as the <strong>/widget/edit/{id}</strong> URI.</p><p>Figure 4 shows a screenshot of the widget list page.</p><p><img src="004.jpg" alt="Figure 4. Widget list page"></p><p>When the user presses the <strong>View</strong> button, the <strong>getWidgetById</strong> method is called:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/widget/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getWidgetById</span><span class="params">(@PathVariable Long id, Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"widget"</span>, widgetRepository.findById(id).orElse(<span class="keyword">new</span> Widget()));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"widget"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The method is mapped to a GET request for <strong>/widget/{id}</strong> and the <strong>id</strong> is extracted using the <strong>@PathVariable</strong> annotation. If you have multiple variables in your path, you can include them using the <strong>@PathVariable</strong> annotation with a variable name that matches the path variable name. In this case, the <strong>getWidgetById</strong> method retrieves the widget with the specified ID from the <strong>widgetRepository</strong>, then assigns it to the model’s “widget” property.</p><p>You might have noted that the <strong>WidgetReporitory.findById</strong> method returns an <code>Optional</code>s in Java wrap objects: if the object is persent then you can retrieve it using the <strong>get()</strong> method; if the object is not present then the <strong>Optional</strong> will be equal to <strong>Optional.emtry()</strong>. You can determine if the result has an object by calling the <strong>isPresent()</strong> method. Alternatively, as I did in this case, you could leverage the <strong>orElse()</strong> method, which returns the object if it is present. Otherwise, it returns the widget created inside the <strong>orElse</strong> method. In a production application you would want to return a valid widget or return an error page. For now, we can simply return an emptry widget. Finally, this method returns “widget”, which tells Spring MVC to render this <strong>Widget</strong> using the “widget.html” template, shown in Listing 7.</p><h3 id="Listing-7-widget-html"><a href="#Listing-7-widget-html" class="headerlink" title="Listing 7. widget.html"></a>Listing 7. widget.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Widget Details<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../static/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/bootstrap.min.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:href</span>=<span class="string">"$&#123;'/widgets'&#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Widget Details<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>ID:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"form-control-static"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;widget.id&#125;"</span>&gt;</span>Widget ID<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"form-control-static"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;widget.name&#125;"</span>&gt;</span>Widget Name<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Description:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"form-control-static"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;widget.description&#125;"</span>&gt;</span>Widget Description<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-2 col-sm-10"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">th:href</span>=<span class="string">"$&#123;'/widget/edit/' + widget.id&#125;"</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.2.1.slim.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../static/js/bootstrap.min.js"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/bootstrap.min.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Aside from the Bootstrap markup, this HTML file shows the three widget fields in paragraph elements using the <strong>th:text</strong> Thymeleaf attribute with the <strong>${widget.propertyName}</strong> notation. If you are not familiar with Bootstrap, don’t let the form trick you into thinking this a a proper HTML form that accepts fields; it js just a layout paradigm. </p><p>The only other two things I added are:</p><ul><li>A breadcrumb that allows the user to naviagate back to the homepage (widget list), using an anchor tag with the <strong>th:href</strong> attribute that points to the <strong>/widgets</strong> page</li><li>A button (disguised as an anchor tag but render as a button using the Bootstrap class <strong>btn btn-default</strong> CSS) with a <strong>th:href</strong> attribute pointing to <strong>${‘/widget/edit’ + widget.id}</strong>. This notation performs a <strong>String</strong> concatenation of <strong>/widget/edit</strong> with the ID of the widget, resulting in something like <strong>/widget/edit/1</strong>.</li></ul><p>An example of this apge is shown in Figure 5.</p><p><img src="005.jpg" alt="Figure 5. Widget edit page"></p><p>If the user presses the <strong>Edit</strong> button, the <strong>editWidget</strong> method is called:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/widget/edit/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editWidget</span><span class="params">(@PathVariable Long id, Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"widget"</span>, widgetRepository.findById(id).orElse(<span class="keyword">new</span> Widget()));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"widgetform"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This method maps to the <strong>/widget/edit/{id}</strong> URI, retrieves the widget from the database, sets it an the model’s “widget” attribute, and tells Spring to render it using the “widgetform.html” Thymeleaf, shown in Listing 8.</p><h3 id="Listing-8-widgetform-html"><a href="#Listing-8-widgetform-html" class="headerlink" title="Listing 8. widgetform.html"></a>Listing 8. widgetform.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Create/Edit Widget<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../static/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/bootstrap.min.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Create / Edit Widget<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:object</span>=<span class="string">"$&#123;widget&#125;"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/widget&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;id&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;name&#125;"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;description&#125;"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Description"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.2.1.slim.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../static/js/bootstrap.min.js"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/bootstrap.min.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The template introduces a proper Thymeleaf form. To build a form with Thymeleaf, you specify the object that the form is operation on, using the <strong>th:object</strong> attribute of the <strong>form</strong>, and then you can access that object’s properties using <strong>th:field</strong> attribute in form elements. These field attributes are accessed using the <strong>*{propertyName}</strong> notation, which refers back to the form’s object. In this example, we define a hidden text field to hold the ID (we don’t want the user changing the primary key in the database) and we aa the name and description fields. At the end of the document we add a submit button, which submits the form to the <strong>th:action</strong>, which points to <strong>@{/widget}</strong>. Notice that we use the <strong>@</strong> symbol to reference and the <strong>$</strong> symbol to reference model objects.</p><p>We are able to leverage the “widgetform” for both creating new Widgets adn editing existing Widgets by adding an empty <strong>Widget</strong> object in the <strong>newWidget</strong> method:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/widget/new"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">newWidget</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"widget"</span>, <span class="keyword">new</span> Widget());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"widgetform"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Because we pass an empty <strong>Widget</strong> object through the “widget” model attribute, the form will not fail if a Widget is not present. This allows us to reuse the same form both for creating and editing widgets.</p><p>Now that we have our controller and templates definded, we’re ready to run the application. To run a Spring Boot application, execute the following Maven command:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn spring-boot:run</span><br></pre></td></tr></table></figure></p><p>You should see Spring start Tomcat, create an embedded H2 database with the name <strong>testdb</strong> and then show a summary of the URI mappings for your <strong>Widgetontroller</strong>.</p><p>To see your application in action, open a browser to the following URL:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/widgets</span><br></pre></td></tr></table></figure></p><p>When you are ready to release and run your application in production, you can build your project with then standard <strong>mvn clean install</strong> and then run the resultan executable JAR file:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br><span class="line">java -jar target/spring5mvc-example-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Spring MVC is the traditional Spring framework library for building Java web applications. This article introduced you to Spring MVC web developement using Spring Boot, Spring initializr, and the Thymeleaf view rendering engine.</p>]]></content>
      
      
      <categories>
          
          <category> JavaWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> The Spring Series </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Series Part 1, What is Spring</title>
      <link href="/2020/04/19/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Spring%20Series%20Part%201,%20What%20is%20Spring/"/>
      <url>/2020/04/19/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Spring%20Series%20Part%201,%20What%20is%20Spring/</url>
      
        <content type="html"><![CDATA[<p>Spring is perhaps the best of the compoment-based frameworks that emerged (出现) at the turn of the 21st century. It vastly improves the way that developers write and deliver infrastructure code in Java-based applications. Since it inception (开端), Spring has been recognized as a leading framework for enterprise Java development. As an end-to-end application framework, Spring mirrors some of the Java EE capabilities, but it offers a combination (结合) of features and programming conventions (约定) you won’t find elsewhere.</p><p>This article introduces Spring and its core programming philosophy (理念) and methodology (方法论): Inverstion of control and dependency injection. You’ll also get started with Spring annotations and a couple of hands-on coding examples.</p><h2 id="Dependency-injection-and-inversion-of-control"><a href="#Dependency-injection-and-inversion-of-control" class="headerlink" title="Dependency injection and inversion of control"></a>Dependency injection and inversion of control</h2><p>Spring’s core idea is that instead of managing object relationships yourself, you offload them to the framework. Inversion of control (IOC) is the methodology used to manage object relationships. Dependency injection is the machanism (机制) for implementing IOC. Since these two concepts are related but different, let’s consider them more closely:</p><ul><li><strong>Inversion of control (IOC)</strong> does jsut what its name says: it inverst the traditional hierarchy of control for fulfilling object relationships. Instead of relying on application code to define how objects relate to each other, relationships are definded by the framework. As a methodology, IOC introduces consistency and predictability to object relations, but it does require you, as the developer, to give up some fine-grained control.</li><li><strong>Dependency injection (DI)</strong> is a machanism where the framework “injects” dependencies into your app. It’s the practial implementation of IOC. Dependency injection hinges (关键) on polymorphism (多态性), in the sense that it allows the fulfillment (满足) of a reference type to change based on configurations in the framework. The framework injects variable references rather than having them manually fulfilled in application code.</li></ul><blockquote><p>JSR-330<br>Like much in the Java world, what began as an in-the-wild innovation, Spring, has been in part absorbed by standard specification. In this case, JSR-330 is the Java standard. This nice thing about the JSR-330 spec is you can use it elsewhere, and will see it in use elsewhere, beyond Spring. You can use it without using Spring. However, Spring brings a whole lot more to the table.</p></blockquote><h2 id="Example-1-Spring-dependency-injection"><a href="#Example-1-Spring-dependency-injection" class="headerlink" title="Example 1: Spring dependency injection"></a>Example 1: Spring dependency injection</h2><p>Inversion of control and dependency injection are best understood by using them, so we’ll start with a quick programming example.</p><p>Say you’re modelling a car. If you’re modeling in plain old Java, you might have an interface member on the Car class to reference an Engine interface, as shown in Listing 1.</p><h3 id="Listing-1-Object-relations-in-plain-old-Java"><a href="#Listing-1-Object-relations-in-plain-old-Java" class="headerlink" title="Listing 1. Object relations in plain old Java"></a>Listing 1. Object relations in plain old Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Engine <span class="title">getEngine</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(Engine engine)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 1 contains an interface for an Engine type, and a class for the concrete Car type, Which references the Engine. (Note that in a real programming scenario these would be in separate files.) Now you’re creating a Car instance, you’d set the association as shown in Listing 2.</p><h3 id="Listing-2-Creating-a-Car-with-the-Engine-interface"><a href="#Listing-2-Creating-a-Car-with-the-Engine-interface" class="headerlink" title="Listing 2. Creating a Car with the Engine interface"></a>Listing 2. Creating a Car with the Engine interface</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">Car newCar = <span class="keyword">new</span> Car();</span><br><span class="line">Engine sixCylEngine = <span class="keyword">new</span> InlineSixCylinderEngine();</span><br><span class="line">newCar.setEngine(sixCylEngine);</span><br><span class="line"><span class="comment">// do stuff with the car</span></span><br></pre></td></tr></table></figure><p>Note that you create the Car object first. You then create a new object that fulfills the Engine interface, and assign it manually to the Car object. That is how object associations work in plain old Java.</p><h2 id="Modeling-classes-and-objects-in-Spring"><a href="#Modeling-classes-and-objects-in-Spring" class="headerlink" title="Modeling classes and objects in Spring"></a>Modeling classes and objects in Spring</h2><p>Now let’s look at the same example in Spring. Here, you could do something like what’s shown in Listing 3. You start with the Car class, but in this case you add an annotation to it: <code>@Inject</code>.</p><h3 id="Listing-3-Example-of-using-the-Inject-annotation-in-Spring"><a href="#Listing-3-Example-of-using-the-Inject-annotation-in-Spring" class="headerlink" title="Listing 3. Example of using the @Inject annotation in Spring"></a>Listing 3. Example of using the @Inject annotation in Spring</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using the <code>@Inject</code> annotation (or <code>@Autowired</code>, if you prefer) tells Spring to search the context and automatically inject an object into the reference, based on a set of rules.</p><p>Next, consider the <code>@Component</code> annotation, shown in Listing 4.</p><h3 id="Listing-4-Component-annotation"><a href="#Listing-4-Component-annotation" class="headerlink" title="Listing 4. @Component annotation"></a>Listing 4. @Component annotation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InlineSixCylinderEngine</span> <span class="keyword">implements</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Annotation a class with <code>@Component</code> tells Spring that it is available for fulfilling injections. In this case, the InlineSixCyEngine would be injected because it is availalbe and satisfies the interface requirement of the association. In Spring, this is called an “autowired” injection. (See below for more about Spring’s <code>@Autowired</code> annotation.)</p><h2 id="Decoupling-解耦-as-a-design-principle"><a href="#Decoupling-解耦-as-a-design-principle" class="headerlink" title="Decoupling (解耦) as a design principle"></a>Decoupling (解耦) as a design principle</h2><p>Inversion of control with dependency injection removes a source of concrete dependency from your code. Nowhere in the program is there a hard-codede reference to the Engine implementation. This is an example of decoupling as a software design principle. Decoupling application code from implementation makes your code easier to manage and maintain. The application knows less about how its parts fit together, but it’s much eaiser to make changes at any point in the application lifecycle.</p><blockquote><p>@Autowired vs @Inject<br>@Autowired and @Inject do the same thing. However, @Inject is the Java standard annotation, whereas @Autowired is specific to Spring. They both serve the same purpose of telling the DI engine to inject the field or method with a matching object. You can use either one in Spring.</p></blockquote><h2 id="Overview-of-the-Spring-framework"><a href="#Overview-of-the-Spring-framework" class="headerlink" title="Overview of the Spring framework"></a>Overview of the Spring framework</h2><p>Now that you’ve seen some Spring code, let’s take an overview of the framework and its components. As you can see, the framework consists of four main modules, which are broken into packages. Spring gives you a fair amount of flexibility with the modules you’ll use: </p><ul><li>Core container<ul><li>Core</li><li>Bean</li><li>Context</li><li>Expression Language</li></ul></li><li>Aspect-oriented programming (AOP)<ul><li>AOP</li><li>Aspects</li><li>Instrumentation</li></ul></li><li>Data access and integration<ul><li>JDBC</li><li>JPA/ORM</li><li>JMS</li><li>Transactions</li></ul></li><li>Web<ul><li>Web/REST</li><li>Servlet</li><li>Struts</li></ul></li></ul><p>Rather than cover everthing here, let’s get started with two of the more commonly used Spring features.</p><h2 id="Starting-up-a-new-project-Spring-Boot"><a href="#Starting-up-a-new-project-Spring-Boot" class="headerlink" title="Starting up a new project: Spring Boot"></a>Starting up a new project: Spring Boot</h2><p>We’ll use Spring Boot to create an example project, which we’ll use to demo Spring features. Spring Boot makes starting new projects much easier, as you’ll seee for yourself. To begin, take a look at the main class shown below. In Spring Boot, we can take a main class with a <code>main()</code> method, and then choose to run it standalone, or package for deployment in a container like Tomcat.</p><h3 id="Listing-5-Main-class-with-Spring-Boot"><a href="#Listing-5-Main-class-with-Spring-Boot" class="headerlink" title="Listing 5. Main class with Spring Boot"></a>Listing 5. Main class with Spring Boot</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">pulbic <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note two things about the above code: First, all of the work is abstracted into the framework. The main class boots up the app, but it doesn’t konw anything about how the app works or delivers its functionality. Second, the <code>SpringApplication.run()</code> does the actual job of booting the app and passing in the Application class itself. Again, the work the app does is not apparent here.</p><p>The <code>@SpringBootApplication</code> annotation wraps up a few standard annotations and tells Spring to look at the package where the main calss exists for components. In our previous example, with the car and engine, this would allow Spring to find all classes annotated with <code>@Component</code> and <code>@Inject</code>. The process itself, called component scanning, is highly customizable.</p><p>You can build the app with the standard <code>mvn clane install</code>, and you can run it with the Spring Boot goal (<code>mvn spring-boot:run</code>). Before doing that, let’s look at this application’s pom.xml file.</p><h3 id="Listing-6-Starter-pom-xml"><a href="#Listing-6-Starter-pom-xml" class="headerlink" title="Listing 6. Starter pom.xml"></a>Listing 6. Starter pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.javaworld<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>what-is-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Note two important features in the above code:</p><ol><li>The partent element relies on the spring-boot-starter-parent proejct. This parent proejct defines a number of useful defaults, such as the default compiler level of JDK 1.8. For the most part, you can just trust that it knows what it’s doing. As an example, you can omit the version number for many common dependencies, and SpringBootParent will set the versions to be compatible. When you bump up the parent’s version number, the dependency versions and defaults will also change.</li><li>The spring-boot-maven-plugin allows for the executable JAR/WAR packging and in-plcae run (via the <code>mvn spring-boot:run</code> command).</li></ol><h2 id="Adding-Spring-Web-as-a-dependency"><a href="#Adding-Spring-Web-as-a-dependency" class="headerlink" title="Adding Spring Web as a dependency"></a>Adding Spring Web as a dependency</h2><p>So far, we’ve been able to use spring-boot to limit how much work we put in to get an app up and running. Now let’s add a dependency and see how quickly we cacn get something in a broswer.</p><h3 id="Listing-7-Adding-Spring-Web-to-a-project"><a href="#Listing-7-Adding-Spring-Web-to-a-project" class="headerlink" title="Listing 7. Adding Spring Web to a project"></a>Listing 7. Adding Spring Web to a project</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Note<br>Spring will automatically detect what files have changed and compile accordingly. You can just execute <code>mvn spirng-boot:run</code> to pickup changes.</p></blockquote><p>Now that we’ve got a baisc project setup, we’re ready for our two examples.</p><h2 id="Example-2-Building-RESTful-endpoints-with-Spring-Web"><a href="#Example-2-Building-RESTful-endpoints-with-Spring-Web" class="headerlink" title="Example 2. Building RESTful endpoints with Spring Web"></a>Example 2. Building RESTful endpoints with Spring Web</h2><p>We’ve used spring-boot-starter-web to bring in serveral dependencies that are useful for building web applications. Next we’ll create a route handler for a URL path. Spring’s web support is part of the Spring MVC (Model-View-Controller) module, but don’t let that worry you: Spring Web has full and effective support for building RESTful endpoints, as well.</p><p>The class whose job it is to field URL requests is known as a controller, as shown in Listing 8.</p><h3 id="Listing-8-Spring-MVC-Rest-controller"><a href="#Listing-8-Spring-MVC-Rest-controller" class="headerlink" title="Listing 8. Spring MVC Rest controller"></a>Listing 8. Spring MVC Rest controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMethod</span>(value = <span class="string">"/hi"</span>, method = RequestMethod.GET) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hi</span><span class="params">(@RequestParam(name = <span class="string">"name"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">"JavaWorld"</span>)</span> String name, Model model) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-Controller-annotation"><a href="#The-Controller-annotation" class="headerlink" title="The @Controller annotation"></a>The @Controller annotation</h3><p>The @Controller annotation identifies a class as a controller. A class narked as a controller is also automatically identified as a component class, which makes it a candidate for auto-wiring. Wherever this controller is needed, it will be plugged into the framework. In this case, we’ll plug it into the MVC system to handle requests.</p><p>The controller is a specialized kind of component. It support the @RequestMapping and @ResponseBody annotations that you see on the <code>hi()</code> method. These annotations tell the framework how to map URL requests to the app.</p><p>At this point, you can run the app with <code>mvn spring-boot:run</code>. When you hit the <code>/hi</code> URL, you’ll get a response like “Hello JavaWorld”.</p><p>Notice how Spring has taken the basics of autowiring components, and delivered a whole web framework. With Spring, you don’t have to explicitly connect anything togetehr!</p><h3 id="The-Request-annotations"><a href="#The-Request-annotations" class="headerlink" title="The @Request annotations"></a>The @Request annotations</h3><p>The @RequestMapping allows you to define a handler for a URL path. Options include defining the HTTP method you want, which is what we’ve done in this case. Leaving RequestMethod off would instruct the program to handle all HTTP method types.</p><p>The @RequestParam argument annotation allows us to map the request parameters directly into the method signature, including requiring certain params and defining default values as we’ve done here. We can even map a request body to a class with the @RequestBody argument annotation.</p><h3 id="REST-and-JSON-response"><a href="#REST-and-JSON-response" class="headerlink" title="REST and JSON response"></a>REST and JSON response</h3><p>If you are creating a REST endpoint and you want to return JSON from the method, you can annotate the method with @ResponseBody. The response will then be automatically packaged as JSON. In this case you’ll return an object from the method.</p><blockquote><p>Using MVC with Spring Web<br>Similar to Struts, the Spring Web module can easily be used for a true model-view-controller setup. In this case, you would return a mapping in the given templating (like Thymeleaf), and Spring would resolve the mapping, provide the model you pass to it, and render the response. </p></blockquote><h2 id="Example-3-Spring-with-JDBC"><a href="#Example-3-Spring-with-JDBC" class="headerlink" title="Example #3: Spring with JDBC"></a>Example #3: Spring with JDBC</h2><p>Now let’s do something more intertesting with our request hanlder: let’s return some data from a database. For the purpose of this example, we’ll use the H2 database. Thankfully, Spring Boot supports the in-memory H2 DB out of the box.</p><p>You can add the H2 DB to your app by including it in your pom.xml, as shown in Lisinting 9. We’ll also add a dependency to spring-boot-starter-jdbc. This brings in what we need to control JDBC with Spring.</p><h3 id="Listing-9-Adding-a-Maven-dependency-to-the-H2-DB"><a href="#Listing-9-Adding-a-Maven-dependency-to-the-H2-DB" class="headerlink" title="Listing 9. Adding a Maven dependency to the H2 DB"></a>Listing 9. Adding a Maven dependency to the H2 DB</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Next, you’ll want to configure the database. This is done with a spring.database.properties file, which is located in the <code>/resources</code> directory. Listing 10 shows how we can use H2 with the in-memory mode activated.</p><h3 id="Listing-10-H2-in-memory-config"><a href="#Listing-10-H2-in-memory-config" class="headerlink" title="Listing 10. H2 in-memory config"></a>Listing 10. H2 in-memory config</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=org.hsqldb.jdbc.JDBCDriver</span><br><span class="line">url=jdbc:hsqldb:mem:myDb</span><br><span class="line">username=sa</span><br><span class="line">password=sa</span><br></pre></td></tr></table></figure><h3 id="Service-component-classes"><a href="#Service-component-classes" class="headerlink" title="Service component classes"></a>Service component classes</h3><p>Now, we can start using the database. It’s that easy. However, basic software design tells us never to access the data layer via the view layer. In this case, we don’t want to access the JDBC support via the view controller. We need a service component. In Spring Web, we use the @Service annoation to create a service class. Like the @Controller annoation, using the @Service annotation designates a class as a kink of @Component. That means Spring will add it to the DI context, and you can autowire it into your controller.</p><blockquote><p>Annotating components<br>Spring offers a few ways to annotate components. The most baisc way to indicate that a class is available for auto-wriring is via the @Component annotation. The @Service annotation does the same thing, but indicates a specific type of class. You could use the @Bean annotation to designate a method that would serve the purpose of creating a bean to be autowired.</p></blockquote><p>Lising 11 shows a simple Service Component.</p><h3 id="Listing-11-Service-component"><a href="#Listing-11-Service-component" class="headerlink" title="Listing 11. Service component"></a>Listing 11. Service component</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"myService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getGreeting</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hey There"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addSong</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (name.length() &gt; <span class="number">15</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getSongs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ArrayList();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can access the service class from the controller. In listing 12, we’ll injetc it.</p><h3 id="Listing-12-Injetcing-MyService-into-the-controller"><a href="#Listing-12-Injetcing-MyService-into-the-controller" class="headerlink" title="Listing 12. Injetcing MyService into the controller"></a>Listing 12. Injetcing MyService into the controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Inject</span></span><br><span class="line">  <span class="keyword">private</span> MyService myService;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hi"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hi</span><span class="params">(@RequestParam(name=<span class="string">"name"</span>, required=<span class="keyword">false</span>, defaultValue=<span class="string">"JavaWorld"</span>)</span> String name, Model model) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myService.getGreeting() + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now the Controller is makring use of the Service class. Notice how Spring is allowing us to define a layered architecture using the same DI system. We can do the same in defining a data layer that the service class can use, and leverage Spring’s support for a variety of datastores and datastore access approaches at the same time.</p><p>We can annotate our data layer class with @Repository, as seen in Listing 13, and the inject it into the service class. In the same way @Service allowed us to define the service layer, we are now defining the data layer in a decoupled way.</p><h2 id="The-JdbcTemplate-class"><a href="#The-JdbcTemplate-class" class="headerlink" title="The JdbcTemplate class"></a>The JdbcTemplate class</h2><p>The data layer will require more than the service layer, because it will be talking to the database. Spring eases this primarily by providing the JdbcTemplate class.</p><h3 id="Listing-13-Repository-data-class"><a href="#Listing-13-Repository-data-class" class="headerlink" title="Listing 13. Repository data class"></a>Listing 13. Repository data class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataObject</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    jdbcTemplate.execute(<span class="string">"DROP TABLE names IF EXISTS"</span>);</span><br><span class="line">    jdbcTemplate.execute(<span class="string">"CREATE TABLE names("</span>id SERIAL, <span class="function">name <span class="title">VARCHAR</span><span class="params">(<span class="number">255</span>)</span>)")</span>;</span><br><span class="line">    jdbcTemplate.update(<span class="string">"INSERT INTO names (name) VALUES (?)"</span>, name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring will automatically use the in-memory H2 DB we’ve configured. Notice how jdbcTemplate has eliminated all the boilerplate and error-handling code from this class. While this is a simplified example of accessing the database, it gives you an idea of how SPring works both to connect your application layers, and facilitates the use of other required services.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Spring is one of the most advanced and compelete application development framewors for Java, bar none. It makes setting up an application easier, allows you to easily bring in the dependencies you need as the application grows, and is fully capable ofremping up the high-volume, production-grade use.</p><p>It’s tough to argue using Spring in a new Java application. The Spring platform is maintained and advanced with vigor, and virtually any task you might need to undertake is doable with Spring. Using this platform will spare you considerable heavy lifting, and will help ensure your application design is robust and flexible. If you can use Spring to ease your development path, then do it.</p>]]></content>
      
      
      <categories>
          
          <category> JavaWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> The Spring Series </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Doubly-linked lists and circular-linked lists, and their algorithms</title>
      <link href="/2020/04/06/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Doubly-linked%20lists%20and%20circular-linked%20lists,%20and%20their%20algorithms/"/>
      <url>/2020/04/06/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Doubly-linked%20lists%20and%20circular-linked%20lists,%20and%20their%20algorithms/</url>
      
        <content type="html"><![CDATA[<p>While singly-linked lists have many uses, they also present some restrictions (限制). For one thing, singly-linked lists restrict node traversal (遍历) to a single direction: you can’t traverse a singly-linked list backward unless you first reverse its node links, which takes time. If you do a reverse traversal and need to restore node-traversal to the original direction, you will have to repeat the inversion, which takes more time. Singly-linked lists also restrict node deletion. In this type of list, you cannot delete an arbitary node without access to the node’s predecessor (前任).</p><p>Fortunately, Java offers serveral types of list that you can use to search and sort sorted data in your Java programs. This final tutorial in the Data structures and algorithms series introduces searching and sorting with double-linked lists and circular-linked lists. As you’ll see, these two data structure categories build on single-linked lists to offer a wider range of searching and sorting behavior in your Java programs.</p><h2 id="Doubly-linked-lists"><a href="#Doubly-linked-lists" class="headerlink" title="Doubly-linked lists"></a>Doubly-linked lists</h2><p>A doubly-linked list is a linked list of nodes where each node has a pair of link fields. One link field lets you traverse the list in a forward direction, whereas the other node lets you traverse the list in a backward direction. For the forward direction, a reference variable holds a reference to the first node. Each ndoe links to the next node via the “next” link field, except for the last node, whose “next” link field contains the null reference to signify the list’s end (in the forward direction). The backward direction works similalry. A reference variable holds a reference to the forward direction’s last node, which you interpret as the first node. Each node links to the previous node via the “previous” link field. The first node’s “previous” link field contains null to signify the list’s end.</p><p>Try to think of a doubly-linked list  as a pair of singly-linked lists, each interconnecting the same nodes. The diagram in Figure1 shows topForward-referenced and topBackward-referenced singly-linked lists.</p><p><img src="001.jpg" alt="Figure 1. Traversing a doubly-linked list forward and backward"></p><h2 id="CRUD-operations-in-double-linked-lists"><a href="#CRUD-operations-in-double-linked-lists" class="headerlink" title="CRUD operations in double-linked lists"></a>CRUD operations in double-linked lists</h2><p>Creating, inserting, and deleting nodes are all common operations in a doubly-linked list. They’re similar to the operations you learned for singly-linked lists. (Remember that a doubly-linked list is just a pair of singly-linked lists that interconnect the same nodes.) The following pseudocode demonstrates the creation and insertion of nodes into the doubly-linked list shown in Figure 1. The pseudocode also demonstrates node deletion:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">DECLARE CLASS Node</span><br><span class="line">   DECLARE STRING name</span><br><span class="line">   DECLARE Node next</span><br><span class="line">   DECLARE Node prev</span><br><span class="line">END DECLARE</span><br><span class="line">DECLARE Node topForward</span><br><span class="line">DECLARE Node temp</span><br><span class="line">DECLARE Node topBackward</span><br><span class="line">topForward = NEW Node</span><br><span class="line">topForward.name = &quot;A&quot;</span><br><span class="line">temp = NEW Node</span><br><span class="line">temp.name = &quot;B&quot;</span><br><span class="line">topBackward = NEW Node</span><br><span class="line">topBackward.name = &quot;C&quot;</span><br><span class="line">// Create forward singly-linked list</span><br><span class="line">topForward.next = temp</span><br><span class="line">temp.next = topBackward</span><br><span class="line">topBackward.next = NULL</span><br><span class="line">// Create backward singly-linked list</span><br><span class="line">topBackward.prev = temp</span><br><span class="line">temp.prev = topForward</span><br><span class="line">topForward.prev = NULL</span><br><span class="line">// Delete Node B.</span><br><span class="line">temp.prev.next = temp.next; // Bypass Node B in the forward singly-linked list.</span><br><span class="line">temp.next.prev = temp.prev; // Bypass Node B in the backward singly-linked list.</span><br><span class="line">END</span><br></pre></td></tr></table></figure></p><h2 id="Example-application-CRUD-in-a-doubly-linked-list"><a href="#Example-application-CRUD-in-a-doubly-linked-list" class="headerlink" title="Example application: CRUD in a doubly-linked list"></a>Example application: CRUD in a doubly-linked list</h2><p>The example Java application DLLDemo demonstrates how to create, insert, and delete nodes in a doubly-linked list. THe application’s source code is show in Listing 1.</p><h3 id="Listing-1-A-Java-application-demonstracting-CRUD-in-a-doubly-linked-list"><a href="#Listing-1-A-Java-application-demonstracting-CRUD-in-a-doubly-linked-list" class="headerlink" title="Listing 1. A Java application demonstracting CRUD in a doubly-linked list"></a>Listing 1. A Java application demonstracting CRUD in a doubly-linked list</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DLLDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">      String name;</span><br><span class="line">      Node next;</span><br><span class="line">      Node prev;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="comment">// Build a doubly-linked list.</span></span><br><span class="line"></span><br><span class="line">      Node topForward = <span class="keyword">new</span> Node();</span><br><span class="line">      topForward.name = <span class="string">"A"</span>;</span><br><span class="line">      Node temp = <span class="keyword">new</span> Node();</span><br><span class="line">      temp.name = <span class="string">"B"</span>;</span><br><span class="line">      Node topBackward = <span class="keyword">new</span> Node();</span><br><span class="line">      topBackward.name = <span class="string">"C"</span>;</span><br><span class="line">      topForward.next = temp;</span><br><span class="line">      temp.next = topBackward;</span><br><span class="line">      topBackward.next = <span class="keyword">null</span>;</span><br><span class="line">      topBackward.prev = temp;</span><br><span class="line">      temp.prev = topForward;</span><br><span class="line">      topForward.prev = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Dump forward singly-linked list.</span></span><br><span class="line"></span><br><span class="line">      System.out.print(<span class="string">"Forward singly-linked list: "</span>);</span><br><span class="line">      temp = topForward;</span><br><span class="line">      <span class="keyword">while</span> (temp != <span class="keyword">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         System.out.print(temp.name);</span><br><span class="line">         temp = temp.next;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Dump backward singly-linked list.</span></span><br><span class="line"></span><br><span class="line">      System.out.print(<span class="string">"Backward singly-linked list: "</span>);</span><br><span class="line">      temp = topBackward;</span><br><span class="line">      <span class="keyword">while</span> (temp != <span class="keyword">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         System.out.print(temp.name);</span><br><span class="line">         temp = temp.prev;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Reference node B.</span></span><br><span class="line"></span><br><span class="line">      temp = topForward.next;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Delete node B.</span></span><br><span class="line"></span><br><span class="line">      temp.prev.next = temp.next;</span><br><span class="line">      temp.next.prev = temp.prev;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Dump forward singly-linked list.</span></span><br><span class="line"></span><br><span class="line">      System.out.print(<span class="string">"Forward singly-linked list (after deletion): "</span>);</span><br><span class="line">      temp = topForward;</span><br><span class="line">      <span class="keyword">while</span> (temp != <span class="keyword">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         System.out.print(temp.name);</span><br><span class="line">         temp = temp.next;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Dump backward singly-linked list.</span></span><br><span class="line"></span><br><span class="line">      System.out.print(<span class="string">"Backward singly-linked list (after deletion): "</span>);</span><br><span class="line">      temp = topBackward;</span><br><span class="line">      <span class="keyword">while</span> (temp != <span class="keyword">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         System.out.print(temp.name);</span><br><span class="line">         temp = temp.prev;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Compile Listing 4 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac DLLDemo.java</span><br></pre></td></tr></table></figure></p><p>Run the resulting application as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java DLLDemo</span><br></pre></td></tr></table></figure></p><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Forward singly-linked list: ABC</span><br><span class="line">Backward singly-linked list: CBA</span><br><span class="line">Forward singly-linked list (after deletion): AC</span><br><span class="line">Backward singly-linked list (after deletion): CA</span><br></pre></td></tr></table></figure></p><h2 id="Shuffling-in-double-linked-lists"><a href="#Shuffling-in-double-linked-lists" class="headerlink" title="Shuffling in double-linked lists"></a>Shuffling in double-linked lists</h2><p>The Java Collections Framework includes a Collections class of utility methods, which is part of the java.util package. This class includes a <code>void shuffle(List&lt;?&gt; list)</code> method that “randomly permutes the specified list using a default source of randomness”. For example, you might use this method to shuffle (搅乱) a deck of cards expressed as a double-linked list (the java.util.LinkedList class is an example). In the pseudocode below, you can see how the Shuffle algorithm migth shuffle a doubly-linked list:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">DECLARE RANDOM rnd = new RANDOM</span><br><span class="line">DECLARE INTEGER i</span><br><span class="line">FOR i = 3 DOWNTO 2</span><br><span class="line">   swap(topForward, i - 1, rnd.nextInt(i))</span><br><span class="line">END FOR</span><br><span class="line">FUNCTION swap(Node top, int i, int j)</span><br><span class="line">   DECLARE Node nodei, nodej</span><br><span class="line">   DECLARE INTEGER k</span><br><span class="line">   // Locate ith node.</span><br><span class="line">   Node nodei = top</span><br><span class="line">   FOR k = 0 TO i - 1</span><br><span class="line">      nodei = nodei.next</span><br><span class="line">   END FOR</span><br><span class="line">   // Locate jth node.</span><br><span class="line">   Node nodej = top</span><br><span class="line">   FOR k = 0 TO i - 1</span><br><span class="line">      nodej = nodej.next</span><br><span class="line">   END FOR</span><br><span class="line">   // Perform the swap.</span><br><span class="line">   DECLARE STRING namei = nodei.name</span><br><span class="line">   DECLARE STRING namej = nodej.name</span><br><span class="line">   nodej.name = namei</span><br><span class="line">   nodei.name = namej</span><br><span class="line">END FUNCTION</span><br><span class="line">END</span><br></pre></td></tr></table></figure></p><p>The Shuffle algorithm obtains a source of randomness and then traverse the list backward, from the last node up to the second. It repeatedly swaps a randomly selected node (which is actually just  the name field) into the “current position”. Nodes are randomly selected from the  portion of the list that runs from the first ndoe to the current position, inclusive. Note that this algorithm is roughly excerpted from <code>void shuffle(List&lt;?&gt; list)</code>‘s source code.</p><p>The shuffle algorithm pseudocode is lazy because it focuses only on the forward-traversing singly-linked list. It’s reasonable  design decision, but we pay a price for it in time complexity. The time complexity is $O(n^2)$. First, we have the $O(n)$ loop that calls <code>swap()</code>. Second, within <code>swap()</code>, we have the two sequential $O(n)$ loops. Recall the following rule from Part 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">If f1(n) = O(g(n)) and f2(n) = O(h(n)) then</span><br><span class="line"></span><br><span class="line">(a) f1(n)+f2(n) = max(O(g(n)), O(h(n)))</span><br><span class="line">(b) f1(n)*f2(n) = O(g(n)*h(n)).</span><br></pre></td></tr></table></figure></p><p>Part (a) deals with sequential algorithms. Here, we have two $O(n)$ loops. According to the rule, the resulting time complexity would be $O(n)$. Part (b) deals with nested algorithms. In this case, we have $O(n)$ multiplied by $O(n)$, resulting in $O(n^2)$.</p><p>Note that Shuffle’s space complexity is $O(1), resulting from the helper variables that are declared.</p><p>The Shuffle application in Listing 2 is a demonstration of the Shuffle algorithm.</p><h3 id="Listing-2-The-Shuffle-algorithm-in-Java"><a href="#Listing-2-The-Shuffle-algorithm-in-Java" class="headerlink" title="Listing 2. The Shuffle algorithm in Java"></a>Listing 2. The Shuffle algorithm in Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Shuffle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">      String name;</span><br><span class="line">      Node next;</span><br><span class="line">      Node prev;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="comment">// Build a doubly-linked list.</span></span><br><span class="line"></span><br><span class="line">      Node topForward = <span class="keyword">new</span> Node();</span><br><span class="line">      topForward.name = <span class="string">"A"</span>;</span><br><span class="line">      Node temp = <span class="keyword">new</span> Node();</span><br><span class="line">      temp.name = <span class="string">"B"</span>;</span><br><span class="line">      Node topBackward = <span class="keyword">new</span> Node();</span><br><span class="line">      topBackward.name = <span class="string">"C"</span>;</span><br><span class="line">      topForward.next = temp;</span><br><span class="line">      temp.next = topBackward;</span><br><span class="line">      topBackward.next = <span class="keyword">null</span>;</span><br><span class="line">      topBackward.prev = temp;</span><br><span class="line">      temp.prev = topForward;</span><br><span class="line">      topForward.prev = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Dump forward singly-linked list.</span></span><br><span class="line"></span><br><span class="line">      System.out.print(<span class="string">"Forward singly-linked list: "</span>);</span><br><span class="line">      temp = topForward;</span><br><span class="line">      <span class="keyword">while</span> (temp != <span class="keyword">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         System.out.print(temp.name);</span><br><span class="line">         temp = temp.next;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Dump backward singly-linked list.</span></span><br><span class="line"></span><br><span class="line">      System.out.print(<span class="string">"Backward singly-linked list: "</span>);</span><br><span class="line">      temp = topBackward;</span><br><span class="line">      <span class="keyword">while</span> (temp != <span class="keyword">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         System.out.print(temp.name);</span><br><span class="line">         temp = temp.prev;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Shuffle list.</span></span><br><span class="line"></span><br><span class="line">      Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &gt; <span class="number">1</span>; i--)</span><br><span class="line">         swap(topForward, i - <span class="number">1</span>, rnd.nextInt(i));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Dump forward singly-linked list.</span></span><br><span class="line"></span><br><span class="line">      System.out.print(<span class="string">"Forward singly-linked list: "</span>);</span><br><span class="line">      temp = topForward;</span><br><span class="line">      <span class="keyword">while</span> (temp != <span class="keyword">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         System.out.print(temp.name);</span><br><span class="line">         temp = temp.next;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Dump backward singly-linked list.</span></span><br><span class="line"></span><br><span class="line">      System.out.print(<span class="string">"Backward singly-linked list: "</span>);</span><br><span class="line">      temp = topBackward;</span><br><span class="line">      <span class="keyword">while</span> (temp != <span class="keyword">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         System.out.print(temp.name);</span><br><span class="line">         temp = temp.prev;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Node top, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="comment">// Locate ith node.</span></span><br><span class="line"></span><br><span class="line">      Node nodei = top;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; k++)</span><br><span class="line">         nodei = nodei.next;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Locate jth node.</span></span><br><span class="line"></span><br><span class="line">      Node nodej = top;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; j; k++)</span><br><span class="line">         nodej = nodej.next;</span><br><span class="line"></span><br><span class="line">      String namei = nodei.name;</span><br><span class="line">      String namej = nodej.name;</span><br><span class="line">      nodej.name = namei;</span><br><span class="line">      nodei.name = namej;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Compile Listing 5 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Shuffle.java</span><br></pre></td></tr></table></figure></p><p>Run the resulting application as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Shuffle</span><br></pre></td></tr></table></figure></p><p>You should observe the following output from on run:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Forward singly-linked list: ABC</span><br><span class="line">Backward singly-linked list: CBA</span><br><span class="line">Forward singly-linked list: BAC</span><br><span class="line">Backward singly-linked list: CAB</span><br></pre></td></tr></table></figure></p><h2 id="Circular-linked-lists"><a href="#Circular-linked-lists" class="headerlink" title="Circular linked lists"></a>Circular linked lists</h2><p>The link field in the last node of a singly-linked list contains a null link. This is also true in a doubly-linked list, which contains the link fields in the last nodes of the forward and backward singly-linked list. Suppose, instead, that the last nodes contained links to the first nodes. In this situation, you would end up with a circular-linked list, which is shown in Figure 2.</p><p><img src="002.jpg" alt="Figure 2. A circular-linked list connects the last node to the first node"></p><p>Circular-linked lists, also known as circular buffers or circular queues, have many uses. For example, they’re used by operating system interrupt handlers to buffer keystrokes. Multimedia applications use circular-linked lists to buffer data (for example, buffering data being written to a sound card). This technique is also used by the LZ77 family of lossless data comperssion algorithms.</p><h2 id="Linked-lists-versus-array"><a href="#Linked-lists-versus-array" class="headerlink" title="Linked lists versus array"></a>Linked lists versus array</h2><p>Throughout this series on data structures and algorithms, we’ve considered the strengths and weaknesses of different data structures. Since we’ve focused on arrays and linked lists, you might have questions about these types specifically. What advantages adn disadvantages do linked lists and array offer? When do you use a linked list and when do you use an array? Can data structures from both categories be integrated into a useful hybird data structure? I’ll try to answer these questions below.</p><p>Linked lists offer the following advantages over arrays:</p><ul><li>They don’t require extra memory to support expansion. In contrast, arrays require extra memory when expansion is necessary. (One all elements contain data items, no new data items can be appended to an array.)</li><li>They offer faster node insertion/deletion than equivalent array-based operations. Only links need to be updated after identifying the insert/delete position. From an array perspective, data item insertion requires the movement of all other data items to create an emptry element. Similarly, deletion of an existing data item requires the movement of all other data items to remove an emptry element. All data item movement takes time</li></ul><p>In contrast, arrays offer the following advantages over linked lists:</p><ul><li>Array elements occupy less memory than nodes because elements don’t require link fields</li><li>Arrays offer faster access to data items, via integer-based indexes</li></ul><p>Im summary, linked lists are most appropriate when dealing with dynamic data, meaning programs where insertions and deletions are frequent. In contrast, arrays are most appropriate fro programs where data is static, meaning it’s rare to insert or delete new data items. (Recall that if you run out of room when adding data items to an array, you must create a larger array, copy the original array’s data items to the larger array, and dipose of the original. This take time, which affects performance-especially when done repeatedly.)</p><p>You might think that merging a singly-linked list with a one-dimensional array to access nodes via array indexes would accomplish nothing. You would waste memory because you need array elements plus nodes, and you would waste time because you need to move the array’s data items whenever you insert or delete a node. In fact, it can be beneficial to integrate an array with a linked list to create a hybrid! While it’s out of the scope of this series, the hash table is a great example of array/linked list cooperation.</p><h2 id="Tutorial-series-conclusion"><a href="#Tutorial-series-conclusion" class="headerlink" title="Tutorial series conclusion"></a>Tutorial series conclusion</h2><p>This tutorial series has introduced the fundamentals of data structures and algorithms. I’ve focused on two data structure categories, Java array and linked lists, which are the basis of more complex  data structures such as stacks, queues, trees, graphs, dictionaries/maps, and sets. I encourage you to keep exploring and learning about data structures, and algorithms. As a starting point, Java Collections Framework includes many useful data structures and algorithms you could explore.</p>]]></content>
      
      
      <categories>
          
          <category> JavaWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data structures and algorithms in Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Singly-linked lists and their algorithms</title>
      <link href="/2020/04/06/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Singly-linked%20lists%20and%20their%20algorithms/"/>
      <url>/2020/04/06/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Singly-linked%20lists%20and%20their%20algorithms/</url>
      
        <content type="html"><![CDATA[<p>Like arrays, which were introduced in Part 3 of this tutorial series, linked lists are a fundamental data structures category upon which more complex data structures can be based. Unlike a sequence of elements, however, a linked list is a sequence of nodes, where each node is linked to the privious and next node in the sequence. Recall that a node is an object created from a self-referential class, and a self-referential class has at least one field whose reference type is the class name. Nodes in a linked list are linked via a node reference. Here’s an example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> empno;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">   <span class="keyword">public</span> Employee next;</span><br><span class="line">   <span class="comment">// Other members.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In this example, Employee is a self-referential class because its next field has type Employee. This field is an example of a link field because it can store a reference to another object of its class — in this case another Employee object.</p><p>This tutorial introduces the ins and outs of singly linked lists in Java programming. You’ll learn operations for creating a singly linked list, inserting nodes into a singly liked list, delting nodes from a singly liked list, concatenating a singly linked list to another singly linked list, and inverting a singly linked list. We’ll also explore algorithms most commonly used for sorting singly linked llists, and conclude with an example demonstrating the Insertion Sort algorithm.</p><h2 id="What-is-a-singly-linked-list"><a href="#What-is-a-singly-linked-list" class="headerlink" title="What is a singly linked list?"></a>What is a singly linked list?</h2><p>A singly linked list is a linked list of nodes where each node has a single link field. In this data structure, a reference variable contains a reference to the first (or top) node; each node (except for the last or bottom node) links to the next one; and the last node’s link field contains the null reference to signify the list’s end. Although the reference variable is commonly named top, you can choose any name you want.</p><p>Figure 1 presents a singly linked list with three nodes.</p><p><img src="001.jpg" alt="Figure 1. A singly linked list where top references the A node, A connects to B, B connects to C, and C is the final node"></p><p>Below is pseudocode for a singly linked list.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DECLARE CLASS Node</span><br><span class="line">  DECLARE STRING name</span><br><span class="line">  DECLARE Node next</span><br><span class="line">END DECLARE</span><br><span class="line">DECLARE Node top = NULL</span><br></pre></td></tr></table></figure><p>Node is self-referential class with a name data field and a next link field. top is a reference variable of type Node that holds a reference to the first Node obejct in a singly linked lsit. Because the list doesn’t yet exist, top’s initial value is NULL.</p><h2 id="Creating-a-singly-linked-list-in-Java"><a href="#Creating-a-singly-linked-list-in-Java" class="headerlink" title="Creating a singly linked list in Java"></a>Creating a singly linked list in Java</h2><p>You create a singly linked list by attaching a single Node object. The following pseudocode creates a Node object, assigns its refernce to top, initializes its data filed, and assigns NULL to its link field:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">top = NEW Node</span><br><span class="line">top.name = &quot;A&quot;</span><br><span class="line">top.next = NULL</span><br></pre></td></tr></table></figure></p><p>Figure 2 shows the initial singly linked list that emerges from this pseudocode.</p><p><img src="002.jpg" alt="Figure 2. The initial singly linked list consits of a single Node (A)"></p><p>This operation has a time complexity of $O(1)$ — constant. Recall that $O(1)$ is pronounced “Big of Oh of 1”. (See Part 1 for a reminder of how time and space complexity measurements) are used to evaluate data structures.</p><h2 id="Inserting-node-into-a-singly-linked-list"><a href="#Inserting-node-into-a-singly-linked-list" class="headerlink" title="Inserting node into a singly linked list"></a>Inserting node into a singly linked list</h2><p>Inserting a node into a singly linked list is somewhat more complicated than creaing a singly linked list becuase there are three cases to consider:</p><ul><li>Insertion before the first node</li><li>Insertion after the also node</li><li>Insertion between two nodes</li></ul><h3 id="Insertion-before-the-first-node"><a href="#Insertion-before-the-first-node" class="headerlink" title="Insertion before the first node"></a>Insertion before the first node</h3><p>A new node is inserted before the first node by assgning the top node’s reference to the new code’s link field adn assigning the new node’s reference to the top variable. This operation is demonstrated by the following pseudocode:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DECLARE Node temp</span><br><span class="line">temp = NEW Node</span><br><span class="line">temp.name = &quot;B&quot;</span><br><span class="line">temp.next = top</span><br><span class="line">top = temp</span><br></pre></td></tr></table></figure></p><p>The resulting two-Node list appears in Figure 3.</p><p><img src="003.jpg" alt="Figure 3. The expanded two-Node singly linked list palces Node B ahead of Node A"></p><p>The operation has a time-complexty of $O(1)$.</p><h3 id="Insertion-after-the-last-node"><a href="#Insertion-after-the-last-node" class="headerlink" title="Insertion after the last node"></a>Insertion after the last node</h3><p>A new node is inserted after the last node by assigning null to the new node’s link filed, traversing the singly linked list to find the last node, and assigning the new node’s reference to the last node’s link field, as the following pseudocode demonstrates:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">temp = NEW Node</span><br><span class="line">temp.name = &quot;C&quot;</span><br><span class="line">temp.next = NULL</span><br><span class="line">DECLARE Node temp2</span><br><span class="line">temp2 = top </span><br><span class="line">// We assume top (and temp2) are not NULL </span><br><span class="line">// because of the previous pseudocode.</span><br><span class="line">WHILE temp2.next NE NULL</span><br><span class="line">   temp2 = temp2.next</span><br><span class="line">END WHILE</span><br><span class="line">// temp2 now references the last node.</span><br><span class="line">temp2.next = temp</span><br></pre></td></tr></table></figure></p><p>Figure 4 reveals the list following the insertion of Node C after Node A.</p><p><img src="004.jpg" alt="Figure 4. Node C comes last in the expanded three-node singly linked list"></p><p>This operation has a time complexity of $O(n)$ — linear. Its time complexity could be improved to $O(1)$ by maintaining a reference to the last node. In that case it wouldn’t be necessary to search for the last node.</p><h3 id="Insertion-between-two-nodes"><a href="#Insertion-between-two-nodes" class="headerlink" title="Insertion between two nodes"></a>Insertion between two nodes</h3><p>Inserting a node between two nodes is the most complex case. You insert a new node between two nodes by traversing the list to find the node that comes before the new node, assigning the reference in the found node’s link field to the new node’s link field, and assigning the new ndoe’s reference to the found node’s link field. The following pseudocode demonstrates these tasks:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">temp = NEW Node</span><br><span class="line">temp.name = &quot;D&quot;</span><br><span class="line">temp2 = top </span><br><span class="line">// We assume that the newly created Node inserts after Node </span><br><span class="line">// A and that Node A exists. In the real world, there is no </span><br><span class="line">// guarantee that any Node exists, so we would need to check </span><br><span class="line">// for temp2 containing NULL in both the WHILE loop&apos;s header </span><br><span class="line">// and after the WHILE loop completes.</span><br><span class="line">WHILE temp2.name NE &quot;A&quot;</span><br><span class="line">   temp2 = temp2.next</span><br><span class="line">END WHILE</span><br><span class="line">// temp2 now references Node A.</span><br><span class="line">temp.next = temp2.next</span><br><span class="line">temp2.next = temp</span><br></pre></td></tr></table></figure></p><p>Figure 5 presents the list following the insertion of Node D between Nodes A and C.</p><p><img src="005.jpg" alt="Figure 5. The ever-growing singly linked list places Node D between Nodes A and C"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data structures and algorithms in Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Multidimensional arrays and the Matrix Multiplication algorithm</title>
      <link href="/2020/04/06/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Multidimensional%20arrays%20and%20the%20Matrix%20Multiplication%20algorithm/"/>
      <url>/2020/04/06/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Multidimensional%20arrays%20and%20the%20Matrix%20Multiplication%20algorithm/</url>
      
        <content type="html"><![CDATA[<p>Data structures and algorithm in Java, Part 2 instroduced a variety of techniques for searching and sorting one-dimensional arrays, which are the simplest arrays. In this tutorial you’ll explore multidimensional arrays. I’ll show you the three ways to create multidimensional arrays, then you’ll learn how to use the Matrix Multiplication algorithm to multiply elemtns in a two-dimensional array. I’ll also introduce ragged arrays and you’ll learn why they’re popular for big data applications. Finally, we’ll consider the question of whether an array is or is not a Java object.</p><p>This article sets you up for Part 4, which introduces searching and sorting with singly-linked lists.</p><h2 id="Mutidimentsional-arrays"><a href="#Mutidimentsional-arrays" class="headerlink" title="Mutidimentsional arrays"></a>Mutidimentsional arrays</h2><p>A multidimensional array associates each element in the array with multiple indexes. The most commonly used multidimensional array is the two-dimensional array, also known as a table or matrix. A two-dimensional array associates each of its elements with two indexes.</p><p>We can conceptualize a two-dimensional array as a rectanglar grid of elements divided into rows and colums. We use the (row, column) natation to identify an element, as shown in Figure 1.</p><p><img src="001.jpg" alt="Figure 1. A conceptual view of a two-dimensional array reveals a grid of elements"></p><p>Because two-dimensional arrays are so commonly used, I’ll focus on them. What you learn about two-dimensional arrays can be generalized to higher-dimensional ones.</p><h2 id="Creating-two-dimensional-arrays"><a href="#Creating-two-dimensional-arrays" class="headerlink" title="Creating two-dimensional arrays"></a>Creating two-dimensional arrays</h2><p>There are three techniques for creating a two-dimensional array in Java:</p><ul><li>Using an initializer</li><li>Using the keyword new</li><li>Using the keyword new with an initializer</li></ul><h3 id="Using-an-initializer-to-create-a-two-dimensional-array"><a href="#Using-an-initializer-to-create-a-two-dimensional-array" class="headerlink" title="Using an initializer to create a two-dimensional array"></a>Using an initializer to create a two-dimensional array</h3><p>The initializer-only approach to creating a two-dimensional array has the following syntax:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;&#123;&apos; [rowInitializer (&apos;,&apos; rowInitializer)*] &apos;&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>rowinitializer has the following syntax:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;&#123;&apos; [expr (&apos;,&apos; expr)*] &apos;&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>This syntax states that a two-dimensional array is an optional, comma-separated list of row initializer appearing between open - and close - brace characters. Futhermore, each row initializer is an optional, comma-separated list of expressions appearing between oopen - and close - brace characters. Like one-dimensional ararys, all expressions must evaluate to compatible types.</p><p>Here’s an example of a two-dimensional array:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &#123; <span class="number">20.5</span>, <span class="number">30.6</span>, <span class="number">28.3</span> &#125;, &#123; -<span class="number">38.7</span>, -<span class="number">18.3</span>, -<span class="number">16.2</span> &#125; &#125;</span><br></pre></td></tr></table></figure></p><p>This example creates a table with rows and three columns. Figure 2 presents a concetual (概念上的) view of this table along with a memory view that shows how Java lays out this (and every) table in memory.</p><p><img src="002.jpg" alt="Figure 2. Conceptual and memory views of a two-dimensional array"></p><p>Figure 2 reveals that Java represents a two-dimensional array as a one-dimensional row array whose elements reference one-dimensional column arrays. The row index identifies the column array; the column index identifies the data item.</p><h3 id="Keyword-new-only-creation"><a href="#Keyword-new-only-creation" class="headerlink" title="Keyword new-only creation"></a>Keyword new-only creation</h3><p>The keyword new allocates memory for a two-dimensional array and returns its reference. This approach has the following syntax:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;new&apos; type &apos;[&apos; int_expr1 &apos;]&apos; &apos;[&apos;int_expr2 &apos;]&apos;</span><br></pre></td></tr></table></figure></p><p>The syntax states that a two-dimensional array is a region of (positive) int_expr1 row elements and (positive) int_expr2 column elements that all share the same type. Furthermore, all elements are zeroed. Here’s an example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">2</span>][<span class="number">3</span>] <span class="comment">// Create a two-row-by-three-column table.</span></span><br></pre></td></tr></table></figure></p><h3 id="Keyword-new-and-initializer-creation"><a href="#Keyword-new-and-initializer-creation" class="headerlink" title="Keyword new and initializer creation"></a>Keyword new and initializer creation</h3><p>The keyword new with an initializer approach has the following syntax:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;new&apos; type &apos;[&apos; &apos;]&apos; [&apos; &apos;]&apos; &apos;&#123;&apos; [rowInitializer (&apos;,&apos; rowInitializer)*] &apos;&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>Where rowInitializer has the following syntax:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'&#123;'</span> [expr (<span class="string">','</span> expr)*] <span class="string">'&#125;'</span></span><br></pre></td></tr></table></figure></p><p>The syntax blends the previous two examples. Because the number of elements can be determined from the comma-separated lists of expressions, you don’t provide an int_expr between either pair of square brackets. Here is an exmaple:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="keyword">double</span> [][] &#123; &#123; <span class="number">20.5</span>, <span class="number">30.6</span>, <span class="number">28.3</span> &#125;, &#123; -<span class="number">38.7</span>, -<span class="number">18.3</span>, -<span class="number">16.2</span> &#125; &#125;</span><br></pre></td></tr></table></figure></p><h2 id="Two-dimensinal-arrays-and-array-variable"><a href="#Two-dimensinal-arrays-and-array-variable" class="headerlink" title="Two-dimensinal arrays and array variable"></a>Two-dimensinal arrays and array variable</h2><p>By itself, a newly-created two-dimensional array is useless. Its reference must be assigned to an array variable of a compatible type, either directly or via a method call. The follwoing syntaxes show how you would declare this variable:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type var_name &apos;[&apos; &apos;]&apos; &apos;[&apos; &apos;]&apos;</span><br><span class="line">type &apos;[&apos; &apos;]&apos; &apos;[&apos; &apos;]&apos; var_name</span><br></pre></td></tr></table></figure></p><p>Each syntax declares an array variable taht stores a reference to a two-dimensional array. It’s perferred to palce the square brackets after type. Consider the follwoing examples:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">double[][] temperatures1 = &#123; &#123; 20.5, 30.6, 28.3 &#125;, &#123; -38.7, -18.3, -16.2 &#125; &#125;;</span><br><span class="line">double[][] temperatures2 = new double[2][3];</span><br><span class="line">double[][] temperatures3 = new double[][] &#123; &#123; 20.5, 30.6, 28.3 &#125;, &#123; -38.7, -18.3, -16.2 &#125; &#125;;</span><br></pre></td></tr></table></figure></p><p>Like one-dimensional array variables, a two-dimensional array variable is associated with a <code>.length</code>  property, which reutrns the length of the row array. For example, <code>temperatures1.length</code> returns 2. Each row element is also an array variable with a <code>.length</code> property, which returns the number of columns for the column array assigned to the row element. For example, <code>temperatures1[0].length</code> returns 3.</p><p>Given an array variable, you can access any element in a two-dimensional array by specifying an expression that agress with the following syntax:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_var &apos;[&apos; row_index &apos;]&apos; &apos;[&apos; col_index &apos;]&apos;</span><br></pre></td></tr></table></figure></p><p>Both indexes are positive ints that range from 0 to one less than the value returned from the respective <code>.length</code> properties. Consider the next two examples:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> temp = temperatures1[<span class="number">0</span>][<span class="number">1</span>]; <span class="comment">// Get value.</span></span><br><span class="line">temperatures1[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">75.0</span>;        <span class="comment">// Set value.</span></span><br></pre></td></tr></table></figure></p><p>The first example returns the value in the second column of the first row (30.6). The second example  repalces this value with 75.0.</p><p>If you spcify a negative idnex or an index that is greater than or equal to the value returned by the array variable’s <code>.length</code> property, Java creates and throws an ArrayIndexOutOfBoundsException object.</p><h2 id="Multiplying-two-dimensional-arrays"><a href="#Multiplying-two-dimensional-arrays" class="headerlink" title="Multiplying two-dimensional arrays"></a>Multiplying two-dimensional arrays</h2><p>Multiplying one matrix by another matrix is a comon operation in fields ranging from computer graphics, to economics, to the transportation industry. Developer usually use the Matrix Multiplication algorithm for this operation.</p><p>How does matrix mutiplication work? Let A represent a matrix with $m$ rows and $p$ columns. Similarly, let B represent a matrix with $p$ rows and $n$ columns. Multiply A by B to produce a maxtrix C, with $m$ rows and $n$ columns. Each cij entry in C is obtained by mutiplying all entries in A’s ith row by corresponding entries in B’s jth column, then adding the results. Figure 3 illustrates these operations.</p><p><img src="003.jpg" alt="Figure 3. Each of A&#39;s rows if mutiplied (and andded with each of B&#39;s columns to produce an entry in C)"></p><blockquote><p>Left-matrix columns must equal right-matrix rows<br>Matrix multiplcation requries that the number of columns (p) in the left matrix (A) equal the number of rows (p) in the right matrix (B). Otherwise, this algorithm won’t work.</p></blockquote><p>The following pseudocode expresses Matrix Multiplication in a 2-row-by-2-column and a 2-row-by-1-column table context. (Recall that I introduced pseudocode in Part 1.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// ==      ==   == ==   ==                     ==</span><br><span class="line">// | 10  30 |   | 5 |   | 10 x 5 + 30 x 7 (260) |</span><br><span class="line">// |        | X |   | = |                       | </span><br><span class="line">// | 20  40 |   | 7 |   | 20 x 5 + 40 * 7 (380) | </span><br><span class="line">// ==      ==   == ==   ==                     ==</span><br><span class="line"></span><br><span class="line">DECLARE INTEGER a[][] = [ 10, 30 ] [ 20, 40 ]</span><br><span class="line">DECLARE INTEGER b[][] =  [ 5, 7 ]</span><br><span class="line">DECLARE INTEGER m = 2 // Number of rows in left matrix (a)</span><br><span class="line">DECLARE INTEGER p = 2 // Number of columns in left matrix (a)</span><br><span class="line">                      // Number of rows in right matrix (b)</span><br><span class="line">DECLARE INTEGER n = 1 // Number of columns in right matrix (b)</span><br><span class="line">DECLARE INTEGER c[m][n] // c holds 2 rows by 1 columns</span><br><span class="line">                        // All elements initialize to 0</span><br><span class="line">FOR i = 0 TO m - 1</span><br><span class="line">   FOR j = 0 TO n - 1</span><br><span class="line">      FOR k = 0 TO p - 1</span><br><span class="line">         c[i][j] = c[i][j] + a[i][k] * b[k][j]</span><br><span class="line">      NEXT k</span><br><span class="line">   NEXT j</span><br><span class="line">NEXT i</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>Because of the three FOR loops, Matrix Multiplication has a time complexity of $O(n^3)$, which is pronounced “Big Oh of $n$ cubed”. Matrix Multiplication offers cubic performance, which gets expensive time-wise when large matrixes are multiplied. It offers a space complexity of $O(nm)$, which is pronounced “Big Oh of $n * m$”, for storing an additional matrix of $n$ rows by $m$ columns. This becomes $O(n^2)$ for square matrixes.</p><p>I’ve created a MatMult Java application that lets you experiment with Matrix Multiplication. Listing 1 presents this application’s source code.</p><h3 id="Listing-1-A-Java-application-of-experimenting-with-Matrix-Multiplication"><a href="#Listing-1-A-Java-application-of-experimenting-with-Matrix-Multiplication" class="headerlink" title="Listing 1. A Java application of experimenting with Matrix Multiplication"></a>Listing 1. A Java application of experimenting with Matrix Multiplication</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MatMult</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">int</span>[][] a = &#123;&#123; <span class="number">10</span>, <span class="number">30</span> &#125;, &#123; <span class="number">20</span>, <span class="number">40</span> &#125;&#125;;</span><br><span class="line">      <span class="keyword">int</span>[][] b = &#123;&#123; <span class="number">5</span> &#125;, &#123; <span class="number">7</span> &#125;&#125;;</span><br><span class="line">      dump(a);</span><br><span class="line">      System.out.println();</span><br><span class="line">      dump(b);</span><br><span class="line">      System.out.println();</span><br><span class="line">      <span class="keyword">int</span>[][] c = multiply(a, b);</span><br><span class="line">      dump(c);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dump</span><span class="params">(<span class="keyword">int</span>[][] x)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (x == <span class="keyword">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         System.err.println(<span class="string">"array is null"</span>);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Dump the matrix's element values to the standard output in a tabular</span></span><br><span class="line">      <span class="comment">// order.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x[<span class="number">0</span>].length; j++)</span><br><span class="line">            System.out.print(x[i][j] + <span class="string">" "</span>);</span><br><span class="line">         System.out.println();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] multiply(<span class="keyword">int</span>[][] a, <span class="keyword">int</span>[][] b)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// ====================================================================</span></span><br><span class="line">      <span class="comment">// 1. a.length contains a's row count</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// 2. a[0].length (or any other a[x].length for a valid x) contains a's</span></span><br><span class="line">      <span class="comment">//    column count</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// 3. b.length contains b's row count</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// 4. b[0].length (or any other b[x].length for a valid x) contains b's</span></span><br><span class="line">      <span class="comment">//    column count</span></span><br><span class="line">      <span class="comment">// ====================================================================</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// If a's column count != b's row count, bail out</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (a[<span class="number">0</span>].length != b.length)</span><br><span class="line">      &#123;</span><br><span class="line">         System.err.println(<span class="string">"a's column count != b's row count"</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Allocate result matrix with a size equal to a's row count times b's</span></span><br><span class="line">      <span class="comment">// column count</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span>[][] result = <span class="keyword">new</span> <span class="keyword">int</span>[a.length][];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++)</span><br><span class="line">         result[i] = <span class="keyword">new</span> <span class="keyword">int</span>[b[<span class="number">0</span>].length];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Perform the multiplication and addition</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b[<span class="number">0</span>].length; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; a[<span class="number">0</span>].length; k++) <span class="comment">// or k &lt; b.length</span></span><br><span class="line">               result[i][j] += a[i][k] * b[k][j];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Return the result matrix</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MatMult declares a pair of matrixes and dumps their values to standard output. It then multiplies both matrixes and dumps the result matrix to standard output.</p><p>Compile Listing 1 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac MatMult.java</span><br></pre></td></tr></table></figure></p><p>Run the resulting application as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java MatMult</span><br></pre></td></tr></table></figure></p><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">10 30 </span><br><span class="line">20 40 </span><br><span class="line"></span><br><span class="line">5 </span><br><span class="line">7 </span><br><span class="line"></span><br><span class="line">260 </span><br><span class="line">380</span><br></pre></td></tr></table></figure></p><h2 id="Example-of-matrix-multiplication"><a href="#Example-of-matrix-multiplication" class="headerlink" title="Example of matrix multiplication"></a>Example of matrix multiplication</h2><p>Let’s explore a problem that is best solved by matrix multiplication. In this scenario, a fruit grower in Florida loads a couple of emitrailers with 1,250 boxes of oranges, 400 boxes of peaches, and 250 boxes of grapefruit. Figure 4 shows a chart of the market price per box for each kind of fruit, in four different cities.</p><p><img src="004.jpg" alt="Figure 4. Market price for oranges, peaches, and grapefurit in four different cities"></p><p>Our problem is to determine where the fruit should be shipped and sold for maximum gross income. To solve that problem, we first reconstruct the chart from Figure 4 as a four-row by three-column price matrix. From this, we can construct a tree-row by one-column quntity matrix, which appears below:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">==    ==</span><br><span class="line">| 1250 |</span><br><span class="line">|      |</span><br><span class="line">|  400 |</span><br><span class="line">|      |</span><br><span class="line">|  250 |</span><br><span class="line">==    ==</span><br></pre></td></tr></table></figure></p><p>With both matrixes on hand, we simply multiply the price matrix by the quantity matrix to produce a gross income matrix:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">==                  ==              ==        ==</span><br><span class="line">| 10.00  8.00  12.00 |   ==    ==   | 18700.00 | New York</span><br><span class="line">|                    |   | 1250 |   |          |</span><br><span class="line">| 11.00  8.50  11.55 |   |      |   | 20037.50 | Los Angeles</span><br><span class="line">|                    | X |  400 | = |          |</span><br><span class="line">|  8.75  6.90  10.00 |   |      |   | 16197.50 | Miami </span><br><span class="line">|                    |   |  250 |   |          |</span><br><span class="line">| 10.50  8.25  11.75 |   ==    ==   | 19362.50 | Chicago</span><br><span class="line">==                  ==              ==        ==</span><br></pre></td></tr></table></figure></p><p>Sending both semitrailers to Los Angeles will produce the highest gross income. But when distance aand fuel costs are considered, perhaps New Yourk is a better bet for yielding the highest income.</p><h2 id="Ragged-arrays"><a href="#Ragged-arrays" class="headerlink" title="Ragged arrays"></a>Ragged arrays</h2><p>Having learned about two-dimensional arrays, you might now wonder whether it’s possible to assign one-dimensional column arrays with different lengths to elements of a row array. The answer is yes. Consider these examples:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span>[][] temperatures1 = &#123; &#123; <span class="number">20.5</span>, <span class="number">30.6</span>, <span class="number">28.3</span> &#125;, &#123; -<span class="number">38.7</span>, -<span class="number">18.3</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">double</span>[][] temperatures2 = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">2</span>][];</span><br><span class="line"><span class="keyword">double</span>[][] temperatures3 = <span class="keyword">new</span> <span class="keyword">double</span>[][] &#123; &#123; <span class="number">20.5</span>, <span class="number">30.6</span>, <span class="number">28.3</span> &#125;, &#123; -<span class="number">38.7</span>, -<span class="number">18.3</span> &#125; &#125;;</span><br></pre></td></tr></table></figure></p><p>The first and third examples crate a two-dimensional array where the first row contains three columns and the second row contains two columns. The second example creates an array with two rows and an unspecified number of columns.</p><p>After creating temperature2’s row array, its elements must be populated with references to new column arrays. The following example demonstrates, assigning 3 columns to the first rwo and 2 columns to the second row:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temperatures2[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">3</span>];</span><br><span class="line">temperatures2[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">2</span>];</span><br></pre></td></tr></table></figure></p><p>The resulting two-dimensional array is known as a ragged array. Here is a second example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][];</span><br><span class="line">x[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">x[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">x[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">x[<span class="number">3</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">x[<span class="number">4</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br></pre></td></tr></table></figure></p><p>FFigure 5 presents a conceptual view of this second ragged array.</p><p><img src="005.jpg" alt="Figure 5. A ragged array specifies row with varying numbers of column elements"></p><p>Ragged arrays are useful data structures because of their memory-saving capabiliy. For example, consider a spreadsheet with the potential of 100,000 rows by 20,000 columns. If we attempt to use a matrix to hold the spreadsheet, we require a great deal of memory. But suppose most of the spreadsheet’s cells contain defualt values, such as 0 for numeric cells and null for nonnumeric cells. If we use a ragged array instead of a matrix, we store only those cells that contain nonnumeric data. (Of course, we need some kind of mapping machinism that mpas spreadsheet (row, column) coordinates to ragged array (row, colum) coordinates.)</p><blockquote><p>Using ragged arrays for big data<br>Ragged arrays come in handy when managing Big Data, such as the vast amounts of data generated by the Internet of Things.</p></blockquote><h2 id="Why-arrays-are-objects"><a href="#Why-arrays-are-objects" class="headerlink" title="Why arrays are objects"></a>Why arrays are objects</h2><p>According to the first sentence of Chatper 10 in the Java Language Specification arrays are objects in Java. Under the hood, each array is an instance of a hidden class that inherits java.lang.Object’s 11 methods. The array instance override Object’s <code>protected Object clone() throws CloneNotSupprotedException</code> method, allowing the array to be shallowly cloned. The hidden class additionally provides a <code>.length</code> field.</p><p>Listing 2’s ArrayIsObject source code demonstrates the associatation between arrays and objects.</p><h3 id="Listing-2-ArrayIsObject"><a href="#Listing-2-ArrayIsObject" class="headerlink" title="Listing 2. ArrayIsObject"></a>Listing 2. ArrayIsObject</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayIsObject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">double</span>[] a = &#123; <span class="number">100.5</span>, <span class="number">200.5</span>, <span class="number">300.5</span> &#125;;</span><br><span class="line">      <span class="keyword">double</span>[] b = &#123; <span class="number">100.5</span>, <span class="number">200.5</span>, <span class="number">300.5</span> &#125;;</span><br><span class="line">      <span class="keyword">double</span>[] c = b;</span><br><span class="line">      System.out.println(<span class="string">"a's class is "</span> + a.getClass());</span><br><span class="line">      System.out.println(<span class="string">"a and b are "</span> + ((a.equals(b)) ? <span class="string">""</span> : <span class="string">"not "</span>) +</span><br><span class="line">                         <span class="string">"equal "</span>);</span><br><span class="line">      System.out.println(<span class="string">"b and c are "</span> + ((b.equals(c)) ? <span class="string">""</span> : <span class="string">"not "</span>) +</span><br><span class="line">                         <span class="string">"equal "</span>);</span><br><span class="line">      <span class="keyword">double</span>[] d = (<span class="keyword">double</span>[]) c.clone();</span><br><span class="line">      System.out.println(<span class="string">"c and d are "</span> + ((c.equals(d)) ? <span class="string">""</span> : <span class="string">"not "</span>) +</span><br><span class="line">                         <span class="string">"equal "</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d.length; i++)</span><br><span class="line">         System.out.println(d[i]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ArrayIsObeject creates a referenced and b referenced double precision floating-point arrays with the same contents and lengths. For the a referenced array, a.getClass() returns class [D, where [D is the name of the array’s hidden class.</p><p>Despite the two arrays having the same contents, a.equals(b) returns false bacause equals() compares references (not contents), and a and b contain different references. b’s reference is assigned to c, and b.equals(c) returns true because b and c reference the same array. c.clone() creates a shallow clone of c, and a reference to this new array is assigned to d.</p><p>To prove that the d-referenced array contains the same contents as the c-referenced array, the for loop iterates over all elements and prints their contents to the standard output. The loop reads the contents of d’s read-only .length field to determine over how many elements to iterate.</p><blockquote><p>Tip: Don’t specify array length in source code<br>In source code, specify .length (as in d.length) instead of an array’s actual length. This eliminates the risk of introducing length-related bugs into your code, should you later change the array’s length ini its creation code.</p></blockquote><p>Compile Listing 2 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac ArrayIsObject.java</span><br></pre></td></tr></table></figure></p><p>Run the resulting application as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java ArrayIsObject</span><br></pre></td></tr></table></figure></p><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a&apos;s class is class [D</span><br><span class="line">a and b are not equal </span><br><span class="line">b and c are equal </span><br><span class="line">c and d are not equal </span><br><span class="line">100.5</span><br><span class="line">200.5</span><br><span class="line">300.5</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JavaWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data structures and algorithms in Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Regular expressions, Part 1 &gt; Pattern matching and the Pattern class</title>
      <link href="/2020/04/06/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Regular%20expressions%20Part%201%20-%20Pattern%20matching%20and%20the%20Pattern%20class/"/>
      <url>/2020/04/06/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Regular%20expressions%20Part%201%20-%20Pattern%20matching%20and%20the%20Pattern%20class/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data structures and algorithms in Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is an array and how are arrays represented in Java</title>
      <link href="/2020/04/06/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/What%20is%20an%20array%20and%20how%20are%20arrays%20represented%20in%20Java/"/>
      <url>/2020/04/06/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/What%20is%20an%20array%20and%20how%20are%20arrays%20represented%20in%20Java/</url>
      
        <content type="html"><![CDATA[<p>An array is a fundamental data strecture category, and a building block for more complex data structures. In this second tutorial in the data structures and algorithms series, you will learn how arrays are understood and used in Java programming. I’ll start with the concept of an array and how arrays are represented in the Java language. I’ll then introduce you to one-dimensional arrays and the tree ways that you can use them in your Java programs. Finally, we’ll explore five algorithms used to search and sort one-dimentional arrays: Linear Search, Binary Search, Bubble Sort, Selection Sort, and Insertion Srot.</p><p>Note that this tutorial builds on Data Structures and algorithms, Part 1, which introduced the theoretical side of data structures and the algorithms associated with them. That tutorial includes an in-depth discussion of algorithms and how to use space and time complexity factors to evaluate and select the most efficient algorithm for your Java program. We’ll get much more hands-on in this turorial, because I assume you’ve already read Part 1.</p><h2 id="What-is-an-array"><a href="#What-is-an-array" class="headerlink" title="What is an array?"></a>What is an array?</h2><p>An array is a sequence of elements where each element is associated with at least on index. An element is a group of memory locations that store a single data item. An index is a nonnegative integer, which is this case is used to uniquely identify an element. This relationship is simmilar to how a box number uniquely identifies a house on a given street.</p><p>The number of indexes associated with any element is the array’s dimension. In this article, we’ll be talking about one-dimensional arrays. The next article in this series introduces multi-dimensional arrays.</p><p>Java supports arrays. Each element ocuupies the same number of bytes, and the exact (精确) number depends on the types of the element’s data item. Furthermore, all elements share the same type.</p><blockquote><p>Java arrays are not resizable<br>Java Arrays hava a fixed size, You cannot change an array’s size after creating it. Instead, if you needed to change an array’s size, you would create another array of the desired size an copy all desired elements from the original array to the new one.</p></blockquote><h2 id="One-dimensional-arrays"><a href="#One-dimensional-arrays" class="headerlink" title="One-dimensional arrays"></a>One-dimensional arrays</h2><p>The simplest kind of array has one dimension. A one-dimensional array associates each element with one index. One-dimensional arrays are used to store lists of data items. There are three techniques for creating one-dimensinal arrays in Java:</p><ul><li>Use only an initializer</li><li>Use only keyword new</li><li>Use keyword new with an initiazlier</li></ul><h3 id="Creating-a-one-dimensinal-array-with-only-an-initializer"><a href="#Creating-a-one-dimensinal-array-with-only-an-initializer" class="headerlink" title="Creating a one-dimensinal array with only an initializer"></a>Creating a one-dimensinal array with only an initializer</h3><p>Here’s the syntax to create a one-dimensional array using just an initializer:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">'J'</span>, <span class="string">'a'</span>, <span class="string">'v'</span>, <span class="string">'a'</span> &#125;</span><br></pre></td></tr></table></figure></p><p>The syntax that one-dimensional array is an optional, comma-separated (分开的) list of expressions appearing between open and close brace characters. Futhermore, all expressions must evaluate to compatible types. For example, in a two-element one-dimensional array of doubles, both elements might be of type double, or one element might be a double while the other element is a float or an integer type (such as int).</p><h3 id="Creating-a-one-dimensional-array-with-the-keyword-new"><a href="#Creating-a-one-dimensional-array-with-the-keyword-new" class="headerlink" title="Creating a one-dimensional array with the keyword new"></a>Creating a one-dimensional array with the keyword new</h3><p>The keyword new allocates memory for an array and returns its reference. Here’s the syntax for this approach:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>]</span><br></pre></td></tr></table></figure></p><p>The syntax states that a one-dimensional array is a region of (positive) int_exper elements that share the same type. furthermore, all elements are zeroed, and are interpreted as 0, 0L, 0F, 0.0, false, null.</p><h3 id="Creating-a-one-dimensional-array-with-the-new-keyword-and-an-initializer"><a href="#Creating-a-one-dimensional-array-with-the-new-keyword-and-an-initializer" class="headerlink" title="Creating a one-dimensional array with the new keyword and an initializer"></a>Creating a one-dimensional array with the new keyword and an initializer</h3><p>Here’s the syntax to create a one-dimensional array using the keyword new with an initializer. As you seee, it blends the syntax from the previous two approaches:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">'J'</span>, <span class="string">'a'</span>, <span class="string">'v'</span>, <span class="string">'a'</span> &#125;</span><br></pre></td></tr></table></figure></p><p>In this case, because the number of elements can be determined from the comma-separated list of expressions, it isn’t necessary (or allowed) to provide an int_expr between the square brackets.</p><p>Something to note is that the syntax fro creating an array with only an initializer is no different in effect from the syntax using an initializer an a keyword. The initializer-only syntax is an example of syntactic sugar, which means syntax that make the language sweeter, or easier, to use.</p><h2 id="Array-variables"><a href="#Array-variables" class="headerlink" title="Array variables"></a>Array variables</h2><p>By itself, a newly-created one-dimensional array is useless. Its reference must be assigned to an array variable of a compatibe type, either directly or via a method call. The following two lines of syntax how you would declare this variable.</p><p>Each syntax declares an array variable that stores a reference to a one-dimensional array. Although you can use either syntax, placing the square brackets after type is preferred (推荐).</p><p>Examples:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] name1 = &#123; <span class="string">'J'</span>, <span class="string">'a'</span>, <span class="string">'v'</span>, <span class="string">'a'</span> &#125;;</span><br><span class="line"><span class="keyword">char</span>[] name2 = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">char</span>[] name3 = <span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">'J'</span>, <span class="string">'a'</span>, <span class="string">'v'</span>, <span class="string">'a'</span> &#125;;</span><br><span class="line">output(<span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="number">2</span>, <span class="number">3</span> &#125;); <span class="comment">// output(&#123; 2, 3 &#125;); results in a compiler error</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">char</span>[] name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In the examples, name1, name2, name3 and name are array variables. The single pair of square brackets states that each stores references to one-dimensional arrays.</p><p>Keyword char indicates that each element must store a value of char type. However, you can specify a non-char value if Java can convert it to char. For example, <code>char[] chars = {&#39;A&#39;, 10}</code> is legal because 10 is a samll enough positive in (meaning that it fits into the char range of 0 through 65535) to be converted to a char. In constact, <code>char[] chars = {&#39;A&#39;, 80000}</code> would be illegal.</p><p>An array variable is associated with a <code>.length</code> property that returns the length of the associated one-dimensional array as a positive int; for example, <code>name1.length</code> return 4.</p><p>Given an array variable, you can access any element in a one-dimensional array by specifying an expression that argees with the following syntax:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_var <span class="string">'['</span> index <span class="string">']'</span></span><br></pre></td></tr></table></figure></p><p>Here, index is a positive int that ranges from 0 (Java arrays are zero-based) to one less than the vlaue returned from the <code>.length</code> property.</p><p>Example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch = names[<span class="number">0</span>]; <span class="comment">// Get value.</span></span><br><span class="line">names[<span class="number">1</span>] = <span class="string">'A'</span>;     <span class="comment">// Set value.</span></span><br></pre></td></tr></table></figure></p><p>If you specify a negative index or an index that is greater than or equal to the value returned by the array variable’s <code>.length</code> property, Java creates and throws a ArrayIndexOutOfBoundsException object.</p><h2 id="Algorithms-for-searching-and-sorting"><a href="#Algorithms-for-searching-and-sorting" class="headerlink" title="Algorithms for searching and sorting"></a>Algorithms for searching and sorting</h2><p>It is a very common task to search one-dimensional arrays for specify data items, and there are a variety of algorithms for doing it. One of the most popular search algorithms is called Linear Search. Another option is Binary Search, which is usually more performant but also more demanding: in order to use Binary Search, the array’s data items must first be sorted, or ordered. Although not very performant, Bubble Sort, Selction Sort, and Insertion Sort are all simple algorithms for sorting a one-dimensional array. Each works well enough for shorter arrays.</p><blockquote><p>Space complexity<br>Each of the algorithms discussed in this section - Linear Search, Binary Search, Bubble Sort, Selection Sort, and Insertion Sort — exhibits a $O(1)$ (constant) space complexity for variable storage.</p></blockquote><h2 id="The-Linear-Search-algorithm"><a href="#The-Linear-Search-algorithm" class="headerlink" title="The Linear Search algorithm"></a>The Linear Search algorithm</h2><p>Linear Search searches a one—dimensional array of $n$ data items for a specific one. It functions by comparing data items from the lowest index to the highest until it finds the specified data item, or until there are no more data items to compare.</p><p>The following pseudocode expresses Linear Search used for a one-dimensional array of integers:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DECLARE INTEGER i, srch = ...</span><br><span class="line">DECLARE INTEGER x[] = [ ... ]</span><br><span class="line">FOR i = 0 TO LENGTH(x) - 1</span><br><span class="line">   IF x[i] EQ srch THEN</span><br><span class="line">      PRINT &quot;Found &quot;, srch</span><br><span class="line">      END</span><br><span class="line">   END IF</span><br><span class="line">NEXT i</span><br><span class="line">PRINT &quot;Not found&quot;, srch</span><br><span class="line">END</span><br></pre></td></tr></table></figure></p><p>Consider a one-dimensional unordered array of five integers [1, 4, 3, 2, 6], where integer 1 is located at index 0 and integer 6 is located at index 4. The pseudocode preforms the following tasks to find integer 3 in this array:</p><ol><li>Compare the integer at index 0 (1) with 3.</li><li>Because there’s no match, compare the integer at index 1 (4) with 3.</li><li>Because there’s still no match, compare the integer at index 2 (3) with 3.</li><li>Because there’s a match, print Found 3 and exit.</li></ol><p>Liear Search has a time complexity of $O(n)$, which is pronounced Big Oh of $n$. For $n$ data items, this algorithm requires a maximum of $n$ comparisons. On average, it performs $\frac n2$ comparisons. Linear Search offers linear performance.</p><blockquote><p>Efficiency<br>A downside of (负面) the Linear Search algorithm is that it is inefficient (效率低的). For an array of 4,000,000 data items, it would perform an average of 2,000,000 comparisons to find the specified item.</p></blockquote><h2 id="Explore-Linear-Search"><a href="#Explore-Linear-Search" class="headerlink" title="Explore Linear Search"></a>Explore Linear Search</h2><p>To let you experiment with Linear Search, I’ve created the LinearSearch Java application in Listing 1.</p><h3 id="Listing-1-A-Java-example-with-the-Linear-Search-algorithm"><a href="#Listing-1-A-Java-example-with-the-Linear-Search-algorithm" class="headerlink" title="Listing 1. A Java example with the Linear Search algorithm"></a>Listing 1. A Java example with the Linear Search algorithm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="comment">// Validate command line arguments count.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (args.length != <span class="number">2</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         System.err.println(<span class="string">"usage: java LinearSearch integers integer"</span>);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Read integers from first command-line argument. Return if integers </span></span><br><span class="line">      <span class="comment">// could not be read.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span>[] ints = readIntegers(args[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">if</span> (ints == <span class="keyword">null</span>)</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Read search integer; NumberFormatException is thrown if the integer</span></span><br><span class="line">      <span class="comment">// isn't valid.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> srchint = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Perform the search and output the result.</span></span><br><span class="line"></span><br><span class="line">      System.out.println(srchint + (search(ints, srchint) ? <span class="string">" found"</span></span><br><span class="line">                                                          : <span class="string">" not found"</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] readIntegers(String s)</span><br><span class="line">   &#123;</span><br><span class="line">      String[] tokens = s.split(<span class="string">","</span>);</span><br><span class="line">      <span class="keyword">int</span>[] integers = <span class="keyword">new</span> <span class="keyword">int</span>[tokens.length];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tokens.length; i++)</span><br><span class="line">         integers[i] = Integer.parseInt(tokens[i]);</span><br><span class="line">      <span class="keyword">return</span> integers;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] x, <span class="keyword">int</span> srchint)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++)</span><br><span class="line">         <span class="keyword">if</span> (srchint == x[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The LinearSearch application reads a comma-separated list of integers from its first command-line argument. It searchs the array for the integer identified by the second command-line argument, and outputs a found/not found message.</p><blockquote><p>Beware of the number format exception<br>Specify digits and +/- sign characters only in each command-line argument. Otherwise, this application (and the subsequent search and sort applicaitons) will create and throw a NumberFormatException object.</p></blockquote><p>To experiment with this application, start by compiling Listing 1:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac LinearSearch.java</span><br></pre></td></tr></table></figure></p><p>Next, run the resulting application as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java LinearSearch <span class="string">"4,5,8"</span> 5</span><br></pre></td></tr></table></figure></p><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 found</span><br></pre></td></tr></table></figure></p><p>Run the resulting application a second time, as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java LinearSearch <span class="string">"4,5,8"</span> 15</span><br></pre></td></tr></table></figure></p><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15 not found</span><br></pre></td></tr></table></figure></p><h2 id="The-Binary-Search-algorithm"><a href="#The-Binary-Search-algorithm" class="headerlink" title="The Binary Search algorithm"></a>The Binary Search algorithm</h2><p>The Binary Search algorithm searches an ordered one-dimensional array of $n$ data items for a specific data item. This algorithm consists of the following steps:   </p><ol><li>Set low and high index variables to the indexes of the array’s first and last data items, respectively (分别)</li><li>Terminate if the low index is greater than the high index. The serached-for data item is not in the array</li><li>Calculate the middle index by summing the low and high indexes and dividing the sum by 2</li><li>Compare the searched-for data item with the middle-indexed data item. Terminate if they are the same. The searched-for data item has been foud</li><li>If the searched-for data item is greater than the middle-indexed data item, set the low index to the middle index plus one and transfer execution to Step 2. Binary Search repeats the search in the upper half of the array</li><li>The searched-for data item must be smaller than the middle-indexed data item, so set the high index to the middle index minus on and transfer execution to Step 2. Binary Search repeats the earch in the lower half of the array</li></ol><p>Here is pseudocode representing the Binary Search algorithm for a one-dimensional array of integers:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DECLARE INTEGER x[] = [ ... ]</span><br><span class="line">DECLARE INTEGER loIndex = 0</span><br><span class="line">DECLARE INTEGER hiIndex = LENGTH(x) - 1</span><br><span class="line">DECLARE INTEGER midIndex, srch = ...</span><br><span class="line">WHILE loIndex LE hiIndex</span><br><span class="line">   midIndex = (loIndex + hiIndex) / 2</span><br><span class="line">   IF srch GT x[midIndex] THEN</span><br><span class="line">      loIndex = midIndex + 1</span><br><span class="line">   ELSE</span><br><span class="line">   IF srch LT x[midIndex] THEN</span><br><span class="line">      hiIndex = midIndex - 1</span><br><span class="line">   ELSE</span><br><span class="line">      EXIT WHILE</span><br><span class="line">   END IF</span><br><span class="line">END WHILE</span><br><span class="line">IF loIndex GT hiIndex THEN</span><br><span class="line">   PRINT srch, &quot; not found&quot;</span><br><span class="line">ELSE</span><br><span class="line">   PRINT srch, &quot; found&quot;</span><br><span class="line">END IF</span><br><span class="line">END</span><br></pre></td></tr></table></figure></p><p>Binary Search isn’t hard to understand. For example, consider a one-dimensional ordered array of six integers [3, 4, 5, 6, 7, 8], where integer 3 is located at idnex 0 and integer 8 is located at index 5. The pseudocode does the following to find integer 6 in this array:</p><ol><li>Obtain the low index (0) and high index (5)</li><li>Calculate the middle index: (0 + 5) / 2 = 2</li><li>Because the integer at index 2 (5) is less than 6, set the low index to 2 + 1 = 3</li><li>Calculate the middle index: (3 + 5) / 2 = 4</li><li>Because the integer at idnex 4 (7) is greater than 6, set the high idnex to 4 - 1 = 3</li><li>Calculate the middle index: (3 + 3) / 2 = 3</li><li>Becuase the integer at index 3 (6) equals 6, print 3 found and exit</li></ol><p>Binary Search has a time complexity of $O(log_2n)$, which is pronounced Big Oh of log $n$ to the base 2. For $n$ data items, Binary Search required a maximum of $1 + log_2n$ comparisons, making this algorithm vastly more efficient than Linear Serach, in most cases. The algorithm offers logarithmic performance (for more about logarithmic performance, see Figure 3 int Part 1 of this series).</p><blockquote><p>When Linear Search outperforms Bineary Search<br>Although Binary Search is typically more efficient than Linear Search, Binary Search isn’t as efficient for short arrays. This was discovered by famous computer scientist Donald Knuth.</p></blockquote><p>Listing 2 is a BinarySearch Java application that lets you experiment with Binary Search.</p><h3 id="Listing-2-A-Java-example-with-the-Binary-Search-algorithm"><a href="#Listing-2-A-Java-example-with-the-Binary-Search-algorithm" class="headerlink" title="Listing 2. A Java example with the Binary Search algorithm"></a>Listing 2. A Java example with the Binary Search algorithm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="comment">// Validate command line arguments count.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (args.length != <span class="number">2</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         System.err.println(<span class="string">"usage: java BinarySearch integers integer"</span>);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Read integers from first command-line argument. Return if integers </span></span><br><span class="line">      <span class="comment">// could not be read.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span>[] ints = readIntegers(args[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">if</span> (ints == <span class="keyword">null</span>)</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Read search integer; NumberFormatException is thrown if the integer</span></span><br><span class="line">      <span class="comment">// isn't valid.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> srchint = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Perform the search and output the result.</span></span><br><span class="line"></span><br><span class="line">      System.out.println(srchint + (search(ints, srchint) ? <span class="string">" found"</span></span><br><span class="line">                                                          : <span class="string">" not found"</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] readIntegers(String s)</span><br><span class="line">   &#123;</span><br><span class="line">      String[] tokens = s.split(<span class="string">","</span>);</span><br><span class="line">      <span class="keyword">int</span>[] integers = <span class="keyword">new</span> <span class="keyword">int</span>[tokens.length];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tokens.length; i++)</span><br><span class="line">         integers[i] = Integer.parseInt(tokens[i]);</span><br><span class="line">      <span class="keyword">return</span> integers;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] x, <span class="keyword">int</span> srchint)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> hiIndex = x.length - <span class="number">1</span>, loIndex = <span class="number">0</span>, midIndex;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (loIndex &lt;= hiIndex)</span><br><span class="line">      &#123;</span><br><span class="line">         midIndex = (loIndex + hiIndex) / <span class="number">2</span>;</span><br><span class="line">         <span class="keyword">if</span> (srchint &gt; x[midIndex])</span><br><span class="line">            loIndex = midIndex + <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         <span class="keyword">if</span> (srchint &lt; x[midIndex])</span><br><span class="line">            hiIndex = midIndex - <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The BinarySearch application reads a comma-separated list of integers from its first command-line argument. It searchs the array for the integer identified by the second command-line argument, and outputs a found/not found message.</p><blockquote><p>A bug in Binary Search<br>Joshua Bloch (author of Effictive Java) discovered a bug in the Binary Search algorithm, which can lead to a thrown instance of the ArrayIndexOutOfBoundsException class in Java. This bug manifests itself for arrays whose lengths are $2^{30}$ (roughly one billion) or greater.</p></blockquote><p>Compile the code in Listing 2 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac BinarySearch.java</span><br></pre></td></tr></table></figure></p><p>Run the resulting application as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java BinarySearch <span class="string">"4,5,8"</span> 5</span><br></pre></td></tr></table></figure></p><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15 not found</span><br></pre></td></tr></table></figure></p><h2 id="The-Bubble-Sort-algorithm"><a href="#The-Bubble-Sort-algorithm" class="headerlink" title="The Bubble Sort algorithm"></a>The Bubble Sort algorithm</h2><p>The Bubble Sort algorithm orders a one-dimensional array of $n$ data items into ascending or descending order. An outer loop makes $n-1$ passes over the array. Each pass uses an inner loop to exchange data items such that the next smallest (ascending) or largest (descending) data item “bubbles” towrads the beginning of the array.</p><p>The “Bubbling” action occurs in the inner loop, where each iteration compares the pass-numbered data item with each successive data item. If a successor data item is smaller (ascending sort) or larger (descending sort) than the pass-numbered data item, the successor data item is exchanged with the pass-numbered data item. </p><p>Here is pseudocode representing  Bubble Sort in a one-dimensional array of integers/ascending sort context:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DECLARE INTEGER i, pass</span><br><span class="line">DECLARE INTEGER x[] = [ ... ]</span><br><span class="line">FOR pass = 0 TO LENGTH(x) - 2</span><br><span class="line">   FOR i = LENGTH(x) - 1 DOWNTO pass + 1</span><br><span class="line">      IF x[i] LT x[pass] THEN // switch to &gt; for descending sort</span><br><span class="line">         EXCHANGE x[i], x[pass]</span><br><span class="line">      END IF</span><br><span class="line">   NEXT i</span><br><span class="line">NEXT pass</span><br><span class="line">END</span><br></pre></td></tr></table></figure></p><p>Bubble Sort is faily easy to understand. For example, consider a one-dimensional, unordered array of four integers: [18 16, 90, -3], where integer 18 is located at index 0 and integer -3 is located at index 3. When requested to sort this array into ascending order, Bubble Sort would execute as follow:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Pass 0               Pass 1               Pass 2</span><br><span class="line">======               ======               ======</span><br><span class="line">18  16  90  -3       -3  16  90  18       -3  16  90  18</span><br><span class="line">^           ^            ^       ^                ^   ^</span><br><span class="line">|           |            |       |                |   |</span><br><span class="line">-------------            ---------                -----</span><br><span class="line">-3  16  90  18       -3  16  90  18       -3  16  18  90</span><br><span class="line">^       ^                ^   ^ </span><br><span class="line">|       |                |   |</span><br><span class="line">---------                -----</span><br><span class="line">-3  16  90  18       -3  16  90  18</span><br><span class="line">^   ^</span><br><span class="line">|   |</span><br><span class="line">-----</span><br><span class="line">-3  16  90  18</span><br></pre></td></tr></table></figure></p><p>In terms of comparisons and also in terms of exchanges, Bubble Sort has a time complexity of $O(n^2)$, which is pronounced “Big Oh of $n$ squared”. Bubble Sort offers quadratic performance, which isn’t a problem for shorter-length arrays — espicially when you consider that Bubble Sort is easy to code. (See Part 1 for more about quadratic performance.)</p><p>The BubbleSort Java application in Listing lets you experiment with Bubble Sort.</p><h3 id="Listing-3-A-Java-example-with-the-Bubble-Sort-algorithm"><a href="#Listing-3-A-Java-example-with-the-Bubble-Sort-algorithm" class="headerlink" title="Listing 3. A Java example with the Bubble Sort algorithm"></a>Listing 3. A Java example with the Bubble Sort algorithm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Validate command line arguments count.</span></span><br><span class="line">      <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">         System.err.println(<span class="string">"usage: java BubbleSort integers"</span>);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Read integers from first command-line argument. Return if integers could not be read.</span></span><br><span class="line">      <span class="keyword">int</span>[] ints = readInteger(args[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">if</span> (ints == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Output integer array's length and number of inversions statistics to standard outpou device.</span></span><br><span class="line">      System.out.println(<span class="string">"N = "</span> + ints.length);</span><br><span class="line">      <span class="keyword">int</span> inversions = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ints.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; ints.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">int</span>[i] &gt; <span class="keyword">int</span>[j]) &#123;</span><br><span class="line">               inversions ++;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; </span><br><span class="line">      System.out.println(<span class="string">"I = "</span> + inversions);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Output unsorted integer values to standard output, sort the array, and output sorted values to standard output.</span></span><br><span class="line">      dum(ints);</span><br><span class="line">      sort(ints);</span><br><span class="line">      dump(intns);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] readIntegers(String s) &#123;</span><br><span class="line">      String[] tokens = s.split(<span class="string">","</span>);</span><br><span class="line">      <span class="keyword">int</span>[] integers = <span class="keyword">new</span> <span class="keyword">int</span>[tokens.length];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tokens.length; i++)</span><br><span class="line">         integers[i] = Integer.parseInt(tokens[i]);</span><br><span class="line">      <span class="keyword">return</span> integers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dump</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">         System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">      System.out.print(<span class="string">'\n'</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] x)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> pass = <span class="number">0</span>; pass &lt; x.length - <span class="number">1</span>; pass++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = x.length -<span class="number">1</span>; i &gt; pass; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (x[i] &lt; x[pass]&gt;) &#123;</span><br><span class="line">                  <span class="keyword">int</span> temp = x[i];</span><br><span class="line">                  x[i] = x[pass];</span><br><span class="line">                  x[pass] = temp;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BubbleSort reads a comma-separated list of integers from its command-line argument. It outputs the array length, calculates and outputs the number of inversions (larger items to the left of smaller items in the unsorted array), outputs the unsorted array, sorts the array, and outputs the sorted array. (Selection Sort and Insertion Sort, which I’ll introduce next, behave similary.)</p><p>Compile Listing 3 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac BubbleSort.java</span><br></pre></td></tr></table></figure></p><p>Run the resulting application as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java BubbleSort <span class="string">"18,16,90,-3"</span></span><br></pre></td></tr></table></figure></p><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">N = 4</span><br><span class="line">I = 4</span><br><span class="line">18 16 90 -3</span><br><span class="line">-3 16 18 90</span><br></pre></td></tr></table></figure></p><h2 id="The-Selection-Sort-algorithm"><a href="#The-Selection-Sort-algorithm" class="headerlink" title="The Selection Sort algorithm"></a>The Selection Sort algorithm</h2><p>The Selection Sort algorithm orders a one-dimensional array of $n$ data items into ascending order or descending order. An outer loop makes $n - 1$ passes over the array. Each pass uses an inner loop to find the next smallest (ascending sort) or lastest (descending sort) data item, which is exchanged with the pass-numbered data item.</p><p>Selection Sort assumes that the data item at the pass-numbered index is the smallest (ascending sort) or the largest (descending sort) of the remaining data items. It searches the rest of the array for a data item that’s smaller/larger than this data item, and performs an exchange at the end of the search when a smaller/larger data item is found.</p><p>The following pseudocode expresses Selection Sort in a one-dimensinal array of integers/ascending sort context:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DECLARE INTEGER i, min, pass</span><br><span class="line">DECLARE INTEGER x[] = [ ... ]</span><br><span class="line">FOR pass = 0 TO LENGTH(x) - 2</span><br><span class="line">   min = pass</span><br><span class="line">   FOR i = pass + 1 TO LENGTH(x) - 1</span><br><span class="line">      IF x[i] LT x[min] THEN</span><br><span class="line">         min = i</span><br><span class="line">      END IF</span><br><span class="line">   NEXT i</span><br><span class="line">   IF min NE pass THEN</span><br><span class="line">      EXCHANGE x[min], x[pass]</span><br><span class="line">   END IF</span><br><span class="line">NEXT pass</span><br><span class="line">END</span><br></pre></td></tr></table></figure></p><p>Selection Sort is faily easy to understand. For example, consider a one-dimensional unordered array of four integers: [18, 16, 90, -3], where integer 18 is located at index 0  and integer -3 is located at index 3. When requested to sort this array into  ascending order, the Selection Sort pseudocode performs the sort as follows:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Pass 0                        Pass 1                        Pass 2</span><br><span class="line">======                        ======                        ======</span><br><span class="line">18  16  90  -3                -3  16  90  18                -3  16  90  18</span><br><span class="line">^                                 ^                                 ^</span><br><span class="line">|                                 |                                 |</span><br><span class="line">min = 0                           min = 1                           min = 2</span><br><span class="line"></span><br><span class="line">18  16  90  -3                -3  16  90  18                -3  16  90  18</span><br><span class="line">    ^                                 ^                                 ^</span><br><span class="line">    |                                 |                                 |</span><br><span class="line">    16 &lt; 18, min = 1                  90 &gt; 16, min = 1                  18 &lt; 90, min = 3</span><br><span class="line">                                                                    ^   ^</span><br><span class="line">18  16  90  -3                -3  16  90  18                        |   |</span><br><span class="line">        ^                                 ^                         -----</span><br><span class="line">        |                                 |                 -3  16  18  90</span><br><span class="line">        90 &gt; 16, min = 1                  18 &gt; 16, min = 1</span><br><span class="line"></span><br><span class="line">18  16  90  -3                               </span><br><span class="line">            ^   </span><br><span class="line">            |</span><br><span class="line">            -3 &lt; 16 min = 3</span><br><span class="line">^           ^</span><br><span class="line">|           |</span><br><span class="line">------------- </span><br><span class="line">-3  16  90  18</span><br></pre></td></tr></table></figure></p><p>Selection Sort has a time complexity of $O(n^2)$ comparisons and $O(n)$ exchanges. The algorithm offers quadratic performance in terms of comparisons and linear performance in terms of exchanges, which makes it somewhat more efficient than Bubble Sort.</p><p>Listing 4 shows the SelectionSort application in Java code.</p><h3 id="Listing-4-A-Java-example-with-the-Selection-Sort-algorithm"><a href="#Listing-4-A-Java-example-with-the-Selection-Sort-algorithm" class="headerlink" title="Listing 4. A Java example with the Selection Sort algorithm"></a>Listing 4. A Java example with the Selection Sort algorithm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">public final class SelectionSort</span><br><span class="line">&#123;</span><br><span class="line">   public static void main(String[] args)</span><br><span class="line">   &#123;</span><br><span class="line">      // Validate command line arguments count.</span><br><span class="line"></span><br><span class="line">      if (args.length != 1)</span><br><span class="line">      &#123;</span><br><span class="line">         System.err.println(&quot;usage: java SelectionSort integers&quot;);</span><br><span class="line">         return;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // Read integers from first command-line argument. Return if integers </span><br><span class="line">      // could not be read.</span><br><span class="line"></span><br><span class="line">      int[] ints = readIntegers(args[0]);</span><br><span class="line">      if (ints == null)</span><br><span class="line">         return;</span><br><span class="line"></span><br><span class="line">      // Output integer array&apos;s length and number of inversions statistics to</span><br><span class="line">      // standard output device.</span><br><span class="line"></span><br><span class="line">      System.out.println(&quot;N = &quot; + ints.length);</span><br><span class="line">      int inversions = 0;</span><br><span class="line">      for (int i = 0; i &lt; ints.length - 1; i++)</span><br><span class="line">         for (int j = i + 1; j &lt; ints.length; j++)</span><br><span class="line">            if (ints[i] &gt; ints[j])</span><br><span class="line">               inversions++;</span><br><span class="line">      System.out.println(&quot;I = &quot; + inversions);</span><br><span class="line"></span><br><span class="line">      // Output unsorted integer values to standard output, sort the array, </span><br><span class="line">      // and output sorted values to standard output.</span><br><span class="line"></span><br><span class="line">      dump(ints);</span><br><span class="line">      sort(ints);</span><br><span class="line">      dump(ints);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   static void dump(int[] a)</span><br><span class="line">   &#123;</span><br><span class="line">      for (int i = 0; i &lt; a.length; i++)</span><br><span class="line">         System.out.print(a[i] + &quot; &quot;);</span><br><span class="line">      System.out.print(&apos;\n&apos;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   static int[] readIntegers(String s)</span><br><span class="line">   &#123;</span><br><span class="line">      String[] tokens = s.split(&quot;,&quot;);</span><br><span class="line">      int[] integers = new int[tokens.length];</span><br><span class="line">      for (int i = 0; i &lt; tokens.length; i++)</span><br><span class="line">         integers[i] = Integer.parseInt(tokens[i]);</span><br><span class="line">      return integers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   static void sort(int[] x)</span><br><span class="line">   &#123;</span><br><span class="line">      for (int pass = 0; pass &lt; x.length - 1; pass++)</span><br><span class="line">      &#123;</span><br><span class="line">         int min = pass;</span><br><span class="line"></span><br><span class="line">         for (int i = pass + 1; i &lt; x.length; i++)</span><br><span class="line">            if (x[i] &lt; x[min])</span><br><span class="line">               min = i;</span><br><span class="line"></span><br><span class="line">         if (min != pass)</span><br><span class="line">         &#123;</span><br><span class="line">            int temp = x[min];</span><br><span class="line">            x[min] = x[pass];</span><br><span class="line">            x[pass] = temp;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Compile Listing 4 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac SelectionSort.java</span><br></pre></td></tr></table></figure></p><p>Run the resulting application as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java SelectionSort <span class="string">"18,16,90,-3"</span></span><br></pre></td></tr></table></figure></p><p>You should oberve the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">N = 4</span><br><span class="line">I = 4</span><br><span class="line">18 16 90 -3</span><br><span class="line">-3 16 18 90</span><br></pre></td></tr></table></figure></p><h2 id="The-Insertion-Sort-algorithm"><a href="#The-Insertion-Sort-algorithm" class="headerlink" title="The Insertion Sort algorithm"></a>The Insertion Sort algorithm</h2><p>The Insertion Sort algorithm orders a one-dimensional array of $n$ daata items into ascending order or descending order. An outer loop makes $n - 1$ passes over the array. Each pass selects the next data item to be inserted into the appropriate position. It uses an inner loop to find this position, shifting data items to make room.</p><p>Insertion Sort begins by dividing the data structure into sorted and unsorted sections. Initially, the sorted section contains the data item at index 0; hte unsorted section contains all other data ites. During the sort, each unsorted section data item is inserted into the proper position in the sorted section and the unsorted section shrinks (收缩) by on data item.</p><p>Here is pseudocode for the Insertion Sort algorithm in a one-dimensinal array of integers, where you are doing an ascending sort:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DECLARE INTEGER a, i, j</span><br><span class="line">DECLARE INTEGER x[] = [ ... ]</span><br><span class="line">FOR i = 1 TO LENGTH(x) - 1</span><br><span class="line">   a = x[i]</span><br><span class="line">   j = i</span><br><span class="line">   WHILE j GT 0 AND x[j - 1] GT a</span><br><span class="line">      x[j] = x[j - 1]</span><br><span class="line">      j = j - 1</span><br><span class="line">   END WHILE</span><br><span class="line">   x[j] = a</span><br><span class="line">NEXT i</span><br><span class="line">END</span><br></pre></td></tr></table></figure></p><p>Like Bubble Sort, Insertion Sort is fairly easy to understand. For example, consider a one-dimensional unordered array of four integers: [18, 16, 90, -3], where integer 18 is located at index 0 and integer -3 is located at index 3. When instructed to sort this array into ascending order, the algorithm performs the sort as follows:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = 1                 i = 2                 i = 3</span><br><span class="line">      =====                 =====                 =====</span><br><span class="line">18 | 16   90   -3     16   18 | 90   -3     16   18   90 | -3     -3   16   18   90</span><br><span class="line">     ^                          ^                          ^</span><br><span class="line">     |                          |                          | </span><br><span class="line">     a,j                        a,j                        a,j</span><br></pre></td></tr></table></figure></p><p>The sorted section appears on the left and initially consists of [18]. The unsorted section apprears on the right and initially consists of [16, 90, -3].</p><p>Insertion Sort has a time complexity of $O(n)$ comparisons for the bast case (data is already sorted or nearly sorted) and $O(n^2)$ for the average and worst cases. The algorithm offers linear (best case) or quadratic (average/worst case) performance.</p><p>Listing 5 shows the source code for the InsertionSort application.</p><h3 id="Listing-5-A-Java-example-with-the-Insertion-Sort-algorithm"><a href="#Listing-5-A-Java-example-with-the-Insertion-Sort-algorithm" class="headerlink" title="Listing 5. A Java example with the Insertion Sort algorithm"></a>Listing 5. A Java example with the Insertion Sort algorithm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="comment">// Validate command line arguments count.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (args.length != <span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         System.err.println(<span class="string">"usage: java InsertionSort integers"</span>);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Read integers from first command-line argument. Return if integers </span></span><br><span class="line">      <span class="comment">// could not be read.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span>[] ints = readIntegers(args[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">if</span> (ints == <span class="keyword">null</span>)</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Output integer array's length and number of inversions statistics to</span></span><br><span class="line">      <span class="comment">// standard output device.</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"N = "</span> + ints.length);</span><br><span class="line">      <span class="keyword">int</span> inversions = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ints.length - <span class="number">1</span>; i++)</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; ints.length; j++)</span><br><span class="line">            <span class="keyword">if</span> (ints[i] &gt; ints[j])</span><br><span class="line">               inversions++;</span><br><span class="line">      System.out.println(<span class="string">"I = "</span> + inversions);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Output unsorted integer values to standard output, sort the array, </span></span><br><span class="line">      <span class="comment">// and output sorted values to standard output.</span></span><br><span class="line"></span><br><span class="line">      dump(ints);</span><br><span class="line">      sort(ints);</span><br><span class="line">      dump(ints);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dump</span><span class="params">(<span class="keyword">int</span>[] a)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">         System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">      System.out.print(<span class="string">'\n'</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">int</span>[] readIntegers(String s)</span><br><span class="line">   &#123;</span><br><span class="line">      String[] tokens = s.split(<span class="string">","</span>);</span><br><span class="line">      <span class="keyword">int</span>[] integers = <span class="keyword">new</span> <span class="keyword">int</span>[tokens.length];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tokens.length; i++)</span><br><span class="line">         integers[i] = Integer.parseInt(tokens[i]);</span><br><span class="line">      <span class="keyword">return</span> integers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] x)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> j, a;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// For all integer values except the leftmost value ...</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; x.length; i++)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="comment">// Get integer value a.</span></span><br><span class="line"></span><br><span class="line">         a = x[i];</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Get index of a. This is the initial insert position, which is</span></span><br><span class="line">         <span class="comment">// used if a is larger than all values in the sorted section.</span></span><br><span class="line"></span><br><span class="line">         j = i;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// While values exist to the left of a's insert position and the</span></span><br><span class="line">         <span class="comment">// value immediately to the left of that insert position is</span></span><br><span class="line">         <span class="comment">// numerically greater than a's value ...</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; x[j - <span class="number">1</span>] &gt; a)</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="comment">// Shift left value -- x[j - 1] -- one position to its right --</span></span><br><span class="line">            <span class="comment">// x[j].</span></span><br><span class="line"></span><br><span class="line">            x[j] = x[j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update insert position to shifted value's original position</span></span><br><span class="line">            <span class="comment">// (one position to the left).</span></span><br><span class="line"></span><br><span class="line">            j--;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Insert a at insert position (which is either the initial insert</span></span><br><span class="line">         <span class="comment">// position or the final insert position), where a is greater than</span></span><br><span class="line">         <span class="comment">// or equal to all values to its left.</span></span><br><span class="line"></span><br><span class="line">         x[j] = a;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Compile Listing 5 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac InsertionSort.java</span><br></pre></td></tr></table></figure></p><p>Run the resulting appilcaiton as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java InsertionSort <span class="string">"18,16,90,-3"</span></span><br></pre></td></tr></table></figure></p><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">N = 4</span><br><span class="line">I = 4</span><br><span class="line">18 16 90 -3</span><br><span class="line">-3 16 18 90</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JavaWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data structures and algorithms in Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is a data structure and how to write your first algorithm in Java</title>
      <link href="/2020/04/06/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/What%20is%20a%20data%20structure%20and%20how%20to%20write%20your%20first%20algorithm%20in%20Java/"/>
      <url>/2020/04/06/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/What%20is%20a%20data%20structure%20and%20how%20to%20write%20your%20first%20algorithm%20in%20Java/</url>
      
        <content type="html"><![CDATA[<p>Java programmer use data structures to store and organize data, and we use algorithms to manipulate (操纵) the data in those structures. The more you understand about data structures and alogrithm, and how they work together, the more efficient your Java programs will be.</p><p>This tutorial launches a short series introducing data structures and algorithm. You’ll learn what a data structures is and how data structures are classified. You’ll also learn what an algorithm is, how algorithms are represented, and how to use time and space complexity functions to compare similar algorithm.</p><h2 id="What-is-a-data-structures"><a href="#What-is-a-data-structures" class="headerlink" title="What is a data structures?"></a>What is a data structures?</h2><p>Data structures are based on abstract data type (ADT), which Wikipedia defines as follows:</p><blockquote><p> (A) mathematical model for data types where a data type is defined by its behavior (semantics) from the point of view of a user of the data, specifically in terms of (从…方面) possible values, possible operations on data of this type, and the behavior of these operations.</p></blockquote><p>An ADT doesn’t care about the memory representation of its values or how its operations are implemented. It’s like a Java interface, which is a data type that’s disconnected from any implementation. in contrast, a data structure is a concrete (实在的) implementatin of one or more ADTs, similar to how Java classes implements interfaces.</p><p>Examples of ADTs include Employee, Vehicle, Array, and List. Consider the List ADT (also know as the Sequence ADT), which describes an ordered collection of elements that share a common type. Each element in this collection has it own position and duplicate (复制) elements are allowed. Basic operations supported by the List ADT include:</p><ul><li>Creating a new and emtry list</li><li>Appending a value to the end of the list</li><li>Inserting a value within the list</li><li>Deleting a value from the list</li><li>Iterating over the list</li><li>Destroying the list</li></ul><p>Data structures that can implement the List ADT include fixed-size and dynamically sized one-dimensional arrays and singly-linked lists.</p><h3 id="Classifying-data-structures"><a href="#Classifying-data-structures" class="headerlink" title="Classifying data structures"></a>Classifying data structures</h3><p>There are many kinds of data structures, ranging from single variables to arrays or linked lists of objects containing multiple fields. All data structures can be classified as primitives (原始的) or aggregates (聚集), and some are classified as containers.</p><h3 id="Primitives-vs-aggregates"><a href="#Primitives-vs-aggregates" class="headerlink" title="Primitives vs aggregates"></a>Primitives vs aggregates</h3><p>The simplest kind of data structures stores single data iterm; for example, a variable that stores a Boolean value or a variable that stores an integer. I refer to such data structures as primitives.</p><p>Many data structures are capable of storing multiple data items. For example, an array can store multiple data itemsi its various slots, and an object can store multiple data items via its fields. I refer to these data structures as aggregates.</p><p>All of the data structures we’ll look at in this series are aggregates.</p><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p>Anything from which data items are stored and retrieved could be considered a data structures. Examples include the data structures derived from the previously mentioned Employee, Vechile, Array, and List ADTs.</p><p>Many data structures are designed to describes various entities. Instances of an Employee class are data structures that exist to describe various employees, for instance. In contrast, some data structures exist as generic storage vessels (容器) for other data structures. For example, an array can store primitive values or object references. I refer to this letter category of data structures as containers.</p><p>As well as being aggregates, all of the data structures we’ll look at in this series are containers.</p><blockquote><p>Data structures and algorithm in Java Collections<br>The Java Collections Framwork supports many kinds of container-oriented data strctures and associated algorithms.</p></blockquote><h3 id="Design-patterns-and-data-structures"><a href="#Design-patterns-and-data-structures" class="headerlink" title="Design patterns and data structures"></a>Design patterns and data structures</h3><p>It’s become fairly (相当地) common to use design patterns to introduce university students to data structures. A Brown University paper surveys (调查) serveral design patterns that are useful for designing high-quality data structures. Among other things, the paper demonstrates that the Adapter pattern is useful for designing stacks and queues. The demonstration code is shown in Listing 1.</p><h3 id="Listing-1-Using-the-Adapter-pattern-for-stacks-and-queues"><a href="#Listing-1-Using-the-Adapter-pattern-for-stacks-and-queues" class="headerlink" title="Listing 1. Using the Adapter pattern for stacks and queues"></a>Listing 1. Using the Adapter pattern for stacks and queues</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DequeStack</span> <span class="keyword">implements</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Deque D; <span class="comment">// holds the elements of the stack</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DequeStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        D = <span class="keyword">new</span> MyDeque();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> D.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> D.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        D.insertLast(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">top</span><span class="params">()</span> <span class="keyword">throws</span> StackEmptyException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> D.lastElement();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(DequeEmptyException err) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StackEmptyException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> <span class="keyword">throws</span> StackEmptyException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> D.removeLast();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(DequeEmptyException err) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StackEmptyException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 1 excerpts (摘录) the Brown University paper’s DequeStack class, which demonstractes the Adapter pattern. Note that Stack and Deque are interfaces that describe Stack and Deque ADTs. MyDeque in a class that implements Deque.</p><blockquote><p>Overriding interface methods<br>The original code that Listing 1 is based on didn’t persent the source code to Stack, Deque, and MyDeque. For clarity, I’ve introduced @Override annotations to show that all of DequeStack’s non-constructor methods override Stack method.</p></blockquote><p>DequeStack adapts (改编) MyDeque so that it can implements Stack. All of DequeStack’s method are one-line calls to the Deque interface’s methods. However, there is a small wrinkle in which Deque exceptions are converted into Stack exceptions.</p><h2 id="What-is-an-algorithm"><a href="#What-is-an-algorithm" class="headerlink" title="What is an algorithm?"></a>What is an algorithm?</h2><p>Historically used as a tool for mathematical computation, algorithms are deeply connected with computer science, and with data structures in particular. An algorithm is a sequence of instructions that accomplishes (完成) a task in a finite period of time. Qualities of an algorithm are as follows:</p><ul><li>Receives zero or more inputs</li><li>Produces at least one output</li><li>Consists of clear and unambiguous (清晰的) instructions (指令)</li><li>Terminates after a finite (有限的) number of steps</li><li>Is basic enough that a person can carry it out using a pencil and paper</li></ul><p>Note that while programs may be algorithmic. One example is a code sequence that prints a report. Mote famously, Euclid’s algorithm is used to calculate the mathematical greatest common divisor (最大公约数). A case could be even be made that a data structure’s basic operations (such as store value in array slot) are algorithms. In this series, for the most part, I’ll focus on higher-level algorithm used to process data structures, such as the Binary Search and Matrix Multiplication algorithms.</p><h3 id="Flowcharts-and-pseudocode-伪码"><a href="#Flowcharts-and-pseudocode-伪码" class="headerlink" title="Flowcharts and pseudocode (伪码)"></a>Flowcharts and pseudocode (伪码)</h3><p>How do you represent an alogorithm? Writing code before fully understanding its underlying algorithm can lead to bugs, so what’s a beeter alternative? Two options are flowcharts and preudocode.</p><h3 id="Using-flowcharts-to-represent-algorithms"><a href="#Using-flowcharts-to-represent-algorithms" class="headerlink" title="Using flowcharts to represent algorithms"></a>Using flowcharts to represent algorithms</h3><p>A flowcahrt is a visual representation of an algorithm’s control flow. This representation illustrates (阐明) that need to be executed, decisions that need to be made, logic flow (for iteration and other purposes), and terminals that indicate (表明) start and end points. Figure 1 reveals the various symbols that flowcharts use to visualize algorithms.</p><p><img src="001.jpg" alt="Figure 1. Flowcharts use symbols to represent statement, decisions, logic flow, and terminals"></p><p>Consider an algorithm that initializes a counter to 0, reads characters until a newline (<code>\n</code>) character is seen, increments the counter for each digit character that’s beed read, and prints the counter’s value after the newline character has been read. The flowchart in Figure 2 illustrates this algorithm’s control flow：<br><img src="002.jpg" alt="Figure 2. This flowchart show how to count from 0 to 9"></p><p>A flowchart’s simplicity and its ability to present an algorithm’s control flow visually (so that it’s is easy to folow) are its major advantages. Flowcharts also have several disadvantages (不利), however:</p><ul><li>It’s easy to introduce errors or inaccuracies (误差) into highly-detailed flowcharts because of the tedium (啰嗦) associated with drawing them</li><li>It takes time to position, label, and connect a flowchart’s symbols, even using tools to speed up this process. This delay might slow your understanding of an algorithm</li><li>Flowcharts belong to the structured programming (结构化编程) era and aren’t as useful in an object-oriented. In constract, the Unified Modeling Language (UML) is more appropriate for creating object-oriented visual representations.</li></ul><h3 id="Using-pseudocode-to-represent-algorithms"><a href="#Using-pseudocode-to-represent-algorithms" class="headerlink" title="Using pseudocode to represent algorithms"></a>Using pseudocode to represent algorithms</h3><p>An alternative (可供替代的) to flowcharts is pseudocode, which is a textual representation of an algorithm that approximates (接近) the final souce code. Pseudocode is useful for quickly writing down an algorithm’s representation. Because syntax is not a concern, there are no hard-and-fast rules for writing pseudocode.</p><p>You should strive (努力) for consistency (一致性) when writing pseudocode. Being consistent will make it much easier to translate the pseudocode into actual source code. For example, consider the following pseudocode representation of the previous counter-oriented flowchart:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DECLARE CHARACTER ch = &apos;&apos;</span><br><span class="line">DECLARE INTEGER count = 0</span><br><span class="line">DO</span><br><span class="line">    READ ch</span><br><span class="line">    IF ch GE &apos;0&apos; AND ch LE &apos;9&apos; THEN </span><br><span class="line">        count = count + 1</span><br><span class="line">    END IF</span><br><span class="line">UNTIL ch EQ &apos;\n&apos;</span><br><span class="line">PRINT count</span><br><span class="line">END</span><br></pre></td></tr></table></figure></p><p>The pseudocode first presnets a couple of DECLARE statements that introduce variables ch and count, initialized to default values. It then presents a DO loop that executes UNTIL ch contains <code>\n</code> (the newline character), at which point the loop ends and a PRINT statement outputs count’s value.</p><p>For each loop iteration, READ causes a character to be read from the keyboard (or perhaps a file — in this case it doesn’t matter what constitues the underlying input source) and assigned to ch. If this character is a digit (ont of 0 through 9), count is incremented by 1.</p><h3 id="Choosing-the-right-algorithm"><a href="#Choosing-the-right-algorithm" class="headerlink" title="Choosing the right algorithm"></a>Choosing the right algorithm</h3><p>The data structures and algorithms you use critically (严重地) affect two factors in your applications:</p><ol><li>Memory useage (for data structures)</li><li>CPU time (for algorithms that interact (互动) with those data structures)</li></ol><p>It follows that you should be especially mindful of the algorithms and data structures you use for applications that will process lost of data. These include applications used for big data and the Internet of Things.</p><blockquote><p>Balancing memory and CPU<br>When choosing a data structure or algorithm, you will somtimes discover an inverse relationship between memory useage and CPU time: the less memory a data structure uses, the more CPU time associated algorithms need to process the data structure’s data items. Also, the more memory a data structure uses, the less CPU time associated algorithems will nedd to process the data items-leading to faster algorithm results.</p></blockquote><p>As much as possible, you should strive to balance memory use with CPU time. You can simplify this task by analyzing algorithm to determine their efficiency. How well does one algorithm preform against another of similar nature? Answering this question will help you make good choices given a choice between multiple algorithms.</p><h3 id="Measuring-algorithm-efficiency"><a href="#Measuring-algorithm-efficiency" class="headerlink" title="Measuring algorithm efficiency"></a>Measuring algorithm efficiency</h3><p>Some algorithms preform better than others. For example, the Binary Search algorithm is almost always more efficient than the Linear Search algorithm. You want to choose the most efficient algorithm for your application’s needs, but that choice might not be as obvious as you would think.</p><p>For instance, what does it mean if the Selection Sort algorithm takes 0.4 seconds to sort 10000 integers on a given machine? That benchmark is only valid for that particular machine, that particular implementation of the algorithm, and for the size of the input data.</p><p>As computer scientist, we use time complextiy and space complexity to measure an algorithm’s efficiency, distilling these into complexity functions to abstract implementation and runtime enviroment details. Conplexity functions reveal the variance in an algorithm’s time and space reuirements based on the amount of input data:</p><ul><li>A time-complexity function measures an algorithm’s time complexity — meaning how long an algorithm takes to complete</li><li>A space-complexity function measures an algorithm’s space complexity — meaning the amount of memory overhead (开销) required by the algorithm to preform its task</li></ul><p>Both complexity functions are based on the size of input (n), which somehow reflects the amount of input data. Consider the follwoing preudocode for array printing:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DECLARE INTEGER i, x[] = [ 10, 15, -1, 32 ]</span><br><span class="line">FOR i = 0 TO LENGTH(x) - 1</span><br><span class="line">   PRINT x[i]</span><br><span class="line">NEXT i</span><br><span class="line">END</span><br></pre></td></tr></table></figure></p><h2 id="Time-complexity-and-time-complexity-functions"><a href="#Time-complexity-and-time-complexity-functions" class="headerlink" title="Time complexity and time-complexity functions"></a>Time complexity and time-complexity functions</h2><p>You can express the time complexty of this algorithm by specifying the time-complexity function $t(n) = an + b$, where $a$ (a constant multiplier) represents the amount of time to complete one loop  iteration, and $b$ represents the algorithm’s setup time. In this example, the time complexity is linear.</p><p>The $t(n) = an + b$ function assumes that time complexity is measured in terms of a chronological (按时间顺序的) value (such as seconds). Because you’ll want to abstract machine details, you’ll often express time complexity as the number of setps to complete.</p><p>How we define a step can vary from (不同于) one algorithm to another. In this case, if you indentified the single print instruction as the program’s step, you would rewrite the time-complexcity function in terms of the printing step: $t(n) = n$; for $n$ arrays elements, $n$ steps are needed to print the array.</p><p>It’s important to take care when defining an algorithm’s steps, so that the definition is meaningful (有意义的) and correlates with the algorithm’s input size. For example, it makes sense to define printing as the steps for the array-printing algorithm, because printing dominates (控制) the runtime and depends on the input size (number of array elements to print).</p><p>It’s also possible to define steps in terms of comparisons (比较) and exchanges. In a sorting algorithm, for instance, you might define steps in terms of comparisons if comparisons dominate the runtime or exchanges dominate the runtime.</p><p>It’s fairly easy to choose a time-complexity function for the array-printing example, but it can be more difficult to find this function for more complicated algorithms. Use the following rules-of -thumb to simplify this task: </p><ul><li>Algorithms with single loops are typically linear — their time-complexity functions are specified in terms of $n$</li><li>Algorithms with two nested loops are typically quadratic — their time-complexity functions are specified in terms of $n^2$</li><li>Algorithms with a triply-nested loop are typically cubic — their time-complexity functions are spceified in terms of $n^3$</li><li>The pattern continues with quadruply and higher nested loops</li></ul><p>There rules-of-thumb (经验法则) work best when a loop executes $n$ times (where $n$ is the size of the input data). This isn’t always the case, however, as demonstrated by the Selection Sort algorithm represented in pseudocode below:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DECLARE INTEGER i, min, pass</span><br><span class="line">DECLARE INTEGER x[] = [ ... ]</span><br><span class="line">FOR pass = <span class="number">0</span> <span class="function">TO <span class="title">LENGTH</span><span class="params">(x)</span> - 2</span></span><br><span class="line"><span class="function">   min </span>= pass</span><br><span class="line">   FOR i = pass + <span class="number">1</span> <span class="function">TO <span class="title">LENGTH</span><span class="params">(x)</span> - 1</span></span><br><span class="line"><span class="function">      IF x[i] LT x[min] THEN</span></span><br><span class="line"><span class="function">         min </span>= i</span><br><span class="line">      END IF</span><br><span class="line">   NEXT i</span><br><span class="line">   IF min NE pass THEN</span><br><span class="line">      EXCHANGE x[min], x[pass]</span><br><span class="line">   END IF</span><br><span class="line">NEXT pass</span><br><span class="line">END</span><br></pre></td></tr></table></figure></p><p>Because this algorithm consists of thw nested loops, you might think that its preformance is quadratic. That’t only partially correct, however, because the algorithm’s performanc depends on whether you choose comparisons (比较) or exchanges as the algorithm’s step:</p><ul><li>If you choose an exchange as one step (bacause you think that exchanges dominate the runtime) you end up with a linear time-complexity function bacause $n - 1$ exchagnes are required to sort $n$ data items. This function is specified as $t(n) = n - 1$.</li><li>If you choose a comparison as one step (bacause you think that comparison deminate the runtime) you end up with $t(n) = (n - 1) + (n - 2) + … + 1$, which sortens to $t(n) = \frac{n^2}{2} - \frac{n}{2}$. Comparison occur in the inner loop, which executes $n-1$ times for the first outer loop iteration, $n-2$ for the second, and so on down to once for the final outer loop iteration.</li></ul><h2 id="Space-complexity-and-space-complexity-funtions"><a href="#Space-complexity-and-space-complexity-funtions" class="headerlink" title="Space complexity and space-complexity funtions"></a>Space complexity and space-complexity funtions</h2><p>An algorithm’s space complexity indicates the amount of extra memory needed to accomplish its task. For printing an array, a constant amount of extra memory (for code storege, stack space to store the return address whwen <code>PRINT</code> is called, and space for varialbe <code>i</code>‘s value) is needed no matter how lager the array.</p><p>You can express the array-printing algorithm’s space complexity via space-complexity function $s(n) = c$, where $c$ signifies how much constant additional space is requried. This value represents overhead only; it doesn’t include space for the data being processed. In this case, it doesn’t include the array.</p><p>Space complexity is expressed in terms of mechine-independent memory cells instead of mechine-dependent bytes. A memory cell holds some kind of data. For the array-printing algorithm, <code>i</code>‘s memory cell stores an integer value.</p><h2 id="Comparing-algorithms"><a href="#Comparing-algorithms" class="headerlink" title="Comparing algorithms"></a>Comparing algorithms</h2><p>You use time complexity and space complexity functions to compare the algorihm to other of a similar nature (one sorting algorithm to another sorting algorithm, for example). In order to ensure a fair comparison, you must use the same definition for step and memory cell in each algorithm.</p><p>Even when you chosen identical (完全同样的) step an memory cell definations, however, comparing algorithms can still prove tricky (难办的). Because complexities are often nonlinear, an algorithm’s input size can greatly affect the comparison result. As an example, consider two time-compleity functions:</p><ul><li>$t_1(n) = 10n^2 + 15n$</li><li>$t_2(n) = 150n + 5$</li></ul><p>When $n$ equals 1, $t_1$ yields 25 steps, whereas $t_2$ yields 155 steps. In this case, $t_1$ is clearly better. This pattern continues until $n$ equals 14, at which point $t_1$ yields 2170 steps and $t_2$ yields 2105 steps. In this case, $t_2$ is the much better choice for this and successor value of $n$.</p><h2 id="Using-Big-oh-to-represent-upper-bounds"><a href="#Using-Big-oh-to-represent-upper-bounds" class="headerlink" title="Using Big oh to represent upper bounds"></a>Using Big oh to represent upper bounds</h2><p>Computer scientists commonly compare algorithms as $n$ tends (趋于) to infinity (无限); this is knwon as asymptotic analysic (渐近分析). Complexity functions serve as the upper bound (上界) of the algorithm’s asymptotic behavior (as $n$ approaches (接近) infinity), and a notation (标记法) called Big Oh is used to represent these upper bounds. Here’s the formal (正规的) defination for Big Oh:</p><blockquote><p>A function $f(n)$ is $O(g(n))$ if and only if there exist two constants $c$ and $n_0$ such that $f(n) &lt;= cg(n)$ for all $n &gt;= n_0$</p></blockquote><p>Note: $n$, $f(n)$, $c$, and $n_0$ must be positive.</p><p>$f(n)$ represents the algorithm’s computing time. When we say that this function is $O(g(n))$, we mean that (in terms of steps) it takes no longer than a constant multiplied by $g(n)$ for this function to execute. For example, here are the Big Oh notations for the previous time-complexity functions:</p><script type="math/tex; mode=display">\begin{equation}\begin{split}t_1(n) &= O(n^2) \\t_2(n) &= O(n)\end{split}\end{equation}</script><blockquote><p>Simplifying Big Oh<br>It’s common to throw away all terms (条件) except the largest and any constant multiplier for the largest term when specifiying $g(n)$. For example, you would speicfy $O(n)$ instead of $O(150n + 5)$</p></blockquote><h2 id="Comparing-algorithms-with-Big-Oh"><a href="#Comparing-algorithms-with-Big-Oh" class="headerlink" title="Comparing algorithms with Big Oh"></a>Comparing algorithms with Big Oh</h2><p>Suppose the Selection Sort algorithm if followed by the Array Printing algorithm. Because each algorithm offers it own time-complexity function, what is the overall time-complexity function for both algorithm? The answer is if $f_1(n) = O(g(n))$ and $f_2(n) = O(h(n))$ then:</p><script type="math/tex; mode=display">\begin{equation}\begin{split}(A) f_1(n) + f_2(n)      &= max(O(g(n)), O(h(n))) \\(B) f_1(n) \times f_2(n) &= O(g(n) \times h(n))\end{split}\end{equation}</script><p>Part A covers cases where algorithm follow each other sequentially. For the Selection Sort algorithm followed by the Array Printing algorithm, the overall time-complexity function is the maxinum of each algorithm’s time-complexity function, which happens to be $O(n^2)$ (assming that comparisons are the dominant steps).</p><p>Part B covers where one algorithm nests inside another. For example, suppose the Array Printing algorithm is called after Selection Sort performs an exchange. Assuming that the sort’s time-complxity function if $O(n^2)$ (comparisons are dominant), the overall time complexity changes to $O(n^3)$.</p><p>How do you choose an efficient algorithm that means your application’s needs? Start by obtaining the Big Oh-bounded time-complexity functions for the candidate algorithms being  considered, then deciding the range of $n$ values that will be input to these functions (and, hence (因此), the algorithms).</p><p>Because it helps to see the impact (冲击) of various $n$ values in a tatular (表格式的) format, I’ve constructed a table that correlates the number of steps with common Big Oh-bounded time-complexity functions and various $n$ value. This table is presented in Figure 3.</p><p><img src="003.jpg" alt="Figure 3. Correlating step counts with common Big Oh-bounded time-complexity functions and various n values"></p><p>The Big Oh-bouded time-complexity functions are sorted from the most efficient function (constant) at the top to the least efficient function (exponential 指数) at the bottom. As you move down the table, notice the functions becoming less efficient (with more steps to complete) for $n$ values starting at 16.</p><p>It would be great if all algorithm were $O(1)$ becuase the would all be equally efficient. Because this doesn’t happen in the real world, you need to carefully choose the most efficient algorithm based on Big Oh-bounded time-complexity functions and the desired range of $n$ values.</p><p>Keep in mind that more efficient algorithms may be harder to code than less efficient ones. If the range of $n$ input values doesn’t result in too many steps, you may find that it’s better to use a less efficient algorithm with a smaller input range than a more efficient algorithm with a lager input range. You’ll see an example of this in Part 2.</p>]]></content>
      
      
      <categories>
          
          <category> JavaWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data structures and algorithms in Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Advanced features Part 5, Get started with lambda expressions in Java</title>
      <link href="/2020/03/05/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Advanced%20features%20Part%205,%20Get%20started%20with%20lambda%20expressions%20in%20Java/"/>
      <url>/2020/03/05/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Advanced%20features%20Part%205,%20Get%20started%20with%20lambda%20expressions%20in%20Java/</url>
      
        <content type="html"><![CDATA[<p>Before Java SE 8, anonymous   classes were typically used to pass functionality to a method. This practice (实践) obfuscated (模糊化) source code, making it harder to understand. Java 8 eliminated (淘汰) this problem by introducing lambdas. This tutorial first introduces the lambda language feature, then provides a more detailed introducetion to functional programming with lambda expressions along with target types. You’ll also learn how lambdas interact with scopes, local variables, the this and super keywords, and Java exceptions.</p><p>Note that code examples in this tutorial are compatible with JDK 12.</p><blockquote><p>Discovering types for yourself<br>I won’t introduce any non-lambda language features in this tutorial that you haven’t perviously learned about, but I will demonstrate lambdas via types taht I haven’t perviously discussed in this series. One example is the java.lang.Math class. I will introduce these types in future Java 101 tutorials. For now, I suggest reading the JDK 12 API documentation to learn more about them.</p></blockquote><h2 id="Lambdas-A-primer"><a href="#Lambdas-A-primer" class="headerlink" title="Lambdas: A primer"></a>Lambdas: A primer</h2><p>A lambda expression (lambda) describes a block of code (an anonymous function) that can be passed to constructors or methods for subsequent execution. The constructor or method receviers the lambdas as an argument. Consider the following example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() -&gt; System.out.println(<span class="string">"Hello"</span>)</span><br></pre></td></tr></table></figure></p><p>This example identifies a lambda for outputting a message to the standard output stream. From left to right, <code>()</code> identifies the lambda’s formal parameter list (there are no parameters in the example) <code>-&gt;</code> indicates that the expression is a lambda, and <code>System.out.println(&quot;Hello&quot;)</code> is the code to be executed.</p><p>Lambdas simplify the use of functional interfaces, which are annotated interfaces that each declare one abstract method (although they can also declare any combination of default, static, and private methods.) For example, the standard class library provides a java.lang.Runnable interface with a single abstract <code>void run()</code> method. This functional interface’s declaration appears below:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The class libaray annotates Runable with @FunctionalInterface, which is an instance of the java.lang.FunctionInterface annotation type. FuntcionalInterface is used to annotate those interfaces that are to be used in lambda contexts.</p><p>A lambda doesn’t have an explicit interface type. Instead, the compiler uses the surrounding context to infer which functional interface to instantiate when a lambda is specified — the lambda is bound to that interface. For example, suppose I specified the following code fragment, which passes the previous lambda as an argument to the java.lang.Thread class’s <code>Thread(Runnable target)</code> constructor:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"Hello"</span>));</span><br></pre></td></tr></table></figure></p><p>The compiler determines that the lambda is being passed to <code>Thread(Runnable r)</code> because this is the only contructor that satisfies the lambda: Runnable is a functional interface, the lambda’s emptry formal paramter list <code>()</code> matches <code>run()</code>‘s emptry parameter list, and the return types <code>(void)</code> also agree. The lambda is bound to Runnable.</p><p>Listing 1 presents the source code to a small application that lets you play with this example.</p><h3 id="Listing-1-LambdaDemo"><a href="#Listing-1-LambdaDemo" class="headerlink" title="Listing 1. LambdaDemo"></a>Listing 1. LambdaDemo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"Hello"</span>).start());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Compile Listing 1 and run the application. You should oberve the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></table></figure></p><p>Lambdas can greatly simplify the amount of source code that you must write, and can also make source code much easier to understand. For example, without lambdas, you would probably specify Listing 2’s more verbose code, which is based on an instance of an anonymous calss that implements Runnable.</p><h3 id="Listing-2-LambdaDemo"><a href="#Listing-2-LambdaDemo" class="headerlink" title="Listing 2. LambdaDemo"></a>Listing 2. LambdaDemo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      Runnable r = <span class="keyword">new</span> Runnable()</span><br><span class="line">                   &#123;</span><br><span class="line">                      <span class="meta">@Override</span></span><br><span class="line">                      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                      </span>&#123;</span><br><span class="line">                         System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">                      &#125;</span><br><span class="line">                   &#125;;</span><br><span class="line">      <span class="keyword">new</span> Thread(r).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After compiling this source code, run the application. You’ll discover the same output as  previously shown.</p><blockquote><p>Lambdas and the Streams API<br>As well as simplifying source code, lambdas play an important role in Java’s functionally-oriented Streams API. The describe units of functionality that are passed to various API methods.</p></blockquote><h2 id="Java-lambdas-in-depth"><a href="#Java-lambdas-in-depth" class="headerlink" title="Java lambdas in depth"></a>Java lambdas in depth</h2><p>To use lambdas effectively, you must understand the syntax of lambda expression along with the notion of a target type. You also need to understand how lambdas interact with scopes, local variables, the this and super keywords, and exceptions. I’ll cover all of these topics in the sections that follow.</p><blockquote><p>How lambdas are implemented<br>Lambdas are implemented in terms of the Java virtual mechine’s invokedynamic (动态类型语言) instruction (指令) and the java.lang.invoke API.</p></blockquote><h2 id="Lambda-syntax"><a href="#Lambda-syntax" class="headerlink" title="Lambda syntax"></a>Lambda syntax</h2><p>Every lambda conforms to the following syntax:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( formal-parameter-list ) -&gt; &#123; expression-or-statements &#125;</span><br></pre></td></tr></table></figure></p><p>The formal-parameter-list is a comma-separated list of formal paramater, which must match the parameters of a funcitonal interface’s single abstract method at runtime. If you omit their types, the compiler infers (推断) these types from the context in which the lambda is used. Consider the following examples:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)<span class="comment">// types explicitly specified</span></span><br><span class="line">(a, b)              <span class="comment">// types inferred by compiler</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Lambdas and var<br>Starting with Java SE 11, you can repalce a type name with var. For example, you could specify <code>(var a, var b)</code>.</p></blockquote><p>You must specify parentheses (括弧) for multiple or no formal parameters. However, you can omit the parentheses (although you don’t have to) when specifying a single formal parameters. (This applies to the parameter name only — parentheses  are required when the type is also specified.) Consider the follwoing addditional examples:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x           <span class="comment">// parentheses omitted due to single formal parameter</span></span><br><span class="line">(<span class="keyword">double</span> x)  <span class="comment">// parentheses required because type is also present</span></span><br><span class="line">()          <span class="comment">// parentheses required when no formal parameters</span></span><br><span class="line">(x, y)      <span class="comment">// parentheses required because of multiple formal parameters</span></span><br></pre></td></tr></table></figure></p><p>The formal-parameter-list if followed by a <code>-&gt;</code> token, which is followed by expression-or-statements — an expression of a block of statements (either is known as the lambda’s body). Unlike expression-based bodies, statement-based bodies must be placed between open and close brace characters(<code>{}</code>):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">double</span> radius) -&gt; Math.PI * radius * radius</span><br><span class="line">radius -&gt; &#123; <span class="keyword">return</span> Math.PI * radius * radius; &#125;</span><br><span class="line">radius -&gt; &#123; System.out.println(radius); <span class="keyword">return</span> Math.PI * radius * radius; &#125;</span><br></pre></td></tr></table></figure></p><p>The first example’s expression-based lambda body doesn’t have to be placed between braces. The second example converts the expression-based body to a stattement-based body, in which return must be specified to return the expressions’s value. The final example demonstractes multiple statements and cannot be expressed without braces.</p><blockquote><p>Lambda bodies and semicolons<br>Note the absence or presence of semicolons (分号, <code>;</code>) in the previous examples. In each case, the lambda body isn’t terminated with a semicolon because the lambda isn’t statement. However, within a statement-based lambda body, each statement must be terminated with a ssemicolon.</p></blockquote><p>Listing 3 presents a simple application that demonstrates lambda syntax; note that this listing builds on the previous two code examples.</p><h3 id="Listing-3-LambdaDemo"><a href="#Listing-3-LambdaDemo" class="headerlink" title="Listing 3. LambdaDemo"></a>Listing 3. LambdaDemo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BinaryCalculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> value1, <span class="keyword">double</span> value2)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UnaryCalculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> value)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"18 + 36.5 = %f%n"</span>, calculate((<span class="keyword">double</span> v1, <span class="keyword">double</span> v2) -&gt; v1 + v2, <span class="number">18</span>, <span class="number">36.5</span>));</span><br><span class="line">        </span><br><span class="line">        System.out.printf(<span class="string">"89 / 2.9 = %f%n"</span>, calculate((v1, v2) -&gt; v1 / v2, <span class="number">89</span>, <span class="number">2.9</span>));</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"-89 = %f%n"</span>, calculate(v -&gt; -v, <span class="number">89</span>));</span><br><span class="line">      </span><br><span class="line">        System.out.printf(<span class="string">"18 * 18 = %f%n"</span>, calculate((<span class="keyword">double</span> v) -&gt; v * v, <span class="number">18</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(BinaryCalculator calc, <span class="keyword">double</span> v1, <span class="keyword">double</span> v2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calc.calculate(v1, v2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(UnaryCalculator clac, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calc.calculate(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 3 first introduces the BinaryCalculator and UnaryCalculator functional interfaces whose <code>calculate()</code> methods perform calculations on two input arguments or on a single input argument, respectively. This listing also introduces a LambdaDemo calss whose <code>main()</code> method demonstrates these functional interfaces.</p><p>The functional interfaces are demonstrated in the <code>static double calculate(BinaryCalculator calc, double v1, double v2)</code> and <code>static double calculate(UnaryCalculator calc, double v)</code> methods. The lambdas pass code as data to these methods, which are received as BinaryCalculator or UnaryCalculator instances.</p><p>Compiling Listing 3 and run the application. You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">18 + 36.5 = 54.500000</span><br><span class="line">89 / 2.9 = 30.689655</span><br><span class="line">-89 = -89.000000</span><br><span class="line">18 * 18 = 324.000000</span><br></pre></td></tr></table></figure></p><h2 id="Target-types"><a href="#Target-types" class="headerlink" title="Target types"></a>Target types</h2><p>A lambda is associated with an implicit target type, which identifies the type of object to which a lambda is bound. The target type must be a functional interface that’s inferred from the context, which limit lambdas to appearing in the following context:</p><ul><li>Variable declaration</li><li>Assignment</li><li>Return statement</li><li>Array initializer</li><li>Method or constructor arguments</li><li>Lambda body</li><li>Ternary (三元) conditional expression</li><li>Cast expression</li></ul><p>Listing 4 presents an application that demonstrates these target type contexts.</p><h3 id="Listing-4-LambdaDemo"><a href="#Listing-4-LambdaDemo" class="headerlink" title="Listing 4. LambdaDemo"></a>Listing 4. LambdaDemo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Target type #1: variable declaration</span></span><br><span class="line">        Runnable r = () -&gt; &#123;System.out.println(<span class="string">"running"</span>);&#125;;</span><br><span class="line">        r.run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Target type #2: assignment</span></span><br><span class="line">        r = () -&gt; System.out.printnl(<span class="string">"running"</span>);</span><br><span class="line">        r.run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Target type #3: return statement (in getFilter())</span></span><br><span class="line">        File[] files = <span class="keyword">new</span> File(<span class="string">"."</span>).listFiles(getFilter(<span class="string">"txt"</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">            System.out.println(files[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Target type #4: array initializer</span></span><br><span class="line">        FileSystem fs = FileSystems.getDefault();</span><br><span class="line">        <span class="keyword">final</span> PathMatcher matchers[] = &#123;</span><br><span class="line">            (path) -&gt; path.toString().endWith(<span class="string">"txt"</span>),</span><br><span class="line">            (path) -&gt; path.toString().endWith(<span class="string">"java"</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        FileVistor&lt;Path&gt; visitor = <span class="keyword">new</span> SimpleFileVisitor&lt;Path&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path file, BasicFileAttributes attribs)</span> </span>&#123;</span><br><span class="line">                Path name = file.getFileName();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matchers.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (matchers[i].matches(name)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"Found matched file: '%s'.%n"</span>, file);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Files.walkFileTree(Paths.get(<span class="string">"."</span>), visitor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Target type #5: method or constructor arguments</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"running"</span>).start());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Target type #6: lambda body (a nested lambda)</span></span><br><span class="line">        Callable&lt;Runnable&gt; callable = () -&gt; () -&gt; System.out.println(<span class="string">"called"</span>);</span><br><span class="line">        callable.call().run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Target type #7: ternary conditional expression</span></span><br><span class="line">        <span class="keyword">boolean</span> ascendingSort = <span class="keyword">false</span>;</span><br><span class="line">        Comparator&lt;String&gt; cmp = (ascendingSort) ? (s1, s2) -&gt; s1.compareTo(s2)</span><br><span class="line">                                                 : (s1, s2) -&gt; s2.compareTo(s1);</span><br><span class="line">                                                 </span><br><span class="line">        List&lt;String&gt; cities = Arrays.asList(<span class="string">"Washington"</span>, <span class="string">"london"</span>, <span class="string">"Rome"</span>, <span class="string">"Berlin"</span>, <span class="string">"Jerusalem"</span>, <span class="string">"Ottawa"</span>, <span class="string">"Sydney"</span>, <span class="string">"Moscow"</span>);</span><br><span class="line">        Collections.sort(cities, cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cities.size(); i++) &#123;</span><br><span class="line">            System.out.println(cities.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Target type #8: cast expression</span></span><br><span class="line">        String user = AccessController.doPrivileged((PrivilegedAction&lt;String&gt;)() -&gt; System.getProperty(<span class="string">"user.name"</span>));</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> FileFilter <span class="title">getFilter</span><span class="params">(String ext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (pathname) -&gt; pathname.toString().endWith(ext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The first example demonstrates a lombda in variable declaration context. it assigns lombda <code>() -&gt; {System.out.println(&quot;running&quot;);}</code> to variable r of Runnable interface type. The second example is similar, but demonstrates a lambda in an assignment context (to previously declared variable r).</p><p>The third example demonstrates a lambda in a return statement context. It invokes the getFilter() method with a specified file extension arguement to return a java.io.FileFilter object. This object is passed to java.io.file’s listFiles() method, which invokes the filter for each file, ignoring files that don’t match extension.</p><p>The getFilter() method returns a FileFilter object expressed via a lambda. The compiler notes that the lambda satisfies this functional interafce’s <code>boolean accept(File pathname)</code> method (both have a single parameter and the lambda body returns a Boolean value) and binds the lambda to FileFilter.</p><p>The fourth example demonstrates lambda usage in an array initializer context. Two java.nio.file.PathMatcher objects are created based on lambdas. Each PathMatcher object matches files based on criteria (标准) specified by its lambda’s body. Here is the relevant code:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> PathMatcher matchers[] = &#123;</span><br><span class="line">    (path) -&gt; path.toString().endsWith(<span class="string">"txt"</span>),</span><br><span class="line">    (path) -&gt; path.toString().endsWith(<span class="string">"java"</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>The PathMatcher functional interface provides a <code>boolean matches(Path path)</code> method that agrees with the lambda’s parameter list and its body’s Boolean return type. This method is subsequently called to determine a match (based on file extension) for each encountered file during a visit of the current directory and subdirectories.</p><p>The fifth example demonstrates a lambda in a Thread constructor context. The sixth example demonstrates a lambda in a lambda context, which shows that lambdas can be nested. The Seventh example demonstrates a lambda in a ternery conditional expression (<code>?:</code>) context: one of two lambdas is selected based on an ascending or descending sort.</p><p>The eighth (and final) example demonstrates a lambada in a cast expression context. The <code>() -&gt; System.getProperty(&quot;user.name&quot;)</code> lambda is cast to <code>PrivilegedAction&lt;String&gt;</code> functional interface type. This cast addresses an ambiguity in the java.security.AccessController class, which declares the following mehtods:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">doPrivileged</span><span class="params">(PrivilegedAction&lt;T&gt; action)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> &lt;T&gt; T <span class="title">doPrivileged</span><span class="params">(PrivilegedExceptionAction&lt;T&gt; action)</span></span></span><br></pre></td></tr></table></figure></p><p>The problem is that each of interfaces PrivilegedAction and PrivilegedExceptionAction declares an identical <code>T run()</code> method. Because the compiler cannot figure out which interface is the target type, it reports an error in the absence of the cast.</p><p>Compile Listing 4 and run the application. You should observe the following output, which assumes that LambdaDemo.java is the only .java file in the current directory and that this directory contains no .txt files:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">running</span><br><span class="line">running</span><br><span class="line">Found matched file: &apos;.\LambdaDemo.java&apos;.</span><br><span class="line">running</span><br><span class="line">called</span><br><span class="line">Washington</span><br><span class="line">Sydney</span><br><span class="line">Rome</span><br><span class="line">Ottawa</span><br><span class="line">Moscow</span><br><span class="line">London</span><br><span class="line">Jerusalem</span><br><span class="line">Berlin</span><br><span class="line">jeffrey</span><br></pre></td></tr></table></figure></p><h2 id="Lambdas-and-scopes"><a href="#Lambdas-and-scopes" class="headerlink" title="Lambdas and scopes"></a>Lambdas and scopes</h2><p>The term scope refers to that part of a program where a name is bound to a particular entiry (e.g., a variable). In another part of the program, the name may be bound to another enitty. A lambda body doesn’t introduce a new scope. Instead, its scope is the enclosing scope.</p><h2 id="Lambdas-an-loal-variables"><a href="#Lambdas-an-loal-variables" class="headerlink" title="Lambdas an loal variables"></a>Lambdas an loal variables</h2><p>A lambda body can define local variables. Because these variables are considered part of the enclosing scope, the compiler will report an error when it detects that the lambda body is redefinning a local variable. Listing 5 demonstrates this problem.</p><h3 id="Listing-5-LambdaDemo"><a href="#Listing-5-LambdaDemo" class="headerlink" title="Listing 5. LambdaDemo"></a>Listing 5. LambdaDemo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> limit = <span class="number">10</span>;</span><br><span class="line">        Runnable r = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> limit = <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; limit; i++) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Because limit is already present in the enclosing scope (the main() method), the lambda body’s redeinition of <code>limit (int limit =5;)</code> cause the compiler to report the following error message: error: variable limit is already defined in method main(String[] args).</p><blockquote><p>Lambda bodies and local variables<br>Whether originating in a lambda body or in the enclosing scope, a local variable must be initialized before being used. Otherwise, the compiler will report an error.</p></blockquote><p>A local varialbe or parameter that’s defined outside a lambda body and referenced from the body must be markded final or considered effectively final (the variable cannot to assigned to after initialization). Attempting to modify an effectively final varialbe causes the compiler to report an error, as demonstrated in Listing 6.</p><h3 id="Listing-6-LambdaDemo"><a href="#Listing-6-LambdaDemo" class="headerlink" title="Listing 6. LambdaDemo"></a>Listing 6. LambdaDemo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> limit = <span class="number">10</span>;</span><br><span class="line">        Runable r = () -&gt; &#123;</span><br><span class="line">            limit = <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; limit; i++) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>limit is effectively final. The lambda body’s attempt to modify this variable causes the compiler to report an error. It does so because a final/effectively final variable will need to hang around until the lambda executes, which may not happen until long after the code in which the variable was defined returns. Non-final/non-effectively final variable no longer exist.</p><h2 id="Lambdas-and-the-‘this’-and-‘super’-keywords"><a href="#Lambdas-and-the-‘this’-and-‘super’-keywords" class="headerlink" title="Lambdas and the ‘this’ and ‘super’ keywords"></a>Lambdas and the ‘this’ and ‘super’ keywords</h2><p>Any this or super reference that is used in a lambda body is regarded as being equivalent to its usage in the enclosing scope (bacause a lambda doesn’t inctroduce a new scope). However, this isn’t the case with anonymous classes, which Listing 7 demonstrates.</p><h3 id="Listing-7-LambdaDemo"><a href="#Listing-7-LambdaDemo" class="headerlink" title="Listing 7. LambdaDemo"></a>Listing 7. LambdaDemo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> LambdaDemo().deWork();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"this - %s%n"</span>, <span class="keyword">this</span>);</span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.printf(<span class="string">"this = %s%n"</span>, <span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(r).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; System.out.printf(<span class="string">"this = %n%f"</span>, <span class="keyword">this</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 7’s main() method instantiates LambdaDemo and invokes the object’s doWork() method to output the object’s this reference, instantiate an anonymous class that implements Runnable, create a Thread object that executes this runnable when its thread is started, and create another Thread object whose thread executes a lambda when started.</p><p>Compile Listing 7 and run the application. You should observe something similar to the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this = LambdaDemo@776ec8df</span><br><span class="line">this = LambdaDemo$1@48766bb</span><br><span class="line">this = LambdaDemo@776ec8df</span><br></pre></td></tr></table></figure></p><p>The first line shows LambdaDemo’s this reference, the second line shows a different this reference in the new Runnable scope, and the third output line shows the this reference in a lambda context. The third and first lines match because the lambda’s scope is nested inside the doWrok() method; this has the same meaning throughout this method.</p><h2 id="Lambdas-and-exceptions"><a href="#Lambdas-and-exceptions" class="headerlink" title="Lambdas and exceptions"></a>Lambdas and exceptions</h2><p>A lambda body isnot allowed to throw more exceptions than are specified in the throws clause of the functional interface method. If a lambda body throws an exception, the functional interface method’s throws clause must declare the same exception type or its supertype. Consider Listing 8.</p><h3 id="Listing-8-LambdaDemo"><a href="#Listing-8-LambdaDemo" class="headerlink" title="Listing 8. LambdaDemo"></a>Listing 8. LambdaDemo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Work</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dosomething</span><span class="params">()</span> thrwos IOException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> AWTException, IOException </span>&#123;</span><br><span class="line">        Work work = () -&gt; &#123;<span class="keyword">throw</span> <span class="keyword">new</span> IOException();&#125;;</span><br><span class="line">        work.doSomething();</span><br><span class="line">        work = () -&gt; &#123;<span class="keyword">throw</span> <span class="keyword">new</span> AWTException(<span class="string">""</span>);&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 8 declares a Work functional interface whose doSomething() method is declared to throw java.io.IOException. The main() method assigns a lambda that throws IOException to work, which is okay becuase IOException is listed in doSomething()’s throws clause.</p><p>main() next assigns a lambda that throws java.awt.AWTException to work. However, the compiler doesn’t allow this assignment bacuase AWTException isn’t part of doSomething()’s throws caluse (and is certainly not a subtype of IOException).</p><h2 id="Predefined-预定义-functional-interfaces"><a href="#Predefined-预定义-functional-interfaces" class="headerlink" title="Predefined (预定义) functional interfaces"></a>Predefined (预定义) functional interfaces</h2><p>You might find yourself repeatedly creating similar functional interfaces. For example, you might carete a CheckConnection functional interface with a <code>boolean isConnected(Connection c)</code> method and a CheckAccout functional interface with a <code>boolean isPositiveBalance(Account acct)</code> method. This is wasteful.</p><p>THe previous examples expose the abstract concept of a predicate (a Boolean valued function). Anticipating such patterns. Oracle provides the java.util.function package of commonly-used functional interfaces. For example, this package’s <code>Predicate&lt;T&gt;</code> functional interface can be used in place of CheckConnect and CheckAccount.</p><p><code>Predicate&lt;T&gt;</code> provides a <code>boolean test(T t)</code> method that evaluates this predicate on its argument (t), returning true when t matches the predicate, and returning false otherwise. Notice that <code>test()</code> provides the same kind of parameter list as <code>isConnected()</code> and <code>isPositiveBalance()</code>. Also, notice that they all have the same return type (boolean).</p><p>The application source code in Listing 9 demonstrates <code>Predicate&lt;T&gt;</code>.</p><h3 id="Listing-9-LambdaDemo"><a href="#Listing-9-LambdaDemo" class="headerlink" title="Listing 9. LambdaDemo"></a>Listing 9. LambdaDemo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id, balance;</span><br><span class="line">   Account(<span class="keyword">int</span> id, <span class="keyword">int</span> balance)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">this</span>.balance = balance;</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getBalance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> balance;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getID</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      System.out.printf(<span class="string">"Account: [%d], Balance: [%d]%n"</span>, id, balance);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">static</span> List&lt;Account&gt; accounts;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      accounts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      accounts.add(<span class="keyword">new</span> Account(<span class="number">1000</span>, <span class="number">200</span>));</span><br><span class="line">      accounts.add(<span class="keyword">new</span> Account(<span class="number">2000</span>, -<span class="number">500</span>));</span><br><span class="line">      accounts.add(<span class="keyword">new</span> Account(<span class="number">3000</span>, <span class="number">0</span>));</span><br><span class="line">      accounts.add(<span class="keyword">new</span> Account(<span class="number">4000</span>, -<span class="number">80</span>));</span><br><span class="line">      accounts.add(<span class="keyword">new</span> Account(<span class="number">5000</span>, <span class="number">1000</span>));</span><br><span class="line">      <span class="comment">// Print all accounts</span></span><br><span class="line">      printAccounts(account -&gt; <span class="keyword">true</span>);</span><br><span class="line">      System.out.println();</span><br><span class="line">      <span class="comment">// Print all accounts with negative balances.</span></span><br><span class="line">      printAccounts(account -&gt; account.getBalance() &lt; <span class="number">0</span>);</span><br><span class="line">      System.out.println();</span><br><span class="line">      <span class="comment">// Print all accounts whose id is greater than 2000 and less than 5000.</span></span><br><span class="line">      printAccounts(account -&gt; account.getID() &gt; <span class="number">2000</span> &amp;&amp;</span><br><span class="line">                               account.getID() &lt; <span class="number">5000</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printAccounts</span><span class="params">(Predicate&lt;Account&gt; tester)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Account account: accounts)</span><br><span class="line">         <span class="keyword">if</span> (tester.test(account))</span><br><span class="line">            account.print();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 9 creates an array-based list of accounts with positive, zero, and regative balances. It then demonstrates <code>Predicate&lt;T&gt;</code> by invoking <code>pringAccount()</code> with lambdas for printing out all accounts, only those accounts with negative balances, and only those accounts whose IDs are greater than 2000 and less than 5000.</p><p>Consider lambda expresison <code>account -&gt; true</code>. The compiler verifies that the lambda matches <code>Predicate&lt;T&gt;</code>‘s <code>boolean test(T)</code> method, which it does—the lambda presents a single parameter (account) and its body always returns a Boolean value (true). For this lambda, <code>test()</code> is implemented to execute <code>return true</code>.</p><p>Compiling Listing 9 and run the application. You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Account: [1000], Balance: [200]</span><br><span class="line">Account: [2000], Balance: [-500]</span><br><span class="line">Account: [3000], Balance: [0]</span><br><span class="line">Account: [4000], Balance: [-80]</span><br><span class="line">Account: [5000], Balance: [1000]</span><br><span class="line">Account: [2000], Balance: [-500]</span><br><span class="line">Account: [4000], Balance: [-80]</span><br><span class="line">Account: [3000], Balance: [0]</span><br><span class="line">Account: [4000], Balance: [-80]</span><br></pre></td></tr></table></figure></p><p><code>Predicate&lt;T&gt;</code> is just one of java.util.function’s various predefinded functional interfaces. Another example is <code>Consumer&lt;T&gt;</code>, which represents an operation that accepts a single argument and returns no result. Unlike <code>Predicate&lt;T&gt;</code>, <code>Consumer&lt;T&gt;</code> is expected to operate via side-effects. In other words, it modifies its argument in some way.</p><p><code>Comsumer&lt;T&gt;</code>‘s <code>void accept(T t)</code> method executes an operation on its argument (t). When appearing in the context of this functional interface, a lambda must conform to the <code>accept()</code> method’s solitary parameter and return type. Listing 10 presents an example that demonstrates <code>Comsumer&lt;T&gt;</code> along with <code>Predicate&lt;T&gt;</code>.</p><h3 id="Listing-10-LambdaDemo"><a href="#Listing-10-LambdaDemo" class="headerlink" title="Listing 10. LambdaDemo"></a>Listing 10. LambdaDemo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id, balance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"Account: [%d], Balance: [%d]%n"</span>, id, balance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Account&gt; accounts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        accounts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        accounts.add(<span class="keyword">new</span> Account(<span class="number">1000</span>, <span class="number">200</span>));</span><br><span class="line">        accounts.add(<span class="keyword">new</span> Account(<span class="number">2000</span>, -<span class="number">500</span>));</span><br><span class="line">        accounts.add(<span class="keyword">new</span> Account(<span class="number">3000</span>, <span class="number">0</span>));</span><br><span class="line">        accounts.add(<span class="keyword">new</span> Account(<span class="number">4000</span>, -<span class="number">80</span>));</span><br><span class="line">        accounts.add(<span class="keyword">new</span> Account(<span class="number">5000</span>, <span class="number">1000</span>));</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Deposit enough money in accounts with negative balances so that they</span></span><br><span class="line">        <span class="comment">// end up with zero balances (and are no longer overdrawn).</span></span><br><span class="line">        adjustAccount(account -&gt; account.getBalance() &lt; <span class="number">0</span>, </span><br><span class="line">                      account -&gt; account.deposit(-account.getBalance()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">adjustAccounts</span><span class="params">(Prediate&lt;Account&gt; tester, Comsumer&lt;Account&gt; adjuster)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Account acount : accounts) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tester.test(account)) &#123;</span><br><span class="line">                adjuster.accept(account);</span><br><span class="line">                account.print();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 10 continues on from the previous example by introducing an <code>adjustAccounts()</code> method that addresses overdrawn accounts by depositing enouth money to give them zero balances. <code>adjustAccounts()</code> takes two lambda arguments, which must comform to <code>Predicate&lt;T&gt;</code>‘s and <code>Comsumer&lt;T&gt;</code>‘s abstract method parameter lists and return types.</p><p>The compiler determines that the lambda arguments passed to <code>adjustAccounts()</code> are correct. The <code>test()</code> method is implemented to take an <code>Account acount</code> parameter and execute <code>return account.getBalance() &lt; 0;</code>. Similarly, <code>accept()</code> is implemented to take the same parameter and execute <code>account.deposit(account.getBalance());</code>.</p><p>Compile Listing 10 and run the application. You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Account: [2000], Balance: [0]</span><br><span class="line">Account: [4000], Balance: [0]</span><br></pre></td></tr></table></figure></p><blockquote><p>Primitive specializations of predefined functional interfaces<br>java.util.function includes primitive specializations of various functional interfaces. For example, DoubleConsumer is a primitive specialization of Consumer. Each primitive specialization funcitonal interface exists for performance reasons, to avoid unnecessary object creation and method calls when the inputs or outputs are primitive type-based values.</p></blockquote><h2 id="In-conclusion"><a href="#In-conclusion" class="headerlink" title="In conclusion"></a>In conclusion</h2><p>In this tutorial I’ve introduced you to programming with lambda expressions. I started with a high-level overview, then offered in-depth introductions to the core features and techniques associated with lambdas: target type, scopes, local variables, the this and super keyword, and exceptions.</p><p>While lambda hava done much to simplify and modernize Java programming, in some cases their usage still results in unnecessary clutter.</p>]]></content>
      
      
      <categories>
          
          <category> JavaWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Advanced Java language features </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Advanced features Part 4, Get started with method references in Java</title>
      <link href="/2020/03/05/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Advanced%20features%20Part%204,%20Get%20started%20with%20method%20references%20in%20Java/"/>
      <url>/2020/03/05/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Advanced%20features%20Part%204,%20Get%20started%20with%20method%20references%20in%20Java/</url>
      
        <content type="html"><![CDATA[<p>Nested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class’s namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.</p><p>In Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you’ll learn how to work with static member classes and the three types of inner classes in your Java code.</p><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><h2 id="Static-classes-in-Java"><a href="#Static-classes-in-Java" class="headerlink" title="Static classes in Java"></a>Static classes in Java</h2><p>Fromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the <code>static</code> keyword. Here’s an example of a static member class declaration:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> f;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        f = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">        <span class="comment">// members</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This example introduces top-level class <code>C</code> with static field <code>f</code>, static method <code>m()</code>, a static initializer, and static member cladd <code>D</code>. Notice that <code>D</code> is a member of <code>C</code>. The static field <code>f</code>, static method <code>m()</code>, and the static initializer are also members of <code>C</code>. Since all of these elements belong to class <code>C</code>, it is known as the enclosing class (封闭类). Class <code>D</code> is known as the enclosed class.</p><h3 id="Enclosure-and-access-rules"><a href="#Enclosure-and-access-rules" class="headerlink" title="Enclosure and access rules"></a>Enclosure and access rules</h3><p>Although it is enclosed (围绕), a static member class cannot access the enclosing class’s instance fields and invoke its instance methods. However, it can access the enclosing class’s static fields and invoke its static methods, even those members that are declared <code>private</code>. To demonstrate (演示), Listing 1 declares an <code>EnclosingClass</code> with a nested <code>SMClass</code>. </p><h3 id="Listing-1-Declaring-a-static-member-class"><a href="#Listing-1-Declaring-a-static-member-class" class="headerlink" title="Listing 1. Declaring a static member class"></a>Listing 1. Declaring a static member class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnclosingClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SMClass.accessEnclosingClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SMClass</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">accessEnclosingClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            s = <span class="string">"Called from SMClass's accessEnclosingClas() method"</span>;</span><br><span class="line">            m1();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">accessEnclosingClass2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            m2();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 1 declares a top-level class named EnclosingClass with class field s, class method <code>m1()</code> and <code>m2()</code>, and static member class SMClass. SMClass declares class method <code>accessEnclosingClass()</code> and instance method <code>accessEnclosingClass2()</code>. Note the following:</p><ol><li><code>m2()</code>‘s invocation (调用) of SMClass’s <code>accessEnclosingClass()</code> method requires the <code>SMClass.</code> prefix because <code>accessEnclosingClass()</code> is declared <code>static</code></li><li><code>accessEnclosingClass()</code> is able to access EnclosingClass’s s field and call its <code>m1()</code> method, even though both have been declared <code>private</code>.</li></ol><p>Listing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass’s <code>accessEnclosingClass()</code> method. It also demonstrates how to instantiate SMClass and invoke its <code>accessEnclosingClass2()</code> instance method.</p><h3 id="Listing-2-Invoking-a-static-member-class’s-methods"><a href="#Listing-2-Invoking-a-static-member-class’s-methods" class="headerlink" title="Listing 2. Invoking a static member class’s methods"></a>Listing 2. Invoking a static member class’s methods</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMCDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EnclosingClass.SMClass.accessEncolsingClass();</span><br><span class="line">        EnclsoingClass.SMClass smc = <span class="keyword">new</span> EnclosingClass.SMClass();</span><br><span class="line">        smc.accessEnclosingClass2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As shown in Listing 2, if you want to invoke a top-level class’s method from within an enclosed class, you must prefix the enclosed class’s name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.</p><p>Compile Listing 1 and 2 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br></pre></td></tr></table></figure></p><p>When you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class’s name, dollar-sign character, and the static member class’s name. In this case, compiling results is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SMCDemo.class</span><br><span class="line">EnclosingClass.class</span><br><span class="line">EnclosingClass$SMCClass.class</span><br></pre></td></tr></table></figure></p><p>Run the application as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java SMCDemo</span><br></pre></td></tr></table></figure><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Called from SMClass&apos;s accessEnclosingClass() method</span><br><span class="line">Called from SMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p><h3 id="Example-Static-classes-and-Java-2D"><a href="#Example-Static-classes-and-Java-2D" class="headerlink" title="Example: Static classes and Java 2D"></a>Example: Static classes and Java 2D</h3><p>Java’s standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the <code>java.awt.geom</code> package.</p><p>The <code>Ellipse2D</code> class found in <code>java.awt.geom</code> describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class’s architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass <code>Ellipse2D</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Ellipse2D</span> <span class="keyword">extends</span> <span class="title">RectangularShape</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Float</span> <span class="keyword">extends</span> <span class="title">Ellipse2D</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">float</span> x, y, widht, heigh;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Float</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Float</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> w, <span class="keyword">float</span> h)</span> </span>&#123;</span><br><span class="line">            setFrame(x, y, w, h);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">double</span>)x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// additional instance methods</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Double</span> <span class="keyword">extends</span> <span class="title">Ellipse2D</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> x, y, width, height;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Double</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Double</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> w, <span class="keyword">double</span> h)</span> </span>&#123;</span><br><span class="line">            setFrame(x, y, w, h);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// additional instance methods</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// additional instance methods shared by Float, Double, and other Ellipse2D subclass.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The <code>Float</code> and <code>Double</code> classes extend <code>Ellipse2D</code>, providing floating-point and double precision floating-point Ellipse2D implementations.</p><h2 id="Inner-classes-tpye-1-Non-static-member-classes"><a href="#Inner-classes-tpye-1-Non-static-member-classes" class="headerlink" title="Inner classes, tpye 1: Non-static member classes"></a>Inner classes, tpye 1: Non-static member classes</h2><p>Consider this example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    C() &#123;</span><br><span class="line">        f = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">        <span class="comment">// members</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Here, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.</p><p>Each instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class’s instance methods can call the enclosing class’s instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.</p><h4 id="Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class"><a href="#Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class" class="headerlink" title="Listing 3. Declare an enclosing class with a nested non-static member class"></a>Listing 3. Declare an enclosing class with a nested non-static member class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnclosingClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NSMClass</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">accessEnclosingClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            s = <span class="string">"Called from NSMClass's accessEnclosingClass() method"</span>;</span><br><span class="line">            m();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method <code>accessEnclosingClass()</code>.</p><p>Because <code>accessEnclosingClass()</code> in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.</p><h4 id="Listing-4-NSMCDemo-java"><a href="#Listing-4-NSMCDemo-java" class="headerlink" title="Listing 4. NSMCDemo.java"></a>Listing 4. NSMCDemo.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NSMDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EnclosingClass ec = <span class="keyword">new</span> EnclosingClass();</span><br><span class="line">        ec.new NSMClass().accessEnclosingClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 4’s <code>main()</code> method first instantiates EnclosingClass and saves its reference in local variable ec. The <code>main()</code> method then uses the EnclosingClass reference as a prefix to the <code>new</code> operator, in order to instantiate NSMClass. The NSMClass reference is then used to call <code>accessEnclosingClass()</code> method.</p><blockquote><p>Should I use <code>new</code> with a reference to the enclosing class?<br>Prefixing <code>new</code> with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class’s constructor from within a constructor or an instance method of its enclosing class.</p></blockquote><p>Compile Listing 3 and 4 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java *.java</span><br></pre></td></tr></table></figure></p><p>When you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class’s name, a dollar-sign character, and the non-static member class’s name. In this case, compiling results in：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSMDemo.class</span><br><span class="line">EnclosingClass.class</span><br><span class="line">EnclisingClass$NSMCClass.class</span><br></pre></td></tr></table></figure></p><p>Run the application as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java NSMDemo</span><br></pre></td></tr></table></figure></p><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Called from NSMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p><blockquote><p>When (and how) to qualify (限定) <code>this</code><br>An enclosed class’s code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) <code>this</code> with the enclosing class’s name and the member access operator <code>.</code>. For example, if code within <code>accessEnclosingClass()</code> needed to obtain a reference to its <code>EnclosingClass</code> instance, it would spcify <code>EnclosingClass.this</code>. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.</p></blockquote><h4 id="Example-Non-static-member-classes-in-HashMap"><a href="#Example-Non-static-member-classes-in-HashMap" class="headerlink" title="Example: Non-static member classes in HashMap"></a>Example: Non-static member classes in HashMap</h4><p>The standard class library includes non-static member as well as static member classes. For this example, we’ll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.</p><p>For example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// various members</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// various members</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// various members</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The <code>&lt;K, V&gt;</code> and <code>&lt;K&gt;</code> syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.</p><p>HashMap provides a <code>KeySet()</code> method that instantiates KeySet when necessary and returns this instance or a cached instance. Here’s the complete method:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keyset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;K&gt; ks = keySet;</span><br><span class="line">    <span class="keyword">if</span> (ks == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ks = <span class="keyword">new</span> KeySet();</span><br><span class="line">        keySet = ks;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Notice that the enclosed class’s (KeySet’s) constructor is called from within the enclosing class’s (HashSet’s) <code>keyset()</code> instance method. This illustrates a common practice (做法) especially because prefixing the <code>new</code> operator with an enclosing class reference is rare.</p><h2 id="Inner-classes-type-2-Local-classes"><a href="#Inner-classes-type-2-Local-classes" class="headerlink" title="Inner classes, type 2: Local classes"></a>Inner classes, type 2: Local classes</h2><p>It’s occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="comment">// or even static I m()</span></span><br><span class="line">    <span class="function">I <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">            <span class="comment">// members</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> D();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Top-level class C declares instance method <code>m()</code>, which returns an instance of local class D, which is declared in this method. Notice that <code>m()</code>‘s return type is interface I, which D implements. The interface is necessary because giving <code>m()</code> return type D would result in a compiler error — D isn’t accessible outside of <code>m()</code>‘ body.</p><blockquote><p>Illegal access modifiers (修饰语) in local class declaration<br>The compiler will report an error if a local class declaration contains any of the access modifiers <code>private</code>, <code>public</code>, or <code>protected</code>; or the modifier <code>static</code>.</p></blockquote><p>A local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope’s local variables and parameters, which must be declared <code>final</code>. Consider 5.</p><h3 id="Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method"><a href="#Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method" class="headerlink" title="Listing 5. Declaring a local class within an enclosing class instance method"></a>Listing 5. Declaring a local class within an enclosing class instance method</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnclosingClass</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> y = x * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">LClass</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> m = x;</span><br><span class="line">            <span class="keyword">int</span> n = y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LClass lc = <span class="keyword">new</span> LClass();</span><br><span class="line">        System.out.println(lc.m);</span><br><span class="line">        System.out.println(lc.n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 5 declares EnclosingClass with instance method <code>m()</code>, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.</p><h3 id="Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields"><a href="#Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields" class="headerlink" title="Listing 6. A local class declares and initializes a pair of instance fields"></a>Listing 6. A local class declares and initializes a pair of instance fields</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LCDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EnclosingClass ec = <span class="keyword">new</span> EnclosingClass();</span><br><span class="line">        ec.m(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 6’s <code>main()</code> method first instantiates EnclosingClass. It then invokes <code>m(5)</code> on this instance. The called <code>m()</code> method multiplies this argument by 3, instantiates LClass, whose <code>&lt;init&gt;()</code> method assigns the argument and the tripled value to its pair of instance fields and outputs LClass’s instance fields. (Note that in this case the local class uses the <code>&lt;init&gt;()</code> method instead of a constructor to interact with its instance fields.)</p><p>Compile Listing 5 and 6 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br></pre></td></tr></table></figure></p><p>When you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class’s name, a dollar-sign character, a 1-base integer, and the local class’s name. In this case, compiling results:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LCDemo.class</span><br><span class="line">EnclosingClass.class</span><br><span class="line">EnclosingClass$1LClass.class</span><br></pre></td></tr></table></figure></p><h3 id="A-note-about-local-class-name"><a href="#A-note-about-local-class-name" class="headerlink" title="A note about local class name"></a>A note about local class name</h3><p>When generating a name for a local class’s file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class’s class file from a non-static member clas’s class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnclosingClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="class"><span class="keyword">class</span> <span class="title">LClass</span></span></span><br><span class="line"><span class="class">       </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="class"><span class="keyword">class</span> <span class="title">LClass</span></span></span><br><span class="line"><span class="class">       </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="class"><span class="keyword">class</span> <span class="title">LClass2</span></span></span><br><span class="line"><span class="class">       </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>EnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EnclosingClass$1LClass.class</span><br><span class="line">EnclosingClass$1LClass2.class</span><br><span class="line">EnclosingClass$2LClass.class</span><br><span class="line">EnclosingClass.class</span><br></pre></td></tr></table></figure></p><p>Run the application as follow:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java LCDemo</span><br></pre></td></tr></table></figure></p><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">15</span><br></pre></td></tr></table></figure></p><h3 id="Example-Using-local-classes-in-regular-expressions"><a href="#Example-Using-local-classes-in-regular-expressions" class="headerlink" title="Example: Using local classes in regular expressions"></a>Example: Using local classes in regular expressions</h3><p>The standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Stream&lt;MatchResult&gt; <span class="title">results</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">MatchResultIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">MatchResult</span>&gt;</span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">      <span class="comment">// members</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> StreamSupport.stream(Spliterators.spliteratorUnknownSize(<span class="keyword">new</span> MatchResultIterator(),</span><br><span class="line">                                                                   Spliterator.ORDERED |</span><br><span class="line">                                                                   Spliterator.NONNULL),</span><br><span class="line">                               <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Note the instantiation of MatchResultIterator() following the class declaration. Don’t worry about parts of the code that you don’t understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.</p><h2 id="Inner-classes-type-3-Anonymous-classes"><a href="#Inner-classes-type-3-Anonymous-classes" class="headerlink" title="Inner classes, type 3: Anonymous classes"></a>Inner classes, type 3: Anonymous classes</h2><p>Static member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// subclass the base class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">// members</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      Base b = <span class="keyword">new</span> Base()</span><br><span class="line">               &#123;</span><br><span class="line">                 <span class="comment">// members</span></span><br><span class="line">               &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// implement the interface</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">// members</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      I i = <span class="keyword">new</span> I()</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="comment">// members</span></span><br><span class="line">            &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.</p><blockquote><p>Constructing anonymous class instances<br>An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.</p></blockquote><p>Anonymous classes are useful for expressing functionality that’s passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (&lt;) operator for one order, and the other version using the greater than (&gt;) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.</p><h3 id="Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument"><a href="#Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument" class="headerlink" title="Listing 7. Using an anonymous class to pass functionality as a method argument"></a>Listing 7. Using an anonymous class to pass functionality as a method argument</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Comparer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.</p><h3 id="Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm"><a href="#Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm" class="headerlink" title="Listing 8. Sorting an array of integers with the Bubble Sort algorithm"></a>Listing 8. Sorting an array of integers with the Bubble Sort algorithm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ACDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">int</span>[] a = &#123; <span class="number">10</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">0</span>, -<span class="number">2</span>, <span class="number">100</span>, -<span class="number">9</span> &#125;;</span><br><span class="line">      dump(a);</span><br><span class="line">      sort(a, <span class="keyword">new</span> Comparer()</span><br><span class="line">                  &#123;</span><br><span class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">                     </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> x - y;</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;);</span><br><span class="line">      dump(a);</span><br><span class="line">      <span class="keyword">int</span>[] b = &#123; <span class="number">10</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">0</span>, -<span class="number">2</span>, <span class="number">100</span>, -<span class="number">9</span> &#125;;</span><br><span class="line">      sort(b, <span class="keyword">new</span> Comparer()</span><br><span class="line">                  &#123;</span><br><span class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">                     </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> y - x;</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;);</span><br><span class="line">      dump(b);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dump</span><span class="params">(<span class="keyword">int</span>[] x)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++)</span><br><span class="line">         System.out.print(x[i] + <span class="string">" "</span>);</span><br><span class="line">      System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] x, Comparer c)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> pass = <span class="number">0</span>; pass &lt; x.length - <span class="number">1</span>; pass++)</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = x.length - <span class="number">1</span>; i &gt; pass; i--)</span><br><span class="line">            <span class="keyword">if</span> (c.compare(x[i], x[pass]) &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="keyword">int</span> temp = x[i];</span><br><span class="line">               x[i] = x[pass];</span><br><span class="line">               x[pass] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.</p><blockquote><p>Migrating from anonymous classes to lambdas<br>As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.</p></blockquote><p>Compile Listing 7 and 8 as follows:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br></pre></td></tr></table></figure></p><p>When you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class’s name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ACDemo.class.</span><br><span class="line">ACDemo$1.class</span><br><span class="line">ACDemo$2.class</span><br></pre></td></tr></table></figure></p><p>Run the application as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java ACDemo</span><br></pre></td></tr></table></figure></p><p>You should obeserve the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">10 30 5 0 -2 100 -9</span><br><span class="line">-9 -2 0 5 10 30 100</span><br><span class="line">100 30 10 5 0 -2 -9</span><br></pre></td></tr></table></figure></p><h3 id="Example-Using-anonymous-classes-with-an-AWT-event-hanlder"><a href="#Example-Using-anonymous-classes-with-an-AWT-event-hanlder" class="headerlink" title="Example: Using anonymous classes with an AWT event hanlder"></a>Example: Using anonymous classes with an AWT event hanlder</h3><p>Anonymous classes can be used with many packages in the standard calss library. For this example, we’ll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing’s JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JButton btnClose = <span class="keyword">new</span> JButton(<span class="string">"close"</span>);</span><br><span class="line">btnClose.addActionListener(<span class="keyword">new</span> ActionListener()</span><br><span class="line">                               &#123;</span><br><span class="line">                                  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent ae)</span></span></span><br><span class="line"><span class="function">                                  </span>&#123;</span><br><span class="line">                                     System.out.println(<span class="string">"close button clicked"</span>);</span><br><span class="line">                                  &#125;</span><br><span class="line">                               &#125;);</span><br></pre></td></tr></table></figure><p>The first line instantiates JButton, passing close as the button label to JButton’s constructor. The second line registers an action listener with the button. The action listener’s actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Java’s nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.</p>]]></content>
      
      
      <categories>
          
          <category> JavaWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Advanced Java language features </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Advanced features Part 3, Advanced features and types</title>
      <link href="/2020/03/05/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Advanced%20features%20Part%203,%20Advanced%20features%20and%20types/"/>
      <url>/2020/03/05/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Advanced%20features%20Part%203,%20Advanced%20features%20and%20types/</url>
      
        <content type="html"><![CDATA[<p>Nested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class’s namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.</p><p>In Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you’ll learn how to work with static member classes and the three types of inner classes in your Java code.</p><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><h2 id="Static-classes-in-Java"><a href="#Static-classes-in-Java" class="headerlink" title="Static classes in Java"></a>Static classes in Java</h2><p>Fromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the <code>static</code> keyword. Here’s an example of a static member class declaration:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> f;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        f = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">        <span class="comment">// members</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This example introduces top-level class <code>C</code> with static field <code>f</code>, static method <code>m()</code>, a static initializer, and static member cladd <code>D</code>. Notice that <code>D</code> is a member of <code>C</code>. The static field <code>f</code>, static method <code>m()</code>, and the static initializer are also members of <code>C</code>. Since all of these elements belong to class <code>C</code>, it is known as the enclosing class (封闭类). Class <code>D</code> is known as the enclosed class.</p><h3 id="Enclosure-and-access-rules"><a href="#Enclosure-and-access-rules" class="headerlink" title="Enclosure and access rules"></a>Enclosure and access rules</h3><p>Although it is enclosed (围绕), a static member class cannot access the enclosing class’s instance fields and invoke its instance methods. However, it can access the enclosing class’s static fields and invoke its static methods, even those members that are declared <code>private</code>. To demonstrate (演示), Listing 1 declares an <code>EnclosingClass</code> with a nested <code>SMClass</code>. </p><h3 id="Listing-1-Declaring-a-static-member-class"><a href="#Listing-1-Declaring-a-static-member-class" class="headerlink" title="Listing 1. Declaring a static member class"></a>Listing 1. Declaring a static member class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnclosingClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SMClass.accessEnclosingClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SMClass</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">accessEnclosingClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            s = <span class="string">"Called from SMClass's accessEnclosingClas() method"</span>;</span><br><span class="line">            m1();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">accessEnclosingClass2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            m2();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 1 declares a top-level class named EnclosingClass with class field s, class method <code>m1()</code> and <code>m2()</code>, and static member class SMClass. SMClass declares class method <code>accessEnclosingClass()</code> and instance method <code>accessEnclosingClass2()</code>. Note the following:</p><ol><li><code>m2()</code>‘s invocation (调用) of SMClass’s <code>accessEnclosingClass()</code> method requires the <code>SMClass.</code> prefix because <code>accessEnclosingClass()</code> is declared <code>static</code></li><li><code>accessEnclosingClass()</code> is able to access EnclosingClass’s s field and call its <code>m1()</code> method, even though both have been declared <code>private</code>.</li></ol><p>Listing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass’s <code>accessEnclosingClass()</code> method. It also demonstrates how to instantiate SMClass and invoke its <code>accessEnclosingClass2()</code> instance method.</p><h3 id="Listing-2-Invoking-a-static-member-class’s-methods"><a href="#Listing-2-Invoking-a-static-member-class’s-methods" class="headerlink" title="Listing 2. Invoking a static member class’s methods"></a>Listing 2. Invoking a static member class’s methods</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMCDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EnclosingClass.SMClass.accessEncolsingClass();</span><br><span class="line">        EnclsoingClass.SMClass smc = <span class="keyword">new</span> EnclosingClass.SMClass();</span><br><span class="line">        smc.accessEnclosingClass2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As shown in Listing 2, if you want to invoke a top-level class’s method from within an enclosed class, you must prefix the enclosed class’s name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.</p><p>Compile Listing 1 and 2 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br></pre></td></tr></table></figure></p><p>When you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class’s name, dollar-sign character, and the static member class’s name. In this case, compiling results is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SMCDemo.class</span><br><span class="line">EnclosingClass.class</span><br><span class="line">EnclosingClass$SMCClass.class</span><br></pre></td></tr></table></figure></p><p>Run the application as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java SMCDemo</span><br></pre></td></tr></table></figure><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Called from SMClass&apos;s accessEnclosingClass() method</span><br><span class="line">Called from SMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p><h3 id="Example-Static-classes-and-Java-2D"><a href="#Example-Static-classes-and-Java-2D" class="headerlink" title="Example: Static classes and Java 2D"></a>Example: Static classes and Java 2D</h3><p>Java’s standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the <code>java.awt.geom</code> package.</p><p>The <code>Ellipse2D</code> class found in <code>java.awt.geom</code> describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class’s architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass <code>Ellipse2D</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Ellipse2D</span> <span class="keyword">extends</span> <span class="title">RectangularShape</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Float</span> <span class="keyword">extends</span> <span class="title">Ellipse2D</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">float</span> x, y, widht, heigh;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Float</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Float</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> w, <span class="keyword">float</span> h)</span> </span>&#123;</span><br><span class="line">            setFrame(x, y, w, h);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">double</span>)x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// additional instance methods</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Double</span> <span class="keyword">extends</span> <span class="title">Ellipse2D</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> x, y, width, height;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Double</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Double</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> w, <span class="keyword">double</span> h)</span> </span>&#123;</span><br><span class="line">            setFrame(x, y, w, h);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// additional instance methods</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// additional instance methods shared by Float, Double, and other Ellipse2D subclass.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The <code>Float</code> and <code>Double</code> classes extend <code>Ellipse2D</code>, providing floating-point and double precision floating-point Ellipse2D implementations.</p><h2 id="Inner-classes-tpye-1-Non-static-member-classes"><a href="#Inner-classes-tpye-1-Non-static-member-classes" class="headerlink" title="Inner classes, tpye 1: Non-static member classes"></a>Inner classes, tpye 1: Non-static member classes</h2><p>Consider this example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    C() &#123;</span><br><span class="line">        f = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">        <span class="comment">// members</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Here, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.</p><p>Each instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class’s instance methods can call the enclosing class’s instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.</p><h4 id="Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class"><a href="#Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class" class="headerlink" title="Listing 3. Declare an enclosing class with a nested non-static member class"></a>Listing 3. Declare an enclosing class with a nested non-static member class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnclosingClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NSMClass</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">accessEnclosingClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            s = <span class="string">"Called from NSMClass's accessEnclosingClass() method"</span>;</span><br><span class="line">            m();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method <code>accessEnclosingClass()</code>.</p><p>Because <code>accessEnclosingClass()</code> in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.</p><h4 id="Listing-4-NSMCDemo-java"><a href="#Listing-4-NSMCDemo-java" class="headerlink" title="Listing 4. NSMCDemo.java"></a>Listing 4. NSMCDemo.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NSMDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EnclosingClass ec = <span class="keyword">new</span> EnclosingClass();</span><br><span class="line">        ec.new NSMClass().accessEnclosingClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 4’s <code>main()</code> method first instantiates EnclosingClass and saves its reference in local variable ec. The <code>main()</code> method then uses the EnclosingClass reference as a prefix to the <code>new</code> operator, in order to instantiate NSMClass. The NSMClass reference is then used to call <code>accessEnclosingClass()</code> method.</p><blockquote><p>Should I use <code>new</code> with a reference to the enclosing class?<br>Prefixing <code>new</code> with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class’s constructor from within a constructor or an instance method of its enclosing class.</p></blockquote><p>Compile Listing 3 and 4 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java *.java</span><br></pre></td></tr></table></figure></p><p>When you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class’s name, a dollar-sign character, and the non-static member class’s name. In this case, compiling results in：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSMDemo.class</span><br><span class="line">EnclosingClass.class</span><br><span class="line">EnclisingClass$NSMCClass.class</span><br></pre></td></tr></table></figure></p><p>Run the application as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java NSMDemo</span><br></pre></td></tr></table></figure></p><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Called from NSMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p><blockquote><p>When (and how) to qualify (限定) <code>this</code><br>An enclosed class’s code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) <code>this</code> with the enclosing class’s name and the member access operator <code>.</code>. For example, if code within <code>accessEnclosingClass()</code> needed to obtain a reference to its <code>EnclosingClass</code> instance, it would spcify <code>EnclosingClass.this</code>. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.</p></blockquote><h4 id="Example-Non-static-member-classes-in-HashMap"><a href="#Example-Non-static-member-classes-in-HashMap" class="headerlink" title="Example: Non-static member classes in HashMap"></a>Example: Non-static member classes in HashMap</h4><p>The standard class library includes non-static member as well as static member classes. For this example, we’ll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.</p><p>For example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// various members</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// various members</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// various members</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The <code>&lt;K, V&gt;</code> and <code>&lt;K&gt;</code> syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.</p><p>HashMap provides a <code>KeySet()</code> method that instantiates KeySet when necessary and returns this instance or a cached instance. Here’s the complete method:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keyset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;K&gt; ks = keySet;</span><br><span class="line">    <span class="keyword">if</span> (ks == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ks = <span class="keyword">new</span> KeySet();</span><br><span class="line">        keySet = ks;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Notice that the enclosed class’s (KeySet’s) constructor is called from within the enclosing class’s (HashSet’s) <code>keyset()</code> instance method. This illustrates a common practice (做法) especially because prefixing the <code>new</code> operator with an enclosing class reference is rare.</p><h2 id="Inner-classes-type-2-Local-classes"><a href="#Inner-classes-type-2-Local-classes" class="headerlink" title="Inner classes, type 2: Local classes"></a>Inner classes, type 2: Local classes</h2><p>It’s occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="comment">// or even static I m()</span></span><br><span class="line">    <span class="function">I <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">            <span class="comment">// members</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> D();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Top-level class C declares instance method <code>m()</code>, which returns an instance of local class D, which is declared in this method. Notice that <code>m()</code>‘s return type is interface I, which D implements. The interface is necessary because giving <code>m()</code> return type D would result in a compiler error — D isn’t accessible outside of <code>m()</code>‘ body.</p><blockquote><p>Illegal access modifiers (修饰语) in local class declaration<br>The compiler will report an error if a local class declaration contains any of the access modifiers <code>private</code>, <code>public</code>, or <code>protected</code>; or the modifier <code>static</code>.</p></blockquote><p>A local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope’s local variables and parameters, which must be declared <code>final</code>. Consider 5.</p><h3 id="Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method"><a href="#Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method" class="headerlink" title="Listing 5. Declaring a local class within an enclosing class instance method"></a>Listing 5. Declaring a local class within an enclosing class instance method</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnclosingClass</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> y = x * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">LClass</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> m = x;</span><br><span class="line">            <span class="keyword">int</span> n = y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LClass lc = <span class="keyword">new</span> LClass();</span><br><span class="line">        System.out.println(lc.m);</span><br><span class="line">        System.out.println(lc.n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 5 declares EnclosingClass with instance method <code>m()</code>, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.</p><h3 id="Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields"><a href="#Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields" class="headerlink" title="Listing 6. A local class declares and initializes a pair of instance fields"></a>Listing 6. A local class declares and initializes a pair of instance fields</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LCDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EnclosingClass ec = <span class="keyword">new</span> EnclosingClass();</span><br><span class="line">        ec.m(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 6’s <code>main()</code> method first instantiates EnclosingClass. It then invokes <code>m(5)</code> on this instance. The called <code>m()</code> method multiplies this argument by 3, instantiates LClass, whose <code>&lt;init&gt;()</code> method assigns the argument and the tripled value to its pair of instance fields and outputs LClass’s instance fields. (Note that in this case the local class uses the <code>&lt;init&gt;()</code> method instead of a constructor to interact with its instance fields.)</p><p>Compile Listing 5 and 6 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br></pre></td></tr></table></figure></p><p>When you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class’s name, a dollar-sign character, a 1-base integer, and the local class’s name. In this case, compiling results:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LCDemo.class</span><br><span class="line">EnclosingClass.class</span><br><span class="line">EnclosingClass$1LClass.class</span><br></pre></td></tr></table></figure></p><h3 id="A-note-about-local-class-name"><a href="#A-note-about-local-class-name" class="headerlink" title="A note about local class name"></a>A note about local class name</h3><p>When generating a name for a local class’s file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class’s class file from a non-static member clas’s class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnclosingClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="class"><span class="keyword">class</span> <span class="title">LClass</span></span></span><br><span class="line"><span class="class">       </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="class"><span class="keyword">class</span> <span class="title">LClass</span></span></span><br><span class="line"><span class="class">       </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="class"><span class="keyword">class</span> <span class="title">LClass2</span></span></span><br><span class="line"><span class="class">       </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>EnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EnclosingClass$1LClass.class</span><br><span class="line">EnclosingClass$1LClass2.class</span><br><span class="line">EnclosingClass$2LClass.class</span><br><span class="line">EnclosingClass.class</span><br></pre></td></tr></table></figure></p><p>Run the application as follow:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java LCDemo</span><br></pre></td></tr></table></figure></p><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">15</span><br></pre></td></tr></table></figure></p><h3 id="Example-Using-local-classes-in-regular-expressions"><a href="#Example-Using-local-classes-in-regular-expressions" class="headerlink" title="Example: Using local classes in regular expressions"></a>Example: Using local classes in regular expressions</h3><p>The standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Stream&lt;MatchResult&gt; <span class="title">results</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">MatchResultIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">MatchResult</span>&gt;</span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">      <span class="comment">// members</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> StreamSupport.stream(Spliterators.spliteratorUnknownSize(<span class="keyword">new</span> MatchResultIterator(),</span><br><span class="line">                                                                   Spliterator.ORDERED |</span><br><span class="line">                                                                   Spliterator.NONNULL),</span><br><span class="line">                               <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Note the instantiation of MatchResultIterator() following the class declaration. Don’t worry about parts of the code that you don’t understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.</p><h2 id="Inner-classes-type-3-Anonymous-classes"><a href="#Inner-classes-type-3-Anonymous-classes" class="headerlink" title="Inner classes, type 3: Anonymous classes"></a>Inner classes, type 3: Anonymous classes</h2><p>Static member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// subclass the base class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">// members</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      Base b = <span class="keyword">new</span> Base()</span><br><span class="line">               &#123;</span><br><span class="line">                 <span class="comment">// members</span></span><br><span class="line">               &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// implement the interface</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">// members</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      I i = <span class="keyword">new</span> I()</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="comment">// members</span></span><br><span class="line">            &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.</p><blockquote><p>Constructing anonymous class instances<br>An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.</p></blockquote><p>Anonymous classes are useful for expressing functionality that’s passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (&lt;) operator for one order, and the other version using the greater than (&gt;) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.</p><h3 id="Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument"><a href="#Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument" class="headerlink" title="Listing 7. Using an anonymous class to pass functionality as a method argument"></a>Listing 7. Using an anonymous class to pass functionality as a method argument</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Comparer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.</p><h3 id="Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm"><a href="#Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm" class="headerlink" title="Listing 8. Sorting an array of integers with the Bubble Sort algorithm"></a>Listing 8. Sorting an array of integers with the Bubble Sort algorithm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ACDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">int</span>[] a = &#123; <span class="number">10</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">0</span>, -<span class="number">2</span>, <span class="number">100</span>, -<span class="number">9</span> &#125;;</span><br><span class="line">      dump(a);</span><br><span class="line">      sort(a, <span class="keyword">new</span> Comparer()</span><br><span class="line">                  &#123;</span><br><span class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">                     </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> x - y;</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;);</span><br><span class="line">      dump(a);</span><br><span class="line">      <span class="keyword">int</span>[] b = &#123; <span class="number">10</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">0</span>, -<span class="number">2</span>, <span class="number">100</span>, -<span class="number">9</span> &#125;;</span><br><span class="line">      sort(b, <span class="keyword">new</span> Comparer()</span><br><span class="line">                  &#123;</span><br><span class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">                     </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> y - x;</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;);</span><br><span class="line">      dump(b);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dump</span><span class="params">(<span class="keyword">int</span>[] x)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++)</span><br><span class="line">         System.out.print(x[i] + <span class="string">" "</span>);</span><br><span class="line">      System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] x, Comparer c)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> pass = <span class="number">0</span>; pass &lt; x.length - <span class="number">1</span>; pass++)</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = x.length - <span class="number">1</span>; i &gt; pass; i--)</span><br><span class="line">            <span class="keyword">if</span> (c.compare(x[i], x[pass]) &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="keyword">int</span> temp = x[i];</span><br><span class="line">               x[i] = x[pass];</span><br><span class="line">               x[pass] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.</p><blockquote><p>Migrating from anonymous classes to lambdas<br>As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.</p></blockquote><p>Compile Listing 7 and 8 as follows:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br></pre></td></tr></table></figure></p><p>When you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class’s name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ACDemo.class.</span><br><span class="line">ACDemo$1.class</span><br><span class="line">ACDemo$2.class</span><br></pre></td></tr></table></figure></p><p>Run the application as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java ACDemo</span><br></pre></td></tr></table></figure></p><p>You should obeserve the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">10 30 5 0 -2 100 -9</span><br><span class="line">-9 -2 0 5 10 30 100</span><br><span class="line">100 30 10 5 0 -2 -9</span><br></pre></td></tr></table></figure></p><h3 id="Example-Using-anonymous-classes-with-an-AWT-event-hanlder"><a href="#Example-Using-anonymous-classes-with-an-AWT-event-hanlder" class="headerlink" title="Example: Using anonymous classes with an AWT event hanlder"></a>Example: Using anonymous classes with an AWT event hanlder</h3><p>Anonymous classes can be used with many packages in the standard calss library. For this example, we’ll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing’s JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JButton btnClose = <span class="keyword">new</span> JButton(<span class="string">"close"</span>);</span><br><span class="line">btnClose.addActionListener(<span class="keyword">new</span> ActionListener()</span><br><span class="line">                               &#123;</span><br><span class="line">                                  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent ae)</span></span></span><br><span class="line"><span class="function">                                  </span>&#123;</span><br><span class="line">                                     System.out.println(<span class="string">"close button clicked"</span>);</span><br><span class="line">                                  &#125;</span><br><span class="line">                               &#125;);</span><br></pre></td></tr></table></figure><p>The first line instantiates JButton, passing close as the button label to JButton’s constructor. The second line registers an action listener with the button. The action listener’s actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Java’s nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.</p>]]></content>
      
      
      <categories>
          
          <category> JavaWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Advanced Java language features </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Advanced features Part 2, Exception handling basics</title>
      <link href="/2020/03/05/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Advanced%20features%20Part%202,%20Exception%20handling%20basics/"/>
      <url>/2020/03/05/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Advanced%20features%20Part%202,%20Exception%20handling%20basics/</url>
      
        <content type="html"><![CDATA[<p>Nested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class’s namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.</p><p>In Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you’ll learn how to work with static member classes and the three types of inner classes in your Java code.</p><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><h2 id="Static-classes-in-Java"><a href="#Static-classes-in-Java" class="headerlink" title="Static classes in Java"></a>Static classes in Java</h2><p>Fromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the <code>static</code> keyword. Here’s an example of a static member class declaration:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> f;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        f = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">        <span class="comment">// members</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This example introduces top-level class <code>C</code> with static field <code>f</code>, static method <code>m()</code>, a static initializer, and static member cladd <code>D</code>. Notice that <code>D</code> is a member of <code>C</code>. The static field <code>f</code>, static method <code>m()</code>, and the static initializer are also members of <code>C</code>. Since all of these elements belong to class <code>C</code>, it is known as the enclosing class (封闭类). Class <code>D</code> is known as the enclosed class.</p><h3 id="Enclosure-and-access-rules"><a href="#Enclosure-and-access-rules" class="headerlink" title="Enclosure and access rules"></a>Enclosure and access rules</h3><p>Although it is enclosed (围绕), a static member class cannot access the enclosing class’s instance fields and invoke its instance methods. However, it can access the enclosing class’s static fields and invoke its static methods, even those members that are declared <code>private</code>. To demonstrate (演示), Listing 1 declares an <code>EnclosingClass</code> with a nested <code>SMClass</code>. </p><h3 id="Listing-1-Declaring-a-static-member-class"><a href="#Listing-1-Declaring-a-static-member-class" class="headerlink" title="Listing 1. Declaring a static member class"></a>Listing 1. Declaring a static member class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnclosingClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SMClass.accessEnclosingClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SMClass</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">accessEnclosingClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            s = <span class="string">"Called from SMClass's accessEnclosingClas() method"</span>;</span><br><span class="line">            m1();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">accessEnclosingClass2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            m2();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 1 declares a top-level class named EnclosingClass with class field s, class method <code>m1()</code> and <code>m2()</code>, and static member class SMClass. SMClass declares class method <code>accessEnclosingClass()</code> and instance method <code>accessEnclosingClass2()</code>. Note the following:</p><ol><li><code>m2()</code>‘s invocation (调用) of SMClass’s <code>accessEnclosingClass()</code> method requires the <code>SMClass.</code> prefix because <code>accessEnclosingClass()</code> is declared <code>static</code></li><li><code>accessEnclosingClass()</code> is able to access EnclosingClass’s s field and call its <code>m1()</code> method, even though both have been declared <code>private</code>.</li></ol><p>Listing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass’s <code>accessEnclosingClass()</code> method. It also demonstrates how to instantiate SMClass and invoke its <code>accessEnclosingClass2()</code> instance method.</p><h3 id="Listing-2-Invoking-a-static-member-class’s-methods"><a href="#Listing-2-Invoking-a-static-member-class’s-methods" class="headerlink" title="Listing 2. Invoking a static member class’s methods"></a>Listing 2. Invoking a static member class’s methods</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMCDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EnclosingClass.SMClass.accessEncolsingClass();</span><br><span class="line">        EnclsoingClass.SMClass smc = <span class="keyword">new</span> EnclosingClass.SMClass();</span><br><span class="line">        smc.accessEnclosingClass2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As shown in Listing 2, if you want to invoke a top-level class’s method from within an enclosed class, you must prefix the enclosed class’s name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.</p><p>Compile Listing 1 and 2 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br></pre></td></tr></table></figure></p><p>When you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class’s name, dollar-sign character, and the static member class’s name. In this case, compiling results is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SMCDemo.class</span><br><span class="line">EnclosingClass.class</span><br><span class="line">EnclosingClass$SMCClass.class</span><br></pre></td></tr></table></figure></p><p>Run the application as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java SMCDemo</span><br></pre></td></tr></table></figure><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Called from SMClass&apos;s accessEnclosingClass() method</span><br><span class="line">Called from SMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p><h3 id="Example-Static-classes-and-Java-2D"><a href="#Example-Static-classes-and-Java-2D" class="headerlink" title="Example: Static classes and Java 2D"></a>Example: Static classes and Java 2D</h3><p>Java’s standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the <code>java.awt.geom</code> package.</p><p>The <code>Ellipse2D</code> class found in <code>java.awt.geom</code> describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class’s architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass <code>Ellipse2D</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Ellipse2D</span> <span class="keyword">extends</span> <span class="title">RectangularShape</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Float</span> <span class="keyword">extends</span> <span class="title">Ellipse2D</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">float</span> x, y, widht, heigh;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Float</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Float</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> w, <span class="keyword">float</span> h)</span> </span>&#123;</span><br><span class="line">            setFrame(x, y, w, h);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">double</span>)x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// additional instance methods</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Double</span> <span class="keyword">extends</span> <span class="title">Ellipse2D</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> x, y, width, height;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Double</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Double</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> w, <span class="keyword">double</span> h)</span> </span>&#123;</span><br><span class="line">            setFrame(x, y, w, h);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// additional instance methods</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// additional instance methods shared by Float, Double, and other Ellipse2D subclass.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The <code>Float</code> and <code>Double</code> classes extend <code>Ellipse2D</code>, providing floating-point and double precision floating-point Ellipse2D implementations.</p><h2 id="Inner-classes-tpye-1-Non-static-member-classes"><a href="#Inner-classes-tpye-1-Non-static-member-classes" class="headerlink" title="Inner classes, tpye 1: Non-static member classes"></a>Inner classes, tpye 1: Non-static member classes</h2><p>Consider this example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    C() &#123;</span><br><span class="line">        f = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">        <span class="comment">// members</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Here, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.</p><p>Each instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class’s instance methods can call the enclosing class’s instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.</p><h4 id="Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class"><a href="#Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class" class="headerlink" title="Listing 3. Declare an enclosing class with a nested non-static member class"></a>Listing 3. Declare an enclosing class with a nested non-static member class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnclosingClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NSMClass</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">accessEnclosingClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            s = <span class="string">"Called from NSMClass's accessEnclosingClass() method"</span>;</span><br><span class="line">            m();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method <code>accessEnclosingClass()</code>.</p><p>Because <code>accessEnclosingClass()</code> in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.</p><h4 id="Listing-4-NSMCDemo-java"><a href="#Listing-4-NSMCDemo-java" class="headerlink" title="Listing 4. NSMCDemo.java"></a>Listing 4. NSMCDemo.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NSMDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EnclosingClass ec = <span class="keyword">new</span> EnclosingClass();</span><br><span class="line">        ec.new NSMClass().accessEnclosingClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 4’s <code>main()</code> method first instantiates EnclosingClass and saves its reference in local variable ec. The <code>main()</code> method then uses the EnclosingClass reference as a prefix to the <code>new</code> operator, in order to instantiate NSMClass. The NSMClass reference is then used to call <code>accessEnclosingClass()</code> method.</p><blockquote><p>Should I use <code>new</code> with a reference to the enclosing class?<br>Prefixing <code>new</code> with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class’s constructor from within a constructor or an instance method of its enclosing class.</p></blockquote><p>Compile Listing 3 and 4 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java *.java</span><br></pre></td></tr></table></figure></p><p>When you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class’s name, a dollar-sign character, and the non-static member class’s name. In this case, compiling results in：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSMDemo.class</span><br><span class="line">EnclosingClass.class</span><br><span class="line">EnclisingClass$NSMCClass.class</span><br></pre></td></tr></table></figure></p><p>Run the application as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java NSMDemo</span><br></pre></td></tr></table></figure></p><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Called from NSMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p><blockquote><p>When (and how) to qualify (限定) <code>this</code><br>An enclosed class’s code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) <code>this</code> with the enclosing class’s name and the member access operator <code>.</code>. For example, if code within <code>accessEnclosingClass()</code> needed to obtain a reference to its <code>EnclosingClass</code> instance, it would spcify <code>EnclosingClass.this</code>. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.</p></blockquote><h4 id="Example-Non-static-member-classes-in-HashMap"><a href="#Example-Non-static-member-classes-in-HashMap" class="headerlink" title="Example: Non-static member classes in HashMap"></a>Example: Non-static member classes in HashMap</h4><p>The standard class library includes non-static member as well as static member classes. For this example, we’ll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.</p><p>For example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// various members</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// various members</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// various members</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The <code>&lt;K, V&gt;</code> and <code>&lt;K&gt;</code> syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.</p><p>HashMap provides a <code>KeySet()</code> method that instantiates KeySet when necessary and returns this instance or a cached instance. Here’s the complete method:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keyset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;K&gt; ks = keySet;</span><br><span class="line">    <span class="keyword">if</span> (ks == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ks = <span class="keyword">new</span> KeySet();</span><br><span class="line">        keySet = ks;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Notice that the enclosed class’s (KeySet’s) constructor is called from within the enclosing class’s (HashSet’s) <code>keyset()</code> instance method. This illustrates a common practice (做法) especially because prefixing the <code>new</code> operator with an enclosing class reference is rare.</p><h2 id="Inner-classes-type-2-Local-classes"><a href="#Inner-classes-type-2-Local-classes" class="headerlink" title="Inner classes, type 2: Local classes"></a>Inner classes, type 2: Local classes</h2><p>It’s occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="comment">// or even static I m()</span></span><br><span class="line">    <span class="function">I <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">            <span class="comment">// members</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> D();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Top-level class C declares instance method <code>m()</code>, which returns an instance of local class D, which is declared in this method. Notice that <code>m()</code>‘s return type is interface I, which D implements. The interface is necessary because giving <code>m()</code> return type D would result in a compiler error — D isn’t accessible outside of <code>m()</code>‘ body.</p><blockquote><p>Illegal access modifiers (修饰语) in local class declaration<br>The compiler will report an error if a local class declaration contains any of the access modifiers <code>private</code>, <code>public</code>, or <code>protected</code>; or the modifier <code>static</code>.</p></blockquote><p>A local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope’s local variables and parameters, which must be declared <code>final</code>. Consider 5.</p><h3 id="Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method"><a href="#Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method" class="headerlink" title="Listing 5. Declaring a local class within an enclosing class instance method"></a>Listing 5. Declaring a local class within an enclosing class instance method</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnclosingClass</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> y = x * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">LClass</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> m = x;</span><br><span class="line">            <span class="keyword">int</span> n = y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LClass lc = <span class="keyword">new</span> LClass();</span><br><span class="line">        System.out.println(lc.m);</span><br><span class="line">        System.out.println(lc.n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 5 declares EnclosingClass with instance method <code>m()</code>, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.</p><h3 id="Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields"><a href="#Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields" class="headerlink" title="Listing 6. A local class declares and initializes a pair of instance fields"></a>Listing 6. A local class declares and initializes a pair of instance fields</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LCDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EnclosingClass ec = <span class="keyword">new</span> EnclosingClass();</span><br><span class="line">        ec.m(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 6’s <code>main()</code> method first instantiates EnclosingClass. It then invokes <code>m(5)</code> on this instance. The called <code>m()</code> method multiplies this argument by 3, instantiates LClass, whose <code>&lt;init&gt;()</code> method assigns the argument and the tripled value to its pair of instance fields and outputs LClass’s instance fields. (Note that in this case the local class uses the <code>&lt;init&gt;()</code> method instead of a constructor to interact with its instance fields.)</p><p>Compile Listing 5 and 6 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br></pre></td></tr></table></figure></p><p>When you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class’s name, a dollar-sign character, a 1-base integer, and the local class’s name. In this case, compiling results:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LCDemo.class</span><br><span class="line">EnclosingClass.class</span><br><span class="line">EnclosingClass$1LClass.class</span><br></pre></td></tr></table></figure></p><h3 id="A-note-about-local-class-name"><a href="#A-note-about-local-class-name" class="headerlink" title="A note about local class name"></a>A note about local class name</h3><p>When generating a name for a local class’s file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class’s class file from a non-static member clas’s class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnclosingClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="class"><span class="keyword">class</span> <span class="title">LClass</span></span></span><br><span class="line"><span class="class">       </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="class"><span class="keyword">class</span> <span class="title">LClass</span></span></span><br><span class="line"><span class="class">       </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="class"><span class="keyword">class</span> <span class="title">LClass2</span></span></span><br><span class="line"><span class="class">       </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>EnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EnclosingClass$1LClass.class</span><br><span class="line">EnclosingClass$1LClass2.class</span><br><span class="line">EnclosingClass$2LClass.class</span><br><span class="line">EnclosingClass.class</span><br></pre></td></tr></table></figure></p><p>Run the application as follow:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java LCDemo</span><br></pre></td></tr></table></figure></p><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">15</span><br></pre></td></tr></table></figure></p><h3 id="Example-Using-local-classes-in-regular-expressions"><a href="#Example-Using-local-classes-in-regular-expressions" class="headerlink" title="Example: Using local classes in regular expressions"></a>Example: Using local classes in regular expressions</h3><p>The standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Stream&lt;MatchResult&gt; <span class="title">results</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">MatchResultIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">MatchResult</span>&gt;</span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">      <span class="comment">// members</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> StreamSupport.stream(Spliterators.spliteratorUnknownSize(<span class="keyword">new</span> MatchResultIterator(),</span><br><span class="line">                                                                   Spliterator.ORDERED |</span><br><span class="line">                                                                   Spliterator.NONNULL),</span><br><span class="line">                               <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Note the instantiation of MatchResultIterator() following the class declaration. Don’t worry about parts of the code that you don’t understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.</p><h2 id="Inner-classes-type-3-Anonymous-classes"><a href="#Inner-classes-type-3-Anonymous-classes" class="headerlink" title="Inner classes, type 3: Anonymous classes"></a>Inner classes, type 3: Anonymous classes</h2><p>Static member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// subclass the base class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">// members</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      Base b = <span class="keyword">new</span> Base()</span><br><span class="line">               &#123;</span><br><span class="line">                 <span class="comment">// members</span></span><br><span class="line">               &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// implement the interface</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">// members</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      I i = <span class="keyword">new</span> I()</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="comment">// members</span></span><br><span class="line">            &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.</p><blockquote><p>Constructing anonymous class instances<br>An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.</p></blockquote><p>Anonymous classes are useful for expressing functionality that’s passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (&lt;) operator for one order, and the other version using the greater than (&gt;) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.</p><h3 id="Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument"><a href="#Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument" class="headerlink" title="Listing 7. Using an anonymous class to pass functionality as a method argument"></a>Listing 7. Using an anonymous class to pass functionality as a method argument</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Comparer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.</p><h3 id="Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm"><a href="#Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm" class="headerlink" title="Listing 8. Sorting an array of integers with the Bubble Sort algorithm"></a>Listing 8. Sorting an array of integers with the Bubble Sort algorithm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ACDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">int</span>[] a = &#123; <span class="number">10</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">0</span>, -<span class="number">2</span>, <span class="number">100</span>, -<span class="number">9</span> &#125;;</span><br><span class="line">      dump(a);</span><br><span class="line">      sort(a, <span class="keyword">new</span> Comparer()</span><br><span class="line">                  &#123;</span><br><span class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">                     </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> x - y;</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;);</span><br><span class="line">      dump(a);</span><br><span class="line">      <span class="keyword">int</span>[] b = &#123; <span class="number">10</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">0</span>, -<span class="number">2</span>, <span class="number">100</span>, -<span class="number">9</span> &#125;;</span><br><span class="line">      sort(b, <span class="keyword">new</span> Comparer()</span><br><span class="line">                  &#123;</span><br><span class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">                     </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> y - x;</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;);</span><br><span class="line">      dump(b);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dump</span><span class="params">(<span class="keyword">int</span>[] x)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++)</span><br><span class="line">         System.out.print(x[i] + <span class="string">" "</span>);</span><br><span class="line">      System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] x, Comparer c)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> pass = <span class="number">0</span>; pass &lt; x.length - <span class="number">1</span>; pass++)</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = x.length - <span class="number">1</span>; i &gt; pass; i--)</span><br><span class="line">            <span class="keyword">if</span> (c.compare(x[i], x[pass]) &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="keyword">int</span> temp = x[i];</span><br><span class="line">               x[i] = x[pass];</span><br><span class="line">               x[pass] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.</p><blockquote><p>Migrating from anonymous classes to lambdas<br>As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.</p></blockquote><p>Compile Listing 7 and 8 as follows:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br></pre></td></tr></table></figure></p><p>When you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class’s name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ACDemo.class.</span><br><span class="line">ACDemo$1.class</span><br><span class="line">ACDemo$2.class</span><br></pre></td></tr></table></figure></p><p>Run the application as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java ACDemo</span><br></pre></td></tr></table></figure></p><p>You should obeserve the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">10 30 5 0 -2 100 -9</span><br><span class="line">-9 -2 0 5 10 30 100</span><br><span class="line">100 30 10 5 0 -2 -9</span><br></pre></td></tr></table></figure></p><h3 id="Example-Using-anonymous-classes-with-an-AWT-event-hanlder"><a href="#Example-Using-anonymous-classes-with-an-AWT-event-hanlder" class="headerlink" title="Example: Using anonymous classes with an AWT event hanlder"></a>Example: Using anonymous classes with an AWT event hanlder</h3><p>Anonymous classes can be used with many packages in the standard calss library. For this example, we’ll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing’s JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JButton btnClose = <span class="keyword">new</span> JButton(<span class="string">"close"</span>);</span><br><span class="line">btnClose.addActionListener(<span class="keyword">new</span> ActionListener()</span><br><span class="line">                               &#123;</span><br><span class="line">                                  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent ae)</span></span></span><br><span class="line"><span class="function">                                  </span>&#123;</span><br><span class="line">                                     System.out.println(<span class="string">"close button clicked"</span>);</span><br><span class="line">                                  &#125;</span><br><span class="line">                               &#125;);</span><br></pre></td></tr></table></figure><p>The first line instantiates JButton, passing close as the button label to JButton’s constructor. The second line registers an action listener with the button. The action listener’s actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Java’s nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.</p>]]></content>
      
      
      <categories>
          
          <category> JavaWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Advanced Java language features </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Advanced features Part 1, Static classes and inner classes in Java</title>
      <link href="/2020/03/05/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Advanced%20features%20Part%201,%20Static%20classes%20and%20inner%20classes%20in%20Java/"/>
      <url>/2020/03/05/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/Advanced%20features%20Part%201,%20Static%20classes%20and%20inner%20classes%20in%20Java/</url>
      
        <content type="html"><![CDATA[<p>Nested (嵌套) classes are classes that are declared as members of others classes or scopes. Nested classed is one way to better organize your code. For example, say you have a non-nested class (also known as a top-level class) that stores objects in a resizable array, followed by an iterator class that returns each object. Rather than pollute the top-level class’s namespace, you could declare the iterator class as a member of the rsizable array collection class. This works because the two are closely related.</p><p>In Java, nested classes are categoried as either static member classes or inner classes. Inner classes are non-static member classes, local classes, or anonymous (匿名) classes. In this tutorial you’ll learn how to work with static member classes and the three types of inner classes in your Java code.</p><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><h2 id="Static-classes-in-Java"><a href="#Static-classes-in-Java" class="headerlink" title="Static classes in Java"></a>Static classes in Java</h2><p>Fromally (形式上) known as static member classes, these are nested classes that you declare at the same level as these other static entities, using the <code>static</code> keyword. Here’s an example of a static member class declaration:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> f;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        f = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">        <span class="comment">// members</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This example introduces top-level class <code>C</code> with static field <code>f</code>, static method <code>m()</code>, a static initializer, and static member cladd <code>D</code>. Notice that <code>D</code> is a member of <code>C</code>. The static field <code>f</code>, static method <code>m()</code>, and the static initializer are also members of <code>C</code>. Since all of these elements belong to class <code>C</code>, it is known as the enclosing class (封闭类). Class <code>D</code> is known as the enclosed class.</p><h3 id="Enclosure-and-access-rules"><a href="#Enclosure-and-access-rules" class="headerlink" title="Enclosure and access rules"></a>Enclosure and access rules</h3><p>Although it is enclosed (围绕), a static member class cannot access the enclosing class’s instance fields and invoke its instance methods. However, it can access the enclosing class’s static fields and invoke its static methods, even those members that are declared <code>private</code>. To demonstrate (演示), Listing 1 declares an <code>EnclosingClass</code> with a nested <code>SMClass</code>. </p><h3 id="Listing-1-Declaring-a-static-member-class"><a href="#Listing-1-Declaring-a-static-member-class" class="headerlink" title="Listing 1. Declaring a static member class"></a>Listing 1. Declaring a static member class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnclosingClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SMClass.accessEnclosingClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SMClass</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">accessEnclosingClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            s = <span class="string">"Called from SMClass's accessEnclosingClas() method"</span>;</span><br><span class="line">            m1();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">accessEnclosingClass2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            m2();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 1 declares a top-level class named EnclosingClass with class field s, class method <code>m1()</code> and <code>m2()</code>, and static member class SMClass. SMClass declares class method <code>accessEnclosingClass()</code> and instance method <code>accessEnclosingClass2()</code>. Note the following:</p><ol><li><code>m2()</code>‘s invocation (调用) of SMClass’s <code>accessEnclosingClass()</code> method requires the <code>SMClass.</code> prefix because <code>accessEnclosingClass()</code> is declared <code>static</code></li><li><code>accessEnclosingClass()</code> is able to access EnclosingClass’s s field and call its <code>m1()</code> method, even though both have been declared <code>private</code>.</li></ol><p>Listing 2 presents the source code to an SMCDemo application class that demonstrates how to invoke SMClass’s <code>accessEnclosingClass()</code> method. It also demonstrates how to instantiate SMClass and invoke its <code>accessEnclosingClass2()</code> instance method.</p><h3 id="Listing-2-Invoking-a-static-member-class’s-methods"><a href="#Listing-2-Invoking-a-static-member-class’s-methods" class="headerlink" title="Listing 2. Invoking a static member class’s methods"></a>Listing 2. Invoking a static member class’s methods</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMCDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EnclosingClass.SMClass.accessEncolsingClass();</span><br><span class="line">        EnclsoingClass.SMClass smc = <span class="keyword">new</span> EnclosingClass.SMClass();</span><br><span class="line">        smc.accessEnclosingClass2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As shown in Listing 2, if you want to invoke a top-level class’s method from within an enclosed class, you must prefix the enclosed class’s name with the name of its enclosing class. Likewise, in order to instanctiate an enclosed class you must prefix the name of that class with the name of its enclosing class. You can then invoke the instance method in the normal maner.</p><p>Compile Listing 1 and 2 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br></pre></td></tr></table></figure></p><p>When you compile an enclosing class that contains a static member class, the compiler creates a class file for the static member class whose name consists of its enclosing class’s name, dollar-sign character, and the static member class’s name. In this case, compiling results is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SMCDemo.class</span><br><span class="line">EnclosingClass.class</span><br><span class="line">EnclosingClass$SMCClass.class</span><br></pre></td></tr></table></figure></p><p>Run the application as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java SMCDemo</span><br></pre></td></tr></table></figure><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Called from SMClass&apos;s accessEnclosingClass() method</span><br><span class="line">Called from SMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p><h3 id="Example-Static-classes-and-Java-2D"><a href="#Example-Static-classes-and-Java-2D" class="headerlink" title="Example: Static classes and Java 2D"></a>Example: Static classes and Java 2D</h3><p>Java’s standard class library is a runtime library of class files, which store compiled classes and other reference types. The library includes numerous (许多) examples of static member classes, some of which are found in the Java 2D geometric shape classes located in the <code>java.awt.geom</code> package.</p><p>The <code>Ellipse2D</code> class found in <code>java.awt.geom</code> describes an ellipe (椭圆), which is defined by a framing (框架、骨骼) rectangle in terms of (从…方面) an (x, y) upper-left corner along with width and heigh extends. The following code fragment shows that this class’s architecture (架构、建筑物) is based on Float and Double static member classes, which both subclass <code>Ellipse2D</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Ellipse2D</span> <span class="keyword">extends</span> <span class="title">RectangularShape</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Float</span> <span class="keyword">extends</span> <span class="title">Ellipse2D</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">float</span> x, y, widht, heigh;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Float</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Float</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> w, <span class="keyword">float</span> h)</span> </span>&#123;</span><br><span class="line">            setFrame(x, y, w, h);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">double</span>)x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// additional instance methods</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Double</span> <span class="keyword">extends</span> <span class="title">Ellipse2D</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> x, y, width, height;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Double</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Double</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> w, <span class="keyword">double</span> h)</span> </span>&#123;</span><br><span class="line">            setFrame(x, y, w, h);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// additional instance methods</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// additional instance methods shared by Float, Double, and other Ellipse2D subclass.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The <code>Float</code> and <code>Double</code> classes extend <code>Ellipse2D</code>, providing floating-point and double precision floating-point Ellipse2D implementations.</p><h2 id="Inner-classes-tpye-1-Non-static-member-classes"><a href="#Inner-classes-tpye-1-Non-static-member-classes" class="headerlink" title="Inner classes, tpye 1: Non-static member classes"></a>Inner classes, tpye 1: Non-static member classes</h2><p>Consider this example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    C() &#123;</span><br><span class="line">        f = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">        <span class="comment">// members</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Here, we introduce top-level class C with instance field f, instance method m(), a construtor, and non-static member class D. All of these entities are members of class C, which encloses them. However, unlike in the previous example, these instance entities are associated with instances of C and not with C class itself.</p><p>Each instance of the non-static member class is implicitly associated with an isntance of its enclosing class. The non-static member class’s instance methods can call the enclosing class’s instance methods and access its instance fields. To demonstrate this access, Listing 3 decalres an EnclosingClass with a nested NSMClass.</p><h4 id="Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class"><a href="#Listing-3-Declare-an-enclosing-class-with-a-nested-non-static-member-class" class="headerlink" title="Listing 3. Declare an enclosing class with a nested non-static member class"></a>Listing 3. Declare an enclosing class with a nested non-static member class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnclosingClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NSMClass</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">accessEnclosingClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            s = <span class="string">"Called from NSMClass's accessEnclosingClass() method"</span>;</span><br><span class="line">            m();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 3 declares a top-level class nemed EnclosingClass with instance field s, instance method m(), and non-static member class NSMClass. Futhermore, NSMClass declares instance method <code>accessEnclosingClass()</code>.</p><p>Because <code>accessEnclosingClass()</code> in non-static, NSMClass must be instantiated before this method can be called. This instantiation must take place via an instance of EnclosingClass, as shown in Listing 4.</p><h4 id="Listing-4-NSMCDemo-java"><a href="#Listing-4-NSMCDemo-java" class="headerlink" title="Listing 4. NSMCDemo.java"></a>Listing 4. NSMCDemo.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NSMDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EnclosingClass ec = <span class="keyword">new</span> EnclosingClass();</span><br><span class="line">        ec.new NSMClass().accessEnclosingClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 4’s <code>main()</code> method first instantiates EnclosingClass and saves its reference in local variable ec. The <code>main()</code> method then uses the EnclosingClass reference as a prefix to the <code>new</code> operator, in order to instantiate NSMClass. The NSMClass reference is then used to call <code>accessEnclosingClass()</code> method.</p><blockquote><p>Should I use <code>new</code> with a reference to the enclosing class?<br>Prefixing <code>new</code> with a reference to the enclosing ia rare (罕见的). Instead, you will typically call an enclosed  class’s constructor from within a constructor or an instance method of its enclosing class.</p></blockquote><p>Compile Listing 3 and 4 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java *.java</span><br></pre></td></tr></table></figure></p><p>When you compile an enclosing class that contains a non-static member class, the compiler creates a class file for the non-static member class whose name consists of its enclosing class’s name, a dollar-sign character, and the non-static member class’s name. In this case, compiling results in：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSMDemo.class</span><br><span class="line">EnclosingClass.class</span><br><span class="line">EnclisingClass$NSMCClass.class</span><br></pre></td></tr></table></figure></p><p>Run the application as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java NSMDemo</span><br></pre></td></tr></table></figure></p><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Called from NSMClass&apos;s accessEnclosingClass() method</span><br></pre></td></tr></table></figure></p><blockquote><p>When (and how) to qualify (限定) <code>this</code><br>An enclosed class’s code can obtain (得到) a reference to its enclosing-class instance by qualifying reserved word (保留字) <code>this</code> with the enclosing class’s name and the member access operator <code>.</code>. For example, if code within <code>accessEnclosingClass()</code> needed to obtain a reference to its <code>EnclosingClass</code> instance, it would spcify <code>EnclosingClass.this</code>. Because the compiler generates code to accomplish this task, spcifying this prefix is rare.</p></blockquote><h4 id="Example-Non-static-member-classes-in-HashMap"><a href="#Example-Non-static-member-classes-in-HashMap" class="headerlink" title="Example: Non-static member classes in HashMap"></a>Example: Non-static member classes in HashMap</h4><p>The standard class library includes non-static member as well as static member classes. For this example, we’ll look at the HashMap class, which is part of the Java Collections Framework in the java.util package. HashMap, which describes as has table-based implementation of a map, includes several non-static member classes.</p><p>For example, the KeySet non-static member class describes a set-based view of the keys contained in the map. The following code fragment relates the enclosed KeySet class to its HashMap enclosing class:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// various members</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// various members</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// various members</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The <code>&lt;K, V&gt;</code> and <code>&lt;K&gt;</code> syntaxes are examples of generics, a suite of related language features that help the compiler enforce type safety, these syntaxes help the compiler enforce the type of key ojbects that can be stored in the map and in the keyset, and the type of value objects that can be stored in the map.</p><p>HashMap provides a <code>KeySet()</code> method that instantiates KeySet when necessary and returns this instance or a cached instance. Here’s the complete method:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keyset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;K&gt; ks = keySet;</span><br><span class="line">    <span class="keyword">if</span> (ks == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ks = <span class="keyword">new</span> KeySet();</span><br><span class="line">        keySet = ks;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Notice that the enclosed class’s (KeySet’s) constructor is called from within the enclosing class’s (HashSet’s) <code>keyset()</code> instance method. This illustrates a common practice (做法) especially because prefixing the <code>new</code> operator with an enclosing class reference is rare.</p><h2 id="Inner-classes-type-2-Local-classes"><a href="#Inner-classes-type-2-Local-classes" class="headerlink" title="Inner classes, type 2: Local classes"></a>Inner classes, type 2: Local classes</h2><p>It’s occasionally (偶然) helpful to declare a class in a block, such as a method body or sub-block. For example, you might declare a class that describes an iterator in a mthod that returns an instance of this class. Such classes are known as local classes because (as with local variables) they are local to the methods in which they are declared. Here is example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="comment">// or even static I m()</span></span><br><span class="line">    <span class="function">I <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">            <span class="comment">// members</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> D();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Top-level class C declares instance method <code>m()</code>, which returns an instance of local class D, which is declared in this method. Notice that <code>m()</code>‘s return type is interface I, which D implements. The interface is necessary because giving <code>m()</code> return type D would result in a compiler error — D isn’t accessible outside of <code>m()</code>‘ body.</p><blockquote><p>Illegal access modifiers (修饰语) in local class declaration<br>The compiler will report an error if a local class declaration contains any of the access modifiers <code>private</code>, <code>public</code>, or <code>protected</code>; or the modifier <code>static</code>.</p></blockquote><p>A local class can be associated with an instance of its enclosing class, but only when used in a non-static context. Also, a local class can be declared anywhere that a local variable can be declared, and has the same scope as a local variable. It can access the surrounding scope’s local variables and parameters, which must be declared <code>final</code>. Consider 5.</p><h3 id="Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method"><a href="#Listing-5-Declaring-a-local-class-within-an-enclosing-class-instance-method" class="headerlink" title="Listing 5. Declaring a local class within an enclosing class instance method"></a>Listing 5. Declaring a local class within an enclosing class instance method</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnclosingClass</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> y = x * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">LClass</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> m = x;</span><br><span class="line">            <span class="keyword">int</span> n = y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LClass lc = <span class="keyword">new</span> LClass();</span><br><span class="line">        System.out.println(lc.m);</span><br><span class="line">        System.out.println(lc.n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 5 declares EnclosingClass with instance method <code>m()</code>, declaring a local class named LClass. LClass declares a pair of instance fields (m and n). When LClass is instantiated, the instance fields are initialized to the values of final parameter x and final local variable y, as shown in Listing 6.</p><h3 id="Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields"><a href="#Listing-6-A-local-class-declares-and-initializes-a-pair-of-instance-fields" class="headerlink" title="Listing 6. A local class declares and initializes a pair of instance fields"></a>Listing 6. A local class declares and initializes a pair of instance fields</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LCDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EnclosingClass ec = <span class="keyword">new</span> EnclosingClass();</span><br><span class="line">        ec.m(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listing 6’s <code>main()</code> method first instantiates EnclosingClass. It then invokes <code>m(5)</code> on this instance. The called <code>m()</code> method multiplies this argument by 3, instantiates LClass, whose <code>&lt;init&gt;()</code> method assigns the argument and the tripled value to its pair of instance fields and outputs LClass’s instance fields. (Note that in this case the local class uses the <code>&lt;init&gt;()</code> method instead of a constructor to interact with its instance fields.)</p><p>Compile Listing 5 and 6 as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br></pre></td></tr></table></figure></p><p>When you compile a class whose method contains a local class, the compiler creates a class file for the local class whose name consists of its enclosing class’s name, a dollar-sign character, a 1-base integer, and the local class’s name. In this case, compiling results:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LCDemo.class</span><br><span class="line">EnclosingClass.class</span><br><span class="line">EnclosingClass$1LClass.class</span><br></pre></td></tr></table></figure></p><h3 id="A-note-about-local-class-name"><a href="#A-note-about-local-class-name" class="headerlink" title="A note about local class name"></a>A note about local class name</h3><p>When generating a name for a local class’s file, the compiler adds an integer to the generated name. This integer is probobly generated to distinguish (区分) a local class’s class file from a non-static member clas’s class file. If two local classes have the same name, the compiler increments the integer to avoid conflicts. Consider the following example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnclosingClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="class"><span class="keyword">class</span> <span class="title">LClass</span></span></span><br><span class="line"><span class="class">       </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="class"><span class="keyword">class</span> <span class="title">LClass</span></span></span><br><span class="line"><span class="class">       </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="class"><span class="keyword">class</span> <span class="title">LClass2</span></span></span><br><span class="line"><span class="class">       </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>EnclosingClass declares three instance methods that each declare a local calss. The first two methods generate two different local classes with the same name. The first two generate two different local classes with the same name. The compiler generates the following class files:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EnclosingClass$1LClass.class</span><br><span class="line">EnclosingClass$1LClass2.class</span><br><span class="line">EnclosingClass$2LClass.class</span><br><span class="line">EnclosingClass.class</span><br></pre></td></tr></table></figure></p><p>Run the application as follow:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java LCDemo</span><br></pre></td></tr></table></figure></p><p>You should observe the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">15</span><br></pre></td></tr></table></figure></p><h3 id="Example-Using-local-classes-in-regular-expressions"><a href="#Example-Using-local-classes-in-regular-expressions" class="headerlink" title="Example: Using local classes in regular expressions"></a>Example: Using local classes in regular expressions</h3><p>The standard class library includes example of local class usage. For example, the Matcher class, in java.util.regex, providers a results() method that returns a stream of match results. This method declares a MatchResultIterator class for iterating over these results:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Stream&lt;MatchResult&gt; <span class="title">results</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">MatchResultIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">MatchResult</span>&gt;</span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">      <span class="comment">// members</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> StreamSupport.stream(Spliterators.spliteratorUnknownSize(<span class="keyword">new</span> MatchResultIterator(),</span><br><span class="line">                                                                   Spliterator.ORDERED |</span><br><span class="line">                                                                   Spliterator.NONNULL),</span><br><span class="line">                               <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Note the instantiation of MatchResultIterator() following the class declaration. Don’t worry about parts of the code that you don’t understand; instead, think about the usefulness in being able to declare classes in the appropriate (恰当的) scopes (such as method body) to better organize your code.</p><h2 id="Inner-classes-type-3-Anonymous-classes"><a href="#Inner-classes-type-3-Anonymous-classes" class="headerlink" title="Inner classes, type 3: Anonymous classes"></a>Inner classes, type 3: Anonymous classes</h2><p>Static member classes, non-static member classes, and local classes have names. In constrast (相反), anonymous classes are unnamed nested classes. You introduce them in the context of expressions that invoke the new operator and the name of either a base class or an interface that is implemented by the anonmous class:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// subclass the base class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">// members</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      Base b = <span class="keyword">new</span> Base()</span><br><span class="line">               &#123;</span><br><span class="line">                 <span class="comment">// members</span></span><br><span class="line">               &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// implement the interface</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">// members</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      I i = <span class="keyword">new</span> I()</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="comment">// members</span></span><br><span class="line">            &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The first example demonstractes an anonymous class extending a base class. Expression new Base() is followed by a pair of brace characters that signify the anonymous class. The second example demonstrates an anonymous class inplementing an interface. Expression new I() is followed by a pair of brace characters that signify the anonymous class.</p><blockquote><p>Constructing anonymous class instances<br>An anonymous class cannot have an explicit constructor because a constructor must be named after the class and anonymous classes are unnamed. Instead, you can use an object initilization block ({}) as a constructor.</p></blockquote><p>Anonymous classes are useful for expressing functionality that’s passed to a method as its argument as its argument. For example, consider a method for sorting an array of integer. You want to sort the array in ascending or descending order, based on compairisons between pairs of array elements. You might duplicate the sorting code, with one version using the less than (&lt;) operator for one order, and the other version using the greater than (&gt;) operator for the opposite order. Alternatively, as shown below, you could design the sorting code to invoke a comparsion method, then pass an object constaing this method as an argument to the sorting method.</p><h3 id="Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument"><a href="#Listing-7-Using-an-anonymous-class-to-pass-functionality-as-a-method-argument" class="headerlink" title="Listing 7. Using an anonymous class to pass functionality as a method argument"></a>Listing 7. Using an anonymous class to pass functionality as a method argument</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Comparer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The compare() method is invoked with two integer array elements and returns one of three valudes: a negative value if x is less than y, 0 if both values are the same, and a positive value is x is greater than y. Listing 8 presents an application whose sort() method invokes compare() to preform the compairsions.</p><h3 id="Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm"><a href="#Listing-8-Sorting-an-array-of-integers-with-the-Bubble-Sort-algorithm" class="headerlink" title="Listing 8. Sorting an array of integers with the Bubble Sort algorithm"></a>Listing 8. Sorting an array of integers with the Bubble Sort algorithm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ACDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">int</span>[] a = &#123; <span class="number">10</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">0</span>, -<span class="number">2</span>, <span class="number">100</span>, -<span class="number">9</span> &#125;;</span><br><span class="line">      dump(a);</span><br><span class="line">      sort(a, <span class="keyword">new</span> Comparer()</span><br><span class="line">                  &#123;</span><br><span class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">                     </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> x - y;</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;);</span><br><span class="line">      dump(a);</span><br><span class="line">      <span class="keyword">int</span>[] b = &#123; <span class="number">10</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">0</span>, -<span class="number">2</span>, <span class="number">100</span>, -<span class="number">9</span> &#125;;</span><br><span class="line">      sort(b, <span class="keyword">new</span> Comparer()</span><br><span class="line">                  &#123;</span><br><span class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">                     </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> y - x;</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;);</span><br><span class="line">      dump(b);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dump</span><span class="params">(<span class="keyword">int</span>[] x)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++)</span><br><span class="line">         System.out.print(x[i] + <span class="string">" "</span>);</span><br><span class="line">      System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] x, Comparer c)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> pass = <span class="number">0</span>; pass &lt; x.length - <span class="number">1</span>; pass++)</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = x.length - <span class="number">1</span>; i &gt; pass; i--)</span><br><span class="line">            <span class="keyword">if</span> (c.compare(x[i], x[pass]) &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="keyword">int</span> temp = x[i];</span><br><span class="line">               x[i] = x[pass];</span><br><span class="line">               x[pass] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The main() method reveals two calls to ites companion sort() method, which sorts an array of integers via the Bubble Sort algorithm. Each call receives an integer array as its first argument, and a reference to an object created from an anonymous Comparer subclass as its second argument. The first call achieves an ascending order sort by substracting y from x; the second call achieves a desceding order sort by subtracting x from y.</p><blockquote><p>Migrating from anonymous classes to lambdas<br>As you can see in Listing 8, passing anonymous calss-based functionality can lead to varbose syntax. Startring with Java 8, you can use lambdas for more concise code.</p></blockquote><p>Compile Listing 7 and 8 as follows:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br></pre></td></tr></table></figure></p><p>When you compile a class whose method contains an anouymous class, the compiler creates a class file for the anonymous class whose name consits of its enclosing class’s name, a dollar-sign character, and an integer that uniquely identifies the anonymous class. In this case, compiling results:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ACDemo.class.</span><br><span class="line">ACDemo$1.class</span><br><span class="line">ACDemo$2.class</span><br></pre></td></tr></table></figure></p><p>Run the application as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java ACDemo</span><br></pre></td></tr></table></figure></p><p>You should obeserve the following output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">10 30 5 0 -2 100 -9</span><br><span class="line">-9 -2 0 5 10 30 100</span><br><span class="line">100 30 10 5 0 -2 -9</span><br></pre></td></tr></table></figure></p><h3 id="Example-Using-anonymous-classes-with-an-AWT-event-hanlder"><a href="#Example-Using-anonymous-classes-with-an-AWT-event-hanlder" class="headerlink" title="Example: Using anonymous classes with an AWT event hanlder"></a>Example: Using anonymous classes with an AWT event hanlder</h3><p>Anonymous classes can be used with many packages in the standard calss library. For this example, we’ll use an anonymous class as an event handler in the abstract Windowing Toolkit or Swing Windowing Toolkit. The following code fragment registers an event handler with Swing’s JButton class, which is located in the javax.swing package. JButton describes a button that performs an action (in the case printing a message) when clicked.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JButton btnClose = <span class="keyword">new</span> JButton(<span class="string">"close"</span>);</span><br><span class="line">btnClose.addActionListener(<span class="keyword">new</span> ActionListener()</span><br><span class="line">                               &#123;</span><br><span class="line">                                  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent ae)</span></span></span><br><span class="line"><span class="function">                                  </span>&#123;</span><br><span class="line">                                     System.out.println(<span class="string">"close button clicked"</span>);</span><br><span class="line">                                  &#125;</span><br><span class="line">                               &#125;);</span><br></pre></td></tr></table></figure><p>The first line instantiates JButton, passing close as the button label to JButton’s constructor. The second line registers an action listener with the button. The action listener’s actionPerformed() method is invoked whenever the button is clicked. The object passed to addActionListener() is instantiated from an anonymous class that implements the java.awt.event.ActionListener interface.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Java’s nesting capabilities help you organize non-top-level reference types. For top-level reference types, Java provides packages.</p>]]></content>
      
      
      <categories>
          
          <category> JavaWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Advanced Java language features </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用操作</title>
      <link href="/2020/02/29/%E5%85%B6%E5%AE%83/Git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/02/29/%E5%85%B6%E5%AE%83/Git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><h4 id="查看本地分支"><a href="#查看本地分支" class="headerlink" title="查看本地分支"></a>查看本地分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">zhangqinghua$</span> git branch</span><br><span class="line">* 3.3.1</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><h4 id="查看本地和远程分支"><a href="#查看本地和远程分支" class="headerlink" title="查看本地和远程分支"></a>查看本地和远程分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ git branch -a</span><br><span class="line">* 3.3.1</span><br><span class="line">  master</span><br><span class="line">  remotes/origin/3.0</span><br><span class="line">  remotes/origin/3.1</span><br></pre></td></tr></table></figure><h4 id="从当前分支创建出一个新分支"><a href="#从当前分支创建出一个新分支" class="headerlink" title="从当前分支创建出一个新分支"></a>从当前分支创建出一个新分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">zhangqinghua$</span> git checkout -b 3.3.1</span><br><span class="line">Switched to a new branch '3.3.1'</span><br></pre></td></tr></table></figure><h4 id="切换本地分支"><a href="#切换本地分支" class="headerlink" title="切换本地分支"></a>切换本地分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">zhangqinghua$</span> git checkout 3.0</span><br><span class="line">M       .DS_Store</span><br><span class="line">Switched to branch '3.0'</span><br></pre></td></tr></table></figure><h4 id="切换本地分支，如果不存在，则从当前分支创建"><a href="#切换本地分支，如果不存在，则从当前分支创建" class="headerlink" title="切换本地分支，如果不存在，则从当前分支创建"></a>切换本地分支，如果不存在，则从当前分支创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ git checkout -b 3.0</span><br><span class="line">M       .DS_Store</span><br><span class="line">Switched to branch &apos;3.0&apos;</span><br></pre></td></tr></table></figure><h4 id="切换远程分支"><a href="#切换远程分支" class="headerlink" title="切换远程分支"></a>切换远程分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">zhangqinghua$</span> git checkout -b 3.1.2 origin/3.1.2</span><br></pre></td></tr></table></figure><h4 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">zhangqinghua$</span> git branch -d 3.0</span><br><span class="line">Deleted branch 3.0 (was a8d45e7).</span><br></pre></td></tr></table></figure><h4 id="删除本地分支（未合并）"><a href="#删除本地分支（未合并）" class="headerlink" title="删除本地分支（未合并）"></a>删除本地分支（未合并）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">zhangqinghua$</span> git branch -d 3.1</span><br><span class="line">error: The branch '3.1' is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run 'git branch -D 3.1'.</span><br></pre></td></tr></table></figure><h4 id="强制删除分支"><a href="#强制删除分支" class="headerlink" title="强制删除分支"></a>强制删除分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">zhangqinghua$</span> git branch -D 3.0</span><br><span class="line">Deleted branch 3.0 (was a8d45e7).</span><br></pre></td></tr></table></figure><h4 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">zhangqinghua$</span> git push origin :3.1</span><br><span class="line">To code.aliyun.com:icebartech-java-core/icebartech-core.git</span><br><span class="line"> - [deleted]         3.1</span><br></pre></td></tr></table></figure><h2 id="回滚操作"><a href="#回滚操作" class="headerlink" title="回滚操作"></a>回滚操作</h2><h2 id="永久删除文件"><a href="#永久删除文件" class="headerlink" title="永久删除文件"></a>永久删除文件</h2><p><a href="https://www.cnblogs.com/shines77/p/3460274.html">https://www.cnblogs.com/shines77/p/3460274.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020年度计划</title>
      <link href="/2020/02/23/%E5%85%B6%E5%AE%83/2020%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"/>
      <url>/2020/02/23/%E5%85%B6%E5%AE%83/2020%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>✔ ✘</p><div class="table-container"><table><thead><tr><th style="text-align:left">类目 -&gt; 次数</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td style="text-align:left"><strong>2020-02</strong></td></tr><tr><td style="text-align:left">拼读</td><td>✔</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left">线程</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left">JVM</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left">JavaWorld</td><td>✔</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left"><strong>2020-03</strong></td></tr><tr><td style="text-align:left">拼读</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left">高并</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left">JVM</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left">反射机制</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left">JavaWorld</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left">课程</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left"><strong>2020-04</strong></td></tr><tr><td style="text-align:left">JavaWorld</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left"><strong>2020-05</strong></td></tr><tr><td style="text-align:left">拼读</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left">高并</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left">JVM</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left">JavaWorld</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left"><strong>2020-06</strong></td></tr><tr><td style="text-align:left">JavaWorld</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left"><strong>2020-07</strong></td></tr><tr><td style="text-align:left">JavaWorld</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left"><strong>2020-08</strong></td></tr><tr><td style="text-align:left">拼读</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left">高并</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left">JVM</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left">JavaWorld</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left"><strong>2020-09</strong></td></tr><tr><td style="text-align:left">JavaWorld</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left"><strong>2020-10</strong></td></tr><tr><td style="text-align:left">JavaWorld</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left"><strong>2020-11</strong></td></tr><tr><td style="text-align:left">JavaWorld</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr><tr><td style="text-align:left"><strong>2020-12</strong></td></tr><tr><td style="text-align:left">JavaWorld</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td><td>✘</td></tr></tbody></table></div><p>就在罗永浩还在被社会“毒打”之时，几个天津的朋友给罗永浩带来了好消息，有家叫“新东方”的学校，正招聘老师呢，他们一听就想起了老罗，想让老罗也混个老师当当。</p><p>老罗一听，当老师？还是英语老师？</p><p>难道不知道我老罗平生最讨厌的俩件事么？</p><p>第一，老师，第二，英语老师。</p><p>当得知新东方英语老师的年薪有五十万时，老罗瞬间两眼放光。</p><p>要知道那是一个年薪三十万就足以写进成功学畅销书的年代，年薪五十万，足以让老罗立马真香。</p><p>老罗克服了自己，但克服不了门槛，学历，本科及以上，英语专业者优先，这些条件老罗一个都达不到。</p><p>怎么办？</p><p>老罗琢磨了会儿，干脆死马当活马医，给俞敏洪写了一封万字有余的求职信，行云流水，文采飞扬。跨过了门槛，拿到了面试的入场券。</p><p>凭借着自己多年看书积攒下来的知识，老罗最终通过了俞敏洪设置的三次英语考试，获得了俞敏洪的赏识，进入了新东方。</p><p>那封信也成了当时网络上万人膜拜的经典案例。</p><p>虽说面试顺利通过了，但老罗当时的英语水平，还不能很好的教育学生，文采不能当饭吃，水平不够，迟早出局。</p><p>于是罗永浩近水楼台先得月，开始在新东方学习英语。</p><p>那时有许多来学习的人，让罗永浩记忆深刻，罗永浩曾回忆说：</p><p>“我就没有见过那么拼的人，随便拿起一本英语词典就开始从头背到尾，每天都记100个以上单词，我那时经常背诵到深夜俩点，但是很多人在坚持，有次，我想做熬夜背单词最晚的那个坚持到4点钟，实在不行了，打了一个盹，醒来的时候，看见有两个人在向我比着V的手势。“</p><p>新东方可以说是老罗生命里的一个重要节点了，他让老罗投胎换骨，也让老罗尝到了奋斗的甜头，找到实现自我驱动的方法。</p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用正则表达式</title>
      <link href="/2020/02/20/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/02/20/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ol><li>正数：比0大的数</li><li>负数：比0小的数</li><li>整数：没有小数点的数</li><li>实数：是有理数和无理数的总称</li></ol><h2 id="校验数字"><a href="#校验数字" class="headerlink" title="校验数字"></a>校验数字</h2><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d+$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]+$</span><br></pre></td></tr></table></figure><h4 id="n位数字"><a href="#n位数字" class="headerlink" title="n位数字"></a>n位数字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;n&#125;$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]&#123;n&#125;$</span><br></pre></td></tr></table></figure><h4 id="至少n位数字"><a href="#至少n位数字" class="headerlink" title="至少n位数字"></a>至少n位数字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;n,&#125;$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]&#123;n,&#125;$</span><br></pre></td></tr></table></figure><h4 id="m-n位的数字"><a href="#m-n位的数字" class="headerlink" title="m-n位的数字"></a>m-n位的数字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;m, n&#125;$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]&#123;m, n&#125;$</span><br></pre></td></tr></table></figure><h4 id="0和1开头的数字"><a href="#0和1开头的数字" class="headerlink" title="0和1开头的数字"></a>0和1开头的数字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(0|1)\d+$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(0|1)[0-9]+$</span><br></pre></td></tr></table></figure><h4 id="非0开头的，最多带两位小数的数字"><a href="#非0开头的，最多带两位小数的数字" class="headerlink" title="非0开头的，最多带两位小数的数字"></a>非0开头的，最多带两位小数的数字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[1-9]\d+(.\d&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure><p>?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^([1-9][0-9]+)+(.[0-9]&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure></p><h4 id="带1-2位小数的正数或负数"><a href="#带1-2位小数的正数或负数" class="headerlink" title="带1-2位小数的正数或负数"></a>带1-2位小数的正数或负数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 不能用\d* 因为*表示匹配0次或多次</span><br><span class="line">^(-|)\d+.\d&#123;1,2&#125;$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(\-)?\d+(\.\d&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure><h4 id="正数、负数、和小数"><a href="#正数、负数、和小数" class="headerlink" title="正数、负数、和小数"></a>正数、负数、和小数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(-|)\d+(.\d+)?$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(\-|\+)?\d+(\.\d+)?$</span><br></pre></td></tr></table></figure><h4 id="有2位小数的正实数"><a href="#有2位小数的正实数" class="headerlink" title="有2位小数的正实数"></a>有2位小数的正实数</h4><p>1.12 +1.12</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d+.\d&#123;2&#125;$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br></pre></td></tr></table></figure><h4 id="有1-3位小数的正实数"><a href="#有1-3位小数的正实数" class="headerlink" title="有1~3位小数的正实数"></a>有1~3位小数的正实数</h4><p>-1.123 0.1 1.123 +1.123</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d+.\d&#123;1,3&#125;$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]+(.[0-9]&#123;1,3&#125;)?$</span><br></pre></td></tr></table></figure><h4 id="非零的正整数"><a href="#非零的正整数" class="headerlink" title="非零的正整数"></a>非零的正整数</h4><p>1, +1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[1-9]\d*$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^([1-9][0-9]*)&#123;1,&#125;$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\+?[1-9][0-9]*$</span><br></pre></td></tr></table></figure><h4 id="非零的负整数"><a href="#非零的负整数" class="headerlink" title="非零的负整数"></a>非零的负整数</h4><p>-1 -2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^-[1-9]\d*$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\-[1-9][0-9]*$</span><br></pre></td></tr></table></figure><h4 id="非负整数"><a href="#非负整数" class="headerlink" title="非负整数"></a>非负整数</h4><p>0, 1, +1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d+$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[1-9]\d*|0$</span><br></pre></td></tr></table></figure><h4 id="非正整数"><a href="#非正整数" class="headerlink" title="非正整数"></a>非正整数</h4><p>0, -1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^-[1-9]\d*|0$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^((-\d+)|(0+))$</span><br></pre></td></tr></table></figure><h4 id="非负浮点数"><a href="#非负浮点数" class="headerlink" title="非负浮点数"></a>非负浮点数</h4><p>0.1 1.1 +1.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(+)?\d+$(.\d+)$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d+(\.\d+)?$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</span><br></pre></td></tr></table></figure><h4 id="非正浮点数"><a href="#非正浮点数" class="headerlink" title="非正浮点数"></a>非正浮点数</h4><p>0.1 -1.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^((-\d+(\.\d+)?)|(0+(\.0+)?))$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</span><br></pre></td></tr></table></figure><h4 id="正浮点数"><a href="#正浮点数" class="headerlink" title="正浮点数"></a>正浮点数</h4><p>1.1 +1.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span><br></pre></td></tr></table></figure><h4 id="负浮点数"><a href="#负浮点数" class="headerlink" title="负浮点数"></a>负浮点数</h4><p>-1.24345</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span><br></pre></td></tr></table></figure><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>-1.1 0.1 1.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</span><br></pre></td></tr></table></figure><h2 id="校验字符"><a href="#校验字符" class="headerlink" title="校验字符"></a>校验字符</h2><h2 id="特需场景"><a href="#特需场景" class="headerlink" title="特需场景"></a>特需场景</h2>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科学上网</title>
      <link href="/2020/02/15/%E5%85%B6%E5%AE%83/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
      <url>/2020/02/15/%E5%85%B6%E5%AE%83/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>修改hosts：</p><ol><li>打开<a href="https://link.zhihu.com/?target=http%3A//tool.chinaz.com/dns">Dns检测|Dns查询 - 站长工具</a></li><li>在检测输入栏中输入需要解析的域名；</li><li>把检测列表里的TTL值最小的IP输入到 /etc/hosts 里，并对应写上域名；</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">140.82.113.3 github.com</span><br><span class="line"></span><br><span class="line"># 219.76.4.4 github-cloud.s3.amazonaws.com</span><br><span class="line">151.101.184.133 assets-cdn.github.com</span><br><span class="line">185.199.108.153 documentcloud.github.com</span><br><span class="line">192.30.253.118 gist.github.com</span><br><span class="line">185.199.108.153 help.github.com</span><br><span class="line">192.30.253.120 nodeload.github.com</span><br><span class="line">151.101.184.133 raw.github.com</span><br><span class="line">18.204.240.114 status.github.com</span><br><span class="line">192.30.253.166 training.github.com</span><br><span class="line">192.30.253.112 www.github.com</span><br><span class="line">151.101.185.194 github.global.ssl.fastly.net</span><br><span class="line">151.101.184.133 avatars0.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars1.githubusercontent.com</span><br></pre></td></tr></table></figure><p>在未修改之前，速度在 10kb/s 或者连不上，修改之后，速度可以达到 80kb/s。</p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to store data in Java Ojbects</title>
      <link href="/2020/02/15/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/How%20to%20store%20data%20in%20Java%20Objects/"/>
      <url>/2020/02/15/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/JavaWorld/How%20to%20store%20data%20in%20Java%20Objects/</url>
      
        <content type="html"><![CDATA[<p>Although the snooze (午睡) button is probably the most commoly used button on an alarm clock, even a simple <code>AlarmClock</code> class needs a few more features. For instance, you might want to control how long the alarm clock will stay in snooze mode. In order to add such a feature, you need to understand how Java controls data.</p><p>DeveLopers use variables in Java to hold data, with all variables having a data type and a name. The data type determines the values that a variable can hold. in this tutorial, you’ll learn how integral (整体) types hold whole numbers, floating point types hold real numbers, and string types hold character strings. Then you’ll get started with using instance varialbes in you Java classes.</p><h2 id="Varialbes-and-primitive-原始的-types"><a href="#Varialbes-and-primitive-原始的-types" class="headerlink" title="Varialbes and primitive (原始的) types"></a>Varialbes and primitive (原始的) types</h2><p>Called <em>primitive types</em>, integral and floating point types are the simplest data types in Java. The following program illustrates (举例) the integral type, which can hold both positive and negative whole numbers. This program also illustrates comments, which document your code but don’t affect the program in any way.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is also a comment. The complier ignores everything from </span></span><br><span class="line"><span class="comment"> * the first /* until a "star slash" whith ends the comment.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Here's the "star slash" that ends the comment. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Here's the declaration of an int variable called anInteger,</span></span><br><span class="line">        <span class="comment">// which you given an initial value of 100.</span></span><br><span class="line">        <span class="keyword">int</span> anInteger = <span class="number">100</span>;            <span class="comment">// Declare and initialize anInteger</span></span><br><span class="line">        System.out.println(anInteger);  <span class="comment">// Outputs 100</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// You can also do arithmetic with primitvie types, using the</span></span><br><span class="line">        <span class="comment">// standard arithmetic operators.</span></span><br><span class="line">        anInteger = <span class="number">100</span> + <span class="number">100</span>;           </span><br><span class="line">        System.out.println(anInteger);  <span class="comment">// Outputs 200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java also uses floating point types, which can hold real numbers, meaning numbers that include a decimal place. Here’s an example program.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Here's the declaration of a double variable called aDouble.</span></span><br><span class="line">        <span class="comment">// You also give aDouble an initial value of 5.76.</span></span><br><span class="line">        <span class="keyword">double</span> aDouble = <span class="number">5.76</span>;          <span class="comment">// Declare an initialize aDouble</span></span><br><span class="line">        System.out.println(aDouble);    <span class="comment">// Outputs 5.76</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// You can also do arithmetic with floating point types.</span></span><br><span class="line">        aDouble = <span class="number">5.76</span> + <span class="number">1.45</span>;</span><br><span class="line">        System.out.println(aDouble);    <span class="comment">// outputs 7.21</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Try running the programs above. Remember, you have to compile before you can run them.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br><span class="line">java IntegerTest</span><br><span class="line">java DoubleTest</span><br></pre></td></tr></table></figure><p>Java uses four integral types and two floating point types, which both hold different ranges of numbers and take up varying amounts of storage space, as shown in the tables below.</p><div class="table-container"><table><thead><tr><th style="text-align:left">TYPE</th><th style="text-align:left">CATE</th><th style="text-align:left">SIZE(bits)</th><th style="text-align:left">RANGE</th></tr></thead><tbody><tr><td style="text-align:left">Byte</td><td style="text-align:left">Integral Type</td><td style="text-align:left">8</td><td style="text-align:left">-128 to 227</td></tr><tr><td style="text-align:left">Short</td><td style="text-align:left">Integral Type</td><td style="text-align:left">16</td><td style="text-align:left">-32,768 to 32,767</td></tr><tr><td style="text-align:left">Int</td><td style="text-align:left">Integral Type</td><td style="text-align:left">32</td><td style="text-align:left">-2,147,483,648 to 2,147,483,647</td></tr><tr><td style="text-align:left">Long</td><td style="text-align:left">Integral Type</td><td style="text-align:left">64</td><td style="text-align:left">-2^63 to 2^63-1</td></tr><tr><td style="text-align:left">Float</td><td style="text-align:left">Floating point types (IEEE 754 format)</td><td style="text-align:left">32</td><td style="text-align:left">+/-1.18  * 10^-38 to +/-3.4 * 10^38</td></tr><tr><td style="text-align:left">Double</td><td style="text-align:left">Floating point types (IEEE 754 format)</td><td style="text-align:left">64</td><td style="text-align:left">+/-2.23 * 10^-308 to +/-1.8 * 10^308</td></tr></tbody></table></div><p>A string type holds strings, and handles them differently from the way integral and floating point types handle numbers. The Java language includes a <code>String</code> class to represent strings. You declare a string using the type <code>String</code>, and initialize it with a quoted (引号) string, a sequence of characters contained within double quotes, as shown below. You can also combine two strings using the <code>+</code> operator.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Code fragment</span></span><br><span class="line"><span class="comment">// Declaration of variable s of type String.</span></span><br><span class="line"><span class="comment">// and initialization with quoted string "Hello".</span></span><br><span class="line">String s = <span class="string">"Hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Concatenation of string in s with quoted string " World"</span></span><br><span class="line">String t = t + <span class="string">" World"</span>;</span><br><span class="line">System.out.println(t); <span class="comment">// Outputs Hello World</span></span><br></pre></td></tr></table></figure><h2 id="Variable-scope"><a href="#Variable-scope" class="headerlink" title="Variable scope"></a>Variable scope</h2><p>In addition to type, scope is also an important characteristic of a variable. Scope establishes (确定) when a variable is created and destroyed and where a developer can access the variable within a program. The place in your program where you declare the variable determines its scope.</p><p>So far, I’ve discussed local variables, which hold temporary data that you use within a method. You declare local varialbes inside methods, and you can access them only from those methods. This means that you can retrieve (检索) only local variables <code>anInteger</code>, which you used in <code>IntegerTest.java</code>, and <code>aDouble</code>, which you used in <code>DoubleTest.java</code>, from the main method in which they were declared and nowhere (没有…的地方) else.</p><p>You can declare local variables within any method. The example code below declares a local variable in the <code>AlarmClock.snooze()</code> method:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlarmClock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">snooze</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Snooze time in millisecond = 5 secs</span></span><br><span class="line">        <span class="keyword">long</span> snoozeInterval = <span class="number">5000</span>;</span><br><span class="line">        System.out.println(<span class="string">"ZZZZZ for: "</span> + snoozeInterval);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>You acn get to <code>snoozeInterval</code> only from the <code>snooze()</code> method, which is where you declared <code>snoozeInterval</code>, as shown here:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlarmClockTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AlarmClock aClock = <span class="keyword">new</span> AlarmClock();</span><br><span class="line">        aClock.snooze();    <span class="comment">// This is still fine.</span></span><br><span class="line">        <span class="comment">// The next line of code is an ERROR.</span></span><br><span class="line">        <span class="comment">// You can't access snoozeInterval outside the snooze method.</span></span><br><span class="line">        snoozeInterval = <span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Method-parameters"><a href="#Method-parameters" class="headerlink" title="Method parameters"></a>Method parameters</h2><p>A method parameter, which has a scope similar to a local variable, is another type of variable. Method parameters pass arguments into methods. When you declare the method, you specify its arguments in a parameter list. You pass the arguments when you call the method. Method parameters function similarly to local variables in that they lie within the scope of the method to which they are linked, and can be used throughout the method. However, unlike local variables, method parameters obtain (取得) a value from the caller when it calls a method. Here’s a modification of the alarm clock that allows you to pass in the <code>snoozeInterval</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlarmClock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sooze</span><span class="params">(<span class="keyword">long</span> snoozeInterval)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ZZZZZ for: "</span> + snoozeInterval);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlarmClockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AlarmClock aClock = <span class="keyword">new</span> AlarmClock();</span><br><span class="line">        <span class="comment">// Pass in the snooze interval when you call the method.</span></span><br><span class="line">        aClock.snooze(<span class="number">10000</span>); <span class="comment">// Snooze for 100000 msecs.</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Member-variables"><a href="#Member-variables" class="headerlink" title="Member variables"></a>Member variables</h2><p>Local variables are useful, but because the provice only temporary storage, their value is limited. Since their lifetimes span the length of the method in which they are declared, local variables compare to a notepad that appears every time you receive a telephone call, but disappears when you hang up. That setup can be useful for jotting (略记) down notes, but sometimes you need something more permanent, What’s a programmer to do? Enter <code>member variables</code>.</p><h2 id="Variable-scope-an-lifetime"><a href="#Variable-scope-an-lifetime" class="headerlink" title="Variable scope an lifetime"></a>Variable scope an lifetime</h2><p>Developers implement instance variable (实例变量) to contain data useful to a class. An instance variable differs from a local variable in the nature of its scope and its lifetime. The entire class makes up the scope of an instance variable, not the method in which it was declared. In other words, developers can access instance variables anywhere in the class. In addition, the lifetime of an instance variable does not depend on any particular method of the class; that is, its lifetime is the lifetime of the instance that contains it.</p><p>Instances are the actual objects that you create from the blueprint you design in the class definition. You declare instance variables in the class definition, affecting each instance you create from the blueprint. Each instance contains those instance variables, and data held within the variables can vary (不同) from instance to instance.</p><p>Consider the <code>AlaremClock</code> class. Passing the <code>snoozeInterval</code> into the <code>snooze()</code> method isn’t a great design. Imagine having to type in a snooze interval on your alarm clock each time you fumbled for the snooze button. Instead, just give the whold alarm clock a <code>snoozeInterval</code>. You complete this with an instance variable in the <code>AlarmClock</code> class, as shown below:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlarmClock</span> </span>&#123;</span><br><span class="line">    <span class="comment">// You declare snoozeInterval here. This makes it an instance variable.</span></span><br><span class="line">    <span class="comment">// You can also initialize it here.</span></span><br><span class="line">    <span class="keyword">long</span> m_snoozeInterval = <span class="number">5000</span>;   <span class="comment">// Snooze time in millisecond = 5 secs.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">snooze</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// You can still get to m_snoozeInterval in an AlarmClock method </span></span><br><span class="line">        <span class="comment">// because you are within the scope of the class.</span></span><br><span class="line">        System.out.println(m_snooozeInterval);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>You can access instance variables almost anywhere within the class that declares them. To be technical about it, you declare the instance variable within the class scope, and you can retrieve it from almost anywhere within that scope. Practically speaking, you can access the variable anywhere between the first curly bracket (花括号) that starts the class and the closing bracket. Since you also declare methods within the class scope. they too can access the instance variables.</p><p>You can also access instance variables from outside the class, as long sa an instance exists, and you have a variable that references the instance. To retrieve an instance variable through an instance, you use the <em>dot</em>(<code>.</code>) operator together with the instance. That may not be the ideal way to access the variable, but for now, complete it this way for illustrative (说明的) purposes (目的):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlarmClockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Create two clocks. Each has its own m_snoozeInterval</span></span><br><span class="line">        AlarmClock aClock1 = <span class="keyword">new</span> AlarmClock();</span><br><span class="line">        AlarmClock aClock2 = <span class="keyword">new</span> AlarmClock();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Change aCLock2</span></span><br><span class="line">        <span class="comment">// You'll soon see that are much better ways to do this.</span></span><br><span class="line">        aClock2.m_snoozedInterval = <span class="number">100000</span>;</span><br><span class="line">        aClock1.snooze();   <span class="comment">// Snooze with aClock1's interval</span></span><br><span class="line">        aClock2.snooze();   <span class="comment">// Snooze with aClock2's interval</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Try this program out, and you’ll see that <code>aClock1</code> still ha its interval of 5000 while <code>aClock2</code> has an interval of 10000. Again, each instance has its own instance data.</p><p>Don’t forget, the class definition is only a blueprint, so the instance variables don’t actually exist until you create instances from the blueprint. Each instance of a class has it own copy of the instance variables, and the blueprint defines what those instance variables will be.</p><h2 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h2><p>Encapsulation (封装) is one of the foundations of object-oriented programming. When using encapsulation, the user interacts (交互) with the type through the exposed (暴露的) behavior, not directly with the internal implementation. Through encapsulation, you hide the details of a type’s implementation. In Java, encapsulation basically translates to this simple guideline: “Don’t access your object’s data directly; use its methods.”</p><p>That is an elementary (简单的) idea, but it eases our lives as programmers. Imagine, for example, that you wanted to instruct a <code>Person</code> object to stand up. Without encapsulation, your commands could go something like this: “Well, I guess you’d need to tighten (绷紧) this muscle (肌肉) here at the front of the leg, loosen (放松) this muscle here at the back of the leg. Hmmm — need to bend at (弯曲) the waist (腰部) too. Which muscles spark (触发) that movement? Need to tighten these, loosen those. Whoops! Forgot the other leg. Darn. Watch it — don’t top over…” You get the idea. With encapsulation, you would just need to invoke the <code>stanUp()</code> method, Pretty easy, yes?</p><p>Some advantages to encapsulation:</p><ul><li>Abstraction of detail: The user interacts with a type at a higher level. If you use the <code>standUp</code> method, you no longer need to know all the muscles required to initiate that motion.</li><li>Isolation (隔离) from changes: Changes in internal implementation don’t affect the users. If a person sprains (扭伤) an ankle (踝关节), and depends on a create for a while, the users still invoke only the <code>standUp()</code> method.</li><li>Correctness (正确性): Users can’t arbitraily ()任意 change the insiders of an object. The can only complete what you allow them to do in the methods you write.</li></ul><p>Here’s a short example in which encapsulation clearly hepls in a program’s accuracy (准确度):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad -- doesn't use encapsulation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m_age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.m_age = -<span class="number">5</span>; <span class="comment">// Hey -- how can someone be minus 5 years old?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Better -- uses encapsulation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m_age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Check to make sure age is greater than 0. I'll talk more about</span></span><br><span class="line">        <span class="comment">// if statements at another time.</span></span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            m_age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.setAge(-<span class="number">5</span>);   <span class="comment">// Won't have any effect now.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Even that simple program shows how you can slip into trouble if you directly access the internal data of classes. The larger and more complex the program, the more important encapsulation becomes. Also remember that many programs start out small and then grow to last indefinitely (无限地). so it’s essential that you design them correctly, right from the beginning. To apply encapsulation to <code>AlarmClock</code>, you can just create methods to manipulate (操纵) the snooze interval.</p><blockquote><p>A note about methods<br>Methods can return values that the caller users. To return a value, declare a nonvoid return type, and use a <code>return</code> statement.</p></blockquote><h2 id="Write-the-program"><a href="#Write-the-program" class="headerlink" title="Write the program"></a>Write the program</h2><p>Okay — you’re ready to manipulate the snooze interval. You do this by adding get and set methods for the snooze interval. When you have an instance variable like <code>snoozeInterval</code>, you will regularly call the get and set methods <code>getSnoozeInterval()</code> and <code>setSnoozeInterval()</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlarmClock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> m_snoozeInterval = <span class="number">5000</span>;    <span class="comment">// Snooze time in millisecond</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set method for m_snoozeInterval.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSnoozeInterval</span><span class="params">(<span class="keyword">long</span> snoozeInterval)</span> </span>&#123;</span><br><span class="line">        m_snoozeInterval = snoozeInterval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get method for m_snoozeInterval.</span></span><br><span class="line">    <span class="comment">// Note that you are returning a value of type long here.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSnoozeInterval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Here's the line that returns the value.</span></span><br><span class="line">        <span class="keyword">return</span> m_snoozeInterval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">snooze</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// You can still get to m_snoozeInterval in an AlarmClock method</span></span><br><span class="line">        <span class="comment">// because you are within the scope of the class.</span></span><br><span class="line">        System.out.println(<span class="string">"ZZZZZ for: "</span> + m_snoozeInterval);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlarmClockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Create two clocks. Each has its own m_snoozeInterval.</span></span><br><span class="line">        AlarmClock aClock1 = <span class="keyword">new</span> AlarmClock();</span><br><span class="line">        AlarmClock aClock2 = <span class="keyword">new</span> AlarmClock();</span><br><span class="line">        <span class="comment">// Change aClock2. You use the set method.</span></span><br><span class="line">        aClock2.setSnoozeInterval(<span class="number">10000</span>);</span><br><span class="line">        aClock1.snooze();    <span class="comment">// Snooze with aClock1's interval.</span></span><br><span class="line">        aClock2.snooze();    <span class="comment">// Snooze with aClock2's interval.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Defined now are tow methods to manipulate the snooze interval. One is used to get the snooze interval, and the other is used to set it. That may seem trivial (琐碎的), but then, <code>AlarmClock</code> is a trivial class.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this quick tutorial you’ve looked at how manipulate primitive types like <code>int</code> and <code>double</code>. You examined local variables, method parameters, and variable scope. You learned how to add data to classes using instance variables, and how that data is contained in each instance. Finally, you explored encapsulation and how it leads to better code.</p>]]></content>
      
      
      <categories>
          
          <category> JavaWorld </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>思维导图</title>
      <link href="/2020/02/11/%E5%85%B6%E5%AE%83/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
      <url>/2020/02/11/%E5%85%B6%E5%AE%83/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>思维导图是我在研究深度学习后才明白它原理的，因为思维导图和人工智能的深度学习原理一样。如果我学其他专业的话，恐怕我一辈子都不知道原理。所以非机器学习专业的人很少有能解释思维导图的原理，为何有效，何时无效。</p><h2 id="思维导图的作用"><a href="#思维导图的作用" class="headerlink" title="思维导图的作用"></a>思维导图的作用</h2><p>先来看看思维导图最牛的作用是什么。</p><blockquote><p>学习上：思维导图可以让你用更少的例子学会知识</p></blockquote><p>再直白点说：你只做过几道题，但可通过思维导图来学会别人用题海战术才能学会的知识，是学得快；用了题海战术更厉害，是学得好。</p><blockquote><p>应用上：思维导图可以让你用更少的知识解决问题</p></blockquote><p>再直白点说：用思维导图就可以解决你从来没遇到过的复杂问题。</p><p>关键在于：更少更快。</p><h2 id="思维导图的原理"><a href="#思维导图的原理" class="headerlink" title="思维导图的原理"></a>思维导图的原理</h2><p>可关键的问题是：为什么？是仪式产生的魔法？到底是怎么做到上面两点的？原理是什么？下面是用人工智能理论借鉴而来的原理解释为什么思维导图能做到这些。</p><h3 id="什么是学习"><a href="#什么是学习" class="headerlink" title="什么是学习"></a>什么是学习</h3><h2 id="促进学习的关键是什么？"><a href="#促进学习的关键是什么？" class="headerlink" title="促进学习的关键是什么？"></a>促进学习的关键是什么？</h2><pre class="mermaid">graph LR    建模欲望 --- 好奇的作用    好奇的作用 --- 搜集例子    好奇的作用 --- 建立模型    建模欲望 --- 好奇的对象    好奇的对象 --- 例子    例子 --- 输入    例子 --- 输出    好奇的对象 --- 知识    知识 --- 分类    知识 --- 回归    建模欲望 --- 好奇的应用    好奇的应用 --- 演讲    演讲 --- 寓言故事    演讲 --- 故事引入    好奇的应用 --- 标题    标题 --- 例子残缺    标题 --- 知识白送    好奇的应用 --- 学习    学习 --- 自我相关    学习 --- 自我提问    好奇的应用 --- 广告    广告 --- 知识包装    广告 --- 特例说服    建模欲望 --- 好奇的敌人    好奇的敌人 --- 权威知识    好奇的敌人 --- 固执心理</pre><p>事实上，好奇心和食欲、性欲一样，是人类的基本欲望。和好奇心相关的大脑区域就是负责奖励机制的伏膈核，也正是对成瘾行为起重要作用的区域。因为我们不得不依赖自己的模型而存活，所以一定会想尽办法的去建立模型（学习），而好奇心便是演化出来促进学习的奖励机制，每个人生下来就是一部终身好奇的学习机器。</p><p>我们不是不喜欢学习，而是不喜欢不符合大脑特点的记忆。当我们对食物饥饿时，大脑会产生进食欲，会无法抑制的想要进食。学习和进食一样，当我们对知识饥饿时，大脑会产生求知欲，也会无法抑制的想要学习。</p><blockquote><p>若善用好奇心，将会对学习起到非常显著的作用</p></blockquote><h2 id="万能学习法！"><a href="#万能学习法！" class="headerlink" title="万能学习法！"></a>万能学习法！</h2><p>大家一定想过有没有一个万能学习法？有。</p><p>而且还是被证明了定理：叫做无免费午餐定理（别名叫做：没有万能学习法）</p><p>显式知识的思维导图也好，隐式知识的端到端学习也好，都有它适用的场合，切勿认为思维导图是万能的，它就不适合隐式知识的学习。</p><p>任何一个声称自己是万能学习法的，无一例外都是骗子。网上有很多的学习方法，但很少有提及某个学习方法不适合什么任务。</p><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><p>我有个朋友兼前同事是一半波兰一半俄国人。我认识他是在我的第一份工作中。当时他的最大特点就是戴上大耳机听古典音乐编程，绝对不要没事打扰他。工作内容是一个政府给学生网上考试的系统，每个考试都有三到四个阶段，每一阶段都是根据前一阶段的回答来给的题目。反正当时是个教授从政府那拿到了巨额拨款，自己算出了专门出题的algorithm，要把这转化为一个政府的线上考试学习系统。然后我的这位同事/朋友只是因为兴趣爱好而已花了一个周末也不拿加班费就把那段复杂的algorithm转化为代码，那段代码跑了五年以后才发现了一个bug。后来他就跑去别的公司做了几年就被海军招去做研究，按他的话说是大公司的编程太没劲了，都是一样的原理没挑战，我还是喜欢数学。现在一边上班一边读纯数学的phd都快是最后阶段了。他就是喜欢钻研的那种人，咖啡狂人，然后各种学术文件拿来当小说读，还爱吐槽政治，最重要的就是知道自己喜欢什么一定要去做，一但开始就沉浸其中，高度集中，极强的自制力，屁股坐上椅子一定等解决问题了才起来（喝咖啡除外），甚至可以不吃饭。</p><p>看到这么多人说俄罗斯人数学好，我也来强答一个！俄罗斯人数学是真心好，更厉害的是他们对知识非常严谨以及求知欲非常旺盛。说个小事吧，研究生教我们随机过程的教授是前苏联的，曾师从吉米多维奇，有次做衍生品定价的小论文答辩，是他和一位希腊大叔在听，希腊大叔问了几个问题就再没有提问的欲望，大神估计对金融衍生品比较感兴趣，一直在草稿纸上画，不停地提问，希腊大叔表示可以了，差不多得了。大神一脸好奇宝宝的样子说:”不行不行，我这里这里这里还没有听明白。”以他在数学上的学识，对一个水货研究生的水货小论文都能这么认真听完以及提问，我还没遇到第二位能做到这样的教授。还有对于没有好好做论文深感惭愧！</p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自然拼读法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户帐号系统设计</title>
      <link href="/2020/02/07/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F/%E7%94%A8%E6%88%B7%E5%B8%90%E5%8F%B7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2020/02/07/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F/%E7%94%A8%E6%88%B7%E5%B8%90%E5%8F%B7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>用户系统，主要分为账号体系和用户信息两大类。账号体系包括，登陆验证、注册、第三方授权、以及权限管理。用户信息包括，用户地理位置、用户属性、用户设备信息、还有用户日志信息。</p><h2 id="登陆验证"><a href="#登陆验证" class="headerlink" title="登陆验证"></a>登陆验证</h2><p>在一般项目账号体系中，一般会要求支持手机、邮箱、账号、QQ、微信、微博实现登陆。后面三种方式都是基于第三方授权后，完成的身份验证。手机、邮箱、账号则是相对传统的登录方式。</p><p>用户身份与登录的授权方式是独立开的，即用户uid和登录方式是一对多的关系。举例来说，用户A在使用微博授权登陆后，服务端鉴别身份信息为uid=123。用户A下次使用微信登陆，服务端鉴别身份同样为uid=123。不存在同一用户A拥有多个账号信息的现象。</p><h2 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h2><p>用户信息，为便于扩展，分成两类。用户基础信息和用户拓展信息。基本信息用来保存用户的基本属性，年龄、性别、生日、头像、手机号码等。扩展信息，用来保存用户的设备信息或其他可扩展的内容。另外还有位置信息，这个可独立出来，也可合并到扩展信息中，根据自己的使用场景来定。</p><h2 id="用户日志信息"><a href="#用户日志信息" class="headerlink" title="用户日志信息"></a>用户日志信息</h2><p>日志信息，用来保存用户注册或者登陆行为的。另外会有一些修改密码或者修改重要信息的日志记录。</p><h2 id="全局uid"><a href="#全局uid" class="headerlink" title="全局uid"></a>全局uid</h2><p>建议不要使用表的主键作为用户ID，而是使用ID生成器(发号器)生成用户的唯一标示guid。当用户量急剧上升时，往往会采取分库分表的方法，然后通过将uid取余写到不同的表中。如果单纯的以某个表主键作为ID。会限制插入性能和增加业务复杂度,其次在分布式数据库中也无法保证ID唯一性。全局ID生成，是有很多方案的。简单一点，可以采用redis自增属性，因为其具有原子性，在分布式坏境中，能保证ID的唯一性。</p><h2 id="Access-Token"><a href="#Access-Token" class="headerlink" title="Access Token"></a>Access Token</h2><p>与传统的Session相比，Access Token比较适合做RESTful Api开发。传统Web应用中，用户登陆后会写用户信息到cookie中，服务端通过Session就能得到用户的身份。</p><p>Access Token的是OAuth2.0中用户经过授权后，返回调用API的凭证。对于自己的应用来讲，用户在登录后，即返回Access Token。在token有效期内可凭借此凭证，调用其他接口。对于accesstoken的刷新有两种方案，第一种每次用户重启app时，重新refresh。第二种，在调用周期内服务端发现access token可能过期时，返回新的token给客户端。</p><p>至于Access Token的生成，这个并没有规定，只要保证其唯一性即可。简单点，对用户uid和当前时间哈希得到新的Access Token，并设置过期时间。另外也可以采用JWT实现。</p><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><ol><li>用户注册</li><li>用户登录</li><li>用户登录后身份校验</li><li>用户基本信息修改</li><li>用户安全中心</li></ol><h2 id="划分"><a href="#划分" class="headerlink" title="划分"></a>划分</h2><ol><li>用户基本信息服务<br> 提供用户的基本信息的获取和修改，该服务需要能够扛住较大的访问压力（当然也可以在调用方做缓存）</li><li>用户的注册和登录服务<br> 提供用户的注册、登录授权颁发用户的登录标识</li><li>用户身份校验服务<br> 对用户的登录标识进行校验，该服务需要扛住能够较大的访问压力（当然也可以在调用方做缓存）</li><li>用户安全中心服务<br> 提供用户的重要信息的修改如登录的邮箱手机号，密码等。用户在进行这些敏感信息的修改是需要进行身份认证，来保证用户的安全性。</li></ol><h2 id="用户信息表"><a href="#用户信息表" class="headerlink" title="用户信息表"></a>用户信息表</h2><h2 id="用户授权表"><a href="#用户授权表" class="headerlink" title="用户授权表"></a>用户授权表</h2><div class="table-container"><table><thead><tr><th style="text-align:left">id</th><th style="text-align:left">user_id</th><th style="text-align:left">identity_type</th><th style="text-align:left">identifier</th><th style="text-align:left">credential</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">email</td><td style="text-align:left">123@example.com</td><td style="text-align:left">123456</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">1</td><td style="text-align:left">phone</td><td style="text-align:left">13888888888</td><td style="text-align:left">123456</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">1</td><td style="text-align:left">weibo</td><td style="text-align:left">-</td><td style="text-align:left">微博Token</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">2</td><td style="text-align:left">username</td><td style="text-align:left">moliniao</td><td style="text-align:left">123456</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">3</td><td style="text-align:left">weixin</td><td style="text-align:left">-</td><td style="text-align:left">微信Token</td></tr></tbody></table></div><h2 id="交互流程"><a href="#交互流程" class="headerlink" title="交互流程"></a>交互流程</h2>]]></content>
      
      
      <categories>
          
          <category> 业务开发 </category>
          
          <category> 商城系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用户登录系统</title>
      <link href="/2020/02/07/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F/%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/02/07/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F/%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h2><p>简单来说，单点登录（SSO）就是在多个系统中，用户只需一次登录，各个系统即可感知该用户已经登录。</p><pre class="mermaid">graph LR    subgraph 订单功能        订单系统一         订单系统二    end    subgraph 登录功能        登录系统一         登录系统二    end    subgraph 物流功能        物流系统一         物流系统二    end    用户 --> 登录系统一    登录系统一 --> 物流系统一</pre>]]></content>
      
      
      <categories>
          
          <category> 业务开发 </category>
          
          <category> 商城系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒杀系统</title>
      <link href="/2020/02/07/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/02/07/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/suifeng3051/article/details/52607544">https://blog.csdn.net/suifeng3051/article/details/52607544</a></p>]]></content>
      
      
      <categories>
          
          <category> 业务开发 </category>
          
          <category> 商城系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自然拼读法</title>
      <link href="/2020/02/05/%E5%85%B6%E5%AE%83/%E8%87%AA%E7%84%B6%E6%8B%BC%E8%AF%BB%E6%B3%95/"/>
      <url>/2020/02/05/%E5%85%B6%E5%AE%83/%E8%87%AA%E7%84%B6%E6%8B%BC%E8%AF%BB%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>sdfsdg</p><p>|||</p><h2 id="辅音字母"><a href="#辅音字母" class="headerlink" title="辅音字母"></a>辅音字母</h2><div class="table-container"><table><thead><tr><th style="text-align:left">字母</th><th style="text-align:left">音标</th><th style="text-align:left">例子</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:left">切头法</td><td style="text-align:left"></td><td style="text-align:left"></td><td>去掉单词读音前面部分，保留后面部分</td></tr><tr><td style="text-align:left">f</td><td style="text-align:left">ef</td><td style="text-align:left">fa af fax</td><td>夫 悄悄话 不用声带 上面牙齿咬住下面嘴唇</td></tr><tr><td style="text-align:left">l</td><td style="text-align:left">el</td><td style="text-align:left">la al lab</td><td>呃 可用le代替 舌头顶上面牙齿</td></tr><tr><td style="text-align:left">m</td><td style="text-align:left">em</td><td style="text-align:left">ma am man</td><td>en，闭嘴，用鼻子发音</td></tr><tr><td style="text-align:left">n</td><td style="text-align:left">en</td><td style="text-align:left">na an man</td><td>en，舌头顶上面牙齿，鼻子发音</td></tr><tr><td style="text-align:left">s</td><td style="text-align:left">es</td><td style="text-align:left">sa as sad</td><td>s</td></tr><tr><td style="text-align:left">x</td><td style="text-align:left">eks</td><td style="text-align:left">xa ax fax</td><td>ks</td></tr><tr><td style="text-align:left">去尾法</td><td style="text-align:left"></td><td style="text-align:left"></td><td>去掉单词读取后面部分，保留前面部分</td></tr><tr><td style="text-align:left">b</td><td style="text-align:left"></td><td style="text-align:left">ba ab lab</td><td></td></tr><tr><td style="text-align:left">d</td><td style="text-align:left"></td><td style="text-align:left">da ad sad pad</td><td></td></tr><tr><td style="text-align:left">p</td><td style="text-align:left"></td><td style="text-align:left">pa ap pad zap</td><td></td></tr><tr><td style="text-align:left">t</td><td style="text-align:left"></td><td style="text-align:left">ta at vat</td><td>he</td></tr><tr><td style="text-align:left">v</td><td style="text-align:left"></td><td style="text-align:left">va av vat</td><td>wu 上面牙齿咬住下面嘴唇</td></tr><tr><td style="text-align:left">z</td><td style="text-align:left"></td><td style="text-align:left">za az zap</td><td>子</td></tr><tr><td style="text-align:left">j</td><td style="text-align:left"></td><td style="text-align:left">ja aj jam</td><td>者</td></tr><tr><td style="text-align:left">k</td><td style="text-align:left"></td><td style="text-align:left">ka ak yak</td><td>可</td></tr><tr><td style="text-align:left">对比法</td><td style="text-align:left"></td><td style="text-align:left"></td><td>汉语拼音</td></tr><tr><td style="text-align:left">g</td><td style="text-align:left"></td><td style="text-align:left">ga ag</td><td>阁 快读</td></tr><tr><td style="text-align:left">h</td><td style="text-align:left"></td><td style="text-align:left">ha hat</td><td>he 不用声带</td></tr><tr><td style="text-align:left">r</td><td style="text-align:left"></td><td style="text-align:left">ra rat</td><td>e呃 舌头顶上面牙齿</td></tr><tr><td style="text-align:left">w</td><td style="text-align:left"></td><td style="text-align:left">wa wag</td><td>we 合嘴然后张开</td></tr><tr><td style="text-align:left">y</td><td style="text-align:left"></td><td style="text-align:left">ya yak</td><td>ye 惹</td></tr><tr><td style="text-align:left">其它</td><td style="text-align:left"></td><td style="text-align:left"></td><td></td></tr><tr><td style="text-align:left">c</td><td style="text-align:left"></td><td style="text-align:left">ca ac cat</td><td>k 渴</td></tr><tr><td style="text-align:left">q</td><td style="text-align:left"></td><td style="text-align:left">qua quack</td><td>总是搭配qu 阔</td></tr></tbody></table></div><h2 id="元音"><a href="#元音" class="headerlink" title="元音"></a>元音</h2><p>元音一共5个：<strong>a</strong>、<strong>e</strong>、<strong>i(结尾y)</strong>、<strong>o</strong>、<strong>u</strong>。</p><div class="table-container"><table><thead><tr><th style="text-align:left">发音</th><th style="text-align:left">a</th><th style="text-align:left">e</th><th style="text-align:left">i(结尾y)</th><th style="text-align:left">o</th><th style="text-align:left">u</th></tr></thead><tbody><tr><td style="text-align:left">短音</td><td style="text-align:left"><strong>a</strong>t</td><td style="text-align:left"><strong>e</strong>gg</td><td style="text-align:left"><strong>i</strong>f</td><td style="text-align:left"><strong>o</strong>ff</td><td style="text-align:left"><strong>u</strong>p</td></tr><tr><td style="text-align:left">长音（本音）</td><td style="text-align:left">n<strong>a</strong>me</td><td style="text-align:left">s<strong>ee</strong></td><td style="text-align:left">h<strong>i</strong>de</td><td style="text-align:left">g<strong>o</strong></td><td style="text-align:left">c<strong>u</strong>te</td></tr><tr><td style="text-align:left"><strong>发音规律</strong></td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">短音（单元在头腰）</td><td style="text-align:left">c<strong>a</strong>t p<strong>a</strong>d</td><td style="text-align:left"><strong>e</strong>gg p<strong>e</strong>t</td><td style="text-align:left"><strong>i</strong>t <strong>i</strong>t s<strong>i</strong>t</td><td style="text-align:left">h<strong>o</strong>t p<strong>o</strong>t</td><td style="text-align:left"><strong>u</strong>p h<strong>u</strong>g</td></tr><tr><td style="text-align:left">长音（元辅e，元本音，e闭嘴）</td><td style="text-align:left">c<strong>a</strong>k<strong>e</strong> n<strong>a</strong>m<strong>e</strong> g<strong>a</strong>t<strong>e</strong> t<strong>a</strong>p<strong>e</strong></td><td style="text-align:left"><strong>e</strong>v<strong>e</strong> p<strong>e</strong>t<strong>e</strong> th<strong>e</strong>s<strong>e</strong> th<strong>e</strong>m<strong>e</strong></td><td style="text-align:left">h<strong>i</strong>d<strong>e</strong> r<strong>i</strong>d<strong>e</strong> f<strong>i</strong>v<strong>e</strong> d<strong>i</strong>v<strong>e</strong> l<strong>i</strong>k<strong>e</strong> b<strong>i</strong>k<strong>e</strong> b<strong>i</strong>t<strong>e</strong> k<strong>i</strong>t<strong>e</strong></td><td style="text-align:left">c<strong>o</strong>k<strong>e</strong> j<strong>o</strong>k<strong>e</strong> h<strong>o</strong>m<strong>e</strong> b<strong>o</strong>n<strong>e</strong></td><td style="text-align:left">c<strong>u</strong>t<strong>e</strong> c<strong>u</strong>b<strong>e</strong> m<strong>u</strong>t<strong>e</strong> t<strong>u</strong>b<strong>e</strong></td></tr><tr><td style="text-align:left">长音（2个元音，前本后闭）</td><td style="text-align:left">w<strong>ai</strong>t r<strong>ai</strong>n</td><td style="text-align:left">s<strong>ea</strong> s<strong>ee</strong> r<strong>ea</strong>d b<strong>ee</strong></td><td style="text-align:left">l<strong>ie</strong> p<strong>ie</strong></td><td style="text-align:left">b<strong>oa</strong>t t<strong>oe</strong> r<strong>oa</strong>d d<strong>oe</strong></td><td style="text-align:left">c<strong>ue</strong> d<strong>ue</strong></td></tr><tr><td style="text-align:left">长音（单元结尾）</td><td style="text-align:left"></td><td style="text-align:left">m<strong>e</strong> w<strong>e</strong> h<strong>e</strong> sh<strong>e</strong></td><td style="text-align:left">h<strong>i</strong> cr<strong>y</strong> sh<strong>y</strong> fl<strong>y</strong></td><td style="text-align:left">n<strong>o</strong> g<strong>o</strong></td></tr></tbody></table></div><h2 id="辅元组合"><a href="#辅元组合" class="headerlink" title="辅元组合"></a>辅元组合</h2><p><strong>ca</strong>ke<br><strong>co</strong>ke<br><strong>cu</strong>p<br><strong>cl</strong>ock</p><h2 id="辅音字母Y"><a href="#辅音字母Y" class="headerlink" title="辅音字母Y"></a>辅音字母Y</h2><h3 id="词首-j-gt-re"><a href="#词首-j-gt-re" class="headerlink" title="词首[j]-&gt;re"></a>词首[j]-&gt;re</h3><p><strong>y</strong>es<br><strong>y</strong>ou</p><h3 id="单元y结尾-ai"><a href="#单元y结尾-ai" class="headerlink" title="单元y结尾[ai]"></a>单元y结尾[ai]</h3><p>m<strong>y</strong> fl<strong>y</strong></p><h3 id="非重读音-i-gt-if"><a href="#非重读音-i-gt-if" class="headerlink" title="非重读音[i]-&gt;if"></a>非重读音[i]-&gt;if</h3><p>cand<strong>y</strong><br>sorr<strong>y</strong></p><h2 id="辅音组合新音"><a href="#辅音组合新音" class="headerlink" title="辅音组合新音"></a>辅音组合新音</h2><div class="table-container"><table><thead><tr><th style="text-align:left">组合</th><th style="text-align:left">发音</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left"><strong>R</strong>组合</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">dr</td><td style="text-align:left">[dr] 者</td><td style="text-align:left"><strong>dr</strong>ive d<strong>ri</strong>ve? d<strong>ru</strong>id?</td></tr><tr><td style="text-align:left">tr</td><td style="text-align:left">[tr] che</td><td style="text-align:left"><strong>tr</strong>y <strong>tr</strong>ain <strong>tr</strong>anslate</td></tr><tr><td style="text-align:left"><strong>S</strong>组合</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">sp</td><td style="text-align:left">[sp] be</td><td style="text-align:left"><strong>sp</strong>oon <strong>sp</strong>ot <strong>sp</strong>ring</td></tr><tr><td style="text-align:left">st</td><td style="text-align:left">[st] sS</td><td style="text-align:left"><strong>st</strong>and <strong>st</strong>ack <strong>st</strong>eam</td></tr><tr><td style="text-align:left"><strong>H</strong>组合</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">ch</td><td style="text-align:left">[tʃ] qu</td><td style="text-align:left">pea<strong>ch</strong></td></tr><tr><td style="text-align:left">sh</td><td style="text-align:left">[ʃ] xu</td><td style="text-align:left"><strong>sh</strong>eep <strong>sh</strong>ell</td></tr><tr><td style="text-align:left">ph</td><td style="text-align:left">[f]</td><td style="text-align:left"><strong>ph</strong>one</td></tr><tr><td style="text-align:left">wh</td><td style="text-align:left">[w]</td><td style="text-align:left"><strong>wh</strong>ere <strong>wh</strong>at</td></tr><tr><td style="text-align:left">th</td><td style="text-align:left">[ð] zhi</td><td style="text-align:left"><strong>th</strong>is <strong>th</strong>at <strong>th</strong>eme <strong>th</strong>ink</td></tr><tr><td style="text-align:left"><strong>G</strong>组合</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">ng</td><td style="text-align:left">[ɔŋ] en</td><td style="text-align:left">so<strong>ng</strong> si<strong>ng</strong></td></tr><tr><td style="text-align:left">ge</td><td style="text-align:left">[dʒ] qu</td><td style="text-align:left">ca<strong>ge</strong></td></tr><tr><td style="text-align:left">gh</td><td style="text-align:left">[f]</td><td style="text-align:left">lau<strong>gh</strong> rou<strong>gh</strong></td></tr><tr><td style="text-align:left">igh</td><td style="text-align:left">[aɪ] 哑音</td><td style="text-align:left">r<strong>igh</strong>t</td></tr><tr><td style="text-align:left">eigh</td><td style="text-align:left">[eɪ] 哑音</td><td style="text-align:left">e<strong>igh</strong>t</td></tr><tr><td style="text-align:left">ought</td><td style="text-align:left">[ɔːt] 哑音</td><td style="text-align:left">b<strong>ought</strong></td></tr><tr><td style="text-align:left">aught</td><td style="text-align:left">[ɔːt] 哑音</td><td style="text-align:left">c<strong>aught</strong></td></tr></tbody></table></div><h2 id="辅音组合哑音"><a href="#辅音组合哑音" class="headerlink" title="辅音组合哑音"></a>辅音组合哑音</h2><p>只出现在首尾？</p><div class="table-container"><table><thead><tr><th style="text-align:left">组合</th><th style="text-align:left">发音</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">mb</td><td style="text-align:left">m [m]</td><td style="text-align:left">la<strong>mb</strong></td></tr><tr><td style="text-align:left">ck</td><td style="text-align:left">k [k]</td><td style="text-align:left">kno<strong>ck</strong></td></tr><tr><td style="text-align:left">kn</td><td style="text-align:left">n [n]</td><td style="text-align:left"><strong>kn</strong>ock</td></tr><tr><td style="text-align:left">wr</td><td style="text-align:left">r [r]</td><td style="text-align:left"><strong>wr</strong>ite</td><td></td></tr><tr><td style="text-align:left">tch</td><td style="text-align:left">ch [tʃ] qu</td><td style="text-align:left">wa<strong>tch</strong></td></tr><tr><td style="text-align:left">dge</td><td style="text-align:left">ge [dʒ] qu</td><td style="text-align:left">bri<strong>dge</strong></td></tr></tbody></table></div><h2 id=""><a href="#" class="headerlink" title="????"></a>????</h2><p>declared<br><strong>de</strong> <strong>clare</strong> <strong>d</strong>? 长音 短音？</p><p>tor -&gt; che iterator</p><p>pollute ? u 短音</p><p>method tho(sou)</p><p>thumb (θʌm) θ -&gt; s</p><h4 id="tra"><a href="#tra" class="headerlink" title="tra"></a>tra</h4><p>tra -&gt; t rei<br>be<strong>tra</strong>yer<br>frus<strong>tra</strong>ted [ˈfrʌˌstreɪtəd]</p><h4 id="cial"><a href="#cial" class="headerlink" title="cial"></a>cial</h4><p>sou<br>so<strong>cial</strong> [‘soʊʃ(ə)l]</p><h4 id="chi"><a href="#chi" class="headerlink" title="chi"></a>chi</h4><p>ki<br>ar<strong>chi</strong>tectural [.ɑrkɪ’tektʃərəl]</p><h4 id="tu"><a href="#tu" class="headerlink" title="tu"></a>tu</h4><p>qu<br>architec<strong>tu</strong>ral [.ɑrkɪ’tektʃərəl]</p><h4 id="sta"><a href="#sta" class="headerlink" title="sta"></a>sta</h4><p>s dei<br><strong>sta</strong>te [steɪt]</p><h4 id="tro-中间"><a href="#tro-中间" class="headerlink" title="tro 中间"></a>tro 中间</h4><p>two<br>in<strong>tro</strong>duce [.ɪntrə’dus]</p><h4 id="tro-结尾"><a href="#tro-结尾" class="headerlink" title="tro 结尾"></a>tro 结尾</h4><p>chi + rou<br>in<strong>tro</strong>  [‘ɪntroʊ]</p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自然拼读法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM_09 性能调优</title>
      <link href="/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM_09%20%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
      <url>/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM_09%20%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<p>性能调优的目的就是使用较小的内存占用来获得较高的吞吐量或者较低的延迟。</p><p>程序在上线前的测试或运行中有时会出现一些大大小小的 JVM 问题，比如 CPU Load 过高、请求延迟、TPS 降低等，甚至出现内存泄漏（每次垃圾收集使用的时间越来越长，垃圾收集频率越来越高，每次垃圾收集清理掉的垃圾数据越来越少）、内存溢出导致系统崩溃，因此需要对JVM进行调优，使得程序在正常运行的前提下，获得更高的用户体验和运行效率。</p><p>这里有几个比较重要的指标：</p><ol><li>延迟：由于垃圾收集而引起的程序停顿时间。</li><li>吞吐量：用户程序运行时间占用户程序和垃圾收集占用总时间的比值。</li><li>内存占用：程序正常运行需要的内存大小。</li></ol><p>当然，和 CAP 原则一样，同时满足一个程序内存占用小、延迟低、高吞吐量是不可能的，程序的目标不同，调优时所考虑的方向也不同，在调优之前，必须要结合实际场景，有明确的的优化目标，找到性能瓶颈，对瓶颈有针对性的优化，最后进行测试，通过各种监控工具确认调优后的结果是否符合目标。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>jvm调优</p><p>JVM调优</p><p>有实际的JVM性能优化经验？重点应该监控哪些指标，以及如何来调整参数？</p><p>从SQL、JVM、架构、数据库四个方面讲讲优化思路，以及如何优先排序？</p><p>你在项目中一般怎么调优JVM的呢？</p><p>JVM相关的分析工具有使用过哪些？具体的性能调优步骤吗？</p><p>JVM性能调优的方法和步骤，JVM的关键性核心参数配置</p><p>用过什么JVM调优命令？</p><p>JVM调优，如何解决OOM</p><p>JVM调优，程序挂起后如何排查原因？</p><p>你在项目中一般怎么调优JVM的呢？</p><p>jvm性能调优都做了什么</p><p>从SQL、JVM、架构、数据库四个方面讲讲优化思路，以及如何优先排序？</p><p>如何进行JVM调优？有哪些方法？</p><p>讲一下 OOM 以及遇到这种情况怎么处理的，是否使用过日志分析工具</p><p>OOM说一下？怎么排查？哪些会导致OOM?</p><p>如果频繁老年代回收怎么分析解决</p><p>JVM调优，程序挂起后如何排查原因？</p><p>如何理解内存泄漏问题？有哪些情况会导致内存泄露？如何解决？</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 虚拟机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM_08 性能监控</title>
      <link href="/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM_08%20%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/"/>
      <url>/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM_08%20%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h2><p>jps （JVM Process Status Tool）显示指定系统内所有的 HotSpot 虚拟机进程。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jps [options] [hostid]</span><br></pre></td></tr></table></figure><p>option 参数：</p><ol><li>-l : 输出主类全名或jar路径</li><li>-q : 只输出LVMID</li><li>-m : 输出JVM启动时传递给main()的参数</li><li>-v : 输出JVM启动时显示指定的JVM参数（默认）</li></ol><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jps -l -m</span><br><span class="line">  28920 org.apache.catalina.startup.Bootstrap start</span><br><span class="line">  11589 org.apache.catalina.startup.Bootstrap start</span><br><span class="line">  25816 sun.tools.jps.Jps -l -m</span><br></pre></td></tr></table></figure><h2 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h2><p>jinfo（JVM Configuration info）这个命令作用是实时查看和调整虚拟机运行参数。</p><p>之前的 <code>jps -v</code> 口令只能查看到显示指定的参数，如果想要查看未被显示指定的参数的值就要使用 jinfo 口令。</p><p>命令格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jinfo [option] [args] LVMID</span><br></pre></td></tr></table></figure></p><p>option 参数：</p><ol><li>-flag : 输出指定args参数的值</li><li>-flags : 不需要args参数，输出所有JVM参数的值</li><li>-sysprops : 输出系统属性，等同于System.getProperties()</li></ol><p>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ jinfo -flag 11494</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=80</span><br></pre></td></tr></table></figure></p><h2 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h2><p>jstat（JVM statistics Monitoring）是用于监视虚拟机运行时状态信息的命令，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。</p><h4 id="class"><a href="#class" class="headerlink" title="-class"></a>-class</h4><p>监视类装载、卸载数量、总空间以及耗费的时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Loaded :      加载 Class 的数量</span></span><br><span class="line"><span class="comment"># Bytes :       Class 字节大小</span></span><br><span class="line"><span class="comment"># Unloaded :    未加载 Class 的数量</span></span><br><span class="line"><span class="comment"># Bytes :       未加载 Class 的字节大小</span></span><br><span class="line"><span class="comment"># Time :        加载时间</span></span><br><span class="line">zhangqinghua$ jstat -class 11589</span><br><span class="line">Loaded  Bytes  Unloaded  Bytes     Time   </span><br><span class="line">7035  14506.3     0     0.0       3.67</span><br></pre></td></tr></table></figure><h4 id="compiler"><a href="#compiler" class="headerlink" title="-compiler"></a>-compiler</h4><p>输出JIT编译过的方法数量耗时等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Compiled :      编译数量</span></span><br><span class="line"><span class="comment"># Failed :        编译失败数量</span></span><br><span class="line"><span class="comment"># Invalid :       无效数量</span></span><br><span class="line"><span class="comment"># Time :          编译耗时</span></span><br><span class="line"><span class="comment"># FailedType :    失败类型</span></span><br><span class="line"><span class="comment"># FailedMethod :  失败方法的全限定名</span></span><br><span class="line">zhangqinghua$ jstat -compiler 1262</span><br><span class="line">Compiled Failed   Invalid  Time     FailedType  FailedMethod</span><br><span class="line">2573      1       0        47.60    1           org/apache/catalina/loader/WebappClassLoader findResourceInternal</span><br></pre></td></tr></table></figure><h4 id="gc"><a href="#gc" class="headerlink" title="-gc"></a>-gc</h4><p>垃圾回收堆的行为统计：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># C 即 Capacity 总容量，U 即 Used 已使用的容量</span></span><br><span class="line"><span class="comment"># S0C :  survivor0区的总容量</span></span><br><span class="line"><span class="comment"># S1C :  survivor1区的总容量</span></span><br><span class="line"><span class="comment"># S0U :  survivor0区已使用的容量</span></span><br><span class="line"><span class="comment"># S1C :  survivor1区已使用的容量</span></span><br><span class="line"><span class="comment"># EC :   Eden区的总容量</span></span><br><span class="line"><span class="comment"># EU :   Eden区已使用的容量</span></span><br><span class="line"><span class="comment"># OC :   Old区的总容量</span></span><br><span class="line"><span class="comment"># OU :   Old区已使用的容量</span></span><br><span class="line"><span class="comment"># PC :   当前perm的容量 (KB)</span></span><br><span class="line"><span class="comment"># PU :   perm的使用 (KB)</span></span><br><span class="line"><span class="comment"># YGC :  新生代垃圾回收次数</span></span><br><span class="line"><span class="comment"># YGCT : 新生代垃圾回收时间</span></span><br><span class="line"><span class="comment"># FGC :  老年代垃圾回收次数</span></span><br><span class="line"><span class="comment"># FGCT : 老年代垃圾回收时间</span></span><br><span class="line"><span class="comment"># GCT :  垃圾回收总消耗时间</span></span><br><span class="line">zhangqinghua$ jstat -gc 1262</span><br><span class="line">S0C    S1C     S0U     S1U   EC       EU        OC          OU        PC       PU         YGC    YGCT    FGC    FGCT     GCT   </span><br><span class="line">26112.0 24064.0 6562.5  0.0   564224.0 76274.5   434176.0   388518.3  524288.0 42724.7    320    6.417   1      0.398    6.815</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个命令意思就是每隔 2000ms 输出 1262 的 gc 情况，一共输出 20 次</span></span><br><span class="line">zhangqinghua$ jstat -gc 1262 2000 20</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="gccapacity"><a href="#gccapacity" class="headerlink" title="-gccapacity"></a>-gccapacity</h4><p>同 <code>-gc</code>，不过还会输出Java堆各区域使用到的最大、最小空间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NGCMN :   新生代占用的最小空间</span></span><br><span class="line"><span class="comment"># NGCMX :   新生代占用的最大空间</span></span><br><span class="line"><span class="comment"># OGCMN :   老年代占用的最小空间</span></span><br><span class="line"><span class="comment"># OGCMX :   老年代占用的最大空间</span></span><br><span class="line"><span class="comment"># OGC：     当前年老代的容量 (KB)</span></span><br><span class="line"><span class="comment"># OC：      当前年老代的空间 (KB)</span></span><br><span class="line"><span class="comment"># PGCMN :   perm占用的最小空间</span></span><br><span class="line"><span class="comment"># PGCMX :   perm占用的最大空间</span></span><br><span class="line">zhangqinghua$ jstat -gccapacity 1262</span><br><span class="line"> NGCMN    NGCMX     NGC    S0C   S1C       EC         OGCMN      OGCMX      OGC        OC</span><br><span class="line">614400.0 614400.0 614400.0 26112.0 24064.0 564224.0   434176.0   434176.0   434176.0   434176.0 </span><br><span class="line"></span><br><span class="line">PGCMN    PGCMX     PGC      PC         YGC    FGC </span><br><span class="line">524288.0 1048576.0 524288.0 524288.0    320     1</span><br></pre></td></tr></table></figure><h4 id="gcutil"><a href="#gcutil" class="headerlink" title="-gcutil"></a>-gcutil</h4><p>同 <code>-gc</code>，不过输出的是已使用空间占总空间的百分比：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LGCC： 最近垃圾回收的原因</span></span><br><span class="line"><span class="comment"># GCC：  当前垃圾回收的原因</span></span><br><span class="line">zhangqinghua$ jstat -gcutil 28920</span><br><span class="line">S0     S1     E      O      P     YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line">12.45   0.00  33.85   0.00   4.44  4       0.242     0    0.000    0.242</span><br></pre></td></tr></table></figure><h4 id="gcnew"><a href="#gcnew" class="headerlink" title="-gcnew"></a>-gcnew</h4><p>统计新生代的行为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NGC:   当前年轻代的容量 (KB)</span></span><br><span class="line"><span class="comment"># S0CMX: 最大的S0空间 (KB)</span></span><br><span class="line"><span class="comment"># S0C:   当前S0空间 (KB)</span></span><br><span class="line"><span class="comment"># ECMX:  最大eden空间 (KB)</span></span><br><span class="line"><span class="comment"># EC:    当前eden空间 (KB)</span></span><br><span class="line">zhangqinghua$ jstat -gcnew 28920</span><br><span class="line">S0C      S1C      S0U        S1U  TT  MTT  DSS      EC        EU         YGC     YGCT  </span><br><span class="line">419392.0 419392.0 52231.8    0.0  6   6    209696.0 3355520.0 1172246.0  4       0.242</span><br></pre></td></tr></table></figure><h4 id="gcold"><a href="#gcold" class="headerlink" title="-gcold"></a>-gcold</h4><p>统计旧生代的行为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ jstat -gcold 28920</span><br><span class="line">PC       PU        OC           OU       YGC    FGC    FGCT     GCT   </span><br><span class="line">1048576.0  46561.7   6291456.0     0.0      4      0      0.000    0.242</span><br></pre></td></tr></table></figure><h4 id="gcoldcapacity"><a href="#gcoldcapacity" class="headerlink" title="-gcoldcapacity"></a>-gcoldcapacity</h4><p>统计旧生代的大小和空间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ jstat -gcoldcapacity 28920</span><br><span class="line">OGCMN       OGCMX        OGC         OC         YGC   FGC    FGCT     GCT   </span><br><span class="line">6291456.0   6291456.0   6291456.0   6291456.0     4     0    0.000    0.242</span><br></pre></td></tr></table></figure><h4 id="gcpermcapacity"><a href="#gcpermcapacity" class="headerlink" title="-gcpermcapacity"></a>-gcpermcapacity</h4><p>永生代行为统计：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ jstat -gcpermcapacity 28920</span><br><span class="line">PGCMN      PGCMX       PGC         PC      YGC   FGC    FGCT     GCT   </span><br><span class="line">1048576.0  2097152.0  1048576.0  1048576.0     4     0    0.000    0.242</span><br></pre></td></tr></table></figure><h4 id="printcompilation"><a href="#printcompilation" class="headerlink" title="-printcompilation"></a>-printcompilation</h4><p>hotspot 编译方法统计：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Compiled：被执行的编译任务的数量</span></span><br><span class="line"><span class="comment"># Size：    方法字节码的字节数</span></span><br><span class="line"><span class="comment"># Type：    编译类型</span></span><br><span class="line"><span class="comment"># Method：  编译方法的类名和方法名。类名使用"/" 代替 "." 作为空间分隔符. 方法名是给出类的方法名。</span></span><br><span class="line"><span class="comment">#           格式是一致于 HotSpot - XX:+PrintComplation 选项</span></span><br><span class="line">jstat -printcompilation 28920</span><br><span class="line">Compiled  Size  Type Method</span><br><span class="line">1291      78     1    java/util/ArrayList indexOf</span><br></pre></td></tr></table></figure><h2 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h2><p>jmap（JVM Memory Map）命令用于生成 heap dump 文件，如果不使用这个命令，还阔以使用 <code>-XX:+HeapDumpOnOutOfMemoryError</code> 参数来让虚拟机出现 OOM 的时候自动生成 dump 文件。</p><p>jmap 不仅能生成 dump 文件，还阔以查询 <code>finalize</code> 执行队列、Java 堆和永久代的详细信息，如当前使用率、当前使用的是哪种收集器等。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap [option] LVMID</span><br></pre></td></tr></table></figure><p>option 参数：</p><ol><li>dump : 生成堆转储快照</li><li>finalizerinfo : 显示在F-Queue队列等待Finalizer线程执行finalizer方法的对象</li><li>heap : 显示Java堆详细信息</li><li>histo : 显示堆中对象的统计信息</li><li>permstat : to print permanent generation statistics</li><li>F : 当-dump没有响应时，强制生成dump快照</li></ol><h4 id="dump"><a href="#dump" class="headerlink" title="-dump"></a>-dump</h4><p>dump 堆到文件，format 指定输出格式，live 指明是活着的对象,file 指定文件名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ jmap -dump:live,format=b,file=dump.hprof 28920</span><br><span class="line">  Dumping heap to /home/xxx/dump.hprof ...</span><br><span class="line">  Heap dump file created</span><br></pre></td></tr></table></figure><p>dump.hprof 这个后缀是为了后续可以直接用MAT（Memory Anlysis Tool）打开。</p><h4 id="finalizerinfo"><a href="#finalizerinfo" class="headerlink" title="-finalizerinfo"></a>-finalizerinfo</h4><p>打印等待回收对象的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ jmap -finalizerinfo 28920</span><br><span class="line">  Attaching to process ID 28920, please <span class="built_in">wait</span>...</span><br><span class="line">  Debugger attached successfully.</span><br><span class="line">  Server compiler detected.</span><br><span class="line">  JVM version is 24.71-b01</span><br><span class="line">  Number of objects pending <span class="keyword">for</span> finalization: 0</span><br></pre></td></tr></table></figure><p>可以看到当前 F-QUEUE 队列中并没有等待 Finalizer 线程执行 <code>finalizer</code> 方法的对象。</p><h4 id="heap"><a href="#heap" class="headerlink" title="-heap"></a>-heap</h4><p>打印 heap 的概要信息，GC 使用的算法，heap 的配置及 wise heap 的使用情况,可以用此来判断内存目前的使用情况以及垃圾回收情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">$ jmap -heap 28920</span><br><span class="line">  Attaching to process ID 28920, please <span class="built_in">wait</span>...</span><br><span class="line">  Debugger attached successfully.</span><br><span class="line">  Server compiler detected.</span><br><span class="line">  JVM version is 24.71-b01  </span><br><span class="line"></span><br><span class="line">  using thread-local object allocation.</span><br><span class="line">  Parallel GC with 4 thread(s)//GC 方式  </span><br><span class="line"></span><br><span class="line">  Heap Configuration: //堆内存初始化配置</span><br><span class="line">     MinHeapFreeRatio = 0 //对应jvm启动参数-XX:MinHeapFreeRatio设置JVM堆最小空闲比率(default 40)</span><br><span class="line">     MaxHeapFreeRatio = 100 //对应jvm启动参数 -XX:MaxHeapFreeRatio设置JVM堆最大空闲比率(default 70)</span><br><span class="line">     MaxHeapSize      = 2082471936 (1986.0MB) //对应jvm启动参数-XX:MaxHeapSize=设置JVM堆的最大大小</span><br><span class="line">     NewSize          = 1310720 (1.25MB)//对应jvm启动参数-XX:NewSize=设置JVM堆的‘新生代’的默认大小</span><br><span class="line">     MaxNewSize       = 17592186044415 MB//对应jvm启动参数-XX:MaxNewSize=设置JVM堆的‘新生代’的最大大小</span><br><span class="line">     OldSize          = 5439488 (5.1875MB)//对应jvm启动参数-XX:OldSize=&lt;value&gt;:设置JVM堆的‘老生代’的大小</span><br><span class="line">     NewRatio         = 2 //对应jvm启动参数-XX:NewRatio=:‘新生代’和‘老生代’的大小比率</span><br><span class="line">     SurvivorRatio    = 8 //对应jvm启动参数-XX:SurvivorRatio=设置年轻代中Eden区与Survivor区的大小比值 </span><br><span class="line">     PermSize         = 21757952 (20.75MB)  //对应jvm启动参数-XX:PermSize=&lt;value&gt;:设置JVM堆的‘永生代’的初始大小</span><br><span class="line">     MaxPermSize      = 85983232 (82.0MB)//对应jvm启动参数-XX:MaxPermSize=&lt;value&gt;:设置JVM堆的‘永生代’的最大大小</span><br><span class="line">     G1HeapRegionSize = 0 (0.0MB)  </span><br><span class="line"></span><br><span class="line">  Heap Usage://堆内存使用情况</span><br><span class="line">  PS Young Generation</span><br><span class="line">  Eden Space://Eden区内存分布</span><br><span class="line">     capacity = 33030144 (31.5MB)//Eden区总容量</span><br><span class="line">     used     = 1524040 (1.4534378051757812MB)  //Eden区已使用</span><br><span class="line">     free     = 31506104 (30.04656219482422MB)  //Eden区剩余容量</span><br><span class="line">     4.614088270399305% used //Eden区使用比率</span><br><span class="line">  From Space:  //其中一个Survivor区的内存分布</span><br><span class="line">     capacity = 5242880 (5.0MB)</span><br><span class="line">     used     = 0 (0.0MB)</span><br><span class="line">     free     = 5242880 (5.0MB)</span><br><span class="line">     0.0% used</span><br><span class="line">  To Space:  //另一个Survivor区的内存分布</span><br><span class="line">     capacity = 5242880 (5.0MB)</span><br><span class="line">     used     = 0 (0.0MB)</span><br><span class="line">     free     = 5242880 (5.0MB)</span><br><span class="line">     0.0% used</span><br><span class="line">  PS Old Generation //当前的Old区内存分布</span><br><span class="line">     capacity = 86507520 (82.5MB)</span><br><span class="line">     used     = 0 (0.0MB)</span><br><span class="line">     free     = 86507520 (82.5MB)</span><br><span class="line">     0.0% used</span><br><span class="line">  PS Perm Generation//当前的 “永生代” 内存分布</span><br><span class="line">     capacity = 22020096 (21.0MB)</span><br><span class="line">     used     = 2496528 (2.3808746337890625MB)</span><br><span class="line">     free     = 19523568 (18.619125366210938MB)</span><br><span class="line">     11.337498256138392% used  </span><br><span class="line"></span><br><span class="line">  670 interned Strings occupying 43720 bytes.</span><br></pre></td></tr></table></figure><p>可以很清楚的看到 Java 堆中各个区域目前的情况。</p><h4 id="histo"><a href="#histo" class="headerlink" title="-histo"></a>-histo</h4><p>打印堆的对象统计，包括对象数、内存大小等等 （因为在 dump:live 前会进行 full gc，如果带上 live 则只统计活对象，因此不加 live 的堆大小要大于加 live 堆的大小）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ jmap -histo:live 28920 | more</span><br><span class="line"> num     <span class="comment">#instances         #bytes  class name</span></span><br><span class="line">----------------------------------------------</span><br><span class="line">   1:         83613       12012248  &lt;constMethodKlass&gt;</span><br><span class="line">   2:         23868       11450280  [B</span><br><span class="line">   3:         83613       10716064  &lt;methodKlass&gt;</span><br><span class="line">   4:         76287       10412128  [C</span><br><span class="line">   5:          8227        9021176  &lt;constantPoolKlass&gt;</span><br><span class="line">   6:          8227        5830256  &lt;instanceKlassKlass&gt;</span><br><span class="line">   7:          7031        5156480  &lt;constantPoolCacheKlass&gt;</span><br><span class="line">   8:         73627        1767048  java.lang.String</span><br><span class="line">   9:          2260        1348848  &lt;methodDataKlass&gt;</span><br><span class="line">  10:          8856         849296  java.lang.Class</span><br><span class="line">  ....</span><br></pre></td></tr></table></figure><p><code>class name</code> 是对象类型，说明如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">B  byte</span><br><span class="line">C  char</span><br><span class="line">D  double</span><br><span class="line">F  float</span><br><span class="line">I  int</span><br><span class="line">J  long</span><br><span class="line">Z  boolean</span><br><span class="line">[  数组，如[I表示int[]</span><br><span class="line">[L+类名 其他对象</span><br></pre></td></tr></table></figure><h4 id="permstat"><a href="#permstat" class="headerlink" title="-permstat"></a>-permstat</h4><p>打印Java堆内存的永久保存区域的类加载器的智能统计信息。对于每个类加载器而言，它的名称、活跃度、地址、父类加载器、它所加载的类的数量和大小都会被打印。此外，包含的字符串数量和大小也会被打印。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ jmap -permstat 28920</span><br><span class="line">  Attaching to process ID 28920, please <span class="built_in">wait</span>...</span><br><span class="line">  Debugger attached successfully.</span><br><span class="line">  Server compiler detected.</span><br><span class="line">  JVM version is 24.71-b01</span><br><span class="line">  finding class loader instances ..<span class="keyword">done</span>.</span><br><span class="line">  computing per loader <span class="built_in">stat</span> ..<span class="keyword">done</span>.</span><br><span class="line">  please <span class="built_in">wait</span>.. computing liveness.liveness analysis may be inaccurate ...</span><br><span class="line">  </span><br><span class="line">  class_loader            classes bytes   parent_loader           alive?  <span class="built_in">type</span>  </span><br><span class="line">  &lt;bootstrap&gt;             3111    18154296          null          live    &lt;internal&gt;</span><br><span class="line">  0x0000000600905cf8      1       1888    0x0000000600087f08      dead    sun/reflect/DelegatingClassLoader@0x00000007800500a0</span><br><span class="line">  0x00000006008fcb48      1       1888    0x0000000600087f08      dead    sun/reflect/DelegatingClassLoader@0x00000007800500a0</span><br><span class="line">  0x00000006016db798      0       0       0x00000006008d3fc0      dead    java/util/ResourceBundle<span class="variable">$RBClassLoader</span>@0x0000000780626ec0</span><br><span class="line">  0x00000006008d6810      1       3056      null          dead    sun/reflect/DelegatingClassLoader@0x00000007800500a0</span><br></pre></td></tr></table></figure><h4 id="F"><a href="#F" class="headerlink" title="-F"></a>-F</h4><p>强制模式。如果指定的 pid 没有响应，请使用 <code>jmap -dump</code> 或 <code>jmap -histo</code> 选项。此模式下，不支持 live 子选项。</p><h2 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h2><p>jstack用于生成java虚拟机当前时刻的线程快照。线程快照是当前java虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等。 线程出现停顿的时候通过jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做什么事情，或者等待什么资源。 如果java程序崩溃生成core文件，jstack工具可以用来获得core文件的java stack和native stack的信息，从而可以轻松地知道java程序是如何崩溃和在程序何处发生问题。另外，jstack工具还可以附属到正在运行的java程序中，看到当时运行的java程序的java stack和native stack的信息, 如果现在运行的java程序呈现hung的状态，jstack是非常有用的。</p><h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jstack [option] LVMID</span><br></pre></td></tr></table></figure><h4 id="option-参数"><a href="#option-参数" class="headerlink" title="option 参数"></a>option 参数</h4><ol><li>-F : 当正常输出请求不被响应时，强制输出线程堆栈</li><li>-l : 除堆栈外，显示关于锁的附加信息</li><li>-m : 如果调用到本地方法的话，可以显示C/C++的堆栈</li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ jstack -l 11494|more</span><br><span class="line">2016-07-28 13:40:04</span><br><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (24.71-b01 mixed mode):</span><br><span class="line"></span><br><span class="line"><span class="string">"Attach Listener"</span> daemon prio=10 tid=0x00007febb0002000 nid=0x6b6f waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">        - None</span><br><span class="line"></span><br><span class="line"><span class="string">"http-bio-8005-exec-2"</span> daemon prio=10 tid=0x00007feb94028000 nid=0x7b8c waiting on condition [0x00007fea8f56e000]</span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">        at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">        - parking to <span class="built_in">wait</span> <span class="keyword">for</span>  &lt;0x00000000cae09b80&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>)</span><br><span class="line">        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)</span><br><span class="line">        at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2043)</span><br><span class="line">        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)</span><br><span class="line">        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104)</span><br><span class="line">        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:615)</span><br><span class="line">        at org.apache.tomcat.util.threads.TaskThread<span class="variable">$WrappingRunnable</span>.run(TaskThread.java:61)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:745)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">        - None</span><br><span class="line">      .....</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/ityouknow/p/5714703.html">参考</a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>JVM相关的分析工具有使用过哪些？具体的性能调优步骤吗？</p><p>讲一下 OOM 以及遇到这种情况怎么处理的，是否使用过日志分析工具</p><p>你熟悉的JVM调优参数，使用过哪些调优工具？</p><p>VisualVM:JDK自带JVM可视化工具，能过对内存、gc、cpu、thread、class、变量等等信息进行可视化。</p><p>几种常用的内存调试工具：jmap、jstack、jconsole</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 虚拟机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM_07 参数配置</title>
      <link href="/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM_07%20%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM_07%20%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>在虚拟机运行的过程中，如果可以跟踪系统的运行状态，那么对于问题的故障排查会有一定的帮助，为此，在虚拟机提供了一些跟踪系统状态的参数，使用给定的参数执行Java虚拟机，就可以在系统运行时打印相关日志，用于分析实际问题。我们进行虚拟机参数配置，其实就是围绕着堆、栈、方法区、进行配置。</p><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td style="text-align:left"><code>-Xverify</code></td><td>关闭大部分的类验证措施</td><td><code>java -jar -Xverify:none xx.jar</code></td></tr><tr><td style="text-align:left"></td></tr><tr><td style="text-align:left">栈配置</td></tr><tr><td style="text-align:left"><code>-Xss</code></td><td>指定线程最大的栈空间大小，默认1m</td><td><code>java -jar -Xss1m xx.jar</code></td></tr><tr><td style="text-align:left"></td></tr><tr><td style="text-align:left">堆配置</td></tr><tr><td style="text-align:left"><code>-Xms</code></td><td>启动时初始堆大小，一般跟下面相等</td><td><code>java -jar -Xms256m xx.jar</code></td></tr><tr><td style="text-align:left"><code>-Xmx</code></td><td>获得的最大堆大小，一般跟上面相等</td><td><code>java -jar -Xmx1024m xx.jar</code></td></tr><tr><td style="text-align:left"><code>-Xmn</code></td><td>新生代大小，默认为堆的25%</td><td><code>java -jar -Xmn20m xx.jar</code></td></tr><tr><td style="text-align:left"><code>-XX:MaxPermSize</code></td><td>设置老年代大小</td><td><code>java -jar -XX:MaxPermSize=8 xx.jar</code></td></tr><tr><td style="text-align:left"><code>-XX:NewRatio</code></td><td>老年代和新生代的比例</td><td><code>java -jar -XX:NewRatio=2 xx.jar</code></td></tr><tr><td style="text-align:left"><code>-XX:SurvivorRatio</code></td><td>新生代中Eden空间和From/To空间的比例</td><td><code>java -jar -XX:SurvivorRatio=8 xx.jar</code></td></tr><tr><td style="text-align:left"></td></tr><tr><td style="text-align:left">收集器配置</td></tr><tr><td style="text-align:left"><code>-XX:+UseSerialGC</code></td><td>使用Serial收集器</td><td><code>java -jar -XX:+UseSerialGC xx.jar</code></td></tr><tr><td style="text-align:left"><code>-XX:+UseParallelGC</code></td><td>使用Parallel收集器</td><td><code>java -jar -XX:+UseParallelGC xx.jar</code></td></tr><tr><td style="text-align:left"><code>-XX:+UseParalledlOldGC</code></td><td>使用Parallel Old收集器</td><td><code>java -jar -XX:+UseParalledlOldGC xx.jar</code></td></tr><tr><td style="text-align:left"><code>-XX:+UseConcMarkSweepGC</code></td><td>使用并发收集器</td><td><code>java -jar -XX:+UseConcMarkSweepGC xx.jar</code></td></tr><tr><td style="text-align:left"></td></tr><tr><td style="text-align:left">并行收集器设置</td></tr><tr><td style="text-align:left"><code>-XX:ParallelGCThreads</code></td><td>设置并行收集器收集时使用的CPU数。并行收集/线程数</td><td><code>java -jar -XX:ParallelGCThreads=3 xx.jar</code></td></tr><tr><td style="text-align:left"><code>-XX:MaxGCPauseMillis</code></td><td>设置并行收集最大暂停时间</td><td><code>java -jar -XX:MaxGCPauseMillis=100 xx.jar</code></td></tr><tr><td style="text-align:left"><code>-XX:GCTimeRatio</code></td><td>设置垃圾回收时间占程序运行时间的百分比.公式为1/(1+n)</td><td><code>java -jar -XX:GCTimeRatio=18 xx.jar</code></td></tr><tr><td style="text-align:left"></td></tr><tr><td style="text-align:left">垃圾回收统计信息</td></tr><tr><td style="text-align:left"><code>-XX:+PrintGC</code></td><td>每次触发GC的时候打印相关日志</td><td><code>java -jar -XX:+PrintGC xx.jar</code></td></tr><tr><td style="text-align:left"><code>-XX:+PrintGCDetails</code></td><td>启动时控制台打印各个区的详细情况</td><td><code>java -jar -XX:+PrintGCDetails xx.jar</code></td></tr><tr><td style="text-align:left"><code>-XX:+PrintGCTimeStamps</code></td><td></td><td></td></tr><tr><td style="text-align:left"><code>-Xloggc:filename</code></td></tr><tr><td style="text-align:left"></td></tr><tr><td style="text-align:left">并发收集器设置</td></tr><tr><td style="text-align:left"><code>-XX:+CMSIncrementalMode</code></td><td>设置为增量模式，适用于单CPU情况</td><td><code>java -jar -XX:+CMSIncrementalMode xx.jar</code></td></tr><tr><td style="text-align:left"><code>-XX:ParallelGCThreads</code></td><td>Parallel回收并行处理的线程数，默认CPU核数</td><td><code>java -jar -XX:+ParallelGCThreads=3 xx.jar</code></td></tr><tr><td style="text-align:left"></td></tr><tr><td style="text-align:left">溢出处理</td></tr><tr><td style="text-align:left"><code>-XX:+HeapDumpOnOutOfMemoryError</code></td><td>在内存溢出时导出整个堆信息</td><td><code>java -jar -XX:HeapDumpOnOutOfMemoryError xx.jar</code></td></tr><tr><td style="text-align:left"><code>-XX:HeapDumpPath</code></td><td>设置导出堆的存放路径，跟上面一起用</td><td><code>java -jar -XX:HeapDumpPath=d:/Test03.dump xx.jar</code></td></tr></tbody></table></div><p>默认情况下，<code>-Xms</code> 为物理电脑内存的的 1/64 大小，<code>-Xmx</code> 为物理电脑内存的的 1/4 大小。</p><p>通常情况下，将 <code>-Xms</code> 与 <code>-Xmx</code> 设置为同样的值，防止系统不断的扩容和释放内存，造成不必要的压力。</p><p>通常情况下，JVM 可用的堆内存要少于设定的容量，例如将 <code>-Xmx</code> 设置为 600m，实际可用的是 575m。这是因为 survivor0 和 survivor1 区同时只能用一个。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>JVM性能调优的方法和步骤，JVM的关键性核心参数配置</p><p>你熟悉的JVM调优参数，使用过哪些调优工具？</p><p>用过什么JVM调优命令？</p><p>JVM最常用的参数配置讲讲</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 虚拟机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM_06 垃圾回收器</title>
      <link href="/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM_06%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/"/>
      <url>/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM_06%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>垃圾回收算法是垃圾回收器的理论基础，而垃圾回收器是其具体实现。下面介绍 HotSpot 虚拟机提供的几种垃圾回收器。</p><h2 id="吞吐量、停顿时间"><a href="#吞吐量、停顿时间" class="headerlink" title="吞吐量、停顿时间"></a>吞吐量、停顿时间</h2><p>吞吐量描述的是用户线程执行的时间比上全部运行时间（全部运行时间 = 用户线程时间 + 垃圾回收线程执行时间执行），吞吐量越高，表明系统的资源利用率越高。</p><p>停顿时间表示的是 GC 线程在执行过程中，导致用户线程停顿的时间，如果停顿时间越长，那么用户线程卡顿的时间越长，用户体验越差，因此我们希望的是停顿时间越短越好。</p><p>吞吐量和低延时（停顿时间）这两个指标是对立的，无法同时兼顾两者，如果想追求低延时，那么吞吐量就会下降；如果追求高吞吐量，那么停顿时间就会变长。不过随着目前垃圾回收器的不断发展，越来越多的垃圾回收器都是以「在保证高吞吐量的情况下，尽可能的去追求低延时」为原则，来进行垃圾回收器的实现。</p><blockquote><p>另外还有一个指标就是「内存占用率」，因为垃圾回收器在执行过程中，它也需要占用一定的内存空间，当然我们期望的是内存占用率越小越好，尤其是在服务器内存配置较低的情况下。如果服务器的资源配置很高，内存很大，内存占用率高一点也可以接受。</p></blockquote><h2 id="串行、并行、并发"><a href="#串行、并行、并发" class="headerlink" title="串行、并行、并发"></a>串行、并行、并发</h2><p>串行回收指的是单线程回收，全程 STW。停顿次数少，单次停顿时间长，吞吐量高。</p><p>并行回收指的是多线程回收，全程 STW。停顿次数少，单次停顿时间长，吞吐量高。</p><p><img src="https://oscimg.oschina.net/oscnet/up-0704e3acfd751cb0c7fed5901cf73c9cccf.png" alt=""></p><p>并发回收指的是多线程分阶段回收，只有某阶段会 STW。停顿次数多，单次停顿时间短，吞吐量低。</p><p><img src="https://oscimg.oschina.net/oscnet/up-2e760881402ee830c9cf6f415d3b9f9ccf8.png" alt=""></p><blockquote><p>单核机器使用串行回收可以避免多线程切换，提高回收效率。</p></blockquote><h2 id="Minor-GC、Major-GC、Full-GC"><a href="#Minor-GC、Major-GC、Full-GC" class="headerlink" title="Minor GC、Major GC、Full GC"></a>Minor GC、Major GC、Full GC</h2><p>Minor GC 是发生在年轻代的 GC。</p><p>Major GC 是发生在老年代的 GC。</p><p>Full GC 是全堆 GC，比如元数据区引起年轻代和老年代的回收。</p><h2 id="Serial-Serial-Old"><a href="#Serial-Serial-Old" class="headerlink" title="Serial/Serial Old"></a>Serial/Serial Old</h2><p>最古老的回收器，是一个单线程回收器，用它进行垃圾回收时，必须暂停所有用户线程。Serial 是针对新生代的回收器，采用复制算法；而 Serial Old 是针对老生代的回收器，采用 Mark-Compact 算法。优点是简单高效，缺点是需要暂停用户线程。</p><h2 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h2><p>Seral/Serial Old 的多线程版本，使用多个线程进行垃圾回收。</p><h2 id="Parallel"><a href="#Parallel" class="headerlink" title="Parallel"></a>Parallel</h2><p>Parallel Scavenge 是新生代的并行回收器，回收期间不需要暂停其他线程，采用 Copying 算法。该回收器与前两个回收器不同，主要为了达到一个可控的吞吐量。</p><h2 id="Parallel-Old"><a href="#Parallel-Old" class="headerlink" title="Parallel Old"></a>Parallel Old</h2><p>Parallel Scavenge 的老生代版本，采用 Mark-Compact 算法和多线程。</p><h2 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h2><p>CMS 的全称是 Concurrent-Mark-Sweep 的缩写，翻译过来就是并发标记清除，它是一款「以低停顿时间为目标」的垃圾回收器，特点是低延时。它解决了老年代 GC 时出现长时间卡顿的问题。</p><p>CMS 的工作原理大致分为四个步骤：初始标记、并发标记、重新标记、并发清除。使用参数 <code>-XX:+UseConcMarkSweepGC</code> 即可开启使用 CMS 垃圾回收器。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9LNWNxaWEwdVY4R3pHNU41YWhlN0ZwSWlhYlhhaWNvc3NNSFYzUnlHQVdxd0MyVk1nQ3ZiaDdKNjBraWNpYXNkS0ZhZHFQSGhablRiZnBNeThxaWNoVk1xMG1WQS82NDA?x-oss-process=image/format,png" alt=""></p><p>在 JDK9 中，取消了 ParNew 与 Serial Old、Serial 与 CMS 的搭配组合，并且 CMS 被标记 <code>Deprecated</code>，在 JDK14 中 CMS 被彻底移除。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>只回收老年代和元数据区。</li><li>使用预处理机制，使用内存空间达到一个阈值（默认 92%）就开始回收工作。CMS 的回收机制使得它需要在内存用尽前开始回收操作，否则会导致并发回收失败。</li></ol><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>初始标记<br> 会导致 STW。标记老年代中所有的GC Roots对象，标记年轻代中活着的对象引用到的老年代的对象。</li><li>并发标记<br> 与用户线程同时工作。从“初始标记”阶段标记的对象开始找出所有存活的对象</li><li>预清理阶段<br> 与用户线程同时工作。用来处理前一个阶段因为引用关系改变导致没有标记到的存活对象的，它会扫描所有标记为Direty的Card。</li><li>可终止的预处理<br> 与用户线程同时工作。这个阶段尝试着去承担下一个阶段「重新标记」足够多的工作。这个阶段持续的时间依赖好多的因素，由于这个阶段是重复的做相同的事情直到发生aboart的条件（比如：重复的次数、多少量的工作、持续的时间等等）之一才会停止。</li><li>重新标记<br> 会导致 STW。标记整个年老代的所有的存活对象。</li><li>并发清除<br> 与用户线程同时工作。清除那些没有标记的对象并且回收空间。</li><li>并发重置<br> 与用户线程同时工作。重新设置 CMS 算法内部的数据结构，准备下一个 CMS 生命周期的使用。<h2 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h2>G1（Garbage First）回收器技术的前沿成果，是面向服务端的回收器，能充分利用 CPU 和多核环境。是一款并行与并发回收器，它能够建立可预测的停顿时间模型。</li></ol><h2 id="ZCG"><a href="#ZCG" class="headerlink" title="ZCG"></a>ZCG</h2><h2 id="垃圾回收器组合"><a href="#垃圾回收器组合" class="headerlink" title="垃圾回收器组合"></a>垃圾回收器组合</h2><div class="table-container"><table><thead><tr><th style="text-align:left">Young</th><th>Tenured</th><th>JVM options</th></tr></thead><tbody><tr><td style="text-align:left">Serial</td><td>Serial Old</td><td><code>-XX:+UseSerialGC</code></td></tr><tr><td style="text-align:left">Parallel Scavenge</td><td>Serial</td><td><code>-XX:+UseParallelGC -XX:-UseParallelOldGC</code></td></tr><tr><td style="text-align:left">Parallel Scavenge</td><td>Parallel Old</td><td><code>-XX:+UseParallelGC -XX:+UseParallelOldGC</code></td></tr><tr><td style="text-align:left">Parallel New或Serial</td><td>CMS</td><td><code>-XX:+UseParNewGC</code> <code>-XX:+UseConcMarkSweepGC</code></td></tr><tr><td style="text-align:left">G1</td><td>G1</td><td><code>-XX:+UseG1GC</code></td></tr></tbody></table></div><h2 id="垃圾回收器对比"><a href="#垃圾回收器对比" class="headerlink" title="垃圾回收器对比"></a>垃圾回收器对比</h2><p>待补充。。。</p><div class="table-container"><table><thead><tr><th style="text-align:left">回收器</th><th>范围</th><th>模式</th><th>算法</th><th>特点</th><th>吞吐量</th><th>停顿时间</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:left">Serial</td><td>Young</td><td>Client</td><td>复制</td><td>串行、STW</td><td></td></tr><tr><td style="text-align:left">Serial Old</td><td>Old</td><td>Client、Server</td><td>标记-整理</td><td>串行、STW</td><td></td></tr><tr><td style="text-align:left">ParNew</td><td>Young</td><td>Server</td><td>复制</td><td>并行、STW</td><td></td></tr><tr><td style="text-align:left">Parallel</td><td>Young</td><td></td><td>复制</td><td>并行、STW</td><td>99%</td></tr><tr><td style="text-align:left">Parallel Old</td><td>Old</td><td></td><td>标记-整理</td><td>并行、STW</td><td>99%</td><td>200ms</td></tr><tr><td style="text-align:left">CMS</td><td>Old</td><td></td><td>标记-清除</td><td>并行、少量 STW</td><td></td></tr><tr><td style="text-align:left">G1</td><td>Young、Old</td><td>Server</td><td>标记-整理</td><td>并行、少量 STW</td><td>97%</td><td>210ms</td><td>Java9 默认</td></tr><tr><td style="text-align:left">ZGC</td><td></td><td></td><td></td><td>并行、少量 STW</td><td>98%</td><td>2ms</td><td>实验性</td></tr></tbody></table></div><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>GC 回收器有哪些？<br>经典 7 种。GMS</p><p>讲一下各种 GC 回收器的出现时间、原理、优缺点。</p><h4 id="GMS"><a href="#GMS" class="headerlink" title="GMS"></a>GMS</h4><p>CMS 解决什么问题，说一下回收的过程。</p><p>CMS 回收停顿了几次，为什么要停顿两次。</p><p>CMS哪个阶段是并发的，哪个阶段是串行的？</p><h4 id="G1-1"><a href="#G1-1" class="headerlink" title="G1"></a>G1</h4><p>G1 的内存模型讲一下。</p><p>G1 回收器讲下回收过程。</p><p>G1 对 CMS 的有哪些改进？</p><p>G1 和 GMS 最大的区别在哪里？</p><p>GC、G1 和 ZGC 的区别。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 虚拟机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM_05 垃圾回收机制</title>
      <link href="/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM_05%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM_05%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM的垃圾回收机制"><a href="#JVM的垃圾回收机制" class="headerlink" title="JVM的垃圾回收机制"></a>JVM的垃圾回收机制</h2><h2 id="名称解释"><a href="#名称解释" class="headerlink" title="名称解释"></a>名称解释</h2><ol><li>YGC 对新生代堆进行gc。频率比较高，因为大部分对象的存活寿命较短，在新生代里被回收。性能耗费较小。</li><li>FGC 全堆范围的gc。默认堆空间使用到达80%(可调整)的时候会触发fgc。以我们生产环境为例，一般比较少会触发fgc，有时10天或一周左右会有一次。</li></ol><h2 id="什么时候执行YGC和FGC"><a href="#什么时候执行YGC和FGC" class="headerlink" title="什么时候执行YGC和FGC"></a>什么时候执行YGC和FGC</h2><p>a.edn空间不足,执行 young gc<br>b.old空间不足，perm空间不足，调用方法System.gc() ，ygc时的悲观策略, dump live的内存信息时(jmap –dump:live)，都会执行full gc</p><h2 id="如何确认垃圾"><a href="#如何确认垃圾" class="headerlink" title="如何确认垃圾"></a>如何确认垃圾</h2><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p>一个对象如果没有任何与之关联的引用，则说明对象不太可能再被用到，那么这个对象就是可回收对象。这种方式即是引用计数法。</p><p>这种方式的问题是无法解决循环引用的问题。</p><h4 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h4><p>通过一系列的“GC roots”对象作为起点搜索。如果在“GC roots”和一个对象之间没有可达路径，则称该对象是不可达的。要注意的是，不可达对象不等价于可回收对象，不可达对象变为可回收对象至少要经过两次标记过程。两次标记后仍然是可回收对象，则将面临回收。</p><p>所谓“GC roots”，或者说 Tracing GC 的“根集合”，就是一组必须活跃的引用。例如说，这些引用可能包括：</p><ol><li>所有Java线程当前活跃的栈帧里指向GC堆里的对象的引用；换句话说，当前所有正在被调用的方法的引用类型的参数/局部变量/临时值。</li><li>VM的一些静态数据结构里指向GC堆里的对象的引用，例如说HotSpot VM里的Universe里有很多这样的引用。</li><li>JNI handles，包括global handles和local handles（看情况）</li><li>所有当前被加载的Java类（看情况）</li><li>Java类的引用类型静态变量（看情况）</li><li>Java类的运行时常量池里的引用类型常量（String或Class类型）（看情况）</li><li>String常量池（StringTable）里的引用</li></ol><p>比较常见的将对象视为可回收对象的原因：</p><ol><li>显式地将对象的唯一强引用指向新的对象</li><li>显式地将对象的唯一强引用赋值为Null</li><li>局部引用所指向的对象（如，方法内对象）</li></ol><h2 id="回收算法"><a href="#回收算法" class="headerlink" title="回收算法"></a>回收算法</h2><h4 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h4><p>首先标记出所有需要回收的对象，使用可达性分析算法判断一个对象是否为可回收，在标记完成后统一回收所有被标记的对象。</p><p><img src="https://images2015.cnblogs.com/blog/568153/201707/568153-20170713133044525-1749754709.png" alt=""></p><p>优缺点：</p><ol><li>效率问题，标记和清除两个阶段的效率都不高。</li><li>空间问题，标记清除后会产生大量不连续的内存碎片，以后需要给大对象分配内存时，会提前触发一次垃圾回收动作。</li></ol><h4 id="复制算法（Copying）"><a href="#复制算法（Copying）" class="headerlink" title="复制算法（Copying）"></a>复制算法（Copying）</h4><p>将内存分为两等块，每次使用其中一块。当这一块内存用完后，就将还存活的对象复制到另外一个块上，然后再把已使用过的内存空间一次清理掉。</p><p><img src="https://images2015.cnblogs.com/blog/568153/201707/568153-20170713133054775-540568584.png" alt=""></p><p>优缺点：<br>1、无内存碎片问题，实现简单，时间效率高。<br>2、空间利用率低，可用内存缩小为原来的一半。</p><p>适合于每次回收时大量对象死去只有少量存活的情况，如年轻代中。</p><h4 id="标记-整理算法（Mark-Compact）"><a href="#标记-整理算法（Mark-Compact）" class="headerlink" title="标记-整理算法（Mark-Compact）"></a>标记-整理算法（Mark-Compact）</h4><p>标记过程与标记 - 清除算法一样，但之后让所有存活的对象移向一端，然后直接清理掉边界以外的内存。</p><p><img src="https://images2015.cnblogs.com/blog/568153/201707/568153-20170713133101400-240030919.png" alt=""></p><p>适合对象存活率高的情况，如老年代中。无需考虑内存碎片问题。</p><h4 id="分代收集算法（Generational-Collection）"><a href="#分代收集算法（Generational-Collection）" class="headerlink" title="分代收集算法（Generational Collection）"></a>分代收集算法（Generational Collection）</h4><p>根据对象存活周期将堆分为新生代和老年代，然后根据各年代特点选择适当的回收算法。</p><p>新生代基本上对象都是朝生暮死的，生存时间很短暂，因此可采用复制算法，只需要复制少量的对象就可以完成垃圾收集。</p><p>老年代中的对象存活率高，也没有额外的空间进行分配担保，因此必须使用标记-整理或者标记-清除算法进行回收，只需要清除少量对象即可完成垃圾收集。</p><p>JVM什么时候会触发YGC，什么时候触发FGC？</p><p>JVM如何内存调优、内存泄漏如何排查</p><p><a href="https://www.cnblogs.com/z-sm/p/6243378.html">https://www.cnblogs.com/z-sm/p/6243378.html</a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><p>谈谈 Java GC</p><p>GC 触发条件</p><p>GC 原理</p><p>JVM垃圾回收算法和垃圾回收器有哪些，最新的JDK采用什么算法。</p><p>JVM 的垃圾回收机制和垃圾收集器</p><p>说一下GC吧，什么时候进行Full GC呢？</p><p>jvm GC原理，JVM怎么回收内存</p><p>Java对象的回收方式，回收算法。</p><p>JVM有哪些回收算法，对应的收集器有哪些？</p><p>Minor GC与Full GC分别发生在什么时候</p><p>GC的三种三种收集方法：标记清除，标记整理，复制算法的原理与特点，分别用于什么地方，如果让你优化收集算法，有什么思路</p><h4 id="确认垃圾"><a href="#确认垃圾" class="headerlink" title="确认垃圾"></a>确认垃圾</h4><p>GC 可达性分析中哪些算是GC ROOT？</p><p>GC的两种判定方法：引用计数器和引用链</p><h4 id="回收算法-1"><a href="#回收算法-1" class="headerlink" title="回收算法"></a>回收算法</h4><p>JAVA的垃圾回收，标记算法和复制算法的区别，用在什么场合？</p><p>GC回收算法,及实现原理?</p><p>垃圾收集算法</p><p>JVM的垃圾回收算法有哪些</p><p>JVM GC算法有哪些，目前的JDK版本采用什么回收算法</p><p>有哪些回收算法，对应的收集器有哪些？</p><p>Java对象的回收方式，回收算法。</p><p>Java内存分代模型，GC算法，JVM常见的启动参数； CMS算法的过程。</p><p>说一下GC吧，什么时候进行Full GC呢？</p><p>内存泄漏与内存溢出的区别</p><p>GC、G1 和 ZGC 的区别</p><p>JAVA的垃圾回收，标记算法和复制算法的区别，用在什么场合？</p><p>JVM中的老年代在什么情况下会触发GC？</p><p>jvm虚拟机老年代什么情况下会发生gc，给你一个场景，一台4核8G的服务器，每隔两个小时就要出现一次老年代gc，现在有日志，怎么分析是哪里出了问题</p><p>java GC算法，什么时候会触发minor gc，什么时候会触发full gc？</p><p>新生代和老年代的回收机制。</p><p>什么时候fullGC？</p><p>目前的JDK使用的是什么垃圾回收算法，为什么要用这个算法？</p><p>GC垃圾收集算法、GC垃圾收集器有哪些，以及新生代老生代 分别用什么算法</p><p>讲一下JVM的分代回收以及具体算法</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 虚拟机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-ReentrantLock</title>
      <link href="/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-ReentrantLock/"/>
      <url>/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-ReentrantLock/</url>
      
        <content type="html"><![CDATA[<p>前面我们已经学习过了 <code>synchronized</code>，这个关键字可以确保对象在并发访问中的原子性、可见性和有序性，这个关键字的底层交由了JVM 通过 C++ 来实现，既然是 JVM 实现，就依赖于 JVM，程序员就无法在 Java 层面进行扩展和优化，肯定就灵活性不高，比如程序员在使用时就无法中断一个正在等待获取锁的线程，或者无法在请求一个锁时无限的等待下去。</p><p>基于这样一个背景，Doug Lea 构建了一个在内存语义上和 <code>synchronized</code> 一样效果的 Java 类，同时还扩展了其他一些高级特性，比如定时的锁等待、可中断的锁等待和公平性等，这个类就是 <code>ReentrantLock</code>。</p><blockquote><p>在 JDK1.5 里面，ReentrantLock 的性能是明显优于 synchronized 的，但是在 JDK1.6 里面，synchronized 做了优化，他们之间的性能差别已经不明显了。</p></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h4 id="普通的线程锁"><a href="#普通的线程锁" class="headerlink" title="普通的线程锁"></a>普通的线程锁</h4><p>这种用法和 <code>synchronized</code> 效果是一样的，但是必须显示的声明 <code>lock</code> 和 <code>unlock</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   lock.lock();</span><br><span class="line">   <span class="comment">//……</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">   lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="带限制的锁"><a href="#带限制的锁" class="headerlink" title="带限制的锁"></a>带限制的锁</h4><p>体可查看 github 链接里面的 ReentrantLockTest。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span>                              <span class="comment">// 尝试获取锁,立即返回获取结果 轮询锁</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span>   <span class="comment">//尝试获取锁,最多等待 timeout 时长 超时锁</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span>                       <span class="comment">//可中断锁,调用线程 interrupt 方法,则锁方法抛出 InterruptedException  中断锁</span></span></span><br></pre></td></tr></table></figure><h4 id="等待-通知模型"><a href="#等待-通知模型" class="headerlink" title="等待/通知模型"></a>等待/通知模型</h4><p>内置队列存在一些缺陷，每个内置锁只能关联一个条件队列(_WaitSet)，这导致多个线程可能会在同一个条件队列上等待不同的条件谓词，如果每次使用 <code>notify</code> 唤醒条件队列，可能会唤醒错误的线程导致唤醒失败，但是如果使用 <code>notifyAll</code> 的话，能唤醒到正确的线程，因为所有的线程都会被唤醒，这也带来一个问题，就是不应该被唤醒的在被唤醒后发现不是自己等待的条件谓词转而又被挂起。</p><p>这样的操作会带来系统的资源浪费，降低系统性能。这个时候推荐使用显式的 <code>Lock</code> 和 <code>Condition</code> 来替代内置锁和条件队列，从而控制多个条件谓词的情况，达到精确的控制线程的唤醒和挂起。具体后面再来分析下JVM的内置锁、条件队列模型和显式的 <code>Lock</code>、<code>Condition</code> 模型，实际上在 AQS 里面也提到了 <code>Lock</code>、<code>Condition</code> 模型。</p><h2 id="和-synchronized-比较"><a href="#和-synchronized-比较" class="headerlink" title="和 synchronized 比较"></a>和 synchronized 比较</h2><ol><li><p>原始构成<br>sychronized 是关键字属于 JVM 层面。<br>monitorenter + monitorexit（底层通过monitor对象来完成，其实）</p><p>Lock 是具体类，是 api 层面。</p></li><li><p>使用方法<br>synchronized 不需要用户去手动释放锁，当 synchronized 代码执行完后系统会自动让线程释放对锁的占用。<br>ReentrantLock 则需要用户去手动释放锁，若没有主动释放锁，就有可能导致死锁现象。</p></li><li><p>加锁是否公平<br>synchronized  非公平锁。<br>ReentrantLock 两者都可以，默认非公平锁。可在构造方法传入 boolean 值，true 为公平锁，false 为非公平锁。</p></li><li><p>等待是否可中断<br>synchronzied 不可中断，除非正常运行完成或异常抛出。<br>ReentranLock 可中断（1）设置超时时间 （2）lockInterruptiry() 放代码块中。</p></li><li><p>锁绑定多个条件<br>synchronized  没有<br>ReentrantLock 用来实现分组唤醒需要唤醒的线程，可以精确唤醒，而不是像 synchronized 要么随机唤醒一个线程要么唤醒全部线程。</p></li></ol><h2 id="源码原理解析"><a href="#源码原理解析" class="headerlink" title="源码原理解析"></a>源码原理解析</h2><h4 id="可重入性原理"><a href="#可重入性原理" class="headerlink" title="可重入性原理"></a>可重入性原理</h4><p>在 <code>synchronized</code> 一文中，我们认为 <code>synchronized</code> 是一种重量级锁，它的实现对应的是 C++ 的 <code>ObjectMonitor</code>，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ObjectMonitor() &#123;</span><br><span class="line">   _header       = <span class="literal">NULL</span>;</span><br><span class="line">   _count        = <span class="number">0</span>;    <span class="comment">//记录线程获取锁的次数</span></span><br><span class="line">   _waiters      = <span class="number">0</span>;</span><br><span class="line">   _recursions   = <span class="number">0</span>;    <span class="comment">//锁的重入次数</span></span><br><span class="line">   _object       = <span class="literal">NULL</span>;</span><br><span class="line">   _owner        = <span class="literal">NULL</span>; <span class="comment">//指向持有ObjectMonitor对象的线程</span></span><br><span class="line">   _WaitSet      = <span class="literal">NULL</span>; <span class="comment">//等待条件队列 类似AQS的ConditionObject</span></span><br><span class="line">   _WaitSetLock  = <span class="number">0</span> ;</span><br><span class="line">   _Responsible  = <span class="literal">NULL</span> ;</span><br><span class="line">   _succ         = <span class="literal">NULL</span> ;</span><br><span class="line">   _cxq          = <span class="literal">NULL</span> ;</span><br><span class="line">   FreeNext      = <span class="literal">NULL</span> ;</span><br><span class="line">   _EntryList    = <span class="literal">NULL</span> ; <span class="comment">//同步队列 类似AQS的CLH队列</span></span><br><span class="line">   _SpinFreq     = <span class="number">0</span> ;</span><br><span class="line">   _SpinClock    = <span class="number">0</span> ;</span><br><span class="line">   OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">   _previous_owner_tid = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中可以看到 <code>synchronized</code> 实现的锁的重入依赖于 JVM，JVM 为每个对象的锁关联一个计数器 <code>_count</code> 和一个所有者线程 <code>_owner</code>，当计数器为 0 的时候就认为锁没有被任何线程持有，当线程请求一个未被持有的锁时，JVM 就记下锁的持有者，并将计数器的值设置为 1，如果是同一个线程再次获取这个锁，计数器的值递增，而当线程退出时，计数器的值递减，直到计数器为 0 时，锁被释放。</p><p><code>ReentrantLock</code> 实现了在内存语义上的 <code>synchronized</code>，固然也是支持可重入的，那么 <code>ReentrantLock</code> 是如何支持的呢，让我们以非公平锁的实现看下 <code>ReentrantLock</code> 的可重入，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">final</span> Thread current = Thread.currentThread();<span class="comment">//当前线程</span></span><br><span class="line">   <span class="keyword">int</span> c = getState();</span><br><span class="line">   <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;<span class="comment">//表示锁未被抢占</span></span><br><span class="line">         <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;<span class="comment">//获取到同步状态</span></span><br><span class="line">            setExclusiveOwnerThread(current); <span class="comment">//当前线程占有锁</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<span class="comment">//线程已经占有锁了 重入</span></span><br><span class="line">         <span class="keyword">int</span> nextc = c + acquires;<span class="comment">//同步状态记录重入的次数</span></span><br><span class="line">         <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">         setState(nextc);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> c = getState() - releases; <span class="comment">//既然可重入 就需要释放重入获取的锁</span></span><br><span class="line">   <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">   <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line">   <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">         free = <span class="keyword">true</span>;<span class="comment">//只有线程全部释放才返回true</span></span><br><span class="line">         setExclusiveOwnerThread(<span class="keyword">null</span>); <span class="comment">//同步队列的线程都可以去获取同步状态了</span></span><br><span class="line">   &#125;</span><br><span class="line">   setState(c); </span><br><span class="line">   <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这也就明白了上文说的 <code>ReentrantLock</code> 类使用 AQS 同步状态来保存锁重复持有的次数。当锁被一个线程获取时，<code>ReentrantLock</code> 也会记录下当前获得锁的线程标识，以便检查是否是重复获取，以及当错误的线程试图进行解锁操作时检测是否存在非法状态异常。</p><h4 id="获取和释放锁"><a href="#获取和释放锁" class="headerlink" title="获取和释放锁"></a>获取和释放锁</h4><p>如下是获取和释放锁的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   sync.lock();<span class="comment">//获取锁</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   sync.release(<span class="number">1</span>); <span class="comment">//释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取锁的时候依赖的是内部类 <code>Sync</code> 的 <code>lock()</code> 方法，该方法又有 2 个实现类方法，分别是非公平锁 <code>NonfairSync</code> 和公平锁 <code>FairSync</code>，具体咱们下一小节分析。再来看下释放锁，释放锁的时候实际调用的是 AQS 的 <code>release</code> 方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (tryRelease(arg)) &#123;<span class="comment">//调用子类的tryRelease 实际就是Sync的tryRelease</span></span><br><span class="line">      Node h = head;<span class="comment">//取同步队列的头节点</span></span><br><span class="line">      <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)<span class="comment">//同步队列头节点不为空且不是初始状态</span></span><br><span class="line">            unparkSuccessor(h);<span class="comment">//释放头节点 唤醒后续节点</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Sync</code> 的 <code>tryRelease</code> 就是上一小节的重入释放方法，如果是同一个线程，那么锁的重入次数就依次递减，直到重入次数为 0，此方法才会返回 true，此时断开头节点唤醒后续节点去获取 AQS 的同步状态。</p><h4 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h4><p>公平锁还是非公平锁取决于 <code>ReentrantLock</code> 的构造方法，默认无参构造方法是 <code>NonfairSync</code>，含参构造方法，入参 <code>true</code> 为 <code>FairSync</code>，入参 <code>false</code> 为 <code>NonfairSync</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">   sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再分别来看看非公平锁和公平锁的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7316153563782823691L</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Performs lock.  Try immediate barge, backing up to normal</span></span><br><span class="line"><span class="comment">   * acquire on failure.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))<span class="comment">//通过CAS来获取同步状态 也就是锁</span></span><br><span class="line">            setExclusiveOwnerThread(Thread.currentThread());<span class="comment">//获取成功线程占有锁</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">            acquire(<span class="number">1</span>);<span class="comment">//获取失败 进入AQS同步队列排队等待 执行AQS的acquire方法 </span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 AQS 的 <code>acquire</code> 方法中先调用子类 <code>tryAcquire</code>，也就是 <code>nonfairTryAcquire</code>，见 2.1 小节。可以看出非公平锁中，抢到AQS的同步状态的未必是同步队列的首节点，只要线程通过 CAS 抢到了同步状态或者在 <code>acquire</code> 中抢到同步状态，就优先占有锁，而相对同步队列这个严格的FIFO队列来说，所以会被认为是非公平锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3000897897090466540L</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      acquire(<span class="number">1</span>);<span class="comment">//严格按照AQS的同步队列要求去获取同步状态</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Fair version of tryAcquire.  Don't grant access unless</span></span><br><span class="line"><span class="comment">   * recursive call or no waiters or is first.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> Thread current = Thread.currentThread();<span class="comment">//获取当前线程</span></span><br><span class="line">      <span class="keyword">int</span> c = getState();</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;<span class="comment">//锁未被抢占</span></span><br><span class="line">            <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;<span class="comment">//没有前驱节点</span></span><br><span class="line">               compareAndSetState(<span class="number">0</span>, acquires)) &#123;<span class="comment">//CAS获取同步状态</span></span><br><span class="line">               setExclusiveOwnerThread(current);</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<span class="comment">//锁已被抢占且线程重入</span></span><br><span class="line">            <span class="keyword">int</span> nextc = c + acquires;<span class="comment">//同步状态为重入次数</span></span><br><span class="line">            <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">            setState(nextc);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公平锁的实现直接调用 AQS 的 <code>acquire</code> 方法，<code>acquire</code> 中调用 <code>tryAcquire</code>。和非公平锁相比，这里不会执行一次 CAS，接下来在 <code>tryAcquire</code> 去抢占锁的时候，也会先调用 <code>hasQueuedPredecessors</code> 看看前面是否有节点已经在等待获取锁了，如果存在则同步队列的前驱节点优先。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasQueuedPredecessors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// The correctness of this depends on head being initialized</span></span><br><span class="line">   <span class="comment">// before tail and on head.next being accurate if the current</span></span><br><span class="line">   <span class="comment">// thread is first in queue.</span></span><br><span class="line">   Node t = tail; <span class="comment">// Read fields in reverse initialization order 尾节点</span></span><br><span class="line">   Node h = head;<span class="comment">//头节点</span></span><br><span class="line">   Node s;</span><br><span class="line">   <span class="keyword">return</span> h != t &amp;&amp;<span class="comment">//头尾节点不是一个 即队列存在排队线程</span></span><br><span class="line">      ((s = h.next) == <span class="keyword">null</span> || s.thread != Thread.currentThread());<span class="comment">//头节点的后续节点为空或者不是当前线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然公平锁看起来在公平性上比非公平锁好，但是公平锁为此付出了大量线程切换的代价，而非公平锁在锁的获取上不能保证公平，就有可能出现锁饥饿，即有的线程多次获取锁而有的线程获取不到锁，没有大量的线程切换保证了非公平锁的吞吐量。</p><h4 id="多线程之间按顺序执行，实现-A-gt-B-gt-C-三个线程启动，要求如下："><a href="#多线程之间按顺序执行，实现-A-gt-B-gt-C-三个线程启动，要求如下：" class="headerlink" title="多线程之间按顺序执行，实现 A -&gt; B -&gt; C 三个线程启动，要求如下："></a>多线程之间按顺序执行，实现 A -&gt; B -&gt; C 三个线程启动，要求如下：</h4><ol><li>A 打印 5 次，B 打印 10 次，C 打印 15 次；</li><li>A 打印 5 次，B 打印 10 次，C 打印 15 次；</li><li>来 10 轮；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标志位 A:1 B:2 C:3</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 锁</span></span><br><span class="line"><span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="comment">// 唤醒条件</span></span><br><span class="line"><span class="keyword">private</span> Condition c1 = lock.newCondition();</span><br><span class="line"><span class="keyword">private</span> Condition c2 = lock.newCondition();</span><br><span class="line"><span class="keyword">private</span> Condition c3 = lock.newCondition();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 判断，避免虚假唤醒</span></span><br><span class="line">        <span class="keyword">while</span> (number != <span class="number">1</span>) &#123;</span><br><span class="line">            c1.await();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 打印5次</span></span><br><span class="line">        System.out.print(Thread.currentThread().getName() + <span class="string">" \t"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 3. 通知</span></span><br><span class="line">        number = <span class="number">2</span>;</span><br><span class="line">        c2.signal();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print10</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print15</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ShareResource shareResource = <span class="keyword">new</span> ShareResource();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            shareResource.print5();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">"A"</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            shareResource.print10();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">"B"</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            shareResource.print15();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">"C"</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A 0 1 2 3 4 </span><br><span class="line">B 0 1 2 3 4 5 6 7 8 9 </span><br><span class="line">C 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 </span><br><span class="line">A 0 1 2 3 4 </span><br><span class="line">B 0 1 2 3 4 5 6 7 8 9 </span><br><span class="line">C 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 </span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-synchronized 关键字</title>
      <link href="/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-synchronized%20%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-synchronized%20%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p><code>synchronized</code> 是 Java 中解决并发问题的一种最常用的方法，也是最简单的一种方法。</p><p><code>synchronized</code> 的作用主要有三个：</p><ol><li>确保线程互斥的访问同步代码</li><li>保证共享变量的修改能够及时可见</li><li>有效解决重排序问题。</li></ol><h2 id="线程同步问题"><a href="#线程同步问题" class="headerlink" title="线程同步问题"></a>线程同步问题</h2><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p><code>synchronized</code> 总共有三种用法：</p><ol><li><p>修饰普通方法</p></li><li><p>修饰静态方法</p></li><li><p>修饰代码块</p></li></ol><h2 id="深入原理"><a href="#深入原理" class="headerlink" title="深入原理"></a>深入原理</h2><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-volatile 关键字</title>
      <link href="/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-volatile%20%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-volatile%20%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>从是什么、有什么、为什么、如何用、底层原理等几个维度分析 <code>volatile</code> 关键字。</p><h4 id="volatile-是什么"><a href="#volatile-是什么" class="headerlink" title="volatile 是什么"></a>volatile 是什么</h4><p><code>volatile</code> 关键字是 Java 虚拟机提供的一个轻量级（乞丐版 <code>synchronized</code>）同步机制。</p><h4 id="volatile-出现背景"><a href="#volatile-出现背景" class="headerlink" title="volatile 出现背景"></a>volatile 出现背景</h4><ol><li>多线程出现的可见性、有序性问题。</li><li>和 <code>synchronized</code> 的比较<br><code>volatile</code> 是一种非锁机制，这种机制可以避免锁机制引起的上下文切换。</li></ol><p><code>volatile</code> 和 <code>synchronized</code> 的区别：</p><ol><li><code>volatile</code> 本质是在告诉 JVM 当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； <code>synchronized</code> 则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住；</li><li><code>volatile</code> 仅能使用在变量级别；<code>synchronized</code> 则可以使用在变量、方法、和类级别的；</li><li><code>volatile</code> 仅能实现变量的修改可见性，不能保证原子性；而 <code>synchronized</code> 则可以保证变量的修改可见性和原子性；</li><li><code>volatile</code> 不会造成线程的阻塞；<code>synchronized</code> 可能会造成线程的阻塞。</li><li><code>volatile</code> 标记的变量不会被编译器优化；<code>synchronized</code> 标记的变量可以被编译器优化；</li></ol><h4 id="volatile-基本使用"><a href="#volatile-基本使用" class="headerlink" title="volatile 基本使用"></a>volatile 基本使用</h4><p>直接修饰变量，参考保证可见性和禁止指令重排。</p><h4 id="volatile-特点特性"><a href="#volatile-特点特性" class="headerlink" title="volatile 特点特性"></a>volatile 特点特性</h4><p><code>volatile</code> 基本上准守了 JMM 的规范，有以下 3 个特性：</p><ol><li><p>保证可见性</p></li><li><p>保证有序性</p></li><li><p>不保证原子性（没有准守 JMM 规范）</p></li></ol><p>保证可见性：先来看这么一段程序，线程 T1 调用了 useData 方法，该方法判断 <code>initFlag</code> 是否为 true，不是则一直循环等待。线程 T2 修改了 <code>initFlag</code> 为 true，但是线程 T1 没有获取，程序一直在死循环中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SharaData sharaData = <span class="keyword">new</span> SharaData();</span><br><span class="line">        <span class="comment">// 1. 一个线程使用数据</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; sharaData.useData(), <span class="string">"T1"</span>).start();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">// 2. 一个线程准备使用</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; sharaData.prepareData(), <span class="string">"T2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharaData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> initFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepareData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"prepareing data start..."</span>);</span><br><span class="line">        initFlag = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">"prepareing data finish..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"waiting data..."</span>);</span><br><span class="line">        <span class="keyword">while</span> (!initFlag) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"===============success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line">waiting data...</span><br><span class="line">prepareing data start...</span><br><span class="line">prepareing data finish...</span><br></pre></td></tr></table></figure><p>这时候我们只需要对 <code>initFlag</code> 字段加上 <code>volatile</code> 修饰，另外一个线程即可获取 <code>initFlag</code>  字段的变更：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SharaData sharaData = <span class="keyword">new</span> SharaData();</span><br><span class="line">        <span class="comment">// 1. 一个线程使用数据</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; sharaData.useData(), <span class="string">"T1"</span>).start();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">// 2. 一个线程准备使用</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; sharaData.prepareData(), <span class="string">"T2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharaData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> initFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepareData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"prepareing data start..."</span>);</span><br><span class="line">        initFlag = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">"prepareing data finish..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"waiting data..."</span>);</span><br><span class="line">        <span class="keyword">while</span> (!initFlag) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"===============success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line">waiting data...</span><br><span class="line">prepareing data start...</span><br><span class="line">prepareing data finish...</span><br><span class="line">===============success</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>保证有序性：<code>volatile</code> 实现了禁止指令重拍优化，从而避免多线程环境下程序出现乱序执行的现象。</p><p>请看下面一段代码，在多线程环境下，语句 1 和 语句 2 可能会发生重排。语句 3 和 语句 4 也可能会发生重排。结果都和预想的不一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>     a    = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   a    = <span class="number">1</span>;      <span class="comment">// 语句 1</span></span><br><span class="line">   flag = <span class="keyword">true</span>;   <span class="comment">// 语句 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      a = a + <span class="number">5</span>;                                <span class="comment">// 语句 3</span></span><br><span class="line">      System.out.println(<span class="string">"****retValue: "</span> + a); <span class="comment">// 语句 4</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用 <code>volatile</code> 修饰后，结果即可正确：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span>     a    = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   a    = <span class="number">1</span>;      <span class="comment">// 语句 1</span></span><br><span class="line">   flag = <span class="keyword">true</span>;   <span class="comment">// 语句 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      a = a + <span class="number">5</span>;                                <span class="comment">// 语句 3</span></span><br><span class="line">      System.out.println(<span class="string">"****retValue: "</span> + a); <span class="comment">// 语句 4</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不保证原子性：原子性即不可分割，完整性，也即某个线程正在做某个具体业务时，中间不可加塞或者被分割。需要整体完整要么同时成功，要么同时失败。</p><p><code>volatile</code> 不保证原子性，参考下面例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SharaData sharaData = <span class="keyword">new</span> SharaData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 启动20个线程去添加数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; sharaData.plus1000()).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 需要等待上面线程都计算完毕，再使用main线程取得最终结果值</span></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 查看最终结果</span></span><br><span class="line">        System.out.println(<span class="string">"Count: "</span> + sharaData.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharaData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">plus1000</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line">Count: <span class="number">9146</span></span><br></pre></td></tr></table></figure><h4 id="volatile-底层原理"><a href="#volatile-底层原理" class="headerlink" title="volatile 底层原理"></a>volatile 底层原理</h4><p>保证可见性：<code>volatile</code> 关键字解决的问题就是：当一个线程写入该值后，另一个线程读取的必定是新值。</p><p><code>volatile</code> 保证了修饰的共享变量在转换为汇编语言时，会加上一个以 <code>lock</code> 为前缀的指令，当 CPU 发现这个指令时，立即会做两件事情：</p><ol><li><p>将当前内核中线程工作内存中该共享变量刷新到主存；</p></li><li><p>通知其他内核里缓存的该共享变量内存地址无效；</p></li></ol><p>参考：MESI 协议</p><p>保证有序性：<code>volatile</code> 可以禁止指令重排，这就保证了代码的程序会严格按照代码的先后顺序执行，保证了有序性。被 <code>volatile</code> 修饰的变量的操作，会严格按照代码顺序执行。</p><p>接下来我们就说一下为了实现 <code>volatile</code> 内存语义 JMM 是怎样限制重排序（包括编译器重排序和处理器重排序）的。</p><p>为了实现 <code>volatile</code> 的内存语义，JMM 会限制特定类型的编译器和处理器重排序，JMM 会针对编译器制定 <code>volatile</code> 重排序规则表：</p><ol><li>第二个操作是volatile写，不管第一个操作是什么都不会重排序</li><li>第一个操作是volatile读，不管第二个操作是什么都不会重排序</li><li>第一个操作是volatile写，第二个操作是volatile读，也不会发生重排序</li></ol><p><img src="https://coder-wang-1304346453.cos.ap-beijing.myqcloud.com/blog/20210116222259.png" alt=""></p><p>如何保证这些操作不会发送重排序呢？就是通过插入内存屏障保证的，JMM层面的内存屏障分为读（load）屏障和写（Store）屏障，排列组合就有了四种屏障。对于volatile操作，JMM内存屏障插入策略：</p><ol><li>在每个 <code>volatile</code> 写操作的前面插入一个 <code>StoreStore</code> 屏障</li><li>在每个 <code>volatile</code> 写操作的后面插入一个 <code>StoreLoad</code> 屏障</li><li>在每个 <code>volatile</code> 读操作的后面插入一个 <code>LoadLoad</code> 屏障</li><li>在每个 <code>volatile</code> 读操作的后面插入一个 <code>LoadStore</code> 屏障</li></ol><p><img src="https://coder-wang-1304346453.cos.ap-beijing.myqcloud.com/blog/20210116222227.png" alt=""></p><p>上面的屏障都是 JMM 规范级别的，意思是，按照这个规范写 JDK 能保证 <code>volatile</code> 修饰的内存区域的操作不会发送重排序。</p><p>在硬件层面上，也提供了一系列的内存屏障来提供一致性的能力。拿X86平台来说，主要提供了这几种内存屏障指令：</p><ol><li><code>lfence</code> 指令：在 <code>lfence</code> 指令前的读操作当必须在 <code>lfence</code> 指令后的读操作前完成，类似于读屏障</li><li><code>sfence</code> 指令：在 <code>sfence</code> 指令前的写操作当必须在 <code>sfence</code> 指令后的写操作前完成，类似于写屏障</li><li><code>mfence</code> 指令： 在 <code>mfence</code> 指令前的读写操作当必须在 <code>mfence</code> 指令后的读写操作前完成，类似读写屏障。</li></ol><p>不保证原子性：先来看这么一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test8</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过 <code>javap -c</code> 命令将上面一段代码编译成为字节码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class test5.Test8 &#123;</span><br><span class="line">  volatile int n;</span><br><span class="line"></span><br><span class="line">  public test5.Test8();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       4: aload_0</span><br><span class="line">       5: iconst_0</span><br><span class="line">       6: putfield      #2                  // Field n:I</span><br><span class="line">       9: return</span><br><span class="line"></span><br><span class="line">  public void add();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: dup                               // 复制栈顶一个字长内存</span><br><span class="line">       2: getfield      #2                  // 获取初始值</span><br><span class="line">       5: iconst_1                          </span><br><span class="line">       6: iadd                              // 加1操作</span><br><span class="line">       7: putfield      #2                  // 写回主内存</span><br><span class="line">      10: return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从字节码我们可以看到，<code>n++</code> 被拆分成为 3 个指令：</p><ol><li>执行 <code>getfield</code> 拿到原始 n；</li><li>执行 <code>iadd</code> 进行加 1 操作；</li><li>执行 <code>putfield</code> 把累加后的值写回主内存；</li></ol><p>可以看出，<code>n++</code> 操作在多线程环境下是线程不安全的，即使加了 volatile 修饰，也不能保证原子性。</p><h4 id="附：volatile-如何保证原子性"><a href="#附：volatile-如何保证原子性" class="headerlink" title="附：volatile 如何保证原子性"></a>附：volatile 如何保证原子性</h4><ol><li>加 <code>synchronized</code>；</li><li>使用原子类如：<code>ActomInteger</code> 等；</li></ol><h4 id="附：volatile-单例模式分析"><a href="#附：volatile-单例模式分析" class="headerlink" title="附：volatile 单例模式分析"></a>附：volatile 单例模式分析</h4><p>DCL（双检索）机制不一定线程安全，原因是有指令重排的存在，原因在于某一个线程执行到第一次检测，读取到的 <code>instance</code> 不为 <code>null</code> 时，<code>instance</code> 的引用对象可能没有完成初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * instance = new Singleton() 可以访问以下3步完成（伪代码）</span></span><br><span class="line"><span class="comment">    * 1. memory = allocate()     分配对象内存空间</span></span><br><span class="line"><span class="comment">    * 2. instance(memory)        初始化对象</span></span><br><span class="line"><span class="comment">    * 3. instance = memory       设置 instance 指向刚刚分配的内存地址，此时 instace != null</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 步骤2和3不存在数据依赖关系，而且无论重排前还是重排后程序的执行结果在单线程中并没有变化，因此这种重排优化是被允许的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">         sychronized (instance) &#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">               instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指令重排只会保证串行语义执行的一致性（单线程），但并不关心多线程之间的语义一致性。所以当一条线程访问 <code>instace</code> 不为 <code>null</code> 时，由于 <code>instance</code> 实例未必已初始化完成，也就造成了线程安全问题。</p><p>加入 <code>volatile</code> 可以禁止指令重排。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h4 id="附：MESI-协议"><a href="#附：MESI-协议" class="headerlink" title="附：MESI 协议"></a>附：MESI 协议</h4><p>在早期的 CPU 中，是通过在总线加 LOCK# 锁的方式实现的，但是这种方式开销太大，所以 Intel 开发了缓存一致性协议，也就是 MESI 协议。</p><p>该缓存一致性思路：当 CPU 写数据时，如果发现操作的变量时共享变量，即其他线程的工作内存也存在该变量，于是会发信号通知其他CPU该变量的内存地址无效。当其他线程需要使用这个变量时，如内存地址失效，那么它们会在主存中重新读取该值。</p><h4 id="附：指令重排"><a href="#附：指令重排" class="headerlink" title="附：指令重排"></a>附：指令重排</h4><p>计算机在执行程序时候，为了提高性能，编译器和处理器常常会对指令做重排，一般分为以下 3 种：</p><ol><li>编译器优化的重排</li><li>指令并行的重排</li><li>内存系统的重排</li></ol><p>处理器在进行重排序会确保单线程环境中最终执行结果和代码顺序执行的结果一致。</p><p><img src="https://dengshuoimg.oss-cn-beijing.aliyuncs.com/hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/java%E6%8C%87%E4%BB%A4%E9%87%8D%E6%8E%92.png" alt=""></p><p>重排案例一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">11</span>; <span class="comment">// 语句 1</span></span><br><span class="line"><span class="keyword">int</span> y = <span class="number">12</span>; <span class="comment">// 语句 2</span></span><br><span class="line">x = x + <span class="number">5</span>;  <span class="comment">// 语句 3</span></span><br><span class="line">y = x * x;  <span class="comment">// 语句 4</span></span><br></pre></td></tr></table></figure><ol><li><p>正常顺序<br>语句 1、语句 2、语句 3、语句 4。</p></li><li><p>可能重排的顺序<br>语句 2、语句 1、语句 3、语句 4。</p></li><li><p>可能重排的顺序<br>语句 1、语句 3、语句 2、语句 4。</p></li><li><p>不可能重排的顺序<br>语句 4、语句 1、语句 2、语句 3。</p></li></ol><p>重排案例二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程一</span></span><br><span class="line">x = a;</span><br><span class="line">b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程二</span></span><br><span class="line">y = b;</span><br><span class="line">a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>正常情况下，x 的值应该为 0，y 的值为 0。</p><p>但是如果编译器对这段代码执行重排优化后，可能会出现以下情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线程一</span></span><br><span class="line">b = <span class="number">1</span>;</span><br><span class="line">x = a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程二</span></span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line">y = b;</span><br></pre></td></tr></table></figure><p>这时候 x 的值可能为 2，y 的值为 1。</p><p>因此，在多线程环境中，线程交替运行，由于编译器优化重排的存在，两个线程中使用的变量可能会无法保持一致性。</p><p>下面的例子中，在多线程环境下，语句 1 和 语句 2 可能会发生重排。语句 3 和 语句 4 也可能会发生重排。结果都和预想的不一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>     a    = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   a    = <span class="number">1</span>;      <span class="comment">// 语句 1</span></span><br><span class="line">   flag = <span class="keyword">true</span>;   <span class="comment">// 语句 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      a = a + <span class="number">5</span>;                                <span class="comment">// 语句 3</span></span><br><span class="line">      System.out.println(<span class="string">"****retValue: "</span> + a); <span class="comment">// 语句 4</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://segmentfault.com/a/1190000015032700">为什么要做指令重排</a></p><blockquote><p>在多线程环境中，需要禁止指令重排。volatile 实现了禁止指令重排优化，从而避免多线程环境下程序出现乱序执行的现象。</p></blockquote><h4 id="附：内存屏障"><a href="#附：内存屏障" class="headerlink" title="附：内存屏障"></a>附：内存屏障</h4><p>内存屏障是一种 CPU 指令，用于控制特定条件下的重排序和内存可见性问题。Java 编译器会根据内存屏障的规则禁止重排序。</p><p>内存屏障的作用有两个：</p><ol><li>保证特定操作的执行顺序；</li><li>保证某些变量的内存可见性（利用该特性实现 <code>volatile</code> 的内存可见性）；</li></ol><p>由于编译器和处理器都能执行指令重排优化，如果在指令间插入一条内存屏障的指令则会告诉编译器和CPU，不管什么指令都不能对这后面的指令重排序。也就是说通过插入内存屏障禁止在内存屏障前后的执行执行重排序优化。</p><p>内存屏障的另外一个作用是强制刷出各种 CPU 的缓存数据，因此任何 CPU 上的线程都能读取到这些数据的最新版本。</p><p>对 <code>volatile</code> 进行读操作时，会在读操作前面加入一条 load 屏障指令，从主内存中读取共享变量。对 <code>volatile</code> 进行写操作时，会在写操作后面加入一条 store 屏障指令，将工作内存中的共享变量值刷回到主内存中。</p><p><img src="http://concurrent.redspider.group/article/02/imgs/%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C.png" alt=""></p><p>内存屏障可以被分为以下几种类型：</p><ol><li><code>LoadLoad</code> 屏障<br>对于这样「<code>Load1; LoadLoad; Load2</code>」的语句 ，在 <code>Load2</code> 及后续读取操作要读取的数据被访问前，保证 <code>Load1</code> 要读取的数据被读取完毕。</li><li><code>LoadStore</code> 屏障<br>对于这样「<code>Load1; LoadStore; Store2</code>」的语句，在 <code>Store2</code> 及后续写入操作被刷出前，保证 <code>Load1</code> 要读取的数据被读取完毕。</li><li><code>StoreLoad</code> 屏障<br>对于这样「<code>Store1; StoreLoad; Load2</code>」的语句，在 <code>Load2</code> 及后续所有读取操作执行前，保证 <code>Store1</code> 的写入对所有处理器可见。它的开销是四种屏障中最大的。在大多数处理器的实现中，这个屏障是个万能屏障，兼具其它三种内存屏障的功能。</li><li><code>StoreStore</code> 屏障<br>对于这样「<code>Store1; StoreStore; Store2</code>」的语句，在 <code>Store2</code> 及后续写入操作执行前，保证 <code>Store1</code> 的写入操作对其它处理器可见。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-内存模型</title>
      <link href="/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>Java 内存模型简称 JMM，定义了 JVM 在计算机内存中的工作方式。</p><h2 id="并发模型"><a href="#并发模型" class="headerlink" title="并发模型"></a>并发模型</h2><p>在并发编程领域，需要处理两个关键问题：线程之间如何进行通信和同步：</p><ol><li><p>线程通信<br>线程的通信是指线程之间以何种机制来交换信息。</p></li><li><p>线程同步<br>线程的同步是指程序用于控制不同线程之间操作发生相对顺序的机制。</p></li></ol><p>相应的解决方案有两种，共享内存和消息传递：</p><ol><li><p>共享内存<br>在共享内存的并发模型里，线程之间共享程序的公共状态。</p><p>线程通信：线程之间通过读-写内存中的公共状态来隐式进行通信，典型的共享内存通信方式就是通过共享对象进行通信。</p><p>线程同步：在共享内存的并发模型里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。</p></li><li><p>消息传递<br>在消息传递的并发模型里，线程之间没有公共状态，必须通过明确的发送消息来显式进行通信。</p><p>线程通信：线程之间必须通过明确的发送消息来显式进行通信，在 Java 中典型的消息传递方式就是 <code>wait()</code> 和 <code>notify()</code>。</p><p>线程同步：由于消息的发送必须在消息的接收之前，因此同步是隐式进行的。</p></li></ol><h2 id="Java-内存模型"><a href="#Java-内存模型" class="headerlink" title="Java 内存模型"></a>Java 内存模型</h2><p>JMM（Java 内存模型）本身是一种抽象的概念并不真实存在，它描述的是一组规则或规范，通过这组规范定义了程序中各个变量（包括实例字段，静态字段和构成数组对象的元素）的访问方式。</p><p>JMM 关于同步的规定：</p><ol><li>线程解锁前，必须把共享变量的值刷新回主内存；</li><li>线程加锁前，必须读取主内存的最新值到自己的工作内存中；</li><li>加锁解锁的是同一把锁；</li></ol><p>由于 JVM 运行程序的实体是线程，而每个线程创建时 JVM 都会为其创建一个工作内存（有些地方称为工作栈），工作内存是每个线程的私有数据区域，而 JMM 中规定的所有变量都存储在主内存，主内存是共享内存区域，所有线程都可以访问，但线程对变量的操作（读取赋值等）必须在工作内存中进行，首先要将变量从主内存拷贝到自己的工作内存空间，然后对变量进行操作。操作完成后再将变量写回主内存，不能直接操作主内存中的变量。各个线程中的工作内存中都存储着主内存的变量副本，因此不同的线程间无法访问对方的工作内存，线程间的通信（传值）必须通过主内存来完成。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwOTIxMTgyMzM3OTA0?x-oss-process=image/format,png" alt=""></p><p>规定了线程的工作内存和主内存的交互关系，以及线程之间的可见性和程序的执行顺序。一方面，要为程序员提供足够强的内存可见性保证；另一方面，对编译器和处理器的限制要尽可能地放松。JMM 对程序员屏蔽了 CPU 以及 OS 内存的使用问题，能够使程序在不同的 CPU 和 OS 内存上都能够达到预期的效果。</p><blockquote><p>Java 的编译器和 CPU 都可以对程序进行优化重排序，但是要遵循一些规则，不能随意的重排序，例如 volatile，final，以及在释放和获取锁时程序执行的顺序，为多线程打下了基础。</p></blockquote><p>Java 内存模型（JMM）采用的是共享内存机制，它决定了一个线程对共享变量的写入何时对另一个线程可见。</p><p>Java 内存模型的三大特性：</p><ol><li>原子性</li><li>可见性</li><li>有序性</li></ol><p>从抽象的角度来看，JMM 定义了线程和主内存之间的抽象关系：</p><ol><li>线程之间的共享变量存储在主内存中；</li><li>每个线程都有一个私有的本地内存；</li><li>本地内存中存储了该线程以读/写共享变量的副本；</li></ol><p>本地内存是 JMM 的一个抽象概念，并不真实存在。它涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。</p><p>从上图来看，线程 A 与线程 B 之间如要通信的话，必须要经历下面 2 个步骤：</p><ol><li>首先，线程 A 把本地内存 A 中更新过的共享变量刷新到主内存中去。</li><li>然后，线程 B 到主内存中去读取线程 A 之前已更新过的共享变量。 </li></ol><p>下面通过示意图来说明这两个步骤：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwOTIxMTgyNzQ4NTUx?x-oss-process=image/format,png" alt=""></p><p>如上图所示，本地内存 A 和 B 有主内存中共享变量 x 的副本。假设初始时，这三个内存中的 x 值都为 0。线程 A 在执行时，把更新后的 x 值（假设值为 1）临时存放在自己的本地内存 A 中。当线程 A 和线程 B 需要通信时，线程 A 首先会把自己本地内存中修改后的 x 值刷新到主内存中，此时主内存中的 x 值变为了 1。随后，线程 B 到主内存中去读取线程 A 更新后的 x 值，此时线程B的本地内存的 x 值也变为了 1。</p><p>从整体来看，这两个步骤实质上是线程 A 在向线程 B 发送消息，而且这个通信过程必须要经过主内存。JMM 通过控制主内存与每个线程的本地内存之间的交互，来为 Java 程序员提供内存可见性保证。</p><h2 id="JVM-对-JMM-的实现"><a href="#JVM-对-JMM-的实现" class="headerlink" title="JVM 对 JMM 的实现"></a>JVM 对 JMM 的实现</h2><p>在 JVM 中，JMM 把内存分成了两部分：线程栈区和堆区，下图展示了 JMM 在 JVM 中的逻辑视图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwOTIxMTgyODM3Njk3?x-oss-process=image/format,png" alt=""></p><p>JVM 中运行的每个线程都拥有自己的线程栈，线程栈包含了当前线程执行的方法调用相关信息，我们也把它称作调用栈。随着代码的不断执行，调用栈会不断变化。</p><h4 id="变量存放位置"><a href="#变量存放位置" class="headerlink" title="变量存放位置"></a>变量存放位置</h4><p>线程栈还包含了当前方法的所有本地变量信息。一个线程只能读取自己的线程栈。也就是说，线程中的本地变量对其它线程是不可见的。即使两个线程执行的是同一段代码，它们也会各自在自己的线程栈中创建本地变量。因此，每个线程中的本地变量都会有自己的版本。</p><p>所有原始类型（<code>boolean</code>、<code>byte</code>、<code>char</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>）的本地变量都直接保存在线程栈当中，对于它们的值各个线程之间都是独立的。对于原始类型的本地变量，一个线程可以传递一个副本给另一个线程，它们之间是无法直接共享的。</p><p>堆区包含了 Java 应用创建的所有对象信息（包括原始类型的封装类如 <code>Byte</code>、<code>Integer</code>、<code>Long</code> 等等），不管对象是哪个线程创建的，也不管对象是属于一个成员变量还是方法中的本地变量。</p><p>下图展示了调用栈和本地变量都存储在栈区，对象都存储在堆区：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwOTIxMTgyOTAzODE4?x-oss-process=image/format,png" alt=""></p><ol><li><p>一个本地变量如果是原始类型，那么它会被完全存储到栈区；</p></li><li><p>一个本地变量也有可能是一个对象的引用，这种情况下，这个本地引用会被存储到栈中，但是对象本身仍然存储在堆区；</p></li><li><p>对于一个对象的成员方法，这些方法中包含本地变量，仍需要存储在栈区，即使它们所属的对象在堆区；</p></li><li><p>对于一个对象的成员变量，不管它是原始类型还是包装类型，都会被存储到堆区；</p></li><li><p><code>static</code> 类型的变量以及类本身相关信息都会随着类本身存储在堆区。</p></li></ol><h4 id="共享对象的可见性"><a href="#共享对象的可见性" class="headerlink" title="共享对象的可见性"></a>共享对象的可见性</h4><p>堆中的对象可以被多线程共享。如果一个线程获得一个对象的引用，它便可访问这个对象的成员变量。如果两个线程同时调用了同一个对象的同一个方法，那么这两个线程便可同时访问这个对象的成员变量。但是对于本地变量，每个线程都会拷贝一份到自己的线程栈中。</p><p>下图展示了上面描述的过程：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwOTIxMTgyOTQ4NjAx?x-oss-process=image/format,png" alt=""></p><p>当多个线程同时操作同一个共享对象时，如果没有合理的使用 <code>volatile</code> 和 <code>synchronized</code> 关键字，一个线程对共享对象的更新有可能导致其它线程不可见。</p><p>想象一下我们的共享对象存储在主存，一个 CPU 中的线程读取主存数据到 CPU 缓存，然后对共享对象做了更改，但 CPU 缓存中的更改后的对象还没有 flush 到主存，此时线程对共享对象的更改对其它 CPU 中的线程是不可见的。最终就是每个线程最终都会拷贝共享对象，而且拷贝的对象位于不同的 CPU 缓存中。</p><p>下图展示了上面描述的过程。左边 CPU 中运行的线程从主存中拷贝共享对象 obj 到它的 CPU 缓存，把对象 obj 的 count 变量改为 2。但这个变更对运行在右边 CPU 中的线程不可见，因为这个更改还没有 flush 到主存中：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwOTIxMTgzMjE4NjUx?x-oss-process=image/format,png" alt=""></p><p>要解决共享对象可见性这个问题，我们可以使用 Java <code>volatile</code> 关键字。<code>volatile</code> 可以保证变量会直接从主存读取，而对变量的更新也会直接写到主存。<code>volatile</code> 原理是基于 CPU 内存屏障指令实现的，后面会讲到。</p><h4 id="竞争现象"><a href="#竞争现象" class="headerlink" title="竞争现象"></a>竞争现象</h4><p>如果多个线程共享一个对象，如果它们同时修改这个共享对象，这就产生了竞争现象。</p><p>如下图所示，线程 A 和线程 B 共享一个对象 obj。假设线程 A 从主存读取 <code>Obj.count</code> 变量到自己的 CPU 缓存，同时，线程 B 也读取了 <code>Obj.count</code> 变量到它的 CPU 缓存，并且这两个线程都对 <code>Obj.count</code> 做了加 1 操作。此时，<code>Obj.count</code> 加 1 操作被执行了两次，不过都在不同的 CPU 缓存中。</p><p>如果这两个加 1 操作是串行执行的，那么 <code>Obj.count</code> 变量便会在原始值上加 2，最终主存中的 <code>Obj.count</code> 的值会是 3。然而下图中两个加 1 操作是并行的，不管是线程 A 还是线程 B 先 flush 计算结果到主存，最终主存中的 <code>Obj.count</code> 只会增加 1 次变成 2，尽管一共有两次加 1 操作。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwOTIxMTgzMjUxODcw?x-oss-process=image/format,png" alt=""></p><p>要解决上面的问题我们可以使用 Java <code>synchronized</code> 代码块。<code>synchronized</code> 代码块可以保证同一个时刻只能有一个线程进入代码竞争区，<code>synchronized</code> 代码块也能保证代码块中所有变量都将会从主存中读，当线程退出代码块时，对所有变量的更新将会 flush 到主存，不管这些变量是不是 <code>volatile</code> 类型的。</p><h2 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h2><p>关于主内存与工作内存之间的交互协议，即一个变量如何从主内存拷贝到工作内存，Java 内存模型定义了 8 种原子操作来完成：</p><ol><li>read 从主内存读取数据。</li><li>load 将主内存读取到的数据写入工作内存。</li><li>use 从工作内存读取数据来计算。</li><li>assign 将计算好的值重新赋值到工作内存中。</li><li>store 将工作内存数据写入主内存。</li><li>write 将 store 过去的变量赋值给主内存中的变量。</li><li>lock 将主内存变量加锁，标记为线程独占状态。</li><li>unlock 将主内存变量解锁，解锁后其他线程可以锁定该变量。</li></ol><p>如果要把一个变量从主内存中复制到工作内存中，就需要按顺序地执行 read 和 load 操作，如果把变量从工作内存中同步到主内存中，就需要按顺序地执行 store 和 write 操作。但 Java 内存模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ab6820a1b96d566ffd898929699c0a9f.png" alt=""></p><p>JMM 规定了以上8中操作需要按照如下规则进行：</p><ol><li>不允许 read 和 load、store 和 write 操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现；</li><li>不允许一个线程丢弃它的最近的 assign 操作，即变量在工作内存中改变了之后必须把该变化同步回主内存；</li><li>不允许一个线程无原因地（没有发生过任何 assign 操作）把数据从线程的工作内存同步回主内存中；</li><li>一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load 或 assign）的变量，换句话说就是对一个变量实施 use 和 store 操作之前，必须先执行过了 assign 和 load 操作；</li><li>一个变量在同一个时刻只允许一条线程对其进行 lock 操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的 unlock 操作，变量才会被解锁；</li><li>如果对一个变量执行 lock 操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行 load 或 assign 操作初始化变量的值；</li><li>如果一个变量事先没有被 lock 操作锁定，则不允许对它执行 unlock 操作，也不允许去 unlock 一个被其他线程锁定住的变量；</li></ol><h2 id="附一：volatile-关键字"><a href="#附一：volatile-关键字" class="headerlink" title="附一：volatile 关键字"></a>附一：volatile 关键字</h2><p><code>volatile</code> 是 Java 虚拟机提供的轻量级（乞丐版 <code>synchronized</code>）同步机制，基本上准守了 JMM 的规范，有以下三大特性：</p><ol><li><p>保证可见性</p></li><li><p>部分原子性</p></li><li><p>禁止指令重排</p></li></ol><h4 id="保证可见性"><a href="#保证可见性" class="headerlink" title="保证可见性"></a>保证可见性</h4><p>在 JMM 机制中，某一线程修改的变量并写回给主内存，另外一个线程要马上得知。</p><p>验证 <code>volatile</code> 的可见性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="不保证原子性"><a href="#不保证原子性" class="headerlink" title="不保证原子性"></a>不保证原子性</h4><p>因为 <code>volatile</code> 是轻量级的，不完成准守 JMM 的规范。</p><p>只能保证基本的数据类型的原子性。</p><h4 id="禁止指令重排"><a href="#禁止指令重排" class="headerlink" title="禁止指令重排"></a>禁止指令重排</h4><p>禁止指令重排可以保证有序性。   </p><p>指令重排：</p><ol><li>编译阶段：Java 层面是没有做指令重排的。</li><li>运行阶段：DCL + valatile</li></ol><p>volatile 如何解决运行期间的指令重排的。</p><ol><li>CPU 为了提升运行效率，乱序执行。</li><li>as-if-serial 语义、规范：单线程运行下不允许改变运行结果。</li><li>happens-before：对象的初始化动作需要先于 finiallize 调用前。</li></ol><h4 id="volatile-如何解决原子性？"><a href="#volatile-如何解决原子性？" class="headerlink" title="volatile 如何解决原子性？"></a>volatile 如何解决原子性？</h4><ol><li>加 <code>synchronized</code></li><li>使用 <code>AtomicInteger</code></li></ol><h4 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h4><ol><li>编译阶段：编译屏障</li><li>运行阶段：内存屏障，发生于CPU内部</li></ol><p>Java 中的内存屏障：storeload</p><p>内联汇编：c、c++层面的 volatile，禁止编译器优化无效代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_asm_ volatile (&quot;lock; addl $0,0(%%rsp)&quot; : : : &quot;cc&quot;, &quot;memory&quot;);</span><br></pre></td></tr></table></figure><p>为什么需要加内存屏障：</p><ol><li>因为CPU写内存有2种方式：</li><li>同步写：CPU把数值写入 store buffer，然后写入内存。</li><li>异步写：CPU先把数值写入store buffer，等CPU空闲了再把 buffer 写入内存。</li><li>因为异步写的情况存在，才设计了内存屏障这个东西。</li></ol><p>加了内存屏障，你的读写操作只能按序执行，CPU无法乱序执行。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>指令重排：</p><ol><li>编译期<br>加不加 volatile，生成的字节码都一样。</li><li>运行期<br>因为乱序执行<br>DCL + volatile<br>new的执行流程</li></ol><p>as-if-serial 语义</p><p>happens-before 语义</p><p>CPU提供的屏障方式</p><h2 id="附二：synchronized-关键字"><a href="#附二：synchronized-关键字" class="headerlink" title="附二：synchronized 关键字"></a>附二：synchronized 关键字</h2><p>aaaaaaaaaabc<br>1234567890<br>我们是谁呢睡呢<br>。。。。。bc<br>，，，，，谁呢<br>aaaaaaaaaakk</p><p>1234567890。<br>aaaaaaaaaa。<br>我们是谁呢。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>Java 线程内存模型跟 CPU 缓存模型类型，是基于 CPU 缓存模型来建立的，Java 线程内存模型是标准化的，屏蔽掉了底层不同计算机的区别。</p><p>JMM 缓存不一致问题:</p><ol><li>总线加锁（性能太低）<br>CPU 从主内存读取数据到高速缓存，会在总线对这个数据加锁。这样其它 CPU 没法去读或写这个数据，直到这个PCU使用完数据释放锁之后其它CPU才能读取该数据。</li><li>MESI 缓存一致性协议<br>多个 CPU 从主内存读取同一个数据到各自的高速缓存，当其中某个 CPU 修改了缓存里的数据，该数据会马上同步会主内存，其它 CPU 通过总线嗅探机制可以感知到数据的变化从而将自己缓存里的数据失效。</li></ol><p>volatile 缓存可减刑实现原理<br>底层实现主要通过汇编 lock 前缀指令，它会锁定这块内存区域的缓存（缓存行锁定）并回写到主内存。</p><p>iA-32 结构软件开发者手册对 lock 指定的解释：</p><ol><li><p>会将当前处理器缓存行的数据立即写回到系统内存。</p></li><li><p>这个写回内存的操作会引起其它 CPU 里缓存了该内存地址的数据无效（MESI协议）</p></li></ol><p>加锁位置。</p><p>总线嗅探。</p><h2 id="附二：重排序"><a href="#附二：重排序" class="headerlink" title="附二：重排序"></a>附二：重排序</h2><p>请先看这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test7</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread one = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            a = <span class="number">1</span>;</span><br><span class="line">            x = b;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread two = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            b = <span class="number">1</span>;</span><br><span class="line">            y = a;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        one.start();</span><br><span class="line">        two.start();</span><br><span class="line"></span><br><span class="line">        one.join();</span><br><span class="line">        two.join();</span><br><span class="line">        System.out.println(<span class="string">"("</span> + x + <span class="string">","</span> + y + <span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line">(<span class="number">0</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>很容易想到这段代码的运行结果可能为(1,0)、(0,1)或(1,1)，因为线程 one 可以在线程 two 开始之前就执行完了，也有可能反之，甚至有可能二者的指令是同时或交替执行的。</p><p>然而，这段代码的执行结果也可能（执行 1000 次才出现一次）是 (0,0)。因为，在实际运行时，代码指令可能并不是严格按照代码语句顺序执行的。得到 (0,0) 结果的语句执行过程，如下图所示。值得注意的是，a=1 和 x=b 这两个语句的赋值操作的顺序被颠倒了，或者说，发生了指令“重排序”。（事实上，输出了这一结果，并不代表一定发生了指令重排序，内存可见性问题也会导致这样的输出，详见后文）。</p><p>大多数现代微处理器都会采用将指令乱序执行（out-of-order execution，简称OoOE或OOE）的方法，在条件允许的情况下，直接运行当前有能力立即执行的后续指令，避开获取下一条指令所需数据时造成的等待。通过乱序执行的技术，处理器可以大大提高执行效率。</p><p>除了处理器，常见的Java运行时环境的JIT编译器也会做指令重排序操作，即生成的机器指令与字节码指令顺序不一致。</p><h2 id="附四：as-if-serial"><a href="#附四：as-if-serial" class="headerlink" title="附四：as-if-serial"></a>附四：as-if-serial</h2><p>As-if-serial 语义的意思是，所有的动作（Action）都可以为了优化而被重排序，但是必须保证它们重排序后的结果和程序代码本身的应有结果是一致的。Java 编译器、运行时和处理器都会保证单线程下的 as-if-serial 语义。</p><p>比如，为了保证这一语义，重排序不会发生在有数据依赖的操作之中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> c = a + b;</span><br></pre></td></tr></table></figure><p>将上面的代码编译成Java字节码或生成机器指令，可视为展开成了以下几步动作（实际可能会省略或添加某些步骤）：</p><ol><li>对 a 赋值 1；</li><li>对 b 赋值 2；</li><li>取 a 的值；</li><li>取 b 的值；</li><li>将取到两个值相加后存入 c；</li></ol><p>在上面 5 个动作中，动作 1 可能会和动作 2、4 重排序，动作 2 可能会和动作 1、3 重排序，动作 3 可能会和动作 2、4 重排序，动作 4 可能会和 1、3 重排序。但动作 1 和动作 3、5 不能重排序。动作 2 和动作 4、5 不能重排序。因为它们之间存在数据依赖关系，一旦重排，as-if-serial 语义便无法保证。</p><p>为保证 as-if-serial 语义，Java 异常处理机制也会为重排序做一些特殊处理。例如在下面的代码中，<code>y = 0 / 0</code> 可能会被重排序在 <code>x = 2</code> 之前执行，为了保证最终不致于输出 <code>x = 1</code> 的错误结果，JIT 在重排序时会在 <code>catch</code> 语句中插入错误代偿代码，将 <code>x</code> 赋值为 2，将程序恢复到发生异常时应有的状态。这种做法的确将异常捕捉的逻辑变得复杂了，但是 JIT 的优化的原则是，尽力优化正常运行下的代码逻辑，哪怕以 <code>catch</code> 块逻辑变得复杂为代价，毕竟，进入 <code>catch</code> 块内是一种“异常”情况的表现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reordering</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            x = <span class="number">2</span>;</span><br><span class="line">            y = <span class="number">0</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"x = "</span> + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="附五：happens-before"><a href="#附五：happens-before" class="headerlink" title="附五：happens-before"></a>附五：happens-before</h2><p>happens-before 原则来辅助保证程序执行的原子性、可见性以及有序性的问题，它是判断数据是否存在竞争、线程是否安全的依据。能够让一个操作无需控制就能先于另一个操作完成：</p><ol><li>单一线程原则<br>在一个线程内，在程序前面的操作先发生于程序后面的操作。</li><li>管程锁定规则<br>一个解锁操作先行发生于后面对同一个锁的加锁操作。</li><li>valatile 变量原则<br>对于一个 volatile 变量的写操作先行发生于后面对这个变量的读操作。</li><li>线程启动规则<br>Thread 对象的 start 方法调用先行发生于此线程的每一个动作（start 最先执行）。</li><li>线程加入原则<br>Thread 对象的结束先行发生于 join() 方法返回。</li><li>线程中断规则<br>对线程 interrupt 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，所以可以通过 interrupted 方法检测到是否有发生过中断。</li><li>对象终结规则<br>一个对象的初始化完成（构造函数执行结束）先行发生于它的 finalize() 方法的开始。</li><li>传递性<br>如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C。</li></ol><h2 id="附六：内存访问重排序与内存可见性"><a href="#附六：内存访问重排序与内存可见性" class="headerlink" title="附六：内存访问重排序与内存可见性"></a>附六：内存访问重排序与内存可见性</h2><p>计算机系统中，为了尽可能地避免处理器访问主内存的时间开销，处理器大多会利用缓存(cache)以提高性能。</p><p>在这种模型下会存在一个现象，即缓存中的数据与主内存的数据并不是实时同步的，各CPU（或CPU核心）间缓存的数据也不是实时同步的。这导致在同一个时间点，各CPU所看到同一内存地址的数据的值可能是不一致的。从程序的视角来看，就是在同一个时间点，各个线程所看到的共享变量的值可能是不一致的。</p><p>有的观点会将这种现象也视为重排序的一种，命名为“内存系统重排序”。因为这种内存可见性问题造成的结果就好像是内存访问指令发生了重排序一样。</p><p>这种内存可见性问题也会导致章节一中示例代码即便在没有发生指令重排序的情况下的执行结果也还是 (0, 0)。</p><h2 id="附七：内存访问重排序与-Java-内存模型"><a href="#附七：内存访问重排序与-Java-内存模型" class="headerlink" title="附七：内存访问重排序与 Java 内存模型"></a>附七：内存访问重排序与 Java 内存模型</h2><h2 id="附八：缓存一致性协议的-MESI"><a href="#附八：缓存一致性协议的-MESI" class="headerlink" title="附八：缓存一致性协议的 MESI"></a>附八：缓存一致性协议的 MESI</h2>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-内存模型2</title>
      <link href="/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B2/"/>
      <url>/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B2/</url>
      
        <content type="html"><![CDATA[<p>JMM（Java 内存模型）本身是一种抽象的概念并不真实存在，它描述的是一组规则或规范，通过这组规范定义了程序中各个变量（包括实例字段，静态字段和构成数组对象的元素）的访问方式。</p><p>JMM 关于同步的规定：</p><ol><li>线程解锁前，必须把共享变量的值刷新回主内存；</li><li>线程加锁前，必须读取主内存的最新值到自己的工作内存中；</li><li>加锁解锁的是同一把锁；</li></ol><p>由于 JVM 运行程序的实体是线程，而每个线程创建时 JVM 都会为其创建一个工作内存（有些地方称为工作栈），工作内存是每个线程的私有数据区域，而 JMM 中规定的所有变量都存储在主内存，主内存是共享内存区域，所有线程都可以访问，但线程对变量的操作（读取赋值等）必须在工作内存中进行，首先要将变量从主内存拷贝到自己的工作内存空间，然后对变量进行操作。操作完成后再将变量写回主内存，不能直接操作主内存中的变量。各个线程中的工作内存中都存储着主内存的变量副本，因此不同的线程间无法访问对方的工作内存，线程间的通信（传值）必须通过主内存来完成。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwOTIxMTgyMzM3OTA0?x-oss-process=image/format,png" alt=""></p><h2 id="有什么"><a href="#有什么" class="headerlink" title="有什么"></a>有什么</h2><p>JMM 有三大特性：</p><ol><li>可见性</li><li>原子性<br>不可分割，完整性，也即某个线程正在做某个具体业务时，中间不可加塞或者被分割。需要整体完整要么同时成功，要么同时失败。</li><li>有序性</li></ol><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>在 JMM 中，各个线程对主内存中的共享变量的操作都是各个线程各自拷贝到自己的工作内存进行操作然后再写回主内存去的。这就可能存在一个线程修改了共享变量的值还未写回主内存时，另外一个线程又对主内存中的同一个共享变量进行操作。这种工作内存与主内存存在同步延迟的现象就造成了可相见问题。</p><p>先来看这么一段程序，线程 T1 调用了 useData 方法，该方法判断 <code>initFlag</code> 是否为 true，不是则一直循环等待。线程 T2 修改了 <code>initFlag</code> 为 true，但是线程 T1 没有获取，程序一直在死循环中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SharaData sharaData = <span class="keyword">new</span> SharaData();</span><br><span class="line">        <span class="comment">// 1. 一个线程使用数据</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; sharaData.useData(), <span class="string">"T1"</span>).start();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">// 2. 一个线程准备使用</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; sharaData.prepareData(), <span class="string">"T2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharaData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> initFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepareData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"prepareing data start..."</span>);</span><br><span class="line">        initFlag = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">"prepareing data finish..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"waiting data..."</span>);</span><br><span class="line">        <span class="keyword">while</span> (!initFlag) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"===============success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line">waiting data...</span><br><span class="line">prepareing data start...</span><br><span class="line">prepareing data finish...</span><br></pre></td></tr></table></figure><p><code>volatie</code> 实现了 JMM 可见性的特点，这时候我们只需要对 <code>initFlag</code> 字段加上 <code>volatile</code> 修饰，另外一个线程即可获取 <code>initFlag</code>  字段的变更：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SharaData sharaData = <span class="keyword">new</span> SharaData();</span><br><span class="line">        <span class="comment">// 1. 一个线程使用数据</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; sharaData.useData(), <span class="string">"T1"</span>).start();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">// 2. 一个线程准备使用</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; sharaData.prepareData(), <span class="string">"T2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharaData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> initFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepareData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"prepareing data start..."</span>);</span><br><span class="line">        initFlag = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">"prepareing data finish..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"waiting data..."</span>);</span><br><span class="line">        <span class="keyword">while</span> (!initFlag) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"===============success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line">waiting data...</span><br><span class="line">prepareing data start...</span><br><span class="line">prepareing data finish...</span><br><span class="line">===============success</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>原子性即不可分割，完整性，也即某个线程正在做某个具体业务时，中间不可加塞或者被分割。需要整体完整要么同时成功，要么同时失败。</p><p><code>volatile</code> 不保证原子性，参考下面例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SharaData sharaData = <span class="keyword">new</span> SharaData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 启动20个线程去添加数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; sharaData.plus1000()).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 需要等待上面线程都计算完毕，再使用main线程取得最终结果值</span></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 查看最终结果</span></span><br><span class="line">        System.out.println(<span class="string">"Count: "</span> + sharaData.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharaData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">plus1000</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line">Count: <span class="number">9146</span></span><br></pre></td></tr></table></figure><p><code>synchronized</code> 能保证原子性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SharaData sharaData = <span class="keyword">new</span> SharaData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 启动20个线程去添加数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; sharaData.plus1000()).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 需要等待上面线程都计算完毕，再使用main线程取得最终结果值</span></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 查看最终结果</span></span><br><span class="line">        System.out.println(<span class="string">"Count: "</span> + sharaData.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharaData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">plus1000</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line">Count: <span class="number">10000</span></span><br></pre></td></tr></table></figure><h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><h2 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h2><p>JMM 只是一个规范，具体的用法参考 <code>volatile</code>。</p><h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-死锁编码以及定位分析</title>
      <link href="/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E6%AD%BB%E9%94%81%E7%BC%96%E7%A0%81%E4%BB%A5%E5%8F%8A%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/"/>
      <url>/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E6%AD%BB%E9%94%81%E7%BC%96%E7%A0%81%E4%BB%A5%E5%8F%8A%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>死锁是指两个或两个以上的进程在执行过程中，因为争夺资源而造成一种相互等待的现象。若无外力干涉那他们都将无法推进下去。如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。</p><h2 id="死锁产生"><a href="#死锁产生" class="headerlink" title="死锁产生"></a>死锁产生</h2><p>死锁产生的原因有：</p><ol><li>系统资源不足</li><li>进程运行推进不当</li><li>资源分配不当。</li></ol><p>下面以资源分配不当来举例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lockA;</span><br><span class="line">    <span class="keyword">private</span> String lockB;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test5</span><span class="params">(String lockA, String lockB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lockA = lockA;</span><br><span class="line">        <span class="keyword">this</span>.lockB = lockB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lockA) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" 持有 "</span> + lockA + <span class="string">"，尝试尝试有 "</span> + lockB);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockB) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String lockA = <span class="keyword">new</span> String(<span class="string">"lockA"</span>);</span><br><span class="line">        String lockB = <span class="keyword">new</span> String(<span class="string">"lockA"</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Test5(lockA, lockB), <span class="string">"T1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Test5(lockB, lockA), <span class="string">"T2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程 T1 和 T2 相互争夺对方的锁，程序无法正常结束：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T2 持有 lockA，尝试尝试有 lockA</span><br><span class="line">T1 持有 lockA，尝试尝试有 lockA</span><br><span class="line"></span><br><span class="line">waiting...</span><br></pre></td></tr></table></figure><h2 id="排查死锁"><a href="#排查死锁" class="headerlink" title="排查死锁"></a>排查死锁</h2><h4 id="jps-查看-JVM-中的进程"><a href="#jps-查看-JVM-中的进程" class="headerlink" title="jps 查看 JVM 中的进程"></a>jps 查看 JVM 中的进程</h4><p>通过 jps 定位到当前进程 86069。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ jps</span><br><span class="line">86069 Test5</span><br><span class="line">86068 Launcher</span><br><span class="line">86100 Jps</span><br><span class="line">38795 RemoteMavenServer36</span><br><span class="line">38780 </span><br><span class="line">84238 Launcher</span><br></pre></td></tr></table></figure><h4 id="jstack-查看死锁信息"><a href="#jstack-查看死锁信息" class="headerlink" title="jstack 查看死锁信息"></a>jstack 查看死锁信息</h4><p>通过 jstack 定位问题，可以看到 T2 持有 6868，等待 6818。而 T1 持有 6818，等待 6868：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">zhangqinghua$ jstack 86069</span><br><span class="line">2021-01-15 11:04:03</span><br><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.181-b13 mixed mode):</span><br><span class="line"></span><br><span class="line">&quot;Attach Listener&quot; #14 daemon prio=9 os_prio=31 tid=0x00007f82fc086800 nid=0xa303 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;DestroyJavaVM&quot; #13 prio=5 os_prio=31 tid=0x00007f82fc001800 nid=0x2603 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;T2&quot; #12 prio=5 os_prio=31 tid=0x00007f82fc085800 nid=0xa503 waiting for monitor entry [0x00007000111d5000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">        at thread.Test5.run(Test5.java:24)</span><br><span class="line">        - waiting to lock &lt;0x000000076ada6818&gt; (a java.lang.String)</span><br><span class="line">        - locked &lt;0x000000076ada6868&gt; (a java.lang.String)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">&quot;T1&quot; #11 prio=5 os_prio=31 tid=0x00007f82fc055000 nid=0xa703 waiting for monitor entry [0x00007000110d2000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">        at thread.Test5.run(Test5.java:24)</span><br><span class="line">        - waiting to lock &lt;0x000000076ada6868&gt; (a java.lang.String)</span><br><span class="line">        - locked &lt;0x000000076ada6818&gt; (a java.lang.String)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure><h4 id="定位死锁代码，修复业务逻辑"><a href="#定位死锁代码，修复业务逻辑" class="headerlink" title="定位死锁代码，修复业务逻辑"></a>定位死锁代码，修复业务逻辑</h4><p>…</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-线程池</title>
      <link href="/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h4 id="但线程"><a href="#但线程" class="headerlink" title="但线程"></a>但线程</h4><h4 id="指定数量线程"><a href="#指定数量线程" class="headerlink" title="指定数量线程"></a>指定数量线程</h4><h4 id="可扩容线程池"><a href="#可扩容线程池" class="headerlink" title="可扩容线程池"></a>可扩容线程池</h4><h4 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h4><h4 id="线程池参数配置"><a href="#线程池参数配置" class="headerlink" title="线程池参数配置"></a>线程池参数配置</h4><p>线程池的线程数量配置根据任务是属于 CPU 密集型还是 IO 密集型不同而不同。</p><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><h4 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h4>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-阻塞队列</title>
      <link href="/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
      <url>/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>在新增的 Concurrent 包中，<code>BlockingQueue</code> 很好的解决了多线程中，如何高效安全“传输”数据的问题。通过这些高效并且线程安全的队列类，为我们快速搭建高质量的多线程程序带来极大的便利。本文详细介绍了 <code>BlockingQueue</code> 家庭中的所有成员，包括他们各自的功能以及常见使用场景。</p><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>多线程环境中，通过队列可以很容易实现数据共享，比如经典的“生产者”和“消费者”模型中，通过队列可以很便利地实现两者之间的数据共享。假设我们有若干生产者线程，另外又有若干个消费者线程。如果生产者线程需要把准备好的数据共享给消费者线程，利用队列的方式来传递数据，就可以很方便地解决他们之间的数据共享问题。</p><p>但如果生产者和消费者在某个时间段内，万一发生数据处理速度不匹配的情况呢？理想情况下，如果生产者产出数据的速度大于消费者消费的速度，并且当生产出来的数据累积到一定程度的时候，那么生产者必须暂停等待一下（阻塞生产者线程），以便等待消费者线程把累积的数据处理完毕，反之亦然。然而，在 concurrent 包发布以前，在多线程环境下，我们每个程序员都必须去自己控制这些细节，尤其还要兼顾效率和线程安全，而这会给我们的程序带来不小的复杂度。</p><p>好在此时，强大的 concurrent 包横空出世了，而他也给我们带来了强大的 BlockingQueue：</p><ol><li><p>线程一往阻塞队列中添加元素，而线程二从阻塞队列中移除元素。</p></li><li><p>当阻塞队列是空时，从队列中获取元素的操作将会被阻塞。</p></li><li><p>当阻塞队列是满时，往队列中添加元素的操作将会被阻塞。</p></li><li><p>试图从空的阻塞队列中获取元素的线程将会被阻塞，直到被其它的线程往空的队列插入新的元素。</p></li><li><p>同样，试图往已满的阻塞队列中添加新元素的线程同样也会被阻塞，直到其他的线程从列中移除一个或多个元素或者完全清空队列后使得队列重新变得空闲起来，并后续新增。</p></li></ol><blockquote><p>在多线程领域，所谓阻塞，在某些情况下会挂起线程（即阻塞），一旦条件满足，被挂起的线程又会自动被唤醒。</p></blockquote><h2 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h2><p>阻塞队列的核心方法可以分为四大类型：</p><ol><li><p>阻塞<br>使用 <code>put</code> 插入元素，当阻塞队列满时，生产者线程继续往队列里插入元素，队列会一直阻塞直到生产线程插入元素成功或者响应中断退出。</p><p>使用 <code>take</code> 移除元素，当阻塞队列空时，消费者线程试图从队列里移除元素，队列会一直阻塞消费者线程直到队列可用。</p></li><li><p>抛异常<br>使用 <code>add</code> 插入元素，当阻塞队列满时，再往队列里插入元素时会抛出 <code>IllegalStateException: Queue full</code>。</p><p>使用 <code>remove</code> 移除元素，当阻塞队列空时，再往队列里移除元素时会抛出 <code>NoSuchElementException</code>。</p></li><li><p>特殊值<br>使用 <code>offer</code> 插入元素，成功返回 <code>true</code>，失败返回 <code>false</code>。</p><p>使用 <code>poll</code> 移除元素，成功返出队列的元素，队列里面没有元素就返回 <code>null</code>。</p></li><li><p>超时退出<br>是特殊值的改进版，当阻塞队列满时，队列会阻塞生产者线程一定时间，超过时限后生产者线程会退出。消费者线程同理。</p></li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">方法类型</th><th>插入</th><th>移除</th><th>删除</th></tr></thead><tbody><tr><td style="text-align:left">阻塞</td><td>put(e)</td><td>take()</td><td>不可用</td></tr><tr><td style="text-align:left">抛异常</td><td>add(e)</td><td>remove()</td><td>element()</td></tr><tr><td style="text-align:left">特殊值</td><td>offer(e)</td><td>poll()</td><td>peek()</td></tr><tr><td style="text-align:left">超时退出</td><td>offer(e, time, unit)</td><td>poll(time, unit)</td><td>不可用</td></tr></tbody></table></div><p>模拟插入元素阻塞的场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建一个长度为3的阻塞队列</span></span><br><span class="line">BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 往阻塞队列插入数据</span></span><br><span class="line">blockingQueue.put(<span class="string">"a"</span>);</span><br><span class="line">System.out.println(<span class="string">"插入 a 元素成功！"</span>);</span><br><span class="line">blockingQueue.put(<span class="string">"b"</span>);</span><br><span class="line">System.out.println(<span class="string">"插入 b 元素成功！"</span>);</span><br><span class="line">blockingQueue.put(<span class="string">"c"</span>);</span><br><span class="line">System.out.println(<span class="string">"插入 c 元素成功！"</span>);</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line">插入 a 元素成功！</span><br><span class="line">插入 b 元素成功！</span><br><span class="line">... 程序一直卡死。。。</span><br></pre></td></tr></table></figure><p>模拟移除元素阻塞的场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建一个长度为3的阻塞队列</span></span><br><span class="line">BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 往阻塞队列插入数据</span></span><br><span class="line">blockingQueue.put(<span class="string">"a"</span>);</span><br><span class="line">System.out.println(<span class="string">"插入 a 元素成功！"</span>);</span><br><span class="line">blockingQueue.put(<span class="string">"b"</span>);</span><br><span class="line">System.out.println(<span class="string">"插入 b 元素成功！"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"移除 "</span> + blockingQueue.take() + <span class="string">" 元素成功！"</span>);</span><br><span class="line">System.out.println(<span class="string">"移除 "</span> + blockingQueue.take() + <span class="string">" 元素成功！"</span>);</span><br><span class="line">System.out.println(<span class="string">"移除 "</span> + blockingQueue.take() + <span class="string">" 元素成功！"</span>);</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line">插入 a 元素成功！</span><br><span class="line">插入 b 元素成功！</span><br><span class="line">移除 a 元素成功！</span><br><span class="line">移除 b 元素成功！</span><br><span class="line">... 程序一直卡死。。。</span><br></pre></td></tr></table></figure><p>模拟插入元素异常的场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建一个长度为3的阻塞队列</span></span><br><span class="line">BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 往阻塞队列插入数据</span></span><br><span class="line">System.out.println(blockingQueue.add(<span class="string">"a"</span>));</span><br><span class="line">System.out.println(blockingQueue.add(<span class="string">"b"</span>));</span><br><span class="line">System.out.println(blockingQueue.add(<span class="string">"c"</span>));</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.IllegalStateException: Queue full</span><br><span class="line">at java.util.AbstractQueue.add(AbstractQueue.java:<span class="number">98</span>)</span><br><span class="line">at java.util.concurrent.ArrayBlockingQueue.add(ArrayBlockingQueue.java:<span class="number">312</span>)</span><br><span class="line">at test5.Demo.main(Demo.java:<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>模拟移除元素异常的场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建一个长度为3的阻塞队列</span></span><br><span class="line">BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 往阻塞队列插入数据</span></span><br><span class="line">System.out.println(blockingQueue.add(<span class="string">"a"</span>));</span><br><span class="line">System.out.println(blockingQueue.remove());</span><br><span class="line">System.out.println(blockingQueue.remove());</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">a</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.util.NoSuchElementException</span><br><span class="line">at java.util.AbstractQueue.remove(AbstractQueue.java:<span class="number">117</span>)</span><br><span class="line">at test5.Demo.main(Demo.java:<span class="number">16</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建一个长度为3的阻塞队列</span></span><br><span class="line">BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 往阻塞队列插入数据</span></span><br><span class="line">System.out.println(<span class="string">"生产数据。。。"</span>);</span><br><span class="line">System.out.println(blockingQueue.offer(<span class="string">"a"</span>));</span><br><span class="line">System.out.println(blockingQueue.offer(<span class="string">"b"</span>));</span><br><span class="line">System.out.println(blockingQueue.offer(<span class="string">"c"</span>));</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"消费数据。。。"</span>);</span><br><span class="line">System.out.println(blockingQueue.poll());</span><br><span class="line">System.out.println(blockingQueue.poll());</span><br><span class="line">System.out.println(blockingQueue.poll());</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line">生产数据。。。</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">消费数据。。。</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line"><span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>模拟超时退出场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建一个长度为3的阻塞队列</span></span><br><span class="line">BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"生产数据。。。"</span>);</span><br><span class="line"><span class="comment">// 2. 往阻塞队列插入数据</span></span><br><span class="line">System.out.println(blockingQueue.offer(<span class="string">"a"</span>, <span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">System.out.println(blockingQueue.offer(<span class="string">"b"</span>, <span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line"><span class="comment">// 3. 从这里开始，返回false。</span></span><br><span class="line">System.out.println(blockingQueue.offer(<span class="string">"c"</span>, <span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">System.out.println(blockingQueue.offer(<span class="string">"d"</span>, <span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"消费数据。。。"</span>);</span><br><span class="line"><span class="comment">// 4. 消费者消费数据</span></span><br><span class="line">System.out.println(blockingQueue.poll(<span class="number">1</span>, TimeUnit.SECONDS));</span><br><span class="line">System.out.println(blockingQueue.poll(<span class="number">1</span>, TimeUnit.SECONDS));</span><br><span class="line"><span class="comment">// 5. 从这里开始，返回false。</span></span><br><span class="line">System.out.println(blockingQueue.poll(<span class="number">1</span>, TimeUnit.SECONDS));</span><br><span class="line">System.out.println(blockingQueue.poll(<span class="number">1</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------打印信息----------------------------------------------------------</span><br><span class="line">生产数据。。。</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">消费数据。。。</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line"><span class="keyword">null</span></span><br><span class="line"><span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>可以看到在等待2秒后，队列读取不到数据自动返回 <code>null</code>。</p><h2 id="种类分析"><a href="#种类分析" class="headerlink" title="种类分析"></a>种类分析</h2><ol><li><p>ArrayBlockingQueue<br>由数组结构组成的有界阻塞队列。</p></li><li><p>LinkedBlockingQueue<br>由链表结构组成的有界（但大小为 Integer.MAX）阻塞队列。</p></li><li><p>PriorityBlockingQueue<br>支持优先级排序的无界阻塞队列。</p></li><li><p>DelayQueue<br>使用优先级队列实现的延迟无界阻塞队列。</p></li><li><p>SynchronousQueue<br>不存储元素的阻塞队列，也即单个元素。</p></li><li><p>LinkedTransferQueue<br>由链表结构组成的无界阻塞队列。</p></li><li><p>LinkedBlockingDeque<br>由链表结构组成的双向阻塞队列。</p></li></ol><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>生产者消费者模型</li><li>线程池</li><li>消息中间件</li></ol><p>一个初始值为零的变量，两个线程对其交替操作，一个加 1 一个减 1，来 5 轮。</p><blockquote><p>高并发编程口诀：多线程操纵一个资源类、判断 + 干活 + 唤醒通知，严防多线程环境下的虚假唤醒。</p></blockquote><h4 id="synchronized-版本"><a href="#synchronized-版本" class="headerlink" title="synchronized 版本"></a>synchronized 版本</h4><h4 id="RentrantLock-版本"><a href="#RentrantLock-版本" class="headerlink" title="RentrantLock 版本"></a>RentrantLock 版本</h4><h4 id="阻塞队列版本"><a href="#阻塞队列版本" class="headerlink" title="阻塞队列版本"></a>阻塞队列版本</h4><h4 id="线程通信之生产者消费者阻塞队列"><a href="#线程通信之生产者消费者阻塞队列" class="headerlink" title="线程通信之生产者消费者阻塞队列"></a>线程通信之生产者消费者阻塞队列</h4><ol><li>一个阻塞队列有生产者消费者</li><li>生产者生产一个，消费者消费一个</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 默认开启，进行生产/消费</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 生产内容</span></span><br><span class="line"><span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"><span class="comment">// 阻塞队列</span></span><br><span class="line"><span class="keyword">private</span> BlockingQueue&lt;Integer&gt; blockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Test3</span><span class="params">(BlockingQueue&lt;Integer&gt; blockingQueue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">    System.out.println(blockingQueue.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (blockingQueue.offer(atomicInteger.incrementAndGet(), <span class="number">2L</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                System.out.println(<span class="string">"生产者「"</span> + Thread.currentThread().getName() + <span class="string">"」插入队列成功！"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"生产者「"</span> + Thread.currentThread().getName() + <span class="string">"」插入队列失败！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"生产者「"</span> + Thread.currentThread().getName() + <span class="string">"」停止生产数据！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">comsume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Integer result = blockingQueue.poll(<span class="number">2L</span>, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"消费者「"</span> + Thread.currentThread().getName() + <span class="string">"」获取数据成功！"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"消费者「"</span> + Thread.currentThread().getName() + <span class="string">"」获取数据失败！"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"消费者「"</span> + Thread.currentThread().getName() + <span class="string">"」停止获取数据！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Test3 test = <span class="keyword">new</span> Test3(<span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>));</span><br><span class="line">    <span class="keyword">new</span> Thread(test::produce, <span class="string">"T1"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(test::comsume, <span class="string">"T2"</span>).start();</span><br><span class="line"></span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">    test.stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">生产者「T1」插入队列成功！</span><br><span class="line">消费者「T2」获取数据成功！</span><br><span class="line">生产者「T1」插入队列成功！</span><br><span class="line">消费者「T2」获取数据成功！</span><br><span class="line">生产者「T1」插入队列成功！</span><br><span class="line">消费者「T2」获取数据成功！</span><br><span class="line">生产者「T1」插入队列成功！</span><br><span class="line">消费者「T2」获取数据成功！</span><br><span class="line">生产者「T1」插入队列成功！</span><br><span class="line">消费者「T2」获取数据成功！</span><br><span class="line"></span><br><span class="line">消费者「T2」停止获取数据！</span><br><span class="line">生产者「T1」停止生产数据！</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM_03 运行时数据区</title>
      <link href="/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM_03%20%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/"/>
      <url>/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM_03%20%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<p>虚拟机的内存区域又称为运行时数据区，分为线程私有区域（程序计数器、虚拟机栈、本地方法区）、线程共享区域（堆，方法区）和直接内存。</p><p>线程私有区域的生命周期与线程相同，随线程的启动而创建，随线程的结束而销毁。线程共享区域随虚拟机的启动而创建，随虚拟机的关闭而销毁。</p><p>直接内存也称为堆外内存，它并不是运行时数据区的一部分，但在并发编程中被频繁使用。NIO 模块提供的基于 <code>Channel</code> 与 <code>Buffer</code> 的 I/O 操作方式就是基于堆外内存实现的。</p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><blockquote><p>私有、行号、空、极小、无溢出</p></blockquote><p>程序计数器是一块很小的内存空间，用与存储当前运行的线程所执行的字节码的行号指示器。每个运行中的线程都有一个独立的程序计数器，在方法正在执行时，该方法的程序计数器记录的是实时虚拟机字节码指令的地址；如果该方法执行的是 Native 方法，则程序计数器的值为空。</p><p>程序计数器属于“线程私有”的内存区域，它是唯一没有内存溢出（OOM）的区域。</p><p><img src="https://img-blog.csdnimg.cn/20200526220317683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbmNlbjk=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><blockquote><p>私有、方法执行过程、栈帧、局部变量表、操作数据栈、动态链接、方法出口</p></blockquote><p>虚拟机栈是描述 Java 方法执行过程的内存模型，它在当前栈帧中存储了局部变量表、操作数据栈、动态链接、方法出口等信息。</p><p>栈帧用来记录方法的执行过程，在方法被执行时虚拟机会为其创建一个与之对应的栈帧，方法的执行和返回对应栈帧在虚拟机中的入栈与出栈。无论方法是正常完成还是异常完成，都视为方法运行结束。</p><p><img src="https://img2020.cnblogs.com/blog/1889810/202006/1889810-20200613173051867-127265622.png" alt=""></p><h2 id="本地方法区"><a href="#本地方法区" class="headerlink" title="本地方法区"></a>本地方法区</h2><blockquote><p>Native</p></blockquote><p>本地方法区和虚拟机栈的作用相似，区别是虚拟机栈为执行 Java 方法服务，本地方法区（栈）为执行 Native 方法服务。</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><blockquote><p>共享 新生代 老年代</p></blockquote><p>在虚拟机运行过程中创建的对象和产生的数据都被存储在堆中，堆是被线程共享的内存区域，也是垃圾收集器进行垃圾回收的最主要的内存区域。</p><p>由于现代虚拟机采用分代收集算法，因此堆从 GC 的角度还可以细分为：新生代、老年代和永久代。</p><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1681675119,796495208&amp;fm=26&amp;gp=0.jpg" alt=""></p><h4 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h4><p>新创建的对象都会放在新生代（除了大对象外），新生代默认占用 1/3 的堆内存空间。由于虚拟机会频繁创建对象，所以新生代会频繁触发 MinorGC 进行垃圾回收。</p><p>因为 98% 的对象都是“朝生夕死”，为了高效的利用内存，新生代又分为 Eden 区、SurvivorFrom 区和 SurvivorTo 区，如下所述：</p><ol><li><p>Eden 区<br> Java 新创建的对象会首先被存放在 Eden 区，如果新创建的对象属于大对象，则直接将其分配到老年代。在 Eden 区的内存空间不足时会触发 MinorGC，对新生代进行垃圾回收。</p><p> 大对象一般为 2kb ~ 128kb，可以通过 <code>-XX:PretenusrSizeThreshold</code> 进行设置。</p></li><li>SurvivorTo 区<br> 保留上一次 MinorGC 时的幸存者。</li><li>SurvivorFrom 区<br> 将上一次 MinorGC 时的幸存者作为这一次 MinorGC 的被扫描者。</li></ol><p>新生代的 GC 过程称为 MinorGC，采用复制算法实现，具体如下：</p><ol><li>把在 Eden 和 SurvivorFrom 区存活的对象复制到 SurvivorTo 区中，同时把这些对象的年龄加 1；如果对象的年龄达到老年代的标准或 SirvivorTo 区的内存空间不够，则直接将其复制到老年代。</li><li>清空 Eden 和 SurvivorFrom 区中的对象。</li><li>将 SurvivorFrom 和 SurvivorTo 区互换，原来的 SurvivorTo 区成为下一次 GC 时的 SurvivorFrom 区。</li></ol><blockquote><p>达到老年代的标准的次数默认为 15，可以通过 <code>-XX:MaxTenuringThreshold</code> 设置。</p></blockquote><h4 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h4><p>老年代主要存放长生命周期或比较大的对象。老年代的 GC 过程叫作 MajorGC。在老年代，对象比较稳定，MajorGC 不会被频繁触发。在进行 MajorGC 是，虚拟机会进行一次 MinorGC，在 MinorGC 过后仍然出现老年代且当老年代空间不足或无法找到足够大的连续内存空间分配给新创建的大对象时，出触发 MajorGC 进行垃圾回收，释放虚拟机的内存空间。</p><p>MajorGC 采用标记清除算法，该算法首先会扫描所有对象并标记存活的对象，然后回收未被标记的对象，并释放内存空间。</p><p>因为要先扫描老年代的对象再回收，所以 MajorGC 的耗时较长。MajorGC 的标记清除算法容易产生内存碎片。在老年代没有内存空间可分配时，会抛出 OOM 异常。</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>方法区是所有线程共享，主要用于存储类的信息、常量池、方法数据、方法代码等。方法区逻辑上属于堆的一部分，但是为了与堆进行区分，通常又叫“非堆”。</p><p>方法区在不同的虚拟机中有不同的实现。例如在 Hotspot 中方法区有永久代和元空间两种实现。可以把方法区当成接口，永久代或者元空间当作实现。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doLzEzOTI1MTcxMzgvaW1nUmVwb3NpdG9yeUBtYXN0ZXIvaW1hZ2UtMjAyMDA2MDQxMzU3MjQ4OTUucG5n?x-oss-process=image/format,png" alt=""></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>方法区与堆一样，是各个线程共享的内存区域，当一个类没有加载的话，只能有一个线程去调用 ClassLoader，其他线程想要使用这个类的话就必须得等待。类只需要加载一次。</p><p>方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，虚拟机同样会抛出内存溢出错误。</p><h4 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h4><p>方法区存储有已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doLzEzOTI1MTcxMzgvaW1nUmVwb3NpdG9yeUBtYXN0ZXIvaW1hZ2UtMjAyMDA2MTAxNTA1MDQ3NjcucG5n?x-oss-process=image/format,png" alt=""></p><p>对每个加载的类型（类、接口、枚举、注解），虚拟机必须在方法区中存储以下类型信息:</p><ol><li><p>这个类型的完整有效名<br> 例如 <code>com.icebartech.Child</code></p></li><li><p>这个类型直接父类的完整有效名。<br> 例如 <code>com.icebartech.Parent</code>, 对于 <code>interface</code> 或是 <code>java.lang.Object</code> 则没有父类。</p></li><li><p>这个类型的修饰符<br> 例如 <code>public</code>、<code>abstract</code>、<code>final</code> 的某个子集。</p></li><li><p>这个类型的接口<br> 直接接口一个有序列表。</p></li></ol><p>域的相关信息包括: 域名称、域类型、域修饰符（<code>public</code>、<code>private</code>、<code>protected</code>、<code>static</code>、<code>final</code>、<code>volatile</code>、<code>transient</code> 的某个子集）。xuniji必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。</p><p>JVM 必须保存所有方法的以下信息，同域信息一样包括声明顺序:</p><ol><li>方法名称</li><li>方法的返回类型（或 <code>Void.class</code>）</li><li>方法参数的数量和类型（按顺序）</li><li>方法的修饰符（<code>public</code>、<code>private</code>、<code>protected</code>、<code>static</code>、<code>final</code>、<code>volatile</code>、<code>transient</code> 的某个子集）</li><li>方法的字节码、操作数栈、局部变量表及大小（<code>abstract</code> 和 <code>native</code> 方法除外）</li><li>异常表（<code>abstract</code> 和 <code>native</code> 方法除外）</li><li>每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</li></ol><p>常量池，可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型。</p><p>常量池表是 .class 文件的一部分，用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</p><p>运行时常量池是方法区的一部分。在加载类和接口到虚拟机后，就会创建对应的运行时常量池。</p><p>数量值、字符串值、类引用、方法引用、字段引用。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doLzEzOTI1MTcxMzgvaW1nUmVwb3NpdG9yeUBtYXN0ZXIvaW1hZ2UtMjAyMDA2MTExMzA2MzY0MTkucG5n?x-oss-process=image/format,png" alt=""></p><h4 id="为什么需要提供一个常量池呢？"><a href="#为什么需要提供一个常量池呢？" class="headerlink" title="为什么需要提供一个常量池呢？"></a>为什么需要提供一个常量池呢？</h4><p>一个 Java 源文件中的类、接口，编译后产生一个字节码文件。而 Java 中的字节码需要数据支持，通常这种数据会很大以至于不能直接存到字节码里，换另一种方式可以存到常量池，这个字节码包含了指向常量池的引用。在动态链接的时候会用到运行时常量池。</p><h4 id="Hotspot-中方法区的演进"><a href="#Hotspot-中方法区的演进" class="headerlink" title="Hotspot 中方法区的演进"></a>Hotspot 中方法区的演进</h4><p>在 JDK7 及以前，习惯上把方法区称为永久代。JDK8 开始，使用元空间取代了永久代。</p><p>本质上，方法区和永久代并不等，仅是对 Hotspot 而言的。《Java 虚拟规范》对如何实现方法区，不做统一要求，例如: BEA JRockit/ IBM J9中不存在永久代的概念。而且从现在看来，当年使用永久代，不是好的 idea。永久代使用的是 Java 虚拟机内存，它会导致 Java 程序更容易 OOM（超过 <code>-XX:MaxPermSize</code> 上限）。</p><p>到了JDK8，Hotspot 终于完全废弃了永久代的概念，改用与 JRockit、J9 一样的元空间来代替。元空间的本质和永久代类似，都是对JVM规范中方法区的实现，不过元空间与永代最大的区别在于元空间不在虚拟机设置的内存中，而是使用本地内存。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doLzEzOTI1MTcxMzgvaW1nUmVwb3NpdG9yeUBtYXN0ZXIvaW1hZ2UtMjAyMDA2MDQxNTQ5Mzc3NDAucG5n?x-oss-process=image/format,png" alt=""></p><h4 id="大小设置"><a href="#大小设置" class="headerlink" title="大小设置"></a>大小设置</h4><p>方法区的大小不必是固定的，JVM 可以根据应用的需要动态调整。</p><p>JDK7 及以前是通过 <code>-xx:PermSize</code> 来设置永久代初始分配空间，默认值是 20.75M。通过 <code>-XX:MaxPermSize</code> 来设定永久代最大可分配空间，32 位机器默认是 64M，64 位机器模式是 82M。当 JVM 加载的类信息容量超过了这个值，会报异常 <code>OutOfMemoryError : PermGenspace</code>。</p><p>JDK8 及以后是通过 <code>-XX: MetaspaceSize</code> 和 <code>-XX:MaxMetaspaceSize</code> 来指定元空间的大小。<br>默认情况下，<code>-XX: MetaspaceSize</code> 的值是 21M，而 <code>-XX:MaxMetaspaceSize</code> 的值是 -1，即没有限制，直到虚拟机耗尽所有的可用系统内存发生溢出，抛出 <code>OutOfMemoryError: Metaspace</code> 异常。</p><p>另外要说明的是，当 JVM 加载的类信息超过初始元空间大小（高水位），Full GC 将会被触发并卸载没用的类（即这些类对应的类加载器不再存活）。然后这个高水位线将会重置，新的高水位线的值取决于 GC 后释放了多少元空间。如果释放的空间不足，那么在不超过 <code>MaxMetaspaceSize</code> 时，适当提高该值。如果释放空间过多，则适当降低该值。所以为了避免频繁的 CG，建议将 <code>-XX:MetaspaceSize</code> 设置为一个相对较高的值。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li><p>讲一下 JVM 的内存结构。<br>程序计数器、虚拟机栈、本地方法区、堆、方法区<br>私有共享、溢出</p></li><li><p>堆分为哪几部分，默认年龄多大进入老年代？<br>新生代，Eden，ServivorFrom、ServivorTo，老年代。15</p></li><li><p>JVM 的内存结构，Java8 做了什么修改？<br>永久区、元数据</p></li></ol><h4 id="Java-堆"><a href="#Java-堆" class="headerlink" title="Java 堆"></a>Java 堆</h4><ol><li><p>新生代分为几个区？<br>Eden、ServivorFrom、ServivorTo</p></li><li><p>新生代使用什么算法进行垃圾回收？为什么使用这个算法？<br>复制算法。过程<br>因为复制算法的实现，导致复制算法适用于对象较少的情况下，当Eden区的内存被填满，会触发minorGC ，Eden区对象会从Eden转移到Survivor区，随着年龄的增加再到老年代。</p></li><li><p>JVM 内存结构详细分配，各比例是多少<br>堆？1:2 8:1:1</p></li><li><p>JVM 数据存储模型，新生代、年老代的构造？</p></li><li><p>JVM 内存模型，新生代和老年的回收机制？<br>什么时候回收、复制算法、标志整理、碎片、各种虚拟机的实现</p></li></ol><h4 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h4><ol><li>有哪些内存溢出的异常？触发条件是什么<br>栈溢出：默认栈大小、1w个栈帧、方法调用太多，或者方法内的局部变量太多、、<br>堆溢出：老年代空间不足、对象太多，<br>方法区和运行时常量池溢出</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 虚拟机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM_02 类的加载机制</title>
      <link href="/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM_02%20%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM_02%20%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>类的加载指的虚拟机将 .class 文件加载到内存中，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型。</p><p>类的加载的最终产品是位于堆区中的 <code>Class</code> 对象，<code>Class</code> 对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。</p><p><img src="https://img2020.cnblogs.com/blog/1846149/202004/1846149-20200401105701873-414824729.png" alt=""></p><p>类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM 规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了 .class 文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误（<code>LinkageError</code> 错误），如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。</p><p>加载 .class 文件的方式有：</p><ol><li>从本地系统中直接加载</li><li>通过网络下载 .class 文件</li><li>从 zip，jar 等归档文件中加载 .class 文件</li><li>从专有数据库中提取 .class 文件</li><li>将 Java 源文件动态编译为 .class 文件</li></ol><h2 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h2><p>类的整个生命周期包括加载、验证、准备、解析、初始化、使用和卸载 7 个阶段，其中验证、准备、解析这 3 个部分统称为连接。</p><p>加载、验证、准备、初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持 Java 语言的运行时绑定（也成为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。</p><blockquote><p>解析阶段的顺序还得再研究研究。。。</p></blockquote><p><img src="https://images2015.cnblogs.com/blog/331425/201606/331425-20160621125943209-1443333281.png" alt=""></p><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>加载（查找并加载类的二进制数据）是类加载过程的第一个阶段，在加载阶段，虚拟机需要完成以下三件事情：</p><ol><li>通过一个类的全限定名来获取其定义的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在 Java 堆中生成一个代表这个类的 <code>java.lang.Class</code> 对象，作为对方法区中这些数据的访问入口。</li></ol><p>相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。</p><p>加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在 Java 堆中也创建一个 <code>java.lang.Class</code> 类的对象，这样便可以通过该对象访问方法区中的这些数据。</p><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><p>连接阶段可以分成 3 个步骤：<strong>验证</strong>、<strong>准备</strong>、<strong>解析</strong>。</p><p><strong>验证</strong>阶段用于确保被加载的类的正确性。</p><p><strong>验证</strong>是连接阶段的第一步，这一阶段的目的是为了确保 <code>Class</code> 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致会完成 4 个阶段的检验动作：</p><ol><li><strong>文件格式验证</strong>：验证字节流是否符合 <code>Class</code> 文件格式的规范；例如：是否以 <code>0xCAFEBABE</code> 开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。</li><li><strong>元数据验证</strong>：对字节码描述的信息进行语义分析（注意：对比 javac 编译阶段的语义分析），以保证其描述的信息符合 Java 语言规范的要求；例如：这个类是否有父类，除了 <code>java.lang.Object</code> 之外。</li><li><strong>字节码验证</strong>：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。</li><li><strong>符号引用验证</strong>：确保解析动作能正确执行。</li></ol><p><strong>验证</strong>阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用 <code>-Xverify:none</code> 参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间（SpringBoot 项目测试 17s 可以缩短到 16s）。</p><p><strong>准备</strong>阶段用于为类的静态变量分配内存，并将其初始化为默认值。</p><p><strong>准备</strong>阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：</p><ol><li>这时候进行内存分配的仅包括类变量（<code>static</code>），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在 Java 堆中。</li><li><p>这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、<code>null</code>、<code>false</code>等），而不是被在 Java 代码中被显式地赋予的值。</p><p> 假设一个类变量的定义为：<code>public static int value = 3</code>;</p><p> 那么变量 <code>value</code> 在准备阶段过后的初始值为 0，而不是 3，因为这时候尚未开始执行任何 Java 方法，而把 <code>value</code> 赋值为 3 的 <code>putstatic</code> 指令是在程序编译后，存放于类构造器 <code>&lt;clinit&gt;()</code> 方法之中的，所以把 <code>value</code> 赋值为 3 的动作将在初始化阶段才会执行。</p></li><li><p>如果类字段的字段属性表中存在 ConstantValue 属性，即同时被 <code>final</code> 和 <code>static</code> 修饰，那么在准备阶段变量 <code>value</code> 就会被初始化为 ConstValue 属性所指定的值。</p><p> 假设上面的类变量value被定义为： <code>public static final int value = 3</code>。</p><p> 编译时 Javac 将会为 <code>value</code> 生成 ConstantValue 属性，在准备阶段虚拟机就会根据 ConstantValue 的设置将 <code>value</code> 赋值为 3。我们可以理解为 <code>static final</code> 常量在编译期就将其结果放入了调用它的类的常量池中。</p></li></ol><p><strong>解析</strong>阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，<strong>解析</strong>阶段会伴随着 JVM 执行完初始化之后再开始。</p><p><strong>解析</strong>动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。符号引用就是一组符号来描述目标，可以是任何字面量。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初始化就是为类的静态变量赋予正确的初始值，执行静态代码块。初始化阶段才真正开始执行类中定义的代码。</p><p>初始化会执行类构造器方法 <code>clinit()</code>，此方法不需要定义，由 javac 编译器自动收集类中的所有静态变量的赋值动作和静态代码块中的语句合并而来。如果类没有定义静态变量或静态代码块，则 javac 不生成 <code>clinit()</code>。</p><p>在 Java 中对类变量进行初始值设定有两种方式：</p><ol><li>声明类变量是指定初始值。</li><li>使用静态代码块为类变量指定初始值。</li></ol><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>程序之间的相互调用。</p><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p>即销毁一个对象，一般情况下中有垃圾回收器完成。代码层面的销毁只是将引用置为 null。</p><h2 id="类的加载补充"><a href="#类的加载补充" class="headerlink" title="类的加载补充"></a>类的加载补充</h2><h4 id="类加载的触发"><a href="#类加载的触发" class="headerlink" title="类加载的触发"></a>类加载的触发</h4><ol><li>启动类、JVM 自动加载</li><li>调用类的静态变量/方法</li><li>创建类的实例</li><li>动态加载（<code>Class.forName()</code> 或 <code>ClassLoader.loadClass()</code>）</li><li>被加载的类的父类</li></ol><blockquote><p>通过数组定义来引用类，或者访问常量，不会触发此类的初始化。</p></blockquote><h4 id="类加载的步骤"><a href="#类加载的步骤" class="headerlink" title="类加载的步骤"></a>类加载的步骤</h4><p>这里需要分情况来考虑。</p><p>类没有加载，父类没有加载：</p><ol><li>判断类还没被加载</li><li>加载类（加载、验证、准备、解析）</li><li>判断父类没有被加载，加载父类</li><li>初始化类（赋值静态变量，执行静态代码块）</li></ol><p>类没有加载，父类已经加载：</p><ol><li>判断子类还没被加载</li><li>加载子类（加载、验证、准备、解析）</li><li>初始化子类（赋值静态变量，执行静态代码块）</li></ol><p>类已经加载：</p><ol><li>发现类已经加载了</li><li>没有了</li></ol><blockquote><p>在使用类时，可能会碰到两种情况，一是类还没有加载到内存中，这时候需要走加载、验证、准备、解析、初始化阶段；二是类已经加载到内存中了，但是还没初始化，这是直接走初始化阶段就可以了。</p></blockquote><h4 id="类加载的顺序"><a href="#类加载的顺序" class="headerlink" title="类加载的顺序"></a>类加载的顺序</h4><p>类加载的顺序或者调用顺序要分情况来讨论。</p><p>如果是调用静态变量/静态方法：</p><ol><li>加载父类的静态变量/静态代码块<br> 先递归地加载父类的静态变量/静态代码块。同一个类里的静态变量/静态代码块，按写代码的顺序加载。</li><li>加载本类的静态变量/静态代码块<br> 这里的本类是指被调用的静态变量/静态方法所在的类。如果用子类调用父类的静态变量/静态方法，则本类是父类，而子类不加载。</li></ol><p>如果是调用成员变量/成员方法：</p><ol><li>加载父类的静态变量/静态代码块</li><li>加载本类的静态变量/静态代码块</li><li>加载父类的成员变量/代码块</li><li>加载父类的构造方法</li><li>加载本类的成员变量/代码块</li><li>加载本类的构造方法</li><li>加载成员变量/成员方法</li></ol><blockquote><p>一个类的静态变量/静态代码块只加载一次，成员变量/代码块在每次创建实例时都加载。</p></blockquote><h4 id="类的销毁"><a href="#类的销毁" class="headerlink" title="类的销毁"></a>类的销毁</h4><p>只能等到虚拟机关闭。？？</p><h2 id="类的加载器"><a href="#类的加载器" class="headerlink" title="类的加载器"></a>类的加载器</h2><p>类的加载阶段（查找并加载类的二进制文件）放到了虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。这个动作的代码模块称为“类加载器”。</p><p>类加载器虽然说只用于一个类的加载动作，但是它在 Java 程序中起到的作用却远远不限于类加载阶段。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在 Java 虚拟机中的唯一性。每一个类加载器都拥有一个独立的类名称空间。</p><p>看下面一个小例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassLoader loader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        System.out.println(loader);</span><br><span class="line">        System.out.println(loader.getParent());</span><br><span class="line">        System.out.println(loader.getParent().getParent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后，输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@64fef26a</span><br><span class="line">sun.misc.Launcher$ExtClassLoader@1ddd40f3</span><br><span class="line">null</span><br></pre></td></tr></table></figure><p>从上面的结果可以看出，并没有获取到 <code>ExtClassLoader</code> 的父 Loader，原因是 Bootstrap Loader（引导类加载器）是用 C 语言实现的，找不到一个确定的返回父 Loader 的方式，于是就返回 <code>null</code>。</p><p>这几种类加载器的层次关系如下图所示：</p><p><img src="https://images2015.cnblogs.com/blog/331425/201606/331425-20160621125944459-1013316302.jpg" alt=""></p><blockquote><p>注意：这里父类加载器并不是通过继承关系来实现的，而是采用组合实现的。</p></blockquote><p>站在 Java 虚拟机的角度来讲，只存在两种不同的类加载器：启动类加载器：它使用 C++ 实现（这里仅限于 Hotspot，也就是 JDK1.5 之后默认的虚拟机，有很多其他的虚拟机是用 Java 语言实现的），是虚拟机自身的一部分；所有其他的类加载器：这些类加载器都由 Java 语言实现，独立于虚拟机之外，并且全部继承自抽象类 <code>java.lang.ClassLoader</code>，这些类加载器需要由启动类加载器加载到内存中之后才能去加载其他的类。</p><p>站在 Java 开发人员的角度来看，类加载器可以大致划分为以下三类：</p><ol><li><strong>启动类加载器</strong>：Bootstrap ClassLoader，负责加载存放在 <code>JDK\jre\lib</code>（JDK代表JDK的安装目录，下同）下，或被 <code>-Xbootclasspath</code> 参数指定的路径中的，并且能被虚拟机识别的类库（如 rt.jar，所有的 java.* 开头的类均被 Bootstrap ClassLoader 加载）。启动类加载器是无法被 Java 程序直接引用的。</li><li><strong>扩展类加载器</strong>：Extension ClassLoader，该加载器由 <code>sun.misc.Launcher$ExtClassLoader</code> 实现，它负责加载 <code>JDK\jre\lib\ext</code> 目录中，或者由 java.ext.dirs 系统变量指定的路径中的所有类库（如 javax.* 开头的类），开发者可以直接使用扩展类加载器。</li><li><strong>应用程序类加载器</strong>：Application ClassLoader，该类加载器由 <code>sun.misc.Launcher$AppClassLoader</code> 来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li></ol><p>应用程序都是由这三种类加载器互相配合进行加载的，如果有必要，我们还可以加入自定义的类加载器。因为 JVM 自带的 ClassLoader 只是懂得从本地文件系统加载标准的 Java class 文件，因此如果编写了自己的 ClassLoader，便可以做到如下几点：</p><ol><li>在执行非置信代码之前，自动验证数字签名。</li><li>动态地创建符合用户特定需要的定制化构建类。</li><li>从特定的场所取得java class，例如数据库中和网络中。</li></ol><p>JVM类加载机制：</p><ol><li>全盘负责，当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</li><li>父类委托，先让父类加载器试图加载该类，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</li><li>缓存机制，缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区寻找该Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓存区。这就是为什么修改了Class后，必须重启JVM，程序的修改才会生效</li></ol><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><p>双亲委派模型就是，如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。</p><p>双亲委派模型意义：</p><ol><li>系统类防止内存中出现多份同样的字节码（例如用户就可以自定义一个一摸一样的 <code>String</code> 类，但是不会被加载）。</li><li>保证 Java 程序安全稳定运行（确保 Java 的核心类不被修改）。</li></ol><p>ClassLoader 源码分析：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name)<span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)<span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// 首先判断该类型是否已经被加载</span></span><br><span class="line">    Class c = findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果没有被加载，就委托给父类加载或者委派给启动类加载器加载</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果存在父类加载器，就委派给父类加载器加载</span></span><br><span class="line">                c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果不存在父类加载器，就检查是否是由启动类加载器加载的类，通过调用本地方法native Class findBootstrapClass(String name)</span></span><br><span class="line">                c = findBootstrapClass0(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// 如果父类加载器和启动类加载器都不能完成加载任务，才调用自身的加载功能</span></span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">        resolveClass(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h2><p>通常情况下，我们都是直接使用系统类加载器。但是，有的时候，我们也需要自定义类加载器。比如应用是通过网络来传输 Java 类的字节码，为保证安全性，这些字节码经过了加密处理，这时系统类加载器就无法对其进行加载，这样则需要自定义类加载器来实现。自定义类加载器一般都是继承自 <code>ClassLoader</code> 类，从上面对 <code>loadClass</code> 方法来分析来看，我们只需要重写 <code>findClass</code> 方法即可。下面我们通过一个示例来演示自定义类加载器的流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] classData = loadClassData(name);</span><br><span class="line">        <span class="keyword">if</span> (classData == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] loadClassData(String className) &#123;</span><br><span class="line">        String fileName = root + File.separatorChar</span><br><span class="line">                + className.replace(<span class="string">'.'</span>, File.separatorChar) + <span class="string">".class"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream ins = <span class="keyword">new</span> FileInputStream(fileName);</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> bufferSize = <span class="number">1024</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferSize];</span><br><span class="line">            <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((length = ins.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoot</span><span class="params">(String root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyClassLoader classLoader = <span class="keyword">new</span> MyClassLoader();</span><br><span class="line">        classLoader.setRoot(<span class="string">"E:\\temp"</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; testClass = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            testClass = classLoader.loadClass(<span class="string">"com.neo.classloader.Test2"</span>);</span><br><span class="line">            Object object = testClass.newInstance();</span><br><span class="line">            System.out.println(object.getClass().getClassLoader());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义类加载器的核心在于对字节码文件的获取，如果是加密的字节码则需要在该类中对文件进行解密。由于这里只是演示，我并未对 class 文件进行加密，因此没有解密的过程。这里有几点需要注意：</p><ol><li>这里传递的文件名需要是类的全限定性名称，即 <code>com.paddx.test.classloading.Test</code> 格式的，因为 defineClass 方法是按这种格式进行处理的。</li><li>最好不要重写 <code>loadClass</code> 方法，因为这样容易破坏双亲委托模式。</li><li>这类 <code>Test</code> 类本身可以被 <code>AppClassLoader</code> 类加载，因此我们不能把 <code>com/paddx/test/classloading/Test.class</code> 放在类路径下。否则，由于双亲委托机制的存在，会直接导致该类由 <code>AppClassLoader</code> 加载，而不会通过我们自定义类加载器来加载。</li></ol><h2 id="题外：关于符号引用和直接引用"><a href="#题外：关于符号引用和直接引用" class="headerlink" title="题外：关于符号引用和直接引用"></a>题外：关于符号引用和直接引用</h2><p>在 JVM 中，类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载 7 个阶段。而解析阶段即是 JVM 将常量池内的符号引用替换为直接引用的过程。</p><p>符号引用是以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可，符号引用的目标不一定要加载到内存中。</p><p>在Java中，一个 Java 类将会编译成一个 class 文件。在编译时，Java 类并不知道所引用的类的实际地址，因此只能使用符号引用来代替。比如 <code>org.simple.People</code> 类引用了 <code>org.simple.Language</code> 类，在编译时 <code>People</code> 类并不知道 <code>Language</code> 类的实际内存地址，因此只能使用符号 <code>org.simple.Language</code>（假设是这个，当然实际中是由类似于 CONSTANT_Class_info 的常量来表示的）来表示 <code>Language</code> 类的地址。</p><p>直接引用是一个直接指向目标的指针，如果有了直接引用，那引用的目标必定已经被加载入内存中了。</p><h2 id="符号引用如何解析"><a href="#符号引用如何解析" class="headerlink" title="符号引用如何解析"></a>符号引用如何解析</h2><p>太复杂了…</p><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><div class="table-container"><table><thead><tr><th style="text-align:left">变量类型</th><th>分配时间</th><th>销毁时间</th><th>基本数据类型</th><th>引用数据类型</th></tr></thead><tbody><tr><td style="text-align:left">常量</td><td>验证</td><td>程序退出</td></tr><tr><td style="text-align:left">静态变量</td><td>验证、初始化</td><td>程序退出</td><td></td><td>方法区</td></tr><tr><td style="text-align:left">实例变量</td><td>创建实例</td><td>对象销毁</td><td></td><td>堆</td></tr><tr><td style="text-align:left">局部变量</td><td>调用方法</td><td>方法结束</td><td>栈</td><td>堆</td></tr></tbody></table></div><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li><p>什么是类的加载机制<br>.class 内存 方法区 class对象 访问入口</p></li><li><p>类加载的有哪些步骤<br>加载、验证、准备、解析、初始化</p></li><li><p>这些步骤的顺序哪些是固定的，哪些是不固定的，为什么不固定？<br>加载、验证、准备、初始化 &gt; 解析<br>？？</p></li><li><p>将一下有哪些类加载器<br>启动类加载器 扩展类加载器 应用程序类加载器</p></li><li><p>如果实现自定义类加载器</p></li><li><p>为什么需要自定义类加载器</p></li><li><p>讲一下双亲委派机制<br>请求父加载器，再回来。</p></li><li><p>为什么使用双亲委派机制<br>多份同样的字节码 篡改</p></li><li><p>符号引用如何解析<br>??</p></li><li><p>解析调用 与 分派调用<br>??</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 虚拟机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM_01 简介</title>
      <link href="/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM_01%20%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/01/01/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM_01%20%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img2020.cnblogs.com/blog/1846149/202004/1846149-20200401105306155-3084373.png" alt=""></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>讲一下 JVM。</li></ol><p>对象创建方法，对象的内存分配，对象的访问定位</p><p>分派：静态分派与动态分派</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java 虚拟机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Corn 表达式</title>
      <link href="/2019/09/03/%E5%85%B6%E5%AE%83/Corn%20%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/09/03/%E5%85%B6%E5%AE%83/Corn%20%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>cron 表达式的格式为<code>秒 分钟 小时 日期 月份 星期 年份（可选）</code>。</p><div class="table-container"><table><thead><tr><th style="text-align:left">字段</th><th style="text-align:left">允许值</th><th style="text-align:left">允许的特殊字符</th></tr></thead><tbody><tr><td style="text-align:left">秒</td><td style="text-align:left">0-59</td><td style="text-align:left">, - * /</td></tr><tr><td style="text-align:left">分钟</td><td style="text-align:left">0-59</td><td style="text-align:left">, - * /</td></tr><tr><td style="text-align:left">小时</td><td style="text-align:left">0-23</td><td style="text-align:left">, - * /</td></tr><tr><td style="text-align:left">日期</td><td style="text-align:left">1-31</td><td style="text-align:left">, - * ? / L W C</td></tr><tr><td style="text-align:left">月份</td><td style="text-align:left">1-12或者JAN-DEC</td><td style="text-align:left">, - * /</td></tr><tr><td style="text-align:left">星期</td><td style="text-align:left">1-7或者SUN-SAT</td><td style="text-align:left">, - * ? / L C #</td></tr><tr><td style="text-align:left">年份（可为空）</td><td style="text-align:left">留空, 1970-2099</td><td style="text-align:left">, - * /</td></tr></tbody></table></div><h2 id="秒"><a href="#秒" class="headerlink" title="秒"></a>秒</h2><p>允许值范围：0~59，不允许为空值，若值不合法，调度器将抛出<code>SchedulerException</code>异常。</p><ul><li><code>*</code>代表每隔1秒钟触发。</li><li><code>,</code>代表在指定的秒数触发，比如<code>0,15,45</code>代表0秒、15秒和45秒时触发任务。</li><li><code>-</code>代表在指定的范围内触发，比如<code>25-45</code>代表从25秒开始触发到45秒结束触发，每隔1秒触发1次。</li><li><code>/</code>代表触发步进（step），<code>/</code>前面的值代表初始值（<code>*</code>等同<code>0</code>），后面的值代表偏移量，比如<code>0/20</code>或者<code>*/20</code>代表从0秒钟开始，每隔20秒钟触发1次，即0秒触发1次，20秒触发1次，40秒触发1次；<code>5/20</code>代表5秒触发1次，25秒触发1次，45秒触发1次；<code>10-45/20</code>代表在[10,45]内步进20秒命中的时间点触发，即10秒触发1次，30秒触发1次。</li></ul><h2 id="分钟"><a href="#分钟" class="headerlink" title="分钟"></a>分钟</h2><p>允许值范围：0~59，不允许为空值，若值不合法，调度器将抛出<code>SchedulerException</code>异常。</p><ul><li><code>*</code>代表每隔1分钟触发。</li><li><code>,</code>代表在指定的分钟触发，比如<code>10,20,40</code>“代表10分钟、20分钟和40分钟时触发任务。</li><li><code>-</code>代表在指定的范围内触发，比如<code>5-30</code>代表从5分钟开始触发到30分钟结束触发，每隔1分钟触发。</li><li><code>/</code>代表触发步进（step），<code>/</code>前面的值代表初始值（<code>*</code>等同<code>0</code>），后面的值代表偏移量，比如<code>0/25</code>或者<code>*/25</code>代表从0分钟开始，每隔25分钟触发1次，即0分钟触发1次，第25分钟触发1次，第50分钟触发1次；<code>5/25</code>代表5分钟触发1次，30分钟触发1次，55分钟触发1次；<code>10-45/20</code>代表在[10,45]内步进20分钟命中的时间点触发，即10分钟触发1次，30分钟触发1次。</li></ul><h2 id="小时"><a href="#小时" class="headerlink" title="小时"></a>小时</h2><p>允许值范围：0~23，不允许为空值，若值不合法，调度器将抛出<code>SchedulerException</code>异常。</p><ul><li><code>*</code>代表每隔1小时触发。</li><li><code>,</code>代表在指定的时间点触发，比如”10,20,23”代表10点钟、20点钟和23点触发任务。</li><li><code>-</code>代表在指定的时间段内触发，比如”20-23”代表从20点开始触发到23点结束触发，每隔1小时触发。</li><li><code>/</code>代表触发步进（step），<code>/</code>前面的值代表初始值（<code>*</code>等同<code>0</code>），后面的值代表偏移量，比如<code>0/1</code>或者<code>*/1</code>代表从0点开始触发，每隔1小时触发1次；<code>1/2</code>代表从1点开始触发，以后每隔2小时触发一次。</li></ul><h2 id="月份"><a href="#月份" class="headerlink" title="月份"></a>月份</h2><p>允许值范围：1~12 (JAN-DEC)，不允许为空值，若值不合法，调度器将抛出<code>SchedulerException</code>异常。</p><ul><li><code>*</code>代表每个月都触发。</li><li><code>,</code>代表在指定的月份触发，比如”1,6,12”代表1月份、6月份和12月份触发任务。</li><li><code>-</code>代表在指定的月份范围内触发，比如”1-6”代表从1月份开始触发到6月份结束触发，每隔1个月触发。</li><li><code>/</code>代表触发步进（step），<code>/</code>前面的值代表初始值（<code>*</code>等同<code>1</code>），后面的值代表偏移量，比如<code>1/2</code>或者<code>*/2</code>代表从1月份开始触发，每隔2个月触发1次；<code>6/6</code>代表从6月份开始触发，以后每隔6个月触发一次；<code>1-6/12</code>表达式意味着每年1月份触发。</li></ul><h2 id="星期"><a href="#星期" class="headerlink" title="星期"></a>星期</h2><p>允许值范围：1~7 (SUN-SAT)，1代表星期天（一星期的第一天），以此类推，7代表星期六（一星期的最后一天），不允许为空值，若值不合法，调度器将抛出<code>SchedulerException</code>异常。</p><ul><li><code>*</code>代表每星期都触发。</li><li><code>?</code>与<code>日期</code>互斥，即意味着若明确指定<code>日期</code>触发，则表示<code>星期</code>无意义，以免引起冲突和混乱。</li><li><code>,</code>代表在指定的星期约定触发，比如<code>1,3,5</code>代表星期天、星期二和星期四触发。</li><li><code>-</code>代表在指定的星期范围内触发，比如<code>2-4</code>代表从星期一开始触发到星期三结束触发，每隔1天触发。</li><li><code>/</code>代表触发步进（step），<code>/</code>前面的值代表初始值（<code>*</code>等同<code>1</code>），后面的值代表偏移量，比如<code>1/3</code>或者<code>*/3</code>代表从星期天开始触发，每隔3天触发1次；<code>1-5/2</code>表达式意味着在[1,5]范围内，每隔2天触发，即星期天、星期二、星期四触发。</li></ul><h2 id="年份"><a href="#年份" class="headerlink" title="年份"></a>年份</h2><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><h2 id="常用例子"><a href="#常用例子" class="headerlink" title="常用例子"></a>常用例子</h2><ol><li>每天凌晨4点执行：<code>0 0 4 * * ?</code></li><li>每周一凌晨4点执行：<code>0 0 4 * * ?</code></li><li>每月初晨4点执行：</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>黑苹果使用指南</title>
      <link href="/2019/09/02/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2019/09/02/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>这里是常用的黑苹果指南。</p><h2 id="长按按键不能连续输入"><a href="#长按按键不能连续输入" class="headerlink" title="长按按键不能连续输入"></a>长按按键不能连续输入</h2><p>写代码时，会遇到连续输入同一个字符的情况，此时希望按住一个按键就能够连续输入，例如想要输入“<strong><strong><strong>*</strong></strong></strong>“，按住键就可以连续输入；但是实际情况是想要输入几个就要按几次，很麻烦；</p><p>解决方法: </p><ol><li><p>打开终端输入</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write NSGlobalDomain ApplePressAndHoldEnabled -boolean <span class="literal">false</span></span><br></pre></td></tr></table></figure><p> 或者</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write -g ApplePressAndHoldEnabled -bool <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>重启电脑</p></li></ol><blockquote><p>备注：如果想要关闭只需要将上述命令行中的false改为true，重启电脑即可。</p></blockquote><h2 id="开启F1-F12功能键"><a href="#开启F1-F12功能键" class="headerlink" title="开启F1-F12功能键"></a>开启F1-F12功能键</h2><p>使用Mac系统的人都知道，Mac系统默认是没有开启F1-F12的使用的，平时我们使用的系统都可以使用键盘上的功能键，下面我们就可看看，如何设置才能使用Mac键盘上的功能键。</p><ol><li>首先在系统桌面的左上角点击苹果图标，找到“系统偏好设置”，点击打开“系统偏好设置”面板，如图所示。</li><li>在打开的“系统偏好设置”面板里的“硬件”里找到“键盘”，点击它。</li><li>在打开的“键盘”面板里找到“键盘”，这里有“键盘”和“键盘快捷键”两项，如图所示。</li><li>在“键盘”选项里找到“将F1、F2”等键用作标准功能键，把它前面的勾选上，如图所示。</li></ol><p>从10.12之后，苹果删除了这个功能，但是可以通过Karabiner来实现。</p><p><img src="https://ask.qcloudimg.com/raw/yehe-4faac02dbb63/cxvblyi2g2.png?imageView2/2/w/1620" alt=""></p><p>参考：<a href="https://cloud.tencent.com/developer/article/1374580">https://cloud.tencent.com/developer/article/1374580</a></p><h2 id="使用Karabiner映射Window键盘"><a href="#使用Karabiner映射Window键盘" class="headerlink" title="使用Karabiner映射Window键盘"></a>使用Karabiner映射Window键盘</h2><p><a href="https://link.jianshu.com/?t=https://github.com/wwwjfy/Karabiner-Elements/releases">Karabiner</a>是一款Mac平台修改键位映射的软件，有任何需要更改键位默认行为的需求都可以尝试用Karabiner做相应的映射，开源且免费。</p><h2 id="显示隐藏文件"><a href="#显示隐藏文件" class="headerlink" title="显示隐藏文件"></a>显示隐藏文件</h2><p>显示隐藏文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.Finder AppleShowAllFiles YES;KillAll Finder</span><br></pre></td></tr></table></figure></p><p>不显示隐藏文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.Finder AppleShowAllFiles NO;KillAll Finder</span><br></pre></td></tr></table></figure></p><h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。由于众所周知的原因，Homebrew在国内使用受到诸多限制，以下为改进方法（2020-04-07 测试成功）。</p><h4 id="安装（2020-04-07）"><a href="#安装（2020-04-07）" class="headerlink" title="安装（2020-04-07）"></a>安装（2020-04-07）</h4><p>执行以下命令安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">"<span class="variable">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>"</span></span><br></pre></td></tr></table></figure></p><h4 id="切换源（2020-04-07）"><a href="#切换源（2020-04-07）" class="headerlink" title="切换源（2020-04-07）"></a>切换源（2020-04-07）</h4><p>直接使用 Homebrew 还需要更改默认源，不然谁用谁想打人，原因你懂的。以下是将默认源替换为国内 USTC 源的方法。</p><p>替换核心软件仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure></p><p>替换 cask 软件仓库（提供 macOS 应用和大型二进制文件）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span>/Library/Taps/caskroom/homebrew-cask</span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br></pre></td></tr></table></figure></p><p>替换 Bottles 源（Homebrew 预编译二进制软件包）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></p><h4 id="Bash-修改前缀"><a href="#Bash-修改前缀" class="headerlink" title="Bash 修改前缀"></a>Bash 修改前缀</h4><p>15.7 之前 <code>/etc/bashrc</code> 中的 <code>PS1</code> 变量是用来设置前缀显示的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> vim /etc/bashrc</span><br></pre></td></tr></table></figure><p>修改 <code>PS1</code> 变量，例如修改为如下形式（把原来的注释掉）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># PS1=&apos;\h:\W \u\$ &apos;</span><br><span class="line">PS1=&apos;\u\$ &apos;</span><br></pre></td></tr></table></figure></p><p><code>wq!</code> 保存并退出，将终端退出重新打开生效。</p><p>附：</p><ol><li><code>$</code> 表示符号 $；</li><li><code>\h</code> 表示本地主机名；</li><li><code>\W</code> 表示符号 ~；</li><li><code>\u</code> 表示用户名；</li></ol><p>15.7 之后？？？</p><h4 id="禁用虚拟内存"><a href="#禁用虚拟内存" class="headerlink" title="禁用虚拟内存"></a>禁用虚拟内存</h4><p>Mac OS X有个很奇葩的设定，它把内存分为了可用内存、联动内存、活跃内存和非活跃内存，详情可以看《通过活动监视器了解系统内存使用情况》。</p><p>其中，当你退出一个软件时，它所占用的部分内存并不会释放，而是标记为非活跃，下次运行它时可以转换成活跃内存。但如果你不幸把可用内存用完了，Mac OS X并不会使用这些非活跃内存，而是直接使用虚拟内存（交换文件），这会严重影响运行效率。</p><p>如果你的内存有4GB以上，大部分情况下都已经够用了，于是就可以禁用虚拟内存，以获得更快的速度。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist</span><br></pre></td></tr></table></figure><p>禁用以后，磁盘上还保留着这些交换文件，它们已经没用了，也可以删掉（如果没手工删掉，重启系统后，系统也会自动删掉下面文件）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /private/var/vm/swapfile*</span><br></pre></td></tr></table></figure><p>如果要重新启用虚拟内存的话，可以执行这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist</span><br></pre></td></tr></table></figure><p>如果要临时释放不活跃内存，可以执行这条命令（需要安装Xcode，执行时会比较卡）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">purge</span><br></pre></td></tr></table></figure><h4 id="聚焦搜索失效"><a href="#聚焦搜索失效" class="headerlink" title="聚焦搜索失效"></a>聚焦搜索失效</h4><p>执行后重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mdutil -a -i on</span><br></pre></td></tr></table></figure><h4 id="蓝牙耳机卡顿"><a href="#蓝牙耳机卡顿" class="headerlink" title="蓝牙耳机卡顿"></a>蓝牙耳机卡顿</h4><p><a href="https://blog.csdn.net/fxh_2009/article/details/108865100">https://blog.csdn.net/fxh_2009/article/details/108865100</a></p><p>在音频输入栏，选择“内置麦克风”，这样可以彻底解决。</p><h4 id="强制使用核显"><a href="#强制使用核显" class="headerlink" title="强制使用核显"></a>强制使用核显</h4><p>独显是mac的发热大户，即使是在低速运行下，都有15w的功耗。</p><p>所以在不需要使用独显的时候手动禁用掉，可以降低mac的功耗，发热会得到明显改善，而且可以提高电池的续航！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 强制使用核显</span></span><br><span class="line">sudo pmset -a GPUSwitch 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制使用独显</span></span><br><span class="line">sudo pmset -a GPUSwitch 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动切换显卡</span></span><br><span class="line">sudo pmset -a GPUSwitch 2</span><br></pre></td></tr></table></figure><h2 id="苹果手机对比"><a href="#苹果手机对比" class="headerlink" title="苹果手机对比"></a>苹果手机对比</h2><div class="table-container"><table><thead><tr><th style="text-align:left">名称</th><th>年份</th><th>CPU</th><th>内存</th><th>存储</th><th>屏幕类型</th><th>像素密度</th><th>屏占比</th><th>价格</th></tr></thead><tbody><tr><td style="text-align:left">iPhone X</td><td>2017</td><td>A11</td><td>3G</td><td>64G</td><td>OLED</td><td>458ppi</td><td>81.15%</td><td><a href="https://item.taobao.com/item.htm?spm=a1z10.5-c-s.w4002-17536852751.14.75326638AXoyoy&amp;id=565554281931">2210¥</a></td></tr><tr><td style="text-align:left">iPhone XS</td><td>2018</td><td>A12</td><td>4G</td><td>64G</td><td>OLED</td><td>458ppi</td><td>81.15%</td><td><a href="https://item.taobao.com/item.htm?spm=a1z10.5-c-s.w4002-17536852751.19.75326638AXoyoy&amp;id=578296663612">2640¥</a></td></tr><tr><td style="text-align:left">iPhone XS Max</td><td>1028</td><td>A12</td><td>4G</td><td>64G</td><td>OLED</td><td>458ppi</td><td>85.14%</td><td><a href="https://item.taobao.com/item.htm?spm=a1z10.5-c-s.w4002-17536852751.19.75326638AXoyoy&amp;id=578296663612">3140¥</a></td></tr><tr><td style="text-align:left">iPhone 11 Pro</td><td>2019</td><td>A13</td><td>4G</td><td>64G</td><td>OLED</td><td>458ppi</td><td>80.94%</td><td><a href="https://item.taobao.com/item.htm?spm=a1z10.5-c-s.w4002-17536852751.34.75326638AXoyoy&amp;id=605399497350">4550¥</a></td></tr><tr><td style="text-align:left">iPhone 11 Pro Max</td><td>2019</td><td>A13</td><td>4G</td><td>64G</td><td>OLED</td><td>458ppi</td><td>86.19%</td><td><a href="https://item.taobao.com/item.htm?spm=a1z10.5-c-s.w4002-17536852751.34.75326638AXoyoy&amp;id=605399497350">4800¥</a></td></tr><tr><td style="text-align:left">iPhone XR</td><td>2018</td><td>A12</td><td>3G</td><td>64G</td><td>LED</td><td>326ppi</td><td>80.02%</td><td><a href="https://item.taobao.com/item.htm?spm=a1z10.5-c-s.w4002-17536852751.22.75326638AXoyoy&amp;id=579794000002">2280¥</a></td></tr><tr><td style="text-align:left">iPhone 11</td><td>2019</td><td>A13</td><td>4G</td><td>64G</td><td>LED</td><td>326ppi</td><td>91.4%</td><td><a href="https://item.taobao.com/item.htm?spm=a1z10.5-c-s.w4002-17536852751.40.75326638AXoyoy&amp;id=605831887474">3350¥</a></td></tr></tbody></table></div><h2 id="Mac-性能对比"><a href="#Mac-性能对比" class="headerlink" title="Mac 性能对比"></a>Mac 性能对比</h2><p>测试工具：Geekbeanch 5。</p><div class="table-container"><table><thead><tr><th style="text-align:left">机器</th><th>CPU</th><th>GPU</th><th>单核 &amp; 多核</th><th>OpenGL &amp; Meltal</th></tr></thead><tbody><tr><td style="text-align:left">黑苹果 13.6</td><td>i7-3770 4核 3400MHz</td><td>GTX650 1GB</td><td>761 3090</td><td>5015 2422</td></tr><tr><td style="text-align:left">黑苹果 13.6</td><td>E3-1220 v3 4核 3090MHz</td><td>GTX1060 6GB</td><td>842 2691</td><td>32862 14328</td></tr><tr><td style="text-align:left">黑苹果 15.7</td><td>i5-9600KF 6核 2900MHz</td><td>RX590 8GB</td><td>1106 5274</td><td>37346 37537</td></tr><tr><td style="text-align:left">黑苹果 14.5</td><td>i5-7500 2核 3400MHz</td><td>GTX730 2GB</td><td>937 3248</td><td>- 2064</td></tr><tr><td style="text-align:left">黑苹果 15.3</td><td>i5-9400 6核 2900MHz</td><td>RX5900 8GB</td><td>1005 4164</td><td></td></tr><tr><td style="text-align:left">黑苹果 15.3</td><td>R7-3800 8核 3900MHz</td><td>RX5500 8GB</td><td>1343 9410</td><td></td></tr><tr><td style="text-align:left">MacBook Air 2020</td><td>i5-1030 4核 1100MHz</td><td></td><td>1075 2836</td><td></td></tr><tr><td style="text-align:left">MacBook Air 2020</td><td>i7-1060 4核 1200MHz</td><td></td><td>1139 3022</td><td></td></tr><tr><td style="text-align:left">MacBook pro 13 2020</td><td>i5-8257 4核 1400MHz</td><td></td><td>915 3873</td><td></td></tr><tr><td style="text-align:left">MacBook pro 13 2020</td><td>i5-1038 4核 2000MHz</td><td></td><td>1137 4236</td><td></td></tr><tr><td style="text-align:left">MacBook pro 13 2020</td><td>i7-1068 4核 2300MHz</td><td></td><td>1228 4509</td><td></td></tr><tr><td style="text-align:left">MacBook Pro 15 2019</td><td>i9-9980 8核 2400MHz</td><td></td><td>1119 6774</td><td></td></tr><tr><td style="text-align:left">MacBook Pro 16 2019</td><td>i9-9980 6核 2600MHz</td><td></td><td>1034 5535</td><td>25207 24050</td></tr><tr><td style="text-align:left">MacBook Pro 16 2019</td><td>i9-9980 8核 2400MHz</td><td></td><td>1112 6957</td><td></td></tr><tr><td style="text-align:left">Mac Mini 2018</td><td>i3-8100 4核 3600MHz</td><td></td><td>913 3267</td><td></td></tr><tr><td style="text-align:left">Mac Mini 2018</td><td>i7-8700 6核 3200MHz</td><td></td><td>1117 5615</td><td></td></tr><tr><td style="text-align:left">Mac 2019</td><td>i9-9900 8核 3600MHz</td><td></td><td>1243 8285</td><td></td></tr><tr><td style="text-align:left">Mac 2019</td><td>i5-9600 6核 3700MHz</td><td></td><td>1130 5406</td><td></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSH原理与运用（一）：远程登录</title>
      <link href="/2019/08/29/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%95%99%E7%A8%8B/SSH%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%90%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
      <url>/2019/08/29/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%95%99%E7%A8%8B/SSH%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%90%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>SSH是每一台Linux电脑的标准配置。</p><h2 id="什么是SSH？"><a href="#什么是SSH？" class="headerlink" title="什么是SSH？"></a>什么是SSH？</h2><p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。</p><p>如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。</p><p>最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。</p><p>需要指出的是，SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH，它是自由软件，应用非常广泛。</p><h2 id="最基本的用法"><a href="#最基本的用法" class="headerlink" title="最基本的用法"></a>最基本的用法</h2><p>SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh user@host</span><br></pre></td></tr></table></figure></p><p>如果本地用户名与远程用户名一致，登录时可以省略用户名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh host</span><br></pre></td></tr></table></figure></p><p>SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -p 2222 user@host</span><br></pre></td></tr></table></figure></p><p>上面这条命令表示，ssh直接连接远程主机的2222端口。</p><h2 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h2><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。</p><p>整个过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p><p>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。</p><p>可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的”中间人攻击”（Man-in-the-middle attack）。</p><p>SSH协议是如何应对的呢？</p><h2 id="口令登录"><a href="#口令登录" class="headerlink" title="口令登录"></a>口令登录</h2><p>如果你是第一次登录对方主机，系统会出现下面的提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ssh user@host</span><br><span class="line"></span><br><span class="line">The authenticity of host &apos;host (12.18.429.21)&apos; can&apos;t be established.</span><br><span class="line"></span><br><span class="line">RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</span><br><span class="line"></span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure></p><p>这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？</p><p>所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是<code>98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d</code>，再进行比较，就容易多了。</p><p>很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。</p><p>假定经过风险衡量以后，用户决定接受这个远程主机的公钥。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br></pre></td></tr></table></figure><p>系统会出现一句提示，表示host主机已经得到认可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added &apos;host,12.18.429.21&apos; (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure><p>然后，会要求输入密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Password: (enter password)</span><br></pre></td></tr></table></figure><p>如果密码正确，就可以登录了。</p><p>当远程主机的公钥被接受以后，它就会被保存在文件<code>$HOME/.ssh/known_hosts</code>之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p><p>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是<code>/etc/ssh/ssh_known_hosts</code>，保存一些对所有用户都可信赖的远程主机的公钥。</p><h2 id="公钥登录"><a href="#公钥登录" class="headerlink" title="公钥登录"></a>公钥登录</h2><p>使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。</p><p>所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p><p>这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure><p>运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。</p><p>运行结束以后，在<code>$HOME/.ssh/</code>目录下，会新生成两个文件：id_rsa.pub和id_rsa。前者是你的公钥，后者是你的私钥。</p><p>这时再输入下面的命令，将公钥传送到远程主机host上面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id user@host</span><br></pre></td></tr></table></figure><p>好了，从此你再登录，就不需要输入密码了。</p><p>如果还是不行，就打开远程主机的<code>/etc/ssh/sshd_config</code>这个文件，检查下面几行前面”#”注释是否取掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>然后，重启远程主机的ssh服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// ubuntu系统</span><br><span class="line">service ssh restart</span><br><span class="line"></span><br><span class="line">// debian系统</span><br><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><h2 id="authorized-keys文件"><a href="#authorized-keys文件" class="headerlink" title="authorized_keys文件"></a>authorized_keys文件</h2><p>远程主机将用户的公钥，保存在登录后的用户主目录的<code>$HOME/.ssh/authorized_keys</code>文件中。公钥就是一段字符串，只要把它追加在authorized_keys文件的末尾就行了。</p><p>这里不使用上面的<code>ssh-copy-id</code>命令，改用下面的命令，解释公钥的保存过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh user@host <span class="string">'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys'</span> &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>这条命令由多个语句组成，依次分解开来看：</p><ol><li><code>$ ssh user@host</code>，表示登录远程主机；</li><li>单引号中的<code>mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys</code>，表示登录后在远程shell上执行的命令：</li><li><code>$ mkdir -p .ssh</code>的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；</li><li><code>cat &gt;&gt; .ssh/authorized_keys &lt; ~/.ssh/id_rsa.pub</code>的作用是，将本地的公钥文件<code>~/.ssh/id_rsa.pub</code>，重定向追加到远程文件authorized_keys的末尾。</li></ol><p>写入authorized_keys文件后，公钥登录的设置就完成了。</p><h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><p>SSH不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。</p><p>上一节的操作，就是一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh user@host &apos;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&apos; &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>单引号中间的部分，表示在远程主机上执行的操作；后面的输入重定向，表示数据通过SSH传向远程主机。</p><p>这就是说，SSH可以在用户和远程主机之间，建立命令和数据的传输通道，因此很多事情都可以通过SSH来完成。</p><p>下面看几个例子。</p><p>【例1】</p><p>将<code>$HOME/src/</code>目录下面的所有文件，复制到远程主机的<code>$HOME/src/</code>目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &amp;&amp; tar czv src | ssh user@host <span class="string">'tar xz'</span></span><br></pre></td></tr></table></figure><p>【例2】</p><p>将远程主机<code>$HOME/src/</code>目录下面的所有文件，复制到用户的当前目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh user@host <span class="string">'tar cz src'</span> | tar xzv</span><br></pre></td></tr></table></figure><p>【例3】</p><p>查看远程主机是否运行进程httpd。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh user@host <span class="string">'ps ax | grep [h]ttpd'</span></span><br></pre></td></tr></table></figure><h2 id="绑定本地端口"><a href="#绑定本地端口" class="headerlink" title="绑定本地端口"></a>绑定本地端口</h2><p>既然SSH可以传送数据，那么我们可以让那些不加密的网络连接，全部改走SSH连接，从而提高安全性。</p><p>假定我们要让8080端口的数据，都通过SSH传向远程主机，命令就这样写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -D 8080 user@host</span><br></pre></td></tr></table></figure><h2 id="ssh-账号密码连接"><a href="#ssh-账号密码连接" class="headerlink" title="ssh 账号密码连接"></a>ssh 账号密码连接</h2><h2 id="ssh-密钥连接"><a href="#ssh-密钥连接" class="headerlink" title="ssh 密钥连接"></a>ssh 密钥连接</h2>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH原理与运用（二）：远程操作与端口转发</title>
      <link href="/2019/08/29/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%95%99%E7%A8%8B/SSH%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%90%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
      <url>/2019/08/29/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Linux%20%E6%95%99%E7%A8%8B/SSH%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%90%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>SSH不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。</p>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
            <tag> LINUX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Icebartech 常用配置</title>
      <link href="/2019/08/27/%E5%85%B6%E5%AE%83/Icebartech%20%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/08/27/%E5%85%B6%E5%AE%83/Icebartech%20%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="云效配置"><a href="#云效配置" class="headerlink" title="云效配置"></a>云效配置</h2><ol><li><p>Java 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/data/deploy/Java/icebartech-cloudnote/package.tgz</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e;</span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">"/data/deploy/Java/icebartech-cloudnote/deploy.sh"</span> ]; </span><br><span class="line">    <span class="keyword">then</span> /data/deploy/Java/icebartech-cloudnote/deploy.sh stop; </span><br><span class="line"><span class="keyword">fi</span>;</span><br><span class="line">mkdir -p /data/deploy/Java/icebartech-cloudnote;</span><br><span class="line">tar xf /data/deploy/Java/icebartech-cloudnote/package.tgz -o -C /data/deploy/Java/icebartech-cloudnote;</span><br><span class="line">chmod +x  /data/deploy/Java/icebartech-cloudnote/deploy.sh;</span><br><span class="line">/data/deploy/Java/icebartech-cloudnote/deploy.sh start</span><br></pre></td></tr></table></figure></li><li><p>Web 打包配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/data/deploy/Web/icebartech-bookstore/icebartech-bookstore-sys/package.tgz</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e;</span><br><span class="line">mkdir -p /data/deploy/Web/icebartech-bookstore/icebartech-bookstore-sys/dist;</span><br><span class="line">tar xf /data/deploy/Web/icebartech-bookstore/icebartech-bookstore-sys/package.tgz -o -C /data/deploy/Web/icebartech-bookstore/icebartech-bookstore-sys/dist;</span><br></pre></td></tr></table></figure></li><li><p>Web 源码配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/data/deploy/Web/icebartech-home/icebartech-home-sys/package.tgz</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e;</span><br><span class="line">mkdir -p /data/deploy/Web/icebartech-home/icebartech-home-sys;</span><br><span class="line">tar xf /data/deploy/Web/home/home-sys/package.tgz -o -C /data/deploy/Web/home/home-sys;</span><br></pre></td></tr></table></figure></li><li><p>Web 打包配置（release）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code.language=scripts</span><br><span class="line">build.output=dist/*</span><br></pre></td></tr></table></figure></li><li><p>Web 源码配置（release）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">code.language=node10.x</span><br><span class="line"></span><br><span class="line">build.output=dist</span><br><span class="line">build.command=sudo cnpm install babel-loader --save &amp;&amp; sudo cnpm install &amp;&amp; sudo cnpm run build</span><br></pre></td></tr></table></figure></li></ol><h2 id="Agent操作"><a href="#Agent操作" class="headerlink" title="Agent操作"></a>Agent操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">/home/staragent/bin/staragentctl restart;</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">/home/staragent/bin/staragentctl restart;</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">/home/staragent/bin/staragentctl status;</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">1. /home/staragent/bin/staragentctl stop;</span><br><span class="line">2. rm -rf /home/aol2;</span><br><span class="line">3. rm -rf /home/staragent;</span><br><span class="line">4. rm /usr/sbin/staragent_sn;</span><br></pre></td></tr></table></figure><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><div class="table-container"><table><thead><tr><th style="text-align:left">IP</th><th>账号</th><th>密码</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:left">120.76.156.141</td><td>root</td><td>bwwIQb2mcGAGPlIL</td><td>冰棍官网服务器</td></tr><tr><td style="text-align:left">8.129.214.203</td><td>root</td><td>8nLDwEhu@#EYXSmO</td><td>开发服务器一</td></tr><tr><td style="text-align:left">120.77.246.50</td><td>root</td><td>Bo9rDeUA</td><td>开发服务器二</td></tr><tr><td style="text-align:left">120.79.178.208</td><td>root</td><td>Bg360123456</td><td>洗车佬<em>DEV</em>服务器</td></tr><tr><td style="text-align:left">120.76.102.155</td><td>root</td><td>kwAPYE6o</td><td>Jenkins、禅道等服务器</td></tr><tr><td style="text-align:left">120.76.98.47</td><td>root</td><td>h#PkP#@0Zl^Veh0T</td><td>GitLab 服务器</td></tr></tbody></table></div><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>port: 6379<br>host: r-wz9t6e14pudh0yhzmlpd.redis.rds.aliyuncs.com<br>password: icebartech:Bg360123456</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h2 id="体育中心"><a href="#体育中心" class="headerlink" title="体育中心"></a>体育中心</h2><p>git<br>体育中心后端                        git@code.aliyun.com:icebartech-java/icebartech-sportscenter.git<br>体育中心PC端                        git@code.aliyun.com:icebartech-web/icebartech-sportscenter-pc.git<br>体育中心后台管理                    git@code.aliyun.com:icebartech-web/icebartech-sportscenter-sys.git<br>体育中心i深圳 （嵌入APP的网页）     git@code.aliyun.com:icebartech-web/icebartech-sportscenter-isz.git<br>体育中心手机端（从手机浏览器打开）  git@code.aliyun.com:icebartech-web/icebartech-sportscenter-h5.git   </p><p>网址<br>PC端        <a href="http://isz.sztyzx.com.cn/pc/">http://isz.sztyzx.com.cn/pc/</a><br>i深圳       <a href="http://isz.sztyzx.com.cn/sz/">http://isz.sztyzx.com.cn/sz/</a><br>手机端      <a href="http://isz.sztyzx.com.cn/wechat/">http://isz.sztyzx.com.cn/wechat/</a><br>后台管理    <a href="http://isz.sztyzx.com.cn/sys/loginPage">http://isz.sztyzx.com.cn/sys/loginPage</a><br>接口文档    <a href="http://isz.sztyzx.com.cn/api/swagger-ui.html">http://isz.sztyzx.com.cn/api/swagger-ui.html</a></p><p>部署<br>交与<a href="https://rdc.aliyun.com/project/258421?spm=0.mix_pipeline.0.0.3fc01c05a48ynN">云效</a>管理，提交代码自动部署。</p><p>Java端使用dev配置。</p><p>Web端提交dist自动部署。</p><p>Redis<br>database: 0<br>host: 120.76.102.155<br>port: 6379<br>password: XKKojoTM2hC4jHEqQDVRvvXUX6BthPLY</p><p>数据库<br>url: jdbc:mysql://icebartech-external.mysql.rds.aliyuncs.com:3366/sportscenter<br>username: sportscenter<br>password: sportscenter</p><p>阿里云<br>账号    30467132<br>密码    Tyzx1234</p><p>服务器<br>root@47.112.226.9 Bg360123456，阿里云已开放22、80、443、3306、6379等端口。</p><p>Java<br>Java系通过yum安装的java-1.8.0-openjdk*。</p><p>Nginx<br>Nginx系源码安装，下载包位于/home/downlaods/nginx-1.8.0，安装位于/usr/local/nginx。</p><p>配置文件位于/usr/local/nginx/conf/nginx.conf、/data/vhost/*。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 校验配置文件</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p>|120.76.156.141|root|bwwIQb2mcGAGPlIL|冰棍官网服务器|</p><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p><a href="https://www.icebartech.com/">https://www.icebartech.com/</a><br><a href="https://admin.icebartech.com/admin">https://admin.icebartech.com/admin</a></p><p>svn://120.76.102.155/icebar/common/icebar-www<br>svn://120.76.102.155/icebar/production/WebCode/icebar</p><p>jenkins: 正式环境 icebar</p><p>后端启动：/data/deploy/Java/tomcat/bin/startup.sh</p><p>nginx: /data/vhost/www.ice….</p><p>nginx -t<br>nginx -s relaod</p><h4 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h4><p><a href="http://admin.icebartech.com/admin/loginIndex">http://admin.icebartech.com/admin/loginIndex</a></p><p>/usr/local/tomcat</p><p>启动：./usr/local/tomcat/bin/startup.sh</p><p>usr/local/nginx/conf/vhost/admin.icebartech.com.conf </p><h2 id="盆栽种植"><a href="#盆栽种植" class="headerlink" title="盆栽种植"></a>盆栽种植</h2><p>微服务项目。</p><p>Git<br>Java: git@code.aliyun.com:icebartech-java/icebartech-potplant.git</p><p>网址<br>接口文档：<a href="http://potplant.xmzuozhuang.com/api.doc.html">http://potplant.xmzuozhuang.com/api.doc.html</a></p><p>管理后台：<a href="http://potplant.xmzuozhuang.com/sys/loginPage">http://potplant.xmzuozhuang.com/sys/loginPage</a></p><p>阿里云<br>登录名：慢乐科技</p><p>密码：906eddga</p><p>服务器<br>IP 120.79.144.2(公)    实例密码：Bg360123456</p><p>部署<br>Java：阿里云云效，提交代码后，点击对应的应用流水线部署<br>前端：提交代码自动部署</p><p>数据库<br>url: jdbc:mysql://120.79.144.2:3306/potplant<br>username: root<br>password: 123456</p><p>Redis<br>启用、重启<br>/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf<br>密码：Bg360123456 port: 6379</p><h2 id="餐饮"><a href="#餐饮" class="headerlink" title="餐饮"></a>餐饮</h2><p><a href="https://catering.hanhuimedia.com/sys/loginPage">https://catering.hanhuimedia.com/sys/loginPage</a></p><p>餐饮平台<br>服务器<br>47.112.136.181<br>root W0S5bJfc</p><p>tQgu6LrPMS3Xgb4</p><h2 id="书展"><a href="#书展" class="headerlink" title="书展"></a>书展</h2><p>现在的网址是这个：<a href="https://api.shenzhenshuzhan.com/pc/#/">https://api.shenzhenshuzhan.com/pc/#/</a><br>他要 www.shenzhenshuzhan.com 这个也能访问</p><p>账号：shenzhenshuzhan<br>密码：10086123…</p><p>120.24.156.114<br>root/123Lahmy!c</p><p>—-数据库 —-<br>120.24.156.114<br>wcmall<br>wcmall</p><h2 id="建筑"><a href="#建筑" class="headerlink" title="建筑"></a>建筑</h2><p>后台登录账号密码：测试用户：13164106093 123456<br>后台地址：<a href="http://www.szzhiyiruanjian.com/#/login">http://www.szzhiyiruanjian.com/#/login</a></p><p>47.112.12.47</p><p>重置密码：Bg360123456</p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Icebartech </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream 示例</title>
      <link href="/2019/08/27/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/Java8%20%E6%96%B0%E7%89%B9%E6%80%A7/Stream%20%E7%A4%BA%E4%BE%8B/"/>
      <url>/2019/08/27/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/Java8%20%E6%96%B0%E7%89%B9%E6%80%A7/Stream%20%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>Stream 常用示例</p><ol><li><p>收集起始时间到结束时间之间所有的时间并以字符串集合方式返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收集起始时间到结束时间之间所有的时间并以字符串集合方式返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  start 2018-10-11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  end   2018-10-15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 2018-10-11,2018-10-12,2018-10-13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">collectLocalDates</span><span class="params">(LocalDate start, LocalDate end)</span></span>&#123;</span><br><span class="line"><span class="comment">// 用起始时间作为流的源头，按照每次加一天的方式创建一个无限流</span></span><br><span class="line"><span class="keyword">return</span> Stream.iterate(start, localDate -&gt; localDate.plusDays(<span class="number">1</span>))</span><br><span class="line">     <span class="comment">// 截断无限流，长度为起始时间和结束时间的差+1个</span></span><br><span class="line">     .limit(ChronoUnit.DAYS.between(start, end) + <span class="number">1</span>)</span><br><span class="line">     <span class="comment">// 由于最后要的是字符串，所以map转换一下</span></span><br><span class="line">     .map(LocalDate::toString)</span><br><span class="line">     <span class="comment">// 把流收集为List</span></span><br><span class="line">     .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>List<Res> 数组，将 value 属性逗号拼接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = List.stream().map(Res::getValue).collect(Collectors.joining(<span class="string">","</span>));</span><br></pre></td></tr></table></figure></li><li><p><code>String</code> 类型的 <code>List</code> 集合转大写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; alpha = Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Before Java8</span></span><br><span class="line">List&lt;String&gt; alphaUpper = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String s : alpha) &#123;</span><br><span class="line">    alphaUpper.add(s.toUpperCase());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(alpha); <span class="comment">// [a, b, c, d]</span></span><br><span class="line">System.out.println(alphaUpper); <span class="comment">// [A, B, C, D]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 8</span></span><br><span class="line">List&lt;String&gt; collect = alpha.stream().map(String::toUpperCase).collect(Collectors.toList());</span><br><span class="line">System.out.println(collect); <span class="comment">// [A, B, C, D]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Extra, streams apply to any data type.</span></span><br><span class="line">List&lt;Integer&gt; num = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">List&lt;Integer&gt; collect1 = num.stream().map(n -&gt; n * <span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">System.out.println(collect1); <span class="comment">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Object</code> 类型的 List 转 <code>String</code> 类型的 <code>List</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Staff&gt; staff = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Staff(<span class="string">"mkyong"</span>, <span class="number">30</span>, <span class="keyword">new</span> BigDecimal(<span class="number">10000</span>)),</span><br><span class="line">                <span class="keyword">new</span> Staff(<span class="string">"jack"</span>, <span class="number">27</span>, <span class="keyword">new</span> BigDecimal(<span class="number">20000</span>)),</span><br><span class="line">                <span class="keyword">new</span> Staff(<span class="string">"lawrence"</span>, <span class="number">33</span>, <span class="keyword">new</span> BigDecimal(<span class="number">30000</span>)));</span><br><span class="line"><span class="comment">// Before Java 8</span></span><br><span class="line">List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Staff x : staff) &#123;</span><br><span class="line">    result.add(x.getName());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(result); <span class="comment">// [mkyong, jack, lawrence]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 8</span></span><br><span class="line">List&lt;String&gt; collect = staff.stream().map(x -&gt; x.getName()).collect(Collectors.toList());</span><br><span class="line">System.out.println(collect); <span class="comment">// [mkyong, jack, lawrence]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Object</code> 类型的 List 转其他 <code>Object</code> 类型的 <code>List</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Before Java 8</span></span><br><span class="line">List&lt;Staff&gt; staff = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Staff(<span class="string">"mkyong"</span>, <span class="number">30</span>, <span class="keyword">new</span> BigDecimal(<span class="number">10000</span>)),</span><br><span class="line">        <span class="keyword">new</span> Staff(<span class="string">"jack"</span>, <span class="number">27</span>, <span class="keyword">new</span> BigDecimal(<span class="number">20000</span>)),</span><br><span class="line">        <span class="keyword">new</span> Staff(<span class="string">"lawrence"</span>, <span class="number">33</span>, <span class="keyword">new</span> BigDecimal(<span class="number">30000</span>))</span><br><span class="line">);</span><br><span class="line">List&lt;StaffPublic&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Staff temp : staff) &#123;    </span><br><span class="line">    StaffPublic obj = <span class="keyword">new</span> StaffPublic();</span><br><span class="line">    obj.setName(temp.getName());</span><br><span class="line">    obj.setAge(temp.getAge());</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"mkyong"</span>.equals(temp.getName())) &#123;</span><br><span class="line">        obj.setExtra(<span class="string">"this field is for mkyong only!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result.add(obj);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 8</span></span><br><span class="line">List&lt;StaffPublic&gt; result = staff.stream().map(temp -&gt; &#123;</span><br><span class="line">    StaffPublic obj = <span class="keyword">new</span> StaffPublic();</span><br><span class="line">    obj.setName(temp.getName());</span><br><span class="line">    obj.setAge(temp.getAge());</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"mkyong"</span>.equals(temp.getName())) &#123;</span><br><span class="line">        obj.setExtra(<span class="string">"this field is for mkyong only!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java8 新特性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java 8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 日志</title>
      <link href="/2019/07/19/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/4.%20Nginx%20%E6%97%A5%E5%BF%97/"/>
      <url>/2019/07/19/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/Nginx%20%E6%95%99%E7%A8%8B/4.%20Nginx%20%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>Nginx的日志分为<code>access log</code>和<code>error log</code>。其中<code>access log</code>记录了哪些用户，哪些页面以及用户浏览器、ip和其它的访问信息。<code>error log</code>则记录了服务器的错误信息。</p><h2 id="log-format-定义日志格式"><a href="#log-format-定义日志格式" class="headerlink" title="log_format 定义日志格式"></a>log_format 定义日志格式</h2><p>语法：  log_format name [escape=default|json] string …;<br>默认值：log_format combined “…”;<br>作用域：http</p><p>Nginx的日志格式是可以自定义的。下面在<code>nginx/conf/nginx.conf</code>配置文件中定义了日志的打印格式<code>main</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                &apos;$request_time $request_length &apos;</span><br><span class="line">                &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                &apos;&quot;$http_user_agent&quot;&apos;;</span><br></pre></td></tr></table></figure></p><ul><li><code>remoteaddr</code><br>  表示客户端IP地址。</li><li><code>remote_user</code><br>  表示客户端用户名称。</li><li><code>request</code><br>  表示请求的URL和HTTP协议。</li><li><code>status</code><br>  表示请求状态。</li><li><code>bodybytessent</code><br>  表示发送给客户端的字节数，不包括响应头的大小；该变量与Apache模块<code>modlogconfig</code>里的<code>bytes_sent</code>发送给客户端的总字节数相同。</li><li><code>connection</code><br>  表示连接的序列号。</li><li><code>connection_requests</code><br>  表示当前通过一个连接获得的请求数量。</li><li><code>msec</code><br>  表示日志写入的时间。单位为秒，精度是毫秒。</li><li><code>pipe</code><br>  表示请求是否通过HTTP流水线（pipelined）发送。通过HTTP流水线发送则<code>pipe</code>值为<code>p</code>，否则为<code>.</code>。</li><li><code>httpreferer</code><br>  表示从哪个页面链接访问过来的。</li><li><code>&quot;http_user_agent&quot;</code><br>  表示客户端浏览器相关信息，前后必须加上双引号。</li><li><code>requestlength</code><br>  表示请求的长度。包括请求行，请求头和请求正文。</li><li><code>request_time</code><br>  表示请求处理时间，单位为秒，精度为毫秒。从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</li><li><code>[$time_local]</code><br>  表示通用日志格式下的本地时间，前后必须加上中括号。</li></ul><h2 id="日志示例"><a href="#日志示例" class="headerlink" title="日志示例"></a>日志示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10.1.1.1 - - [22/Aug/2014:16:48:14 +0800] &quot;POST /ajax/MbpRequest.do HTTP/1.1&quot; 200 367 &quot;-&quot; &quot;Dalvik/1.6.0 (Linux; U; Android 4.1.1; ARMM7K Build/JRO03H)&quot; &quot;119.189.56.175&quot; 127.0.0.1:8090 0.022 0.022 </span><br><span class="line">10.1.1.1 - - [22/Aug/2014:16:48:19 +0800] &quot;POST /ajax/MbpRequest.do HTTP/1.1&quot; 200 616 &quot;-&quot; &quot;Dalvik/1.6.0 (Linux; U; Android 4.0.4; GT-I9103 Build/IMM76D)&quot; &quot;36.250.89.22&quot; 127.0.0.1:8090 0.036 0.036</span><br></pre></td></tr></table></figure><p>从上面我们可以看出几部分信息：</p><ol><li>客户端（用户）IP地址。如：上例中的<code>10.1.1.1</code> (内网负载均衡地址)。</li><li>访问时间。如：上例中的<code>[22/Aug/2014:16:48:19 +0800]</code>。</li><li>访问端口。如：上例中的<code>127.0.0.1:8080</code>。</li><li>响应时间。如：上例中的<code>0.022</code>。</li><li>请求时间。如：上例中的<code>0.022</code>。</li><li>用户地理位置代码（国家代码）。</li><li>请求的url地址（目标url地址）的host。如：上例中的<code>/....</code>。</li><li>请求方式（GET或者POST等）。如：上例中的<code>GET</code>。</li><li>请求url地址（去除host部分）。如：上例中的<code>/html/test.html</code>。</li><li>请求状态（状态码，<code>200</code>表示成功，<code>404</code>表示页面不存在，<code>301</code>表示永久重定向等）。</li><li>请求页面大小，默认为B（byte）。如：上例中的<code>2426</code>。</li><li>来源页面，即从哪个页面转到本页，专业名称叫做referer。如：上例中的<code>http://a.com</code>。</li><li>用户浏览器语言。如：上例中的<code>es-ES,es;q=0.8</code>。</li><li>用户浏览器其他信息，浏览器版本、浏览器类型等。如：上例中的<code>Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.97 Safari/537.11</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Nginx 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装 Redis</title>
      <link href="/2019/07/14/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/Redis%20%E6%95%99%E7%A8%8B/%E5%AE%89%E8%A3%85%20Redis/"/>
      <url>/2019/07/14/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/Redis%20%E6%95%99%E7%A8%8B/%E5%AE%89%E8%A3%85%20Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="redis-安装"><a href="#redis-安装" class="headerlink" title="redis 安装"></a>redis 安装</h2><ol><li><p>下载最新版 Redis-5.0.5 源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /home/downloads</span><br><span class="line">sudo cd /home/downloads</span><br><span class="line">sudo wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf redis-5.0.5.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cd redis-5.0.5</span><br><span class="line">sudo make MALLOC=libc</span><br></pre></td></tr></table></figure></li><li><p>修改 redis.conf 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim redis.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 取消绑定本地 IP</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 取消保护模式</span></span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 启用守护进程</span></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 设置密码</span></span><br><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure></li><li><p>启动 Redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo src/redis-server redis.conf</span><br></pre></td></tr></table></figure></li><li><p>检测是否运行成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install net-tools</span><br><span class="line">sudo netstat -ntlp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      5346/src/redis-serv </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2750/sshd           </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tcp6       0      0 :::6379                 :::*                    LISTEN      5346/src/redis-serv </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tcp6       0      0 :::22                   :::*                    LISTEN      2750/sshd</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="主从同步配置"><a href="#主从同步配置" class="headerlink" title="主从同步配置"></a>主从同步配置</h2><p>现有 Redis1（202.182.108.206），Redis2（202.182.118.220），如果</p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
          <category> Redis 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新时间与日期 API</title>
      <link href="/2019/07/03/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/Java8%20%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F%20API/"/>
      <url>/2019/07/03/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java%20%E7%9B%B8%E5%85%B3/Java%20%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/Java8%20%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F%20API/</url>
      
        <content type="html"><![CDATA[<p>Java 8通过发布新的Date-Time API (JSR 310)来进一步加强对日期与时间的处理。</p><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><h2 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h2><p>Instant 时间戳是以 Unix 元年（1970年1月1月 00:00:00）到某一时间之间的毫秒值。Instant 默认获取 UTC 时区。</p><ol><li><p>创建 Instant</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前时间的Instant </span></span><br><span class="line">Instant inst = Instant.now();</span><br><span class="line">System.out.prinlnt(inst1); <span class="comment">// 2019-07-02T17:26:59.629Z</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定时间戳的Instant</span></span><br><span class="line">Instant inst2 = Instant.ofEpochSecond(<span class="number">1023445</span>);</span><br><span class="line">System.out.prinlnt(inst2); <span class="comment">// 1970-01-01T02:46:40Z</span></span><br></pre></td></tr></table></figure></li><li><p>偏移时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向前偏移8个小时获取中国时间</span></span><br><span class="line">Instant inst = Instant.now();</span><br><span class="line">OffsetDateTime odt = ins1.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">System.out.println(odt); <span class="comment">// 2019-07-03T01:24:37.642+08:00</span></span><br></pre></td></tr></table></figure></li><li><p>获取时间戳</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取时间戳</span></span><br><span class="line">Instant inst = Instant.now();</span><br><span class="line">System.out.println(ins1.toEpochMilli());</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java8 新特性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java 8 </tag>
            
            <tag> 日期 </tag>
            
            <tag> 时间 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
